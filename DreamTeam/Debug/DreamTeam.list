
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08007144  08007144  00008144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071e8  080071e8  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071e8  080071e8  000081e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071f0  080071f0  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000081f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071f4  080071f4  000081f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080071f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          0000039c  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e930  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8e  00000000  00000000  000179c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00019958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b32  00000000  00000000  0001a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226f6  00000000  00000000  0001b2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001030b  00000000  00000000  0003d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8768  00000000  00000000  0004dcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012643b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004294  00000000  00000000  00126480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009d  00000000  00000000  0012a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800712c 	.word	0x0800712c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800712c 	.word	0x0800712c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f001 ff48 	bl	8002a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f96e 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 fb02 	bl	80011cc <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc8:	f000 fae0 	bl	800118c <MX_DMA_Init>
  MX_ADC1_Init();
 8000bcc:	f000 f9d2 	bl	8000f74 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bd0:	f000 fa30 	bl	8001034 <MX_TIM3_Init>
  MX_UART5_Init();
 8000bd4:	f000 fab0 	bl	8001138 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	49a1      	ldr	r1, [pc, #644]	@ (8000e60 <main+0x2a8>)
 8000bdc:	48a1      	ldr	r0, [pc, #644]	@ (8000e64 <main+0x2ac>)
 8000bde:	f002 f811 	bl	8002c04 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000be2:	4ba1      	ldr	r3, [pc, #644]	@ (8000e68 <main+0x2b0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000be8:	4b9f      	ldr	r3, [pc, #636]	@ (8000e68 <main+0x2b0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	739a      	strb	r2, [r3, #14]
 8000bee:	4b9e      	ldr	r3, [pc, #632]	@ (8000e68 <main+0x2b0>)
 8000bf0:	7b9a      	ldrb	r2, [r3, #14]
 8000bf2:	4b9d      	ldr	r3, [pc, #628]	@ (8000e68 <main+0x2b0>)
 8000bf4:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8000e68 <main+0x2b0>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	4b9a      	ldr	r3, [pc, #616]	@ (8000e68 <main+0x2b0>)
 8000bfe:	7b5a      	ldrb	r2, [r3, #13]
 8000c00:	4b99      	ldr	r3, [pc, #612]	@ (8000e68 <main+0x2b0>)
 8000c02:	729a      	strb	r2, [r3, #10]
 8000c04:	4b98      	ldr	r3, [pc, #608]	@ (8000e68 <main+0x2b0>)
 8000c06:	7a9a      	ldrb	r2, [r3, #10]
 8000c08:	4b97      	ldr	r3, [pc, #604]	@ (8000e68 <main+0x2b0>)
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000c0c:	4b96      	ldr	r3, [pc, #600]	@ (8000e68 <main+0x2b0>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	731a      	strb	r2, [r3, #12]
 8000c12:	4b95      	ldr	r3, [pc, #596]	@ (8000e68 <main+0x2b0>)
 8000c14:	7b1a      	ldrb	r2, [r3, #12]
 8000c16:	4b94      	ldr	r3, [pc, #592]	@ (8000e68 <main+0x2b0>)
 8000c18:	725a      	strb	r2, [r3, #9]
 8000c1a:	4b93      	ldr	r3, [pc, #588]	@ (8000e68 <main+0x2b0>)
 8000c1c:	7a5a      	ldrb	r2, [r3, #9]
 8000c1e:	4b92      	ldr	r3, [pc, #584]	@ (8000e68 <main+0x2b0>)
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	4b91      	ldr	r3, [pc, #580]	@ (8000e68 <main+0x2b0>)
 8000c24:	799a      	ldrb	r2, [r3, #6]
 8000c26:	4b90      	ldr	r3, [pc, #576]	@ (8000e68 <main+0x2b0>)
 8000c28:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8000e68 <main+0x2b0>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	721a      	strb	r2, [r3, #8]
 8000c30:	4b8d      	ldr	r3, [pc, #564]	@ (8000e68 <main+0x2b0>)
 8000c32:	7a1a      	ldrb	r2, [r3, #8]
 8000c34:	4b8c      	ldr	r3, [pc, #560]	@ (8000e68 <main+0x2b0>)
 8000c36:	715a      	strb	r2, [r3, #5]
 8000c38:	4b8b      	ldr	r3, [pc, #556]	@ (8000e68 <main+0x2b0>)
 8000c3a:	795a      	ldrb	r2, [r3, #5]
 8000c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8000e68 <main+0x2b0>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000c40:	4b89      	ldr	r3, [pc, #548]	@ (8000e68 <main+0x2b0>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	711a      	strb	r2, [r3, #4]
 8000c46:	4b88      	ldr	r3, [pc, #544]	@ (8000e68 <main+0x2b0>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b87      	ldr	r3, [pc, #540]	@ (8000e68 <main+0x2b0>)
 8000c4c:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000c4e:	4b86      	ldr	r3, [pc, #536]	@ (8000e68 <main+0x2b0>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000c54:	4b85      	ldr	r3, [pc, #532]	@ (8000e6c <main+0x2b4>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000c5a:	4b84      	ldr	r3, [pc, #528]	@ (8000e6c <main+0x2b4>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b82      	ldr	r3, [pc, #520]	@ (8000e6c <main+0x2b4>)
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b81      	ldr	r3, [pc, #516]	@ (8000e6c <main+0x2b4>)
 8000c66:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000c68:	4b80      	ldr	r3, [pc, #512]	@ (8000e6c <main+0x2b4>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8000e6c <main+0x2b4>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	72da      	strb	r2, [r3, #11]
 8000c74:	4b7d      	ldr	r3, [pc, #500]	@ (8000e6c <main+0x2b4>)
 8000c76:	7ada      	ldrb	r2, [r3, #11]
 8000c78:	4b7c      	ldr	r3, [pc, #496]	@ (8000e6c <main+0x2b4>)
 8000c7a:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8000e6c <main+0x2b4>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000c82:	4b7a      	ldr	r3, [pc, #488]	@ (8000e6c <main+0x2b4>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	735a      	strb	r2, [r3, #13]
 8000c88:	4b78      	ldr	r3, [pc, #480]	@ (8000e6c <main+0x2b4>)
 8000c8a:	7b5a      	ldrb	r2, [r3, #13]
 8000c8c:	4b77      	ldr	r3, [pc, #476]	@ (8000e6c <main+0x2b4>)
 8000c8e:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000c90:	4b76      	ldr	r3, [pc, #472]	@ (8000e6c <main+0x2b4>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000c96:	4b75      	ldr	r3, [pc, #468]	@ (8000e6c <main+0x2b4>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	721a      	strb	r2, [r3, #8]
 8000c9c:	4b73      	ldr	r3, [pc, #460]	@ (8000e6c <main+0x2b4>)
 8000c9e:	7a1a      	ldrb	r2, [r3, #8]
 8000ca0:	4b72      	ldr	r3, [pc, #456]	@ (8000e6c <main+0x2b4>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000ca4:	4b71      	ldr	r3, [pc, #452]	@ (8000e6c <main+0x2b4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
 8000caa:	4b70      	ldr	r3, [pc, #448]	@ (8000e6c <main+0x2b4>)
 8000cac:	7a9a      	ldrb	r2, [r3, #10]
 8000cae:	4b6f      	ldr	r3, [pc, #444]	@ (8000e6c <main+0x2b4>)
 8000cb0:	725a      	strb	r2, [r3, #9]
 8000cb2:	4b6e      	ldr	r3, [pc, #440]	@ (8000e6c <main+0x2b4>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8000e6c <main+0x2b4>)
 8000cb8:	719a      	strb	r2, [r3, #6]
 8000cba:	4b6c      	ldr	r3, [pc, #432]	@ (8000e6c <main+0x2b4>)
 8000cbc:	799a      	ldrb	r2, [r3, #6]
 8000cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8000e6c <main+0x2b4>)
 8000cc0:	715a      	strb	r2, [r3, #5]

	girando = 0;
 8000cc2:	4b6b      	ldr	r3, [pc, #428]	@ (8000e70 <main+0x2b8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	4869      	ldr	r0, [pc, #420]	@ (8000e74 <main+0x2bc>)
 8000cd0:	f003 fa1e 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cda:	4866      	ldr	r0, [pc, #408]	@ (8000e74 <main+0x2bc>)
 8000cdc:	f003 fa18 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4863      	ldr	r0, [pc, #396]	@ (8000e74 <main+0x2bc>)
 8000ce8:	f003 fa12 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	4860      	ldr	r0, [pc, #384]	@ (8000e74 <main+0x2bc>)
 8000cf4:	f003 fa0c 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	485f      	ldr	r0, [pc, #380]	@ (8000e78 <main+0x2c0>)
 8000cfc:	f003 ff7a 	bl	8004bf4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000d00:	210c      	movs	r1, #12
 8000d02:	485d      	ldr	r0, [pc, #372]	@ (8000e78 <main+0x2c0>)
 8000d04:	f003 ff76 	bl	8004bf4 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000d08:	4b5c      	ldr	r3, [pc, #368]	@ (8000e7c <main+0x2c4>)
 8000d0a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8000d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000d10:	4b5a      	ldr	r3, [pc, #360]	@ (8000e7c <main+0x2c4>)
 8000d12:	f249 4270 	movw	r2, #38000	@ 0x9470
 8000d16:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1e:	4858      	ldr	r0, [pc, #352]	@ (8000e80 <main+0x2c8>)
 8000d20:	f003 f9f6 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d2a:	4855      	ldr	r0, [pc, #340]	@ (8000e80 <main+0x2c8>)
 8000d2c:	f003 f9f0 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d36:	4852      	ldr	r0, [pc, #328]	@ (8000e80 <main+0x2c8>)
 8000d38:	f003 f9ea 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d42:	484f      	ldr	r0, [pc, #316]	@ (8000e80 <main+0x2c8>)
 8000d44:	f003 f9e4 	bl	8004110 <HAL_GPIO_WritePin>

	prueba = 6; //Aca se elige que programa queremos que se realice
 8000d48:	4b4e      	ldr	r3, [pc, #312]	@ (8000e84 <main+0x2cc>)
 8000d4a:	2206      	movs	r2, #6
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d54:	484a      	ldr	r0, [pc, #296]	@ (8000e80 <main+0x2c8>)
 8000d56:	f003 f9db 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d60:	4847      	ldr	r0, [pc, #284]	@ (8000e80 <main+0x2c8>)
 8000d62:	f003 f9d5 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6c:	4844      	ldr	r0, [pc, #272]	@ (8000e80 <main+0x2c8>)
 8000d6e:	f003 f9cf 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d78:	4841      	ldr	r0, [pc, #260]	@ (8000e80 <main+0x2c8>)
 8000d7a:	f003 f9c9 	bl	8004110 <HAL_GPIO_WritePin>
		switch (prueba) {
 8000d7e:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <main+0x2cc>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b0c      	cmp	r3, #12
 8000d84:	d8e3      	bhi.n	8000d4e <main+0x196>
 8000d86:	a201      	add	r2, pc, #4	@ (adr r2, 8000d8c <main+0x1d4>)
 8000d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d8c:	08000dc1 	.word	0x08000dc1
 8000d90:	08000d4f 	.word	0x08000d4f
 8000d94:	08000d4f 	.word	0x08000d4f
 8000d98:	08000d4f 	.word	0x08000d4f
 8000d9c:	08000dc7 	.word	0x08000dc7
 8000da0:	08000dcd 	.word	0x08000dcd
 8000da4:	08000dd3 	.word	0x08000dd3
 8000da8:	08000d4f 	.word	0x08000d4f
 8000dac:	08000d4f 	.word	0x08000d4f
 8000db0:	08000d4f 	.word	0x08000d4f
 8000db4:	08000df5 	.word	0x08000df5
 8000db8:	08000e37 	.word	0x08000e37
 8000dbc:	08000e57 	.word	0x08000e57

		case 0:
			prueba_avanzar();
 8000dc0:	f000 fc3e 	bl	8001640 <prueba_avanzar>
			break;
 8000dc4:	e04b      	b.n	8000e5e <main+0x2a6>
		case 1:

			break;

		case 4:
			programa_principal();
 8000dc6:	f000 fc75 	bl	80016b4 <programa_principal>
			break;
 8000dca:	e048      	b.n	8000e5e <main+0x2a6>

		case 5:
			ajuste_automatico();
 8000dcc:	f000 fb74 	bl	80014b8 <ajuste_automatico>
			break;
 8000dd0:	e045      	b.n	8000e5e <main+0x2a6>

		case 6:
			sensor_izq_min = 32700;
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e88 <main+0x2d0>)
 8000dd4:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000dd8:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <main+0x2d4>)
 8000ddc:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000de0:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <main+0x2d8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000de8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e94 <main+0x2dc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <main+0x2cc>)
 8000df0:	2205      	movs	r2, #5
 8000df2:	701a      	strb	r2, [r3, #0]
		case 10:
			TIM3->CCR3 = 0;
 8000df4:	4b21      	ldr	r3, [pc, #132]	@ (8000e7c <main+0x2c4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	@ (8000e7c <main+0x2c4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e06:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <main+0x2c8>)
 8000e08:	f003 f982 	bl	8004110 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e12:	481b      	ldr	r0, [pc, #108]	@ (8000e80 <main+0x2c8>)
 8000e14:	f003 f97c 	bl	8004110 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e1e:	4818      	ldr	r0, [pc, #96]	@ (8000e80 <main+0x2c8>)
 8000e20:	f003 f976 	bl	8004110 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2a:	4815      	ldr	r0, [pc, #84]	@ (8000e80 <main+0x2c8>)
 8000e2c:	f003 f970 	bl	8004110 <HAL_GPIO_WritePin>
			envio_llegada();
 8000e30:	f001 fb8a 	bl	8002548 <envio_llegada>
			break;
 8000e34:	e013      	b.n	8000e5e <main+0x2a6>
		case 11:
			eliminar_repetidos(camino_solucion,contador_casillas);
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <main+0x2e0>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4817      	ldr	r0, [pc, #92]	@ (8000e9c <main+0x2e4>)
 8000e3e:	f000 fa85 	bl	800134c <eliminar_repetidos>
			contador_casillas = contador_casillas - 1;
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <main+0x2e0>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <main+0x2e0>)
 8000e4c:	701a      	strb	r2, [r3, #0]
			prueba = 12;
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <main+0x2cc>)
 8000e50:	220c      	movs	r2, #12
 8000e52:	701a      	strb	r2, [r3, #0]
			break;
 8000e54:	e003      	b.n	8000e5e <main+0x2a6>
		case 12:
			de_reversa_mami();
 8000e56:	f000 fac9 	bl	80013ec <de_reversa_mami>
			break;
 8000e5a:	bf00      	nop
 8000e5c:	e777      	b.n	8000d4e <main+0x196>
		HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000e5e:	e776      	b.n	8000d4e <main+0x196>
 8000e60:	2000022c 	.word	0x2000022c
 8000e64:	20000080 	.word	0x20000080
 8000e68:	200001dc 	.word	0x200001dc
 8000e6c:	200001ec 	.word	0x200001ec
 8000e70:	20000228 	.word	0x20000228
 8000e74:	40020400 	.word	0x40020400
 8000e78:	20000128 	.word	0x20000128
 8000e7c:	40000400 	.word	0x40000400
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	200001fd 	.word	0x200001fd
 8000e88:	20000002 	.word	0x20000002
 8000e8c:	20000004 	.word	0x20000004
 8000e90:	20000200 	.word	0x20000200
 8000e94:	20000202 	.word	0x20000202
 8000e98:	200001fc 	.word	0x200001fc
 8000e9c:	20000208 	.word	0x20000208

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	@ 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	@ 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 fcbe 	bl	8006830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b28      	ldr	r3, [pc, #160]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b25      	ldr	r3, [pc, #148]	@ (8000f6c <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f04:	2310      	movs	r3, #16
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f10:	2308      	movs	r3, #8
 8000f12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f14:	2332      	movs	r3, #50	@ 0x32
 8000f16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f18:	2304      	movs	r3, #4
 8000f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f1c:	2307      	movs	r3, #7
 8000f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f20:	f107 0320 	add.w	r3, r7, #32
 8000f24:	4618      	mov	r0, r3
 8000f26:	f003 f925 	bl	8004174 <HAL_RCC_OscConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f30:	f001 fb5c 	bl	80025ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f34:	230f      	movs	r3, #15
 8000f36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f003 fb86 	bl	8004664 <HAL_RCC_ClockConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f5e:	f001 fb45 	bl	80025ec <Error_Handler>
  }
}
 8000f62:	bf00      	nop
 8000f64:	3750      	adds	r7, #80	@ 0x50
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f86:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000f88:	4a28      	ldr	r2, [pc, #160]	@ (800102c <MX_ADC1_Init+0xb8>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000f8e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fa0:	4b21      	ldr	r3, [pc, #132]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <MX_ADC1_Init+0xbc>)
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc6:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd4:	4814      	ldr	r0, [pc, #80]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000fd6:	f001 fdd1 	bl	8002b7c <HAL_ADC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f001 fb04 	bl	80025ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000fe4:	2309      	movs	r3, #9
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8000ff6:	f001 ff23 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001000:	f001 faf4 	bl	80025ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001004:	2308      	movs	r3, #8
 8001006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_ADC1_Init+0xb4>)
 8001012:	f001 ff15 	bl	8002e40 <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800101c:	f001 fae6 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000080 	.word	0x20000080
 800102c:	40012000 	.word	0x40012000
 8001030:	0f000001 	.word	0x0f000001

08001034 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001048:	f107 0320 	add.w	r3, r7, #32
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001064:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001066:	4a33      	ldr	r2, [pc, #204]	@ (8001134 <MX_TIM3_Init+0x100>)
 8001068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800106a:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MX_TIM3_Init+0xfc>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8001076:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001078:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800107c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b2c      	ldr	r3, [pc, #176]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800108a:	4829      	ldr	r0, [pc, #164]	@ (8001130 <MX_TIM3_Init+0xfc>)
 800108c:	f003 fd0a 	bl	8004aa4 <HAL_TIM_Base_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001096:	f001 faa9 	bl	80025ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a4:	4619      	mov	r1, r3
 80010a6:	4822      	ldr	r0, [pc, #136]	@ (8001130 <MX_TIM3_Init+0xfc>)
 80010a8:	f003 ff2e 	bl	8004f08 <HAL_TIM_ConfigClockSource>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010b2:	f001 fa9b 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010b6:	481e      	ldr	r0, [pc, #120]	@ (8001130 <MX_TIM3_Init+0xfc>)
 80010b8:	f003 fd43 	bl	8004b42 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010c2:	f001 fa93 	bl	80025ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	4619      	mov	r1, r3
 80010d4:	4816      	ldr	r0, [pc, #88]	@ (8001130 <MX_TIM3_Init+0xfc>)
 80010d6:	f004 faf5 	bl	80056c4 <HAL_TIMEx_MasterConfigSynchronization>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80010e0:	f001 fa84 	bl	80025ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e4:	2360      	movs	r3, #96	@ 0x60
 80010e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2208      	movs	r2, #8
 80010f8:	4619      	mov	r1, r3
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_TIM3_Init+0xfc>)
 80010fc:	f003 fe42 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001106:	f001 fa71 	bl	80025ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	220c      	movs	r2, #12
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001112:	f003 fe37 	bl	8004d84 <HAL_TIM_PWM_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800111c:	f001 fa66 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <MX_TIM3_Init+0xfc>)
 8001122:	f001 fb2b 	bl	800277c <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3738      	adds	r7, #56	@ 0x38
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000128 	.word	0x20000128
 8001134:	40000400 	.word	0x40000400

08001138 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_UART5_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_UART5_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_UART5_Init+0x4c>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_UART5_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_UART5_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_UART5_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_UART5_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_UART5_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_UART5_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_UART5_Init+0x4c>)
 8001170:	f004 fb24 	bl	80057bc <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800117a:	f001 fa37 	bl	80025ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000170 	.word	0x20000170
 8001188:	40005000 	.word	0x40005000

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b0c      	ldr	r3, [pc, #48]	@ (80011c8 <MX_DMA_Init+0x3c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <MX_DMA_Init+0x3c>)
 800119c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b09      	ldr	r3, [pc, #36]	@ (80011c8 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2038      	movs	r0, #56	@ 0x38
 80011b4:	f002 f9bf 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b8:	2038      	movs	r0, #56	@ 0x38
 80011ba:	f002 f9d8 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08a      	sub	sp, #40	@ 0x28
 80011d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
 80011e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b53      	ldr	r3, [pc, #332]	@ (8001334 <MX_GPIO_Init+0x168>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <MX_GPIO_Init+0x168>)
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <MX_GPIO_Init+0x168>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a4b      	ldr	r2, [pc, #300]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b49      	ldr	r3, [pc, #292]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b45      	ldr	r3, [pc, #276]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a44      	ldr	r2, [pc, #272]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <MX_GPIO_Init+0x168>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <MX_GPIO_Init+0x168>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a3d      	ldr	r2, [pc, #244]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b37      	ldr	r3, [pc, #220]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a36      	ldr	r2, [pc, #216]	@ (8001334 <MX_GPIO_Init+0x168>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <MX_GPIO_Init+0x168>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	4831      	ldr	r0, [pc, #196]	@ (8001338 <MX_GPIO_Init+0x16c>)
 8001274:	f002 ff4c 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800127e:	482f      	ldr	r0, [pc, #188]	@ (800133c <MX_GPIO_Init+0x170>)
 8001280:	f002 ff46 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800128a:	482d      	ldr	r0, [pc, #180]	@ (8001340 <MX_GPIO_Init+0x174>)
 800128c:	f002 ff40 	bl	8004110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001290:	2308      	movs	r3, #8
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4824      	ldr	r0, [pc, #144]	@ (8001338 <MX_GPIO_Init+0x16c>)
 80012a8:	f002 fd7e 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_Pin */
  GPIO_InitStruct.Pin = boton_Pin;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	@ (8001344 <MX_GPIO_Init+0x178>)
 80012c0:	f002 fd72 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
  GPIO_InitStruct.Pin = m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin;
 80012c4:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4817      	ldr	r0, [pc, #92]	@ (800133c <MX_GPIO_Init+0x170>)
 80012de:	f002 fd63 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin;
 80012e2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4811      	ldr	r0, [pc, #68]	@ (8001340 <MX_GPIO_Init+0x174>)
 80012fc:	f002 fd54 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
  GPIO_InitStruct.Pin = sensor_frontal_Pin|sensor_linea_Pin;
 8001300:	23c0      	movs	r3, #192	@ 0xc0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001304:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0x17c>)
 8001316:	f002 fd47 	bl	8003da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2017      	movs	r0, #23
 8001320:	f002 f909 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001324:	2017      	movs	r0, #23
 8001326:	f002 f922 	bl	800356e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	40021000 	.word	0x40021000
 800133c:	40020400 	.word	0x40020400
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40020000 	.word	0x40020000
 8001348:	40020800 	.word	0x40020800

0800134c <eliminar_repetidos>:

/* USER CODE BEGIN 4 */

void eliminar_repetidos(uint8_t *camino_solucion, uint8_t contador_casillas) {
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < contador_casillas - 1; i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	e039      	b.n	80013d2 <eliminar_repetidos+0x86>
        for (int j = i + 1; j < contador_casillas; j++) {
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3301      	adds	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e02e      	b.n	80013c4 <eliminar_repetidos+0x78>
            if (camino_solucion[i] == camino_solucion[j]) {
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	4413      	add	r3, r2
 800136c:	781a      	ldrb	r2, [r3, #0]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	6879      	ldr	r1, [r7, #4]
 8001372:	440b      	add	r3, r1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d121      	bne.n	80013be <eliminar_repetidos+0x72>
                // Se encontró repetido: eliminar todo entre i+1 y j inclusive
                int cantidad_a_eliminar = j - i;
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	60bb      	str	r3, [r7, #8]

                for (int k = j; k < contador_casillas; k++) {
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e00d      	b.n	80013a4 <eliminar_repetidos+0x58>
                    camino_solucion[k - cantidad_a_eliminar] = camino_solucion[k];
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	441a      	add	r2, r3
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	1acb      	subs	r3, r1, r3
 8001394:	4619      	mov	r1, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	440b      	add	r3, r1
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	701a      	strb	r2, [r3, #0]
                for (int k = j; k < contador_casillas; k++) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3301      	adds	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbed      	blt.n	8001388 <eliminar_repetidos+0x3c>
                }

                contador_casillas =contador_casillas - cantidad_a_eliminar;
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	78fa      	ldrb	r2, [r7, #3]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	70fb      	strb	r3, [r7, #3]
                i = -1;  // Reiniciar para volver a analizar todo desde el inicio
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	617b      	str	r3, [r7, #20]
                break;
 80013bc:	e006      	b.n	80013cc <eliminar_repetidos+0x80>
        for (int j = i + 1; j < contador_casillas; j++) {
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	3301      	adds	r3, #1
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbcc      	blt.n	8001366 <eliminar_repetidos+0x1a>
    for (int i = 0; i < contador_casillas - 1; i++) {
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbc0      	blt.n	800135e <eliminar_repetidos+0x12>
            }
        }
    }
	
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <de_reversa_mami>:

void de_reversa_mami(void) {//codigo para ir de la casilla 15 a la 0... muy chiche
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

	if (verificar_sensor()) { //cambio de casilla
 80013f0:	f000 f930 	bl	8001654 <verificar_sensor>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d041      	beq.n	800147e <de_reversa_mami+0x92>
			contador_giros = 0;
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <de_reversa_mami+0xa4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
			contador_casillas = contador_casillas - 1;
 8001400:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <de_reversa_mami+0xa8>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <de_reversa_mami+0xa8>)
 800140a:	701a      	strb	r2, [r3, #0]
			ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800140c:	4b22      	ldr	r3, [pc, #136]	@ (8001498 <de_reversa_mami+0xac>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4a22      	ldr	r2, [pc, #136]	@ (800149c <de_reversa_mami+0xb0>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fa78 	bl	800190c <act_ubicacion>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <de_reversa_mami+0xac>)
 8001422:	701a      	strb	r2, [r3, #0]
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <de_reversa_mami+0xac>)
 8001426:	781a      	ldrb	r2, [r3, #0]
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <de_reversa_mami+0xb0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	491c      	ldr	r1, [pc, #112]	@ (80014a0 <de_reversa_mami+0xb4>)
 800142e:	481d      	ldr	r0, [pc, #116]	@ (80014a4 <de_reversa_mami+0xb8>)
 8001430:	f000 fdc4 	bl	8001fbc <calculo_minimo_peso>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <de_reversa_mami+0xbc>)
 800143a:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <de_reversa_mami+0xac>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	@ (80014a8 <de_reversa_mami+0xbc>)
 8001442:	7812      	ldrb	r2, [r2, #0]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fa02 	bl	8001850 <obtener_orientacion_futura>
 800144c:	4603      	mov	r3, r0
 800144e:	461a      	mov	r2, r3
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <de_reversa_mami+0xc0>)
 8001452:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <de_reversa_mami+0xb0>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <de_reversa_mami+0xc0>)
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	4611      	mov	r1, r2
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fa22 	bl	80018a8 <obtenerGiro>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <de_reversa_mami+0xc4>)
 800146a:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <de_reversa_mami+0xc0>)
 800146e:	781a      	ldrb	r2, [r3, #0]
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <de_reversa_mami+0xb0>)
 8001472:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 8001474:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <de_reversa_mami+0xc4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fb8d 	bl	8001b98 <ejecutarGiro>
		}
	if (ubicacion == 0)
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <de_reversa_mami+0xac>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <de_reversa_mami+0xa0>
		prueba = 10;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <de_reversa_mami+0xc8>)
 8001488:	220a      	movs	r2, #10
 800148a:	701a      	strb	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001fe 	.word	0x200001fe
 8001494:	200001fc 	.word	0x200001fc
 8001498:	200001d8 	.word	0x200001d8
 800149c:	200001d9 	.word	0x200001d9
 80014a0:	200001ec 	.word	0x200001ec
 80014a4:	200001dc 	.word	0x200001dc
 80014a8:	20000000 	.word	0x20000000
 80014ac:	200001da 	.word	0x200001da
 80014b0:	200001db 	.word	0x200001db
 80014b4:	200001fd 	.word	0x200001fd

080014b8 <ajuste_automatico>:
void ajuste_automatico(void) {
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80014bc:	4b56      	ldr	r3, [pc, #344]	@ (8001618 <ajuste_automatico+0x160>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <ajuste_automatico+0x14>
 80014c4:	4b55      	ldr	r3, [pc, #340]	@ (800161c <ajuste_automatico+0x164>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80014cc:	4b52      	ldr	r3, [pc, #328]	@ (8001618 <ajuste_automatico+0x160>)
 80014ce:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014d2:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80014d4:	4b51      	ldr	r3, [pc, #324]	@ (800161c <ajuste_automatico+0x164>)
 80014d6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014da:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80014dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001618 <ajuste_automatico+0x160>)
 80014de:	881a      	ldrh	r2, [r3, #0]
 80014e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001620 <ajuste_automatico+0x168>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d904      	bls.n	80014f4 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 80014ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <ajuste_automatico+0x168>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <ajuste_automatico+0x160>)
 80014f2:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 80014f4:	4b49      	ldr	r3, [pc, #292]	@ (800161c <ajuste_automatico+0x164>)
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001624 <ajuste_automatico+0x16c>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	429a      	cmp	r2, r3
 8001500:	d904      	bls.n	800150c <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8001502:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <ajuste_automatico+0x16c>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	b29a      	uxth	r2, r3
 8001508:	4b44      	ldr	r3, [pc, #272]	@ (800161c <ajuste_automatico+0x164>)
 800150a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 800150c:	4b46      	ldr	r3, [pc, #280]	@ (8001628 <ajuste_automatico+0x170>)
 800150e:	881a      	ldrh	r2, [r3, #0]
 8001510:	4b43      	ldr	r3, [pc, #268]	@ (8001620 <ajuste_automatico+0x168>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	429a      	cmp	r2, r3
 8001518:	d204      	bcs.n	8001524 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800151a:	4b41      	ldr	r3, [pc, #260]	@ (8001620 <ajuste_automatico+0x168>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b41      	ldr	r3, [pc, #260]	@ (8001628 <ajuste_automatico+0x170>)
 8001522:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001524:	4b41      	ldr	r3, [pc, #260]	@ (800162c <ajuste_automatico+0x174>)
 8001526:	881a      	ldrh	r2, [r3, #0]
 8001528:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <ajuste_automatico+0x16c>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	429a      	cmp	r2, r3
 8001530:	d204      	bcs.n	800153c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001532:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <ajuste_automatico+0x16c>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <ajuste_automatico+0x174>)
 800153a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 800153c:	2101      	movs	r1, #1
 800153e:	483c      	ldr	r0, [pc, #240]	@ (8001630 <ajuste_automatico+0x178>)
 8001540:	f002 fdce 	bl	80040e0 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d15c      	bne.n	8001604 <ajuste_automatico+0x14c>
		HAL_Delay(40);
 800154a:	2028      	movs	r0, #40	@ 0x28
 800154c:	f001 faf2 	bl	8002b34 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001550:	2101      	movs	r1, #1
 8001552:	4837      	ldr	r0, [pc, #220]	@ (8001630 <ajuste_automatico+0x178>)
 8001554:	f002 fdc4 	bl	80040e0 <HAL_GPIO_ReadPin>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	d152      	bne.n	8001604 <ajuste_automatico+0x14c>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 800155e:	4b32      	ldr	r3, [pc, #200]	@ (8001628 <ajuste_automatico+0x170>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f908 	bl	8000778 <__aeabi_i2d>
 8001568:	a327      	add	r3, pc, #156	@ (adr r3, 8001608 <ajuste_automatico+0x150>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7fe fe87 	bl	8000280 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <ajuste_automatico+0x160>)
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f8fa 	bl	8000778 <__aeabi_i2d>
 8001584:	a322      	add	r3, pc, #136	@ (adr r3, 8001610 <ajuste_automatico+0x158>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe fe79 	bl	8000280 <__aeabi_dmul>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe ffa3 	bl	80004e0 <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff f953 	bl	800084c <__aeabi_d2uiz>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <ajuste_automatico+0x17c>)
 80015ac:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <ajuste_automatico+0x174>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f8e0 	bl	8000778 <__aeabi_i2d>
 80015b8:	a313      	add	r3, pc, #76	@ (adr r3, 8001608 <ajuste_automatico+0x150>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7fe fe5f 	bl	8000280 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <ajuste_automatico+0x164>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff f8d2 	bl	8000778 <__aeabi_i2d>
 80015d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001610 <ajuste_automatico+0x158>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7fe fe51 	bl	8000280 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe ff7b 	bl	80004e0 <__adddf3>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff f92b 	bl	800084c <__aeabi_d2uiz>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <ajuste_automatico+0x180>)
 80015fc:	801a      	strh	r2, [r3, #0]
			prueba = 4;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <ajuste_automatico+0x184>)
 8001600:	2204      	movs	r2, #4
 8001602:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001604:	bf00      	nop
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	9999999a 	.word	0x9999999a
 800160c:	3fd99999 	.word	0x3fd99999
 8001610:	33333333 	.word	0x33333333
 8001614:	3fe33333 	.word	0x3fe33333
 8001618:	20000004 	.word	0x20000004
 800161c:	20000002 	.word	0x20000002
 8001620:	200002ae 	.word	0x200002ae
 8001624:	200002ac 	.word	0x200002ac
 8001628:	20000202 	.word	0x20000202
 800162c:	20000200 	.word	0x20000200
 8001630:	40020000 	.word	0x40020000
 8001634:	20000206 	.word	0x20000206
 8001638:	20000204 	.word	0x20000204
 800163c:	200001fd 	.word	0x200001fd

08001640 <prueba_avanzar>:
	ejecutarGiro(izquierda);
	correccion_avanzar();
	while (1)
		;
}
void prueba_avanzar(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
//	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
	ejecutarGiro(izquierda);
 8001644:	2001      	movs	r0, #1
 8001646:	f000 faa7 	bl	8001b98 <ejecutarGiro>
	ejecutarGiro(adelante);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 faa4 	bl	8001b98 <ejecutarGiro>

	while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <prueba_avanzar+0x10>

08001654 <verificar_sensor>:
		;
}

bool verificar_sensor(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
	GPIO_PinState lectura1, lectura2;
	bool pedido = false;
 800165a:	2300      	movs	r3, #0
 800165c:	71fb      	strb	r3, [r7, #7]
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800165e:	2180      	movs	r1, #128	@ 0x80
 8001660:	4812      	ldr	r0, [pc, #72]	@ (80016ac <verificar_sensor+0x58>)
 8001662:	f002 fd3d 	bl	80040e0 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	71bb      	strb	r3, [r7, #6]
	if (lectura1 != ultima_lectura_valida) {
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <verificar_sensor+0x5c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	79ba      	ldrb	r2, [r7, #6]
 8001670:	429a      	cmp	r2, r3
 8001672:	d015      	beq.n	80016a0 <verificar_sensor+0x4c>
		HAL_Delay(tiempo_rebotes);
 8001674:	2014      	movs	r0, #20
 8001676:	f001 fa5d 	bl	8002b34 <HAL_Delay>
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800167a:	2180      	movs	r1, #128	@ 0x80
 800167c:	480b      	ldr	r0, [pc, #44]	@ (80016ac <verificar_sensor+0x58>)
 800167e:	f002 fd2f 	bl	80040e0 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	717b      	strb	r3, [r7, #5]
		if (lectura2 == lectura1)
 8001686:	797a      	ldrb	r2, [r7, #5]
 8001688:	79bb      	ldrb	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	d102      	bne.n	8001694 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 800168e:	4a08      	ldr	r2, [pc, #32]	@ (80016b0 <verificar_sensor+0x5c>)
 8001690:	797b      	ldrb	r3, [r7, #5]
 8001692:	7013      	strb	r3, [r2, #0]
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <verificar_sensor+0x5c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <verificar_sensor+0x4c>
			pedido = true;
 800169c:	2301      	movs	r3, #1
 800169e:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020800 	.word	0x40020800
 80016b0:	20000006 	.word	0x20000006

080016b4 <programa_principal>:

void programa_principal(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	correccion_avanzar();
 80016b8:	f000 f9a8 	bl	8001a0c <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 80016bc:	f7ff ffca 	bl	8001654 <verificar_sensor>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d04e      	beq.n	8001764 <programa_principal+0xb0>
			contador_giros = 0;
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <programa_principal+0x170>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
			contador_casillas = contador_casillas + 1;
 80016cc:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <programa_principal+0x174>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	3301      	adds	r3, #1
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	4b54      	ldr	r3, [pc, #336]	@ (8001828 <programa_principal+0x174>)
 80016d6:	701a      	strb	r2, [r3, #0]
			ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80016d8:	4b54      	ldr	r3, [pc, #336]	@ (800182c <programa_principal+0x178>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4a54      	ldr	r2, [pc, #336]	@ (8001830 <programa_principal+0x17c>)
 80016de:	7812      	ldrb	r2, [r2, #0]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f912 	bl	800190c <act_ubicacion>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b4f      	ldr	r3, [pc, #316]	@ (800182c <programa_principal+0x178>)
 80016ee:	701a      	strb	r2, [r3, #0]
			envio_ubicacion(ubicacion, casilla_n);
 80016f0:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <programa_principal+0x178>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001834 <programa_principal+0x180>)
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fed0 	bl	80024a0 <envio_ubicacion>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8001700:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <programa_principal+0x178>)
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <programa_principal+0x17c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	494b      	ldr	r1, [pc, #300]	@ (8001838 <programa_principal+0x184>)
 800170a:	484c      	ldr	r0, [pc, #304]	@ (800183c <programa_principal+0x188>)
 800170c:	f000 fc56 	bl	8001fbc <calculo_minimo_peso>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <programa_principal+0x180>)
 8001716:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 8001718:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <programa_principal+0x180>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 ff35 	bl	800258c <envio_casilla_n>
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001722:	4b42      	ldr	r3, [pc, #264]	@ (800182c <programa_principal+0x178>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	4a43      	ldr	r2, [pc, #268]	@ (8001834 <programa_principal+0x180>)
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f000 f88f 	bl	8001850 <obtener_orientacion_futura>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b42      	ldr	r3, [pc, #264]	@ (8001840 <programa_principal+0x18c>)
 8001738:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <programa_principal+0x17c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4a40      	ldr	r2, [pc, #256]	@ (8001840 <programa_principal+0x18c>)
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f8af 	bl	80018a8 <obtenerGiro>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b3d      	ldr	r3, [pc, #244]	@ (8001844 <programa_principal+0x190>)
 8001750:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001752:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <programa_principal+0x18c>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b36      	ldr	r3, [pc, #216]	@ (8001830 <programa_principal+0x17c>)
 8001758:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 800175a:	4b3a      	ldr	r3, [pc, #232]	@ (8001844 <programa_principal+0x190>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f000 fa1a 	bl	8001b98 <ejecutarGiro>
		}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8001764:	2140      	movs	r1, #64	@ 0x40
 8001766:	4838      	ldr	r0, [pc, #224]	@ (8001848 <programa_principal+0x194>)
 8001768:	f002 fcba 	bl	80040e0 <HAL_GPIO_ReadPin>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d14f      	bne.n	8001812 <programa_principal+0x15e>
		HAL_Delay(tiempo_rebotes);
 8001772:	2014      	movs	r0, #20
 8001774:	f001 f9de 	bl	8002b34 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8001778:	2140      	movs	r1, #64	@ 0x40
 800177a:	4833      	ldr	r0, [pc, #204]	@ (8001848 <programa_principal+0x194>)
 800177c:	f002 fcb0 	bl	80040e0 <HAL_GPIO_ReadPin>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d145      	bne.n	8001812 <programa_principal+0x15e>
			envio_pared();
 8001786:	f000 febf 	bl	8002508 <envio_pared>
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 800178a:	4b28      	ldr	r3, [pc, #160]	@ (800182c <programa_principal+0x178>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4a28      	ldr	r2, [pc, #160]	@ (8001830 <programa_principal+0x17c>)
 8001790:	7812      	ldrb	r2, [r2, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4828      	ldr	r0, [pc, #160]	@ (8001838 <programa_principal+0x184>)
 8001796:	f000 fb1f 	bl	8001dd8 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 800179a:	4928      	ldr	r1, [pc, #160]	@ (800183c <programa_principal+0x188>)
 800179c:	4826      	ldr	r0, [pc, #152]	@ (8001838 <programa_principal+0x184>)
 800179e:	f000 fb6d 	bl	8001e7c <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <programa_principal+0x178>)
 80017a4:	781a      	ldrb	r2, [r3, #0]
 80017a6:	4b22      	ldr	r3, [pc, #136]	@ (8001830 <programa_principal+0x17c>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4923      	ldr	r1, [pc, #140]	@ (8001838 <programa_principal+0x184>)
 80017ac:	4823      	ldr	r0, [pc, #140]	@ (800183c <programa_principal+0x188>)
 80017ae:	f000 fc05 	bl	8001fbc <calculo_minimo_peso>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <programa_principal+0x180>)
 80017b8:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 80017ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001834 <programa_principal+0x180>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fee4 	bl	800258c <envio_casilla_n>
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <programa_principal+0x178>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001834 <programa_principal+0x180>)
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 f83e 	bl	8001850 <obtener_orientacion_futura>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <programa_principal+0x18c>)
 80017da:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <programa_principal+0x17c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4a17      	ldr	r2, [pc, #92]	@ (8001840 <programa_principal+0x18c>)
 80017e2:	7812      	ldrb	r2, [r2, #0]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f85e 	bl	80018a8 <obtenerGiro>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <programa_principal+0x190>)
 80017f2:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <programa_principal+0x18c>)
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <programa_principal+0x17c>)
 80017fa:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <programa_principal+0x170>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <programa_principal+0x154>
				mini_retroceso();
 8001804:	f000 f9ac 	bl	8001b60 <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 8001808:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <programa_principal+0x190>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f9c3 	bl	8001b98 <ejecutarGiro>
		}
	}
	if (ubicacion == 15) {
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <programa_principal+0x178>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b0f      	cmp	r3, #15
 8001818:	d102      	bne.n	8001820 <programa_principal+0x16c>
		prueba = 10;
 800181a:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <programa_principal+0x198>)
 800181c:	220a      	movs	r2, #10
 800181e:	701a      	strb	r2, [r3, #0]
	}
}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	200001fe 	.word	0x200001fe
 8001828:	200001fc 	.word	0x200001fc
 800182c:	200001d8 	.word	0x200001d8
 8001830:	200001d9 	.word	0x200001d9
 8001834:	20000000 	.word	0x20000000
 8001838:	200001ec 	.word	0x200001ec
 800183c:	200001dc 	.word	0x200001dc
 8001840:	200001da 	.word	0x200001da
 8001844:	200001db 	.word	0x200001db
 8001848:	40020800 	.word	0x40020800
 800184c:	200001fd 	.word	0x200001fd

08001850 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 8001860:	79ba      	ldrb	r2, [r7, #6]
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	3301      	adds	r3, #1
 8001866:	429a      	cmp	r2, r3
 8001868:	d101      	bne.n	800186e <obtener_orientacion_futura+0x1e>
		return oeste;
 800186a:	2303      	movs	r3, #3
 800186c:	e015      	b.n	800189a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 800186e:	79ba      	ldrb	r2, [r7, #6]
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	3b01      	subs	r3, #1
 8001874:	429a      	cmp	r2, r3
 8001876:	d101      	bne.n	800187c <obtener_orientacion_futura+0x2c>
		return este;
 8001878:	2301      	movs	r3, #1
 800187a:	e00e      	b.n	800189a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 800187c:	79ba      	ldrb	r2, [r7, #6]
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	3304      	adds	r3, #4
 8001882:	429a      	cmp	r2, r3
 8001884:	d101      	bne.n	800188a <obtener_orientacion_futura+0x3a>
		return norte;
 8001886:	2300      	movs	r3, #0
 8001888:	e007      	b.n	800189a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3b04      	subs	r3, #4
 8001890:	429a      	cmp	r2, r3
 8001892:	d101      	bne.n	8001898 <obtener_orientacion_futura+0x48>
		return sur;
 8001894:	2302      	movs	r3, #2
 8001896:	e000      	b.n	800189a <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8001898:	2364      	movs	r3, #100	@ 0x64
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 80018b8:	79ba      	ldrb	r2, [r7, #6]
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	3304      	adds	r3, #4
 80018c0:	425a      	negs	r2, r3
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	bf58      	it	pl
 80018cc:	4253      	negpl	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d812      	bhi.n	80018fc <obtenerGiro+0x54>
 80018d6:	a201      	add	r2, pc, #4	@ (adr r2, 80018dc <obtenerGiro+0x34>)
 80018d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018dc:	080018ed 	.word	0x080018ed
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	080018f9 	.word	0x080018f9
	case 0:
		return adelante;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e006      	b.n	80018fe <obtenerGiro+0x56>
	case 1:
		return derecha;
 80018f0:	2302      	movs	r3, #2
 80018f2:	e004      	b.n	80018fe <obtenerGiro+0x56>
	case 2:
		return giro_180;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e002      	b.n	80018fe <obtenerGiro+0x56>
	case 3:
		return izquierda;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <obtenerGiro+0x56>
	default:
		return 100; // Error
 80018fc:	2364      	movs	r3, #100	@ 0x64
	}
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop

0800190c <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	460a      	mov	r2, r1
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d81a      	bhi.n	8001958 <act_ubicacion+0x4c>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <act_ubicacion+0x1c>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001939 	.word	0x08001939
 800192c:	08001941 	.word	0x08001941
 8001930:	08001949 	.word	0x08001949
 8001934:	08001951 	.word	0x08001951
	case 0:
		return ubicacion + 4;
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	3304      	adds	r3, #4
 800193c:	b2db      	uxtb	r3, r3
 800193e:	e00c      	b.n	800195a <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	3b01      	subs	r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	e008      	b.n	800195a <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	3b04      	subs	r3, #4
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e004      	b.n	800195a <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3301      	adds	r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	e000      	b.n	800195a <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8001958:	2364      	movs	r3, #100	@ 0x64
	}
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <promediar>:

void promediar(uint16_t *buffer) {
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e012      	b.n	80019a4 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	4413      	add	r3, r2
 8001988:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3302      	adds	r3, #2
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4413      	add	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	dde9      	ble.n	800197e <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <promediar+0x64>)
 80019b2:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <promediar+0x68>)
 80019bc:	801a      	strh	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200002ac 	.word	0x200002ac
 80019d0:	200002ae 	.word	0x200002ae

080019d4 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 80019dc:	4803      	ldr	r0, [pc, #12]	@ (80019ec <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80019de:	f7ff ffc3 	bl	8001968 <promediar>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000022c 	.word	0x2000022c

080019f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 80019f8:	4803      	ldr	r0, [pc, #12]	@ (8001a08 <HAL_ADC_ConvCpltCallback+0x18>)
 80019fa:	f7ff ffb5 	bl	8001968 <promediar>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	2000026c 	.word	0x2000026c

08001a0c <correccion_avanzar>:
void correccion_avanzar(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <correccion_avanzar+0x54>)
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b13      	ldr	r3, [pc, #76]	@ (8001a64 <correccion_avanzar+0x58>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d209      	bcs.n	8001a32 <correccion_avanzar+0x26>
 8001a1e:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <correccion_avanzar+0x5c>)
 8001a20:	881a      	ldrh	r2, [r3, #0]
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <correccion_avanzar+0x60>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d202      	bcs.n	8001a32 <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8001a2c:	f000 f870 	bl	8001b10 <apagar_derecha>
 8001a30:	e013      	b.n	8001a5a <correccion_avanzar+0x4e>
	} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001a32:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <correccion_avanzar+0x58>)
 8001a34:	881a      	ldrh	r2, [r3, #0]
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <correccion_avanzar+0x54>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d209      	bcs.n	8001a54 <correccion_avanzar+0x48>
 8001a40:	4b0a      	ldr	r3, [pc, #40]	@ (8001a6c <correccion_avanzar+0x60>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b08      	ldr	r3, [pc, #32]	@ (8001a68 <correccion_avanzar+0x5c>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d202      	bcs.n	8001a54 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8001a4e:	f000 f837 	bl	8001ac0 <apagar_izquierda>
 8001a52:	e002      	b.n	8001a5a <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8001a54:	f000 f80c 	bl	8001a70 <avanzar>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002ac 	.word	0x200002ac
 8001a64:	20000204 	.word	0x20000204
 8001a68:	20000206 	.word	0x20000206
 8001a6c:	200002ae 	.word	0x200002ae

08001a70 <avanzar>:
void avanzar(void) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a7a:	480f      	ldr	r0, [pc, #60]	@ (8001ab8 <avanzar+0x48>)
 8001a7c:	f002 fb48 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a86:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <avanzar+0x48>)
 8001a88:	f002 fb42 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a92:	4809      	ldr	r0, [pc, #36]	@ (8001ab8 <avanzar+0x48>)
 8001a94:	f002 fb3c 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a9e:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <avanzar+0x48>)
 8001aa0:	f002 fb36 	bl	8004110 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <avanzar+0x4c>)
 8001aa6:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8001aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <avanzar+0x4c>)
 8001aae:	f249 4270 	movw	r2, #38000	@ 0x9470
 8001ab2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40020400 	.word	0x40020400
 8001abc:	40000400 	.word	0x40000400

08001ac0 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aca:	480f      	ldr	r0, [pc, #60]	@ (8001b08 <apagar_izquierda+0x48>)
 8001acc:	f002 fb20 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ad6:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <apagar_izquierda+0x48>)
 8001ad8:	f002 fb1a 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ae2:	4809      	ldr	r0, [pc, #36]	@ (8001b08 <apagar_izquierda+0x48>)
 8001ae4:	f002 fb14 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aee:	4806      	ldr	r0, [pc, #24]	@ (8001b08 <apagar_izquierda+0x48>)
 8001af0:	f002 fb0e 	bl	8004110 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_min; // rueda a velocidad media (condigurable)
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <apagar_izquierda+0x4c>)
 8001af6:	f647 1218 	movw	r2, #31000	@ 0x7918
 8001afa:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <apagar_izquierda+0x4c>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020400 	.word	0x40020400
 8001b0c:	40000400 	.word	0x40000400

08001b10 <apagar_derecha>:

void apagar_derecha(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b1a:	480f      	ldr	r0, [pc, #60]	@ (8001b58 <apagar_derecha+0x48>)
 8001b1c:	f002 faf8 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b26:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <apagar_derecha+0x48>)
 8001b28:	f002 faf2 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b32:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <apagar_derecha+0x48>)
 8001b34:	f002 faec 	bl	8004110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b3e:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <apagar_derecha+0x48>)
 8001b40:	f002 fae6 	bl	8004110 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <apagar_derecha+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_min; // rueda a velocidad media
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <apagar_derecha+0x4c>)
 8001b4c:	f647 1218 	movw	r2, #31000	@ 0x7918
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40000400 	.word	0x40000400

08001b60 <mini_retroceso>:

void mini_retroceso(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001b64:	2002      	movs	r0, #2
 8001b66:	f000 f8d3 	bl	8001d10 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	f000 f902 	bl	8001d74 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001b70:	2064      	movs	r0, #100	@ 0x64
 8001b72:	f000 ffdf 	bl	8002b34 <HAL_Delay>
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <mini_avance>:
void mini_avance(void) {
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f000 f8c6 	bl	8001d10 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f000 f8f5 	bl	8001d74 <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001b8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b8e:	f000 ffd1 	bl	8002b34 <HAL_Delay>
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	f200 80ab 	bhi.w	8001d00 <ejecutarGiro+0x168>
 8001baa:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb0 <ejecutarGiro+0x18>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001c4d 	.word	0x08001c4d
 8001bb8:	08001bc7 	.word	0x08001bc7
 8001bbc:	08001cd5 	.word	0x08001cd5
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001bc0:	f7ff ffdb 	bl	8001b7a <mini_avance>
		break;
 8001bc4:	e09c      	b.n	8001d00 <ejecutarGiro+0x168>
	case derecha:
		if (contador_giros == 0) {
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <ejecutarGiro+0x170>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d126      	bne.n	8001c1c <ejecutarGiro+0x84>
			contador_giros = contador_giros + 1;
 8001bce:	4b4e      	ldr	r3, [pc, #312]	@ (8001d08 <ejecutarGiro+0x170>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001d08 <ejecutarGiro+0x170>)
 8001bd8:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 f898 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f000 f8c7 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001be6:	20c8      	movs	r0, #200	@ 0xc8
 8001be8:	f000 ffa4 	bl	8002b34 <HAL_Delay>
			girando = 1;
 8001bec:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <ejecutarGiro+0x174>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 f88c 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f000 f8bb 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_der);
 8001bfe:	f240 203a 	movw	r0, #570	@ 0x23a
 8001c02:	f000 ff97 	bl	8002b34 <HAL_Delay>
			mini_avance();
 8001c06:	f7ff ffb8 	bl	8001b7a <mini_avance>
			HAL_Delay(tiempo_muerto);
 8001c0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c0e:	f000 ff91 	bl	8002b34 <HAL_Delay>
			HAL_Delay(tiempo_muerto);
 8001c12:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c16:	f000 ff8d 	bl	8002b34 <HAL_Delay>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001c1a:	e071      	b.n	8001d00 <ejecutarGiro+0x168>
			contador_giros = contador_giros + 1;
 8001c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d08 <ejecutarGiro+0x170>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b38      	ldr	r3, [pc, #224]	@ (8001d08 <ejecutarGiro+0x170>)
 8001c26:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001c28:	f7ff ff9a 	bl	8001b60 <mini_retroceso>
			girando = 1;
 8001c2c:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <ejecutarGiro+0x174>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 f86c 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f000 f89b 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001c3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001c42:	f000 ff77 	bl	8002b34 <HAL_Delay>
			mini_avance();
 8001c46:	f7ff ff98 	bl	8001b7a <mini_avance>
		break;
 8001c4a:	e059      	b.n	8001d00 <ejecutarGiro+0x168>
	case izquierda:
		if (contador_giros == 0) {
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <ejecutarGiro+0x170>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d126      	bne.n	8001ca2 <ejecutarGiro+0x10a>
			contador_giros = contador_giros + 1;
 8001c54:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <ejecutarGiro+0x170>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d08 <ejecutarGiro+0x170>)
 8001c5e:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f000 f855 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 f884 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001c6c:	20c8      	movs	r0, #200	@ 0xc8
 8001c6e:	f000 ff61 	bl	8002b34 <HAL_Delay>
			girando = 1;
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <ejecutarGiro+0x174>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(retroceso);
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f000 f849 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 f878 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_izq);
 8001c84:	f240 203a 	movw	r0, #570	@ 0x23a
 8001c88:	f000 ff54 	bl	8002b34 <HAL_Delay>
			mini_avance();
 8001c8c:	f7ff ff75 	bl	8001b7a <mini_avance>
			HAL_Delay(tiempo_muerto);
 8001c90:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c94:	f000 ff4e 	bl	8002b34 <HAL_Delay>
			HAL_Delay(tiempo_muerto);
 8001c98:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c9c:	f000 ff4a 	bl	8002b34 <HAL_Delay>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001ca0:	e02e      	b.n	8001d00 <ejecutarGiro+0x168>
			contador_giros = contador_giros + 1;
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <ejecutarGiro+0x170>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <ejecutarGiro+0x170>)
 8001cac:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001cae:	20c8      	movs	r0, #200	@ 0xc8
 8001cb0:	f000 ff40 	bl	8002b34 <HAL_Delay>
			girando = 1;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <ejecutarGiro+0x174>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(retroceso);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f000 f828 	bl	8001d10 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 f857 	bl	8001d74 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001cc6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001cca:	f000 ff33 	bl	8002b34 <HAL_Delay>
			mini_avance();
 8001cce:	f7ff ff54 	bl	8001b7a <mini_avance>
		break;
 8001cd2:	e015      	b.n	8001d00 <ejecutarGiro+0x168>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <ejecutarGiro+0x170>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <ejecutarGiro+0x170>)
 8001cde:	701a      	strb	r2, [r3, #0]
		girando = 1;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d0c <ejecutarGiro+0x174>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 f812 	bl	8001d10 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001cec:	2002      	movs	r0, #2
 8001cee:	f000 f841 	bl	8001d74 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001cf2:	f44f 7070 	mov.w	r0, #960	@ 0x3c0
 8001cf6:	f000 ff1d 	bl	8002b34 <HAL_Delay>
		mini_avance();
 8001cfa:	f7ff ff3e 	bl	8001b7a <mini_avance>
		break;
 8001cfe:	bf00      	nop

	}
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200001fe 	.word	0x200001fe
 8001d0c:	20000228 	.word	0x20000228

08001d10 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <setMotorIzquierdo+0x5c>)
 8001d1c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d20:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d002      	beq.n	8001d2e <setMotorIzquierdo+0x1e>
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d00d      	beq.n	8001d48 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001d2c:	e019      	b.n	8001d62 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d34:	480e      	ldr	r0, [pc, #56]	@ (8001d70 <setMotorIzquierdo+0x60>)
 8001d36:	f002 f9eb 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d40:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <setMotorIzquierdo+0x60>)
 8001d42:	f002 f9e5 	bl	8004110 <HAL_GPIO_WritePin>
		break;
 8001d46:	e00c      	b.n	8001d62 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d4e:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <setMotorIzquierdo+0x60>)
 8001d50:	f002 f9de 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <setMotorIzquierdo+0x60>)
 8001d5c:	f002 f9d8 	bl	8004110 <HAL_GPIO_WritePin>
		break;
 8001d60:	bf00      	nop
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40020400 	.word	0x40020400

08001d74 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001d7e:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <setMotorDerecho+0x5c>)
 8001d80:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d84:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d002      	beq.n	8001d92 <setMotorDerecho+0x1e>
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d00d      	beq.n	8001dac <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001d90:	e019      	b.n	8001dc6 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d98:	480e      	ldr	r0, [pc, #56]	@ (8001dd4 <setMotorDerecho+0x60>)
 8001d9a:	f002 f9b9 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da4:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <setMotorDerecho+0x60>)
 8001da6:	f002 f9b3 	bl	8004110 <HAL_GPIO_WritePin>
		break;
 8001daa:	e00c      	b.n	8001dc6 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001db2:	4808      	ldr	r0, [pc, #32]	@ (8001dd4 <setMotorDerecho+0x60>)
 8001db4:	f002 f9ac 	bl	8004110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <setMotorDerecho+0x60>)
 8001dc0:	f002 f9a6 	bl	8004110 <HAL_GPIO_WritePin>
		break;
 8001dc4:	bf00      	nop
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40020400 	.word	0x40020400

08001dd8 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	4613      	mov	r3, r2
 8001de6:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001de8:	78bb      	ldrb	r3, [r7, #2]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	d83a      	bhi.n	8001e64 <act_pared+0x8c>
 8001dee:	a201      	add	r2, pc, #4	@ (adr r2, 8001df4 <act_pared+0x1c>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e05 	.word	0x08001e05
 8001df8:	08001e1d 	.word	0x08001e1d
 8001dfc:	08001e35 	.word	0x08001e35
 8001e00:	08001e4d 	.word	0x08001e4d
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	440b      	add	r3, r1
 8001e12:	f042 0208 	orr.w	r2, r2, #8
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]
		break;
 8001e1a:	e025      	b.n	8001e68 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	440b      	add	r3, r1
 8001e2a:	f042 0204 	orr.w	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
		break;
 8001e32:	e019      	b.n	8001e68 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	440b      	add	r3, r1
 8001e42:	f042 0202 	orr.w	r2, r2, #2
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]
		break;
 8001e4a:	e00d      	b.n	8001e68 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	440b      	add	r3, r1
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
		break;
 8001e62:	e001      	b.n	8001e68 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001e64:	2300      	movs	r3, #0
 8001e66:	e003      	b.n	8001e70 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e08b      	b.n	8001fa4 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e081      	b.n	8001f96 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001e92:	2364      	movs	r3, #100	@ 0x64
 8001e94:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	dc15      	bgt.n	8001ec8 <act_pesos+0x4c>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10d      	bne.n	8001ec8 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	7dfa      	ldrb	r2, [r7, #23]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d905      	bls.n	8001ec8 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3304      	adds	r3, #4
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d01e      	beq.n	8001f0c <act_pesos+0x90>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b07      	cmp	r3, #7
 8001ed2:	d01b      	beq.n	8001f0c <act_pesos+0x90>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b0b      	cmp	r3, #11
 8001ed8:	d018      	beq.n	8001f0c <act_pesos+0x90>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d015      	beq.n	8001f0c <act_pesos+0x90>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	7dfa      	ldrb	r2, [r7, #23]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d905      	bls.n	8001f0c <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	dd15      	ble.n	8001f3e <act_pesos+0xc2>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	3b04      	subs	r3, #4
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	7dfa      	ldrb	r2, [r7, #23]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d905      	bls.n	8001f3e <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3b04      	subs	r3, #4
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d119      	bne.n	8001f82 <act_pesos+0x106>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <act_pesos+0x106>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d013      	beq.n	8001f82 <act_pesos+0x106>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d010      	beq.n	8001f82 <act_pesos+0x106>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d00d      	beq.n	8001f82 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	7dfa      	ldrb	r2, [r7, #23]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d905      	bls.n	8001f82 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	7dfa      	ldrb	r2, [r7, #23]
 8001f8a:	3201      	adds	r2, #1
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b0e      	cmp	r3, #14
 8001f9a:	f77f af7a 	ble.w	8001e92 <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0e      	cmp	r3, #14
 8001fa8:	f77f af70 	ble.w	8001e8c <act_pesos+0x10>
		}
	}
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	75fb      	strb	r3, [r7, #23]
	if (ubicacion == 15){
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d105      	bne.n	8001fe8 <calculo_minimo_peso+0x2c>
		casilla_n = 15;
 8001fdc:	4b97      	ldr	r3, [pc, #604]	@ (800223c <calculo_minimo_peso+0x280>)
 8001fde:	220f      	movs	r2, #15
 8001fe0:	701a      	strb	r2, [r3, #0]
		return casilla_n;
 8001fe2:	4b96      	ldr	r3, [pc, #600]	@ (800223c <calculo_minimo_peso+0x280>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	e246      	b.n	8002476 <calculo_minimo_peso+0x4ba>
	}
	else{

	switch (orientacion_actual) {
 8001fe8:	79bb      	ldrb	r3, [r7, #6]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	f200 8242 	bhi.w	8002474 <calculo_minimo_peso+0x4b8>
 8001ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff8 <calculo_minimo_peso+0x3c>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002009 	.word	0x08002009
 8001ffc:	0800235b 	.word	0x0800235b
 8002000:	08002123 	.word	0x08002123
 8002004:	08002241 	.word	0x08002241
	case norte:
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	3304      	adds	r3, #4
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	7dfa      	ldrb	r2, [r7, #23]
 8002014:	429a      	cmp	r2, r3
 8002016:	d915      	bls.n	8002044 <calculo_minimo_peso+0x88>
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10d      	bne.n	8002044 <calculo_minimo_peso+0x88>
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b0b      	cmp	r3, #11
 800202c:	d80a      	bhi.n	8002044 <calculo_minimo_peso+0x88>
			minimo_peso = peso[ubicacion + 4];
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	3304      	adds	r3, #4
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	3304      	adds	r3, #4
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b7e      	ldr	r3, [pc, #504]	@ (800223c <calculo_minimo_peso+0x280>)
 8002042:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	3301      	adds	r3, #1
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	7dfa      	ldrb	r2, [r7, #23]
 8002050:	429a      	cmp	r2, r3
 8002052:	d91e      	bls.n	8002092 <calculo_minimo_peso+0xd6>
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d116      	bne.n	8002092 <calculo_minimo_peso+0xd6>
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d013      	beq.n	8002092 <calculo_minimo_peso+0xd6>
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b07      	cmp	r3, #7
 800206e:	d010      	beq.n	8002092 <calculo_minimo_peso+0xd6>
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b0b      	cmp	r3, #11
 8002074:	d00d      	beq.n	8002092 <calculo_minimo_peso+0xd6>
 8002076:	79fb      	ldrb	r3, [r7, #7]
 8002078:	2b0f      	cmp	r3, #15
 800207a:	d00a      	beq.n	8002092 <calculo_minimo_peso+0xd6>
			minimo_peso = peso[ubicacion + 1];
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	3301      	adds	r3, #1
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	3301      	adds	r3, #1
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4b6b      	ldr	r3, [pc, #428]	@ (800223c <calculo_minimo_peso+0x280>)
 8002090:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	3b01      	subs	r3, #1
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4413      	add	r3, r2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	7dfa      	ldrb	r2, [r7, #23]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d91e      	bls.n	80020e0 <calculo_minimo_peso+0x124>
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <calculo_minimo_peso+0x124>
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d013      	beq.n	80020e0 <calculo_minimo_peso+0x124>
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	d010      	beq.n	80020e0 <calculo_minimo_peso+0x124>
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b0b      	cmp	r3, #11
 80020c2:	d00d      	beq.n	80020e0 <calculo_minimo_peso+0x124>
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d00a      	beq.n	80020e0 <calculo_minimo_peso+0x124>
			minimo_peso = peso[ubicacion - 1];
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4413      	add	r3, r2
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	3b01      	subs	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b57      	ldr	r3, [pc, #348]	@ (800223c <calculo_minimo_peso+0x280>)
 80020de:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	3b04      	subs	r3, #4
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	7dfa      	ldrb	r2, [r7, #23]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d915      	bls.n	800211c <calculo_minimo_peso+0x160>
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <calculo_minimo_peso+0x160>
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d90a      	bls.n	800211c <calculo_minimo_peso+0x160>
			minimo_peso = peso[ubicacion - 4];
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	3b04      	subs	r3, #4
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	3b04      	subs	r3, #4
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b48      	ldr	r3, [pc, #288]	@ (800223c <calculo_minimo_peso+0x280>)
 800211a:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 800211c:	4b47      	ldr	r3, [pc, #284]	@ (800223c <calculo_minimo_peso+0x280>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	e1a9      	b.n	8002476 <calculo_minimo_peso+0x4ba>
		break;
	case sur:
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	3b04      	subs	r3, #4
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	7dfa      	ldrb	r2, [r7, #23]
 800212e:	429a      	cmp	r2, r3
 8002130:	d915      	bls.n	800215e <calculo_minimo_peso+0x1a2>
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10d      	bne.n	800215e <calculo_minimo_peso+0x1a2>
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d90a      	bls.n	800215e <calculo_minimo_peso+0x1a2>
			minimo_peso = peso[ubicacion - 4];
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	3b04      	subs	r3, #4
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4413      	add	r3, r2
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3b04      	subs	r3, #4
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b38      	ldr	r3, [pc, #224]	@ (800223c <calculo_minimo_peso+0x280>)
 800215c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	3301      	adds	r3, #1
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4413      	add	r3, r2
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	7dfa      	ldrb	r2, [r7, #23]
 800216a:	429a      	cmp	r2, r3
 800216c:	d91e      	bls.n	80021ac <calculo_minimo_peso+0x1f0>
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <calculo_minimo_peso+0x1f0>
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d013      	beq.n	80021ac <calculo_minimo_peso+0x1f0>
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b07      	cmp	r3, #7
 8002188:	d010      	beq.n	80021ac <calculo_minimo_peso+0x1f0>
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b0b      	cmp	r3, #11
 800218e:	d00d      	beq.n	80021ac <calculo_minimo_peso+0x1f0>
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b0f      	cmp	r3, #15
 8002194:	d00a      	beq.n	80021ac <calculo_minimo_peso+0x1f0>
			minimo_peso = peso[ubicacion + 1];
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	3301      	adds	r3, #1
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b24      	ldr	r3, [pc, #144]	@ (800223c <calculo_minimo_peso+0x280>)
 80021aa:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	3b01      	subs	r3, #1
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	7dfa      	ldrb	r2, [r7, #23]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d91e      	bls.n	80021fa <calculo_minimo_peso+0x23e>
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <calculo_minimo_peso+0x23e>
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	d013      	beq.n	80021fa <calculo_minimo_peso+0x23e>
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	d010      	beq.n	80021fa <calculo_minimo_peso+0x23e>
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b0b      	cmp	r3, #11
 80021dc:	d00d      	beq.n	80021fa <calculo_minimo_peso+0x23e>
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b0f      	cmp	r3, #15
 80021e2:	d00a      	beq.n	80021fa <calculo_minimo_peso+0x23e>
			minimo_peso = peso[ubicacion - 1];
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <calculo_minimo_peso+0x280>)
 80021f8:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	3304      	adds	r3, #4
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	7dfa      	ldrb	r2, [r7, #23]
 8002206:	429a      	cmp	r2, r3
 8002208:	d915      	bls.n	8002236 <calculo_minimo_peso+0x27a>
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4413      	add	r3, r2
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10d      	bne.n	8002236 <calculo_minimo_peso+0x27a>
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2b0b      	cmp	r3, #11
 800221e:	d80a      	bhi.n	8002236 <calculo_minimo_peso+0x27a>
			minimo_peso = peso[ubicacion + 4];
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	3304      	adds	r3, #4
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	3304      	adds	r3, #4
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b02      	ldr	r3, [pc, #8]	@ (800223c <calculo_minimo_peso+0x280>)
 8002234:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8002236:	4b01      	ldr	r3, [pc, #4]	@ (800223c <calculo_minimo_peso+0x280>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	e11c      	b.n	8002476 <calculo_minimo_peso+0x4ba>
 800223c:	20000000 	.word	0x20000000
		break;
	case oeste:
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	3301      	adds	r3, #1
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	7dfa      	ldrb	r2, [r7, #23]
 800224c:	429a      	cmp	r2, r3
 800224e:	d91e      	bls.n	800228e <calculo_minimo_peso+0x2d2>
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <calculo_minimo_peso+0x2d2>
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d013      	beq.n	800228e <calculo_minimo_peso+0x2d2>
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	2b07      	cmp	r3, #7
 800226a:	d010      	beq.n	800228e <calculo_minimo_peso+0x2d2>
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b0b      	cmp	r3, #11
 8002270:	d00d      	beq.n	800228e <calculo_minimo_peso+0x2d2>
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d00a      	beq.n	800228e <calculo_minimo_peso+0x2d2>
			minimo_peso = peso[ubicacion + 1];
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	3301      	adds	r3, #1
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	3301      	adds	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b7e      	ldr	r3, [pc, #504]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 800228c:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3304      	adds	r3, #4
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	7dfa      	ldrb	r2, [r7, #23]
 800229a:	429a      	cmp	r2, r3
 800229c:	d915      	bls.n	80022ca <calculo_minimo_peso+0x30e>
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <calculo_minimo_peso+0x30e>
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b0b      	cmp	r3, #11
 80022b2:	d80a      	bhi.n	80022ca <calculo_minimo_peso+0x30e>
			minimo_peso = peso[ubicacion + 4];
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	3304      	adds	r3, #4
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	3304      	adds	r3, #4
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b6f      	ldr	r3, [pc, #444]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 80022c8:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	3b04      	subs	r3, #4
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	7dfa      	ldrb	r2, [r7, #23]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d915      	bls.n	8002306 <calculo_minimo_peso+0x34a>
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <calculo_minimo_peso+0x34a>
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d90a      	bls.n	8002306 <calculo_minimo_peso+0x34a>
			minimo_peso = peso[ubicacion - 4];
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	3b04      	subs	r3, #4
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	3b04      	subs	r3, #4
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b60      	ldr	r3, [pc, #384]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 8002304:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	3b01      	subs	r3, #1
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4413      	add	r3, r2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	7dfa      	ldrb	r2, [r7, #23]
 8002312:	429a      	cmp	r2, r3
 8002314:	d91e      	bls.n	8002354 <calculo_minimo_peso+0x398>
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	4413      	add	r3, r2
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f003 0304 	and.w	r3, r3, #4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d116      	bne.n	8002354 <calculo_minimo_peso+0x398>
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d013      	beq.n	8002354 <calculo_minimo_peso+0x398>
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b07      	cmp	r3, #7
 8002330:	d010      	beq.n	8002354 <calculo_minimo_peso+0x398>
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b0b      	cmp	r3, #11
 8002336:	d00d      	beq.n	8002354 <calculo_minimo_peso+0x398>
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	d00a      	beq.n	8002354 <calculo_minimo_peso+0x398>
			minimo_peso = peso[ubicacion - 1];
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	3b01      	subs	r3, #1
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	3b01      	subs	r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b4c      	ldr	r3, [pc, #304]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 8002352:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8002354:	4b4b      	ldr	r3, [pc, #300]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	e08d      	b.n	8002476 <calculo_minimo_peso+0x4ba>
		break;
	case este:
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	3b01      	subs	r3, #1
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	7dfa      	ldrb	r2, [r7, #23]
 8002366:	429a      	cmp	r2, r3
 8002368:	d91e      	bls.n	80023a8 <calculo_minimo_peso+0x3ec>
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d116      	bne.n	80023a8 <calculo_minimo_peso+0x3ec>
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d013      	beq.n	80023a8 <calculo_minimo_peso+0x3ec>
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b07      	cmp	r3, #7
 8002384:	d010      	beq.n	80023a8 <calculo_minimo_peso+0x3ec>
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b0b      	cmp	r3, #11
 800238a:	d00d      	beq.n	80023a8 <calculo_minimo_peso+0x3ec>
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	d00a      	beq.n	80023a8 <calculo_minimo_peso+0x3ec>
			minimo_peso = peso[ubicacion - 1];
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3b01      	subs	r3, #1
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 80023a6:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	3304      	adds	r3, #4
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	7dfa      	ldrb	r2, [r7, #23]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d915      	bls.n	80023e4 <calculo_minimo_peso+0x428>
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	4413      	add	r3, r2
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10d      	bne.n	80023e4 <calculo_minimo_peso+0x428>
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	2b0b      	cmp	r3, #11
 80023cc:	d80a      	bhi.n	80023e4 <calculo_minimo_peso+0x428>
			minimo_peso = peso[ubicacion + 4];
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	3304      	adds	r3, #4
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	4413      	add	r3, r2
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	3304      	adds	r3, #4
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 80023e2:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	3b04      	subs	r3, #4
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	7dfa      	ldrb	r2, [r7, #23]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d915      	bls.n	8002420 <calculo_minimo_peso+0x464>
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10d      	bne.n	8002420 <calculo_minimo_peso+0x464>
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d90a      	bls.n	8002420 <calculo_minimo_peso+0x464>
			minimo_peso = peso[ubicacion - 4];
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	3b04      	subs	r3, #4
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	3b04      	subs	r3, #4
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 800241e:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3301      	adds	r3, #1
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	7dfa      	ldrb	r2, [r7, #23]
 800242c:	429a      	cmp	r2, r3
 800242e:	d91e      	bls.n	800246e <calculo_minimo_peso+0x4b2>
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <calculo_minimo_peso+0x4b2>
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d013      	beq.n	800246e <calculo_minimo_peso+0x4b2>
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b07      	cmp	r3, #7
 800244a:	d010      	beq.n	800246e <calculo_minimo_peso+0x4b2>
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	2b0b      	cmp	r3, #11
 8002450:	d00d      	beq.n	800246e <calculo_minimo_peso+0x4b2>
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	2b0f      	cmp	r3, #15
 8002456:	d00a      	beq.n	800246e <calculo_minimo_peso+0x4b2>
			minimo_peso = peso[ubicacion + 1];
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	3301      	adds	r3, #1
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 800246c:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <calculo_minimo_peso+0x4c8>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	e000      	b.n	8002476 <calculo_minimo_peso+0x4ba>
		break;
	default:
		return 100;
 8002474:	2364      	movs	r3, #100	@ 0x64
	}
	}
}
 8002476:	4618      	mov	r0, r3
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]

}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <envio_ubicacion>:

void envio_ubicacion(uint8_t ubicacion,uint8_t casilla_n) {
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	460a      	mov	r2, r1
 80024aa:	71fb      	strb	r3, [r7, #7]
 80024ac:	4613      	mov	r3, r2
 80024ae:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion){
 80024b0:	79ba      	ldrb	r2, [r7, #6]
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d11b      	bne.n	80024f0 <envio_ubicacion+0x50>
		sprintf(mensaje, "%d", ubicacion);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	461a      	mov	r2, r3
 80024bc:	490e      	ldr	r1, [pc, #56]	@ (80024f8 <envio_ubicacion+0x58>)
 80024be:	480f      	ldr	r0, [pc, #60]	@ (80024fc <envio_ubicacion+0x5c>)
 80024c0:	f004 f994 	bl	80067ec <siprintf>
		strcat(mensaje, "Ubicacion: \r\n");
 80024c4:	480d      	ldr	r0, [pc, #52]	@ (80024fc <envio_ubicacion+0x5c>)
 80024c6:	f7fd fe83 	bl	80001d0 <strlen>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <envio_ubicacion+0x5c>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <envio_ubicacion+0x60>)
 80024d4:	461c      	mov	r4, r3
 80024d6:	4613      	mov	r3, r2
 80024d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024da:	6020      	str	r0, [r4, #0]
 80024dc:	6061      	str	r1, [r4, #4]
 80024de:	60a2      	str	r2, [r4, #8]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	81a3      	strh	r3, [r4, #12]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80024e4:	2332      	movs	r3, #50	@ 0x32
 80024e6:	2220      	movs	r2, #32
 80024e8:	4904      	ldr	r1, [pc, #16]	@ (80024fc <envio_ubicacion+0x5c>)
 80024ea:	4806      	ldr	r0, [pc, #24]	@ (8002504 <envio_ubicacion+0x64>)
 80024ec:	f003 f9b6 	bl	800585c <HAL_UART_Transmit>
	}

}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd90      	pop	{r4, r7, pc}
 80024f8:	08007144 	.word	0x08007144
 80024fc:	200001b8 	.word	0x200001b8
 8002500:	08007148 	.word	0x08007148
 8002504:	20000170 	.word	0x20000170

08002508 <envio_pared>:
void envio_pared(void) {
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	af00      	add	r7, sp, #0
		strcat(mensaje, "Choque pared \r\n");
 800250c:	480b      	ldr	r0, [pc, #44]	@ (800253c <envio_pared+0x34>)
 800250e:	f7fd fe5f 	bl	80001d0 <strlen>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <envio_pared+0x34>)
 8002518:	4413      	add	r3, r2
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <envio_pared+0x38>)
 800251c:	461c      	mov	r4, r3
 800251e:	4615      	mov	r5, r2
 8002520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002522:	6020      	str	r0, [r4, #0]
 8002524:	6061      	str	r1, [r4, #4]
 8002526:	60a2      	str	r2, [r4, #8]
 8002528:	60e3      	str	r3, [r4, #12]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800252a:	2332      	movs	r3, #50	@ 0x32
 800252c:	2220      	movs	r2, #32
 800252e:	4903      	ldr	r1, [pc, #12]	@ (800253c <envio_pared+0x34>)
 8002530:	4804      	ldr	r0, [pc, #16]	@ (8002544 <envio_pared+0x3c>)
 8002532:	f003 f993 	bl	800585c <HAL_UART_Transmit>
}
 8002536:	bf00      	nop
 8002538:	bdb0      	pop	{r4, r5, r7, pc}
 800253a:	bf00      	nop
 800253c:	200001b8 	.word	0x200001b8
 8002540:	08007158 	.word	0x08007158
 8002544:	20000170 	.word	0x20000170

08002548 <envio_llegada>:

void envio_llegada(void) {
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	af00      	add	r7, sp, #0
		strcat(mensaje, "Llegue a la meta \r\n");
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <envio_llegada+0x38>)
 800254e:	f7fd fe3f 	bl	80001d0 <strlen>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <envio_llegada+0x38>)
 8002558:	4413      	add	r3, r2
 800255a:	4a0a      	ldr	r2, [pc, #40]	@ (8002584 <envio_llegada+0x3c>)
 800255c:	461d      	mov	r5, r3
 800255e:	4614      	mov	r4, r2
 8002560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002562:	6028      	str	r0, [r5, #0]
 8002564:	6069      	str	r1, [r5, #4]
 8002566:	60aa      	str	r2, [r5, #8]
 8002568:	60eb      	str	r3, [r5, #12]
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	6128      	str	r0, [r5, #16]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800256e:	2332      	movs	r3, #50	@ 0x32
 8002570:	2220      	movs	r2, #32
 8002572:	4903      	ldr	r1, [pc, #12]	@ (8002580 <envio_llegada+0x38>)
 8002574:	4804      	ldr	r0, [pc, #16]	@ (8002588 <envio_llegada+0x40>)
 8002576:	f003 f971 	bl	800585c <HAL_UART_Transmit>
}
 800257a:	bf00      	nop
 800257c:	bdb0      	pop	{r4, r5, r7, pc}
 800257e:	bf00      	nop
 8002580:	200001b8 	.word	0x200001b8
 8002584:	08007168 	.word	0x08007168
 8002588:	20000170 	.word	0x20000170

0800258c <envio_casilla_n>:

void envio_casilla_n(uint8_t casilla_n) {
 800258c:	b5b0      	push	{r4, r5, r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	sprintf(mensaje, "%d", casilla_n);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	461a      	mov	r2, r3
 800259a:	4910      	ldr	r1, [pc, #64]	@ (80025dc <envio_casilla_n+0x50>)
 800259c:	4810      	ldr	r0, [pc, #64]	@ (80025e0 <envio_casilla_n+0x54>)
 800259e:	f004 f925 	bl	80067ec <siprintf>
	strcat(mensaje, "Siguiente casilla: \r\n");
 80025a2:	480f      	ldr	r0, [pc, #60]	@ (80025e0 <envio_casilla_n+0x54>)
 80025a4:	f7fd fe14 	bl	80001d0 <strlen>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <envio_casilla_n+0x54>)
 80025ae:	4413      	add	r3, r2
 80025b0:	4a0c      	ldr	r2, [pc, #48]	@ (80025e4 <envio_casilla_n+0x58>)
 80025b2:	461d      	mov	r5, r3
 80025b4:	4614      	mov	r4, r2
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	6028      	str	r0, [r5, #0]
 80025ba:	6069      	str	r1, [r5, #4]
 80025bc:	60aa      	str	r2, [r5, #8]
 80025be:	60eb      	str	r3, [r5, #12]
 80025c0:	6820      	ldr	r0, [r4, #0]
 80025c2:	6128      	str	r0, [r5, #16]
 80025c4:	88a3      	ldrh	r3, [r4, #4]
 80025c6:	82ab      	strh	r3, [r5, #20]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80025c8:	2332      	movs	r3, #50	@ 0x32
 80025ca:	2220      	movs	r2, #32
 80025cc:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <envio_casilla_n+0x54>)
 80025ce:	4806      	ldr	r0, [pc, #24]	@ (80025e8 <envio_casilla_n+0x5c>)
 80025d0:	f003 f944 	bl	800585c <HAL_UART_Transmit>
	

}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	08007144 	.word	0x08007144
 80025e0:	200001b8 	.word	0x200001b8
 80025e4:	0800717c 	.word	0x0800717c
 80025e8:	20000170 	.word	0x20000170

080025ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f0:	b672      	cpsid	i
}
 80025f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <Error_Handler+0x8>

080025f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a0f      	ldr	r2, [pc, #60]	@ (8002644 <HAL_MspInit+0x4c>)
 8002608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HAL_MspInit+0x4c>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	607b      	str	r3, [r7, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	603b      	str	r3, [r7, #0]
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <HAL_MspInit+0x4c>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <HAL_MspInit+0x4c>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002636:	2007      	movs	r0, #7
 8002638:	f000 ff72 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800

08002648 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	@ 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2f      	ldr	r2, [pc, #188]	@ (8002724 <HAL_ADC_MspInit+0xdc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d158      	bne.n	800271c <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	4a2d      	ldr	r2, [pc, #180]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002678:	6453      	str	r3, [r2, #68]	@ 0x44
 800267a:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b27      	ldr	r3, [pc, #156]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a26      	ldr	r2, [pc, #152]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_ADC_MspInit+0xe0>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 80026a2:	2303      	movs	r3, #3
 80026a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026a6:	2303      	movs	r3, #3
 80026a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	481d      	ldr	r0, [pc, #116]	@ (800272c <HAL_ADC_MspInit+0xe4>)
 80026b6:	f001 fb77 	bl	8003da8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002734 <HAL_ADC_MspInit+0xec>)
 80026be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	4b17      	ldr	r3, [pc, #92]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026e2:	4b13      	ldr	r3, [pc, #76]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026ea:	4b11      	ldr	r3, [pc, #68]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026f8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002700:	480b      	ldr	r0, [pc, #44]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 8002702:	f000 ff4f 	bl	80035a4 <HAL_DMA_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800270c:	f7ff ff6e 	bl	80025ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 8002714:	639a      	str	r2, [r3, #56]	@ 0x38
 8002716:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <HAL_ADC_MspInit+0xe8>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800271c:	bf00      	nop
 800271e:	3728      	adds	r7, #40	@ 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40012000 	.word	0x40012000
 8002728:	40023800 	.word	0x40023800
 800272c:	40020400 	.word	0x40020400
 8002730:	200000c8 	.word	0x200000c8
 8002734:	40026410 	.word	0x40026410

08002738 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <HAL_TIM_Base_MspInit+0x3c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d10d      	bne.n	8002766 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_TIM_Base_MspInit+0x40>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	4a09      	ldr	r2, [pc, #36]	@ (8002778 <HAL_TIM_Base_MspInit+0x40>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6413      	str	r3, [r2, #64]	@ 0x40
 800275a:	4b07      	ldr	r3, [pc, #28]	@ (8002778 <HAL_TIM_Base_MspInit+0x40>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40000400 	.word	0x40000400
 8002778:	40023800 	.word	0x40023800

0800277c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <HAL_TIM_MspPostInit+0x68>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d11e      	bne.n	80027dc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_TIM_MspPostInit+0x6c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 80027ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027cc:	2302      	movs	r3, #2
 80027ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4619      	mov	r1, r3
 80027d6:	4805      	ldr	r0, [pc, #20]	@ (80027ec <HAL_TIM_MspPostInit+0x70>)
 80027d8:	f001 fae6 	bl	8003da8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020800 	.word	0x40020800

080027f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <HAL_UART_MspInit+0xd0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d152      	bne.n	80028b8 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	4a2a      	ldr	r2, [pc, #168]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002820:	6413      	str	r3, [r2, #64]	@ 0x40
 8002822:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a23      	ldr	r2, [pc, #140]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002838:	f043 0304 	orr.w	r3, r3, #4
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 8002854:	f043 0308 	orr.w	r3, r3, #8
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_UART_MspInit+0xd4>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002878:	2308      	movs	r3, #8
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4811      	ldr	r0, [pc, #68]	@ (80028c8 <HAL_UART_MspInit+0xd8>)
 8002884:	f001 fa90 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002888:	2304      	movs	r3, #4
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002898:	2308      	movs	r3, #8
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	480a      	ldr	r0, [pc, #40]	@ (80028cc <HAL_UART_MspInit+0xdc>)
 80028a4:	f001 fa80 	bl	8003da8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2035      	movs	r0, #53	@ 0x35
 80028ae:	f000 fe42 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80028b2:	2035      	movs	r0, #53	@ 0x35
 80028b4:	f000 fe5b 	bl	800356e <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80028b8:	bf00      	nop
 80028ba:	3728      	adds	r7, #40	@ 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40005000 	.word	0x40005000
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020800 	.word	0x40020800
 80028cc:	40020c00 	.word	0x40020c00

080028d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <NMI_Handler+0x4>

080028d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <HardFault_Handler+0x4>

080028e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028e4:	bf00      	nop
 80028e6:	e7fd      	b.n	80028e4 <MemManage_Handler+0x4>

080028e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <BusFault_Handler+0x4>

080028f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <UsageFault_Handler+0x4>

080028f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002926:	f000 f8e5 	bl	8002af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}

0800292e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_frontal_Pin);
 8002932:	2040      	movs	r0, #64	@ 0x40
 8002934:	f001 fc06 	bl	8004144 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 8002938:	2080      	movs	r0, #128	@ 0x80
 800293a:	f001 fc03 	bl	8004144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <UART5_IRQHandler+0x10>)
 800294a:	f003 f813 	bl	8005974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000170 	.word	0x20000170

08002958 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800295c:	4802      	ldr	r0, [pc, #8]	@ (8002968 <DMA2_Stream0_IRQHandler+0x10>)
 800295e:	f000 ffb9 	bl	80038d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200000c8 	.word	0x200000c8

0800296c <_sbrk>:
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	4a14      	ldr	r2, [pc, #80]	@ (80029c8 <_sbrk+0x5c>)
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <_sbrk+0x60>)
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <_sbrk+0x64>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <_sbrk+0x22>
 8002988:	4b11      	ldr	r3, [pc, #68]	@ (80029d0 <_sbrk+0x64>)
 800298a:	4a12      	ldr	r2, [pc, #72]	@ (80029d4 <_sbrk+0x68>)
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <_sbrk+0x64>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4413      	add	r3, r2
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d207      	bcs.n	80029ac <_sbrk+0x40>
 800299c:	f003 ff50 	bl	8006840 <__errno>
 80029a0:	4603      	mov	r3, r0
 80029a2:	220c      	movs	r2, #12
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f04f 33ff 	mov.w	r3, #4294967295
 80029aa:	e009      	b.n	80029c0 <_sbrk+0x54>
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <_sbrk+0x64>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <_sbrk+0x64>)
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20020000 	.word	0x20020000
 80029cc:	00000400 	.word	0x00000400
 80029d0:	200002b0 	.word	0x200002b0
 80029d4:	20000400 	.word	0x20000400

080029d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <SystemInit+0x20>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	4a05      	ldr	r2, [pc, #20]	@ (80029f8 <SystemInit+0x20>)
 80029e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <Reset_Handler>:
 80029fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a34 <LoopFillZerobss+0xe>
 8002a00:	f7ff ffea 	bl	80029d8 <SystemInit>
 8002a04:	480c      	ldr	r0, [pc, #48]	@ (8002a38 <LoopFillZerobss+0x12>)
 8002a06:	490d      	ldr	r1, [pc, #52]	@ (8002a3c <LoopFillZerobss+0x16>)
 8002a08:	4a0d      	ldr	r2, [pc, #52]	@ (8002a40 <LoopFillZerobss+0x1a>)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e002      	b.n	8002a14 <LoopCopyDataInit>

08002a0e <CopyDataInit>:
 8002a0e:	58d4      	ldr	r4, [r2, r3]
 8002a10:	50c4      	str	r4, [r0, r3]
 8002a12:	3304      	adds	r3, #4

08002a14 <LoopCopyDataInit>:
 8002a14:	18c4      	adds	r4, r0, r3
 8002a16:	428c      	cmp	r4, r1
 8002a18:	d3f9      	bcc.n	8002a0e <CopyDataInit>
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <LoopFillZerobss+0x1e>)
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8002a48 <LoopFillZerobss+0x22>)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e001      	b.n	8002a26 <LoopFillZerobss>

08002a22 <FillZerobss>:
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	3204      	adds	r2, #4

08002a26 <LoopFillZerobss>:
 8002a26:	42a2      	cmp	r2, r4
 8002a28:	d3fb      	bcc.n	8002a22 <FillZerobss>
 8002a2a:	f003 ff0f 	bl	800684c <__libc_init_array>
 8002a2e:	f7fe f8c3 	bl	8000bb8 <main>
 8002a32:	4770      	bx	lr
 8002a34:	20020000 	.word	0x20020000
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000064 	.word	0x20000064
 8002a40:	080071f8 	.word	0x080071f8
 8002a44:	20000064 	.word	0x20000064
 8002a48:	20000400 	.word	0x20000400

08002a4c <ADC_IRQHandler>:
 8002a4c:	e7fe      	b.n	8002a4c <ADC_IRQHandler>
	...

08002a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a54:	4b0e      	ldr	r3, [pc, #56]	@ (8002a90 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0d      	ldr	r2, [pc, #52]	@ (8002a90 <HAL_Init+0x40>)
 8002a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <HAL_Init+0x40>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a07      	ldr	r2, [pc, #28]	@ (8002a90 <HAL_Init+0x40>)
 8002a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f000 fd51 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a7e:	2000      	movs	r0, #0
 8002a80:	f000 f808 	bl	8002a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a84:	f7ff fdb8 	bl	80025f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023c00 	.word	0x40023c00

08002a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <HAL_InitTick+0x54>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_InitTick+0x58>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fd69 	bl	800358a <HAL_SYSTICK_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00e      	b.n	8002ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d80a      	bhi.n	8002ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f000 fd31 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ad4:	4a06      	ldr	r2, [pc, #24]	@ (8002af0 <HAL_InitTick+0x5c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e000      	b.n	8002ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000008 	.word	0x20000008
 8002aec:	20000010 	.word	0x20000010
 8002af0:	2000000c 	.word	0x2000000c

08002af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af8:	4b06      	ldr	r3, [pc, #24]	@ (8002b14 <HAL_IncTick+0x20>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_IncTick+0x24>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4413      	add	r3, r2
 8002b04:	4a04      	ldr	r2, [pc, #16]	@ (8002b18 <HAL_IncTick+0x24>)
 8002b06:	6013      	str	r3, [r2, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000010 	.word	0x20000010
 8002b18:	200002b4 	.word	0x200002b4

08002b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b20:	4b03      	ldr	r3, [pc, #12]	@ (8002b30 <HAL_GetTick+0x14>)
 8002b22:	681b      	ldr	r3, [r3, #0]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	200002b4 	.word	0x200002b4

08002b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b3c:	f7ff ffee 	bl	8002b1c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d005      	beq.n	8002b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_Delay+0x44>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b5a:	bf00      	nop
 8002b5c:	f7ff ffde 	bl	8002b1c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d8f7      	bhi.n	8002b5c <HAL_Delay+0x28>
  {
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000010 	.word	0x20000010

08002b7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e033      	b.n	8002bfa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fd54 	bl	8002648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d118      	bne.n	8002bec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bc2:	f023 0302 	bic.w	r3, r3, #2
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fa58 	bl	8003084 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bea:	e001      	b.n	8002bf0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_ADC_Start_DMA+0x22>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0eb      	b.n	8002dfe <HAL_ADC_Start_DMA+0x1fa>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d018      	beq.n	8002c6e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c4c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e08 <HAL_ADC_Start_DMA+0x204>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a6e      	ldr	r2, [pc, #440]	@ (8002e0c <HAL_ADC_Start_DMA+0x208>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	0c9a      	lsrs	r2, r3, #18
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c60:	e002      	b.n	8002c68 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f9      	bne.n	8002c62 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7c:	d107      	bne.n	8002c8e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 80a3 	bne.w	8002de4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f023 0206 	bic.w	r2, r3, #6
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cfa:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <HAL_ADC_Start_DMA+0x20c>)
 8002cfc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d02:	4a44      	ldr	r2, [pc, #272]	@ (8002e14 <HAL_ADC_Start_DMA+0x210>)
 8002d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	4a43      	ldr	r2, [pc, #268]	@ (8002e18 <HAL_ADC_Start_DMA+0x214>)
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d12:	4a42      	ldr	r2, [pc, #264]	@ (8002e1c <HAL_ADC_Start_DMA+0x218>)
 8002d14:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d2e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d3e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	334c      	adds	r3, #76	@ 0x4c
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f000 fcd6 	bl	8003700 <HAL_DMA_Start_IT>
 8002d54:	4603      	mov	r3, r0
 8002d56:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d12a      	bne.n	8002dba <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <HAL_ADC_Start_DMA+0x21c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d015      	beq.n	8002d9a <HAL_ADC_Start_DMA+0x196>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a2c      	ldr	r2, [pc, #176]	@ (8002e24 <HAL_ADC_Start_DMA+0x220>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d105      	bne.n	8002d84 <HAL_ADC_Start_DMA+0x180>
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_ADC_Start_DMA+0x20c>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a27      	ldr	r2, [pc, #156]	@ (8002e28 <HAL_ADC_Start_DMA+0x224>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d136      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
 8002d8e:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <HAL_ADC_Start_DMA+0x20c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d130      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d129      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e020      	b.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a18      	ldr	r2, [pc, #96]	@ (8002e20 <HAL_ADC_Start_DMA+0x21c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d11b      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d114      	bne.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	e00b      	b.n	8002dfc <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	f043 0210 	orr.w	r2, r3, #16
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	40012300 	.word	0x40012300
 8002e14:	0800327d 	.word	0x0800327d
 8002e18:	08003337 	.word	0x08003337
 8002e1c:	08003353 	.word	0x08003353
 8002e20:	40012000 	.word	0x40012000
 8002e24:	40012100 	.word	0x40012100
 8002e28:	40012200 	.word	0x40012200

08002e2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e105      	b.n	8003068 <HAL_ADC_ConfigChannel+0x228>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b09      	cmp	r3, #9
 8002e6a:	d925      	bls.n	8002eb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d9      	ldr	r1, [r3, #12]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b1e      	subs	r3, #30
 8002e82:	2207      	movs	r2, #7
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43da      	mvns	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	400a      	ands	r2, r1
 8002e90:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4403      	add	r3, r0
 8002eaa:	3b1e      	subs	r3, #30
 8002eac:	409a      	lsls	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	e022      	b.n	8002efe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6919      	ldr	r1, [r3, #16]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	2207      	movs	r2, #7
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	400a      	ands	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	4618      	mov	r0, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4403      	add	r3, r0
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d824      	bhi.n	8002f50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	3b05      	subs	r3, #5
 8002f18:	221f      	movs	r2, #31
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43da      	mvns	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	400a      	ands	r2, r1
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b05      	subs	r3, #5
 8002f42:	fa00 f203 	lsl.w	r2, r0, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f4e:	e04c      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d824      	bhi.n	8002fa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	3b23      	subs	r3, #35	@ 0x23
 8002f6a:	221f      	movs	r2, #31
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43da      	mvns	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	400a      	ands	r2, r1
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4618      	mov	r0, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b23      	subs	r3, #35	@ 0x23
 8002f94:	fa00 f203 	lsl.w	r2, r0, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fa0:	e023      	b.n	8002fea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b41      	subs	r3, #65	@ 0x41
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b41      	subs	r3, #65	@ 0x41
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <HAL_ADC_ConfigChannel+0x234>)
 8002fec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a21      	ldr	r2, [pc, #132]	@ (8003078 <HAL_ADC_ConfigChannel+0x238>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <HAL_ADC_ConfigChannel+0x1cc>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b12      	cmp	r3, #18
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_ADC_ConfigChannel+0x238>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d123      	bne.n	800305e <HAL_ADC_ConfigChannel+0x21e>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b10      	cmp	r3, #16
 800301c:	d003      	beq.n	8003026 <HAL_ADC_ConfigChannel+0x1e6>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b11      	cmp	r3, #17
 8003024:	d11b      	bne.n	800305e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b10      	cmp	r3, #16
 8003038:	d111      	bne.n	800305e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_ADC_ConfigChannel+0x23c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a10      	ldr	r2, [pc, #64]	@ (8003080 <HAL_ADC_ConfigChannel+0x240>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	0c9a      	lsrs	r2, r3, #18
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003050:	e002      	b.n	8003058 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	3b01      	subs	r3, #1
 8003056:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40012300 	.word	0x40012300
 8003078:	40012000 	.word	0x40012000
 800307c:	20000008 	.word	0x20000008
 8003080:	431bde83 	.word	0x431bde83

08003084 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b79      	ldr	r3, [pc, #484]	@ (8003274 <ADC_Init+0x1f0>)
 800308e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	021a      	lsls	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68da      	ldr	r2, [r3, #12]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003116:	4a58      	ldr	r2, [pc, #352]	@ (8003278 <ADC_Init+0x1f4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d022      	beq.n	8003162 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800312a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6899      	ldr	r1, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800314c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	e00f      	b.n	8003182 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003170:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003180:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0202 	bic.w	r2, r2, #2
 8003190:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6899      	ldr	r1, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7e1b      	ldrb	r3, [r3, #24]
 800319c:	005a      	lsls	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	3b01      	subs	r3, #1
 80031dc:	035a      	lsls	r2, r3, #13
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	e007      	b.n	80031f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	3b01      	subs	r3, #1
 8003214:	051a      	lsls	r2, r3, #20
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800322c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800323a:	025a      	lsls	r2, r3, #9
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003252:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	029a      	lsls	r2, r3, #10
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	609a      	str	r2, [r3, #8]
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40012300 	.word	0x40012300
 8003278:	0f000001 	.word	0x0f000001

0800327c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d13c      	bne.n	8003310 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d12b      	bne.n	8003308 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d127      	bne.n	8003308 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d119      	bne.n	8003308 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0220 	bic.w	r2, r2, #32
 80032e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d105      	bne.n	8003308 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003300:	f043 0201 	orr.w	r2, r3, #1
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7fe fb71 	bl	80019f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800330e:	e00e      	b.n	800332e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f7ff fd85 	bl	8002e2c <HAL_ADC_ErrorCallback>
}
 8003322:	e004      	b.n	800332e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	4798      	blx	r3
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7fe fb45 	bl	80019d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2240      	movs	r2, #64	@ 0x40
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f043 0204 	orr.w	r2, r3, #4
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff fd5a 	bl	8002e2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	@ (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4907      	ldr	r1, [pc, #28]	@ (800341c <__NVIC_EnableIRQ+0x38>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	@ (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	@ (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff8e 	bl	8003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	@ (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff29 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff3e 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff8e 	bl	8003474 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5d 	bl	8003420 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff31 	bl	80033e4 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b0:	f7ff fab4 	bl	8002b1c <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e099      	b.n	80036f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0201 	bic.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e0:	e00f      	b.n	8003602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e2:	f7ff fa9b 	bl	8002b1c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d908      	bls.n	8003602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e078      	b.n	80036f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e8      	bne.n	80035e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4b38      	ldr	r3, [pc, #224]	@ (80036fc <HAL_DMA_Init+0x158>)
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	2b04      	cmp	r3, #4
 800365a:	d107      	bne.n	800366c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003664:	4313      	orrs	r3, r2
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003692:	2b04      	cmp	r3, #4
 8003694:	d117      	bne.n	80036c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00e      	beq.n	80036c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb01 	bl	8003cb0 <DMA_CheckFifoParam>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036c2:	2301      	movs	r3, #1
 80036c4:	e016      	b.n	80036f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fab8 	bl	8003c44 <DMA_CalcBaseAndBitshift>
 80036d4:	4603      	mov	r3, r0
 80036d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	223f      	movs	r2, #63	@ 0x3f
 80036de:	409a      	lsls	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	f010803f 	.word	0xf010803f

08003700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800371e:	2b01      	cmp	r3, #1
 8003720:	d101      	bne.n	8003726 <HAL_DMA_Start_IT+0x26>
 8003722:	2302      	movs	r3, #2
 8003724:	e040      	b.n	80037a8 <HAL_DMA_Start_IT+0xa8>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b01      	cmp	r3, #1
 8003738:	d12f      	bne.n	800379a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fa4a 	bl	8003be8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003758:	223f      	movs	r2, #63	@ 0x3f
 800375a:	409a      	lsls	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0216 	orr.w	r2, r2, #22
 800376e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037be:	f7ff f9ad 	bl	8002b1c <HAL_GetTick>
 80037c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e052      	b.n	8003888 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0216 	bic.w	r2, r2, #22
 80037f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003800:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <HAL_DMA_Abort+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0208 	bic.w	r2, r2, #8
 8003820:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003832:	e013      	b.n	800385c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003834:	f7ff f972 	bl	8002b1c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b05      	cmp	r3, #5
 8003840:	d90c      	bls.n	800385c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e015      	b.n	8003888 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e4      	bne.n	8003834 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386e:	223f      	movs	r2, #63	@ 0x3f
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d004      	beq.n	80038ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2280      	movs	r2, #128	@ 0x80
 80038a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00c      	b.n	80038c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2205      	movs	r2, #5
 80038b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e0:	4b8e      	ldr	r3, [pc, #568]	@ (8003b1c <HAL_DMA_IRQHandler+0x248>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a8e      	ldr	r2, [pc, #568]	@ (8003b20 <HAL_DMA_IRQHandler+0x24c>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0a9b      	lsrs	r3, r3, #10
 80038ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fe:	2208      	movs	r2, #8
 8003900:	409a      	lsls	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d01a      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	2208      	movs	r2, #8
 800392e:	409a      	lsls	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003944:	2201      	movs	r2, #1
 8003946:	409a      	lsls	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4013      	ands	r3, r2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003962:	2201      	movs	r2, #1
 8003964:	409a      	lsls	r2, r3
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	f043 0202 	orr.w	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	2204      	movs	r2, #4
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d012      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003998:	2204      	movs	r2, #4
 800399a:	409a      	lsls	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	f043 0204 	orr.w	r2, r3, #4
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b0:	2210      	movs	r2, #16
 80039b2:	409a      	lsls	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d043      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d03c      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	2210      	movs	r2, #16
 80039d0:	409a      	lsls	r2, r3
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d108      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d024      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
 8003a02:	e01f      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
 8003a14:	e016      	b.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0208 	bic.w	r2, r2, #8
 8003a32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	2220      	movs	r2, #32
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 808f 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8087 	beq.w	8003b74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d136      	bne.n	8003aec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0216 	bic.w	r2, r2, #22
 8003a8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_DMA_IRQHandler+0x1da>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0208 	bic.w	r2, r2, #8
 8003abc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac2:	223f      	movs	r2, #63	@ 0x3f
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07e      	beq.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
        }
        return;
 8003aea:	e079      	b.n	8003be0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d031      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e02c      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
 8003b1a:	bf00      	nop
 8003b1c:	20000008 	.word	0x20000008
 8003b20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d023      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	4798      	blx	r3
 8003b34:	e01e      	b.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0210 	bic.w	r2, r2, #16
 8003b52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d032      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d307      	bcc.n	8003bbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f2      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x2cc>
 8003bba:	e000      	b.n	8003bbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d005      	beq.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
 8003bde:	e000      	b.n	8003be2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be0:	bf00      	nop
    }
  }
}
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d108      	bne.n	8003c28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c26:	e007      	b.n	8003c38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	3b10      	subs	r3, #16
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <DMA_CalcBaseAndBitshift+0x64>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	091b      	lsrs	r3, r3, #4
 8003c5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c5e:	4a13      	ldr	r2, [pc, #76]	@ (8003cac <DMA_CalcBaseAndBitshift+0x68>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d909      	bls.n	8003c86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c7a:	f023 0303 	bic.w	r3, r3, #3
 8003c7e:	1d1a      	adds	r2, r3, #4
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c84:	e007      	b.n	8003c96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	aaaaaaab 	.word	0xaaaaaaab
 8003cac:	080071ac 	.word	0x080071ac

08003cb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d11f      	bne.n	8003d0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d856      	bhi.n	8003d7e <DMA_CheckFifoParam+0xce>
 8003cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <DMA_CheckFifoParam+0x28>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cfb 	.word	0x08003cfb
 8003ce0:	08003ce9 	.word	0x08003ce9
 8003ce4:	08003d7f 	.word	0x08003d7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d046      	beq.n	8003d82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf8:	e043      	b.n	8003d82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d02:	d140      	bne.n	8003d86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d08:	e03d      	b.n	8003d86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d12:	d121      	bne.n	8003d58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d837      	bhi.n	8003d8a <DMA_CheckFifoParam+0xda>
 8003d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <DMA_CheckFifoParam+0x70>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d31 	.word	0x08003d31
 8003d24:	08003d37 	.word	0x08003d37
 8003d28:	08003d31 	.word	0x08003d31
 8003d2c:	08003d49 	.word	0x08003d49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e030      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d025      	beq.n	8003d8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d46:	e022      	b.n	8003d8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d50:	d11f      	bne.n	8003d92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d56:	e01c      	b.n	8003d92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d903      	bls.n	8003d66 <DMA_CheckFifoParam+0xb6>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d003      	beq.n	8003d6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d64:	e018      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6a:	e015      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00e      	beq.n	8003d96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d7c:	e00b      	b.n	8003d96 <DMA_CheckFifoParam+0xe6>
      break;
 8003d7e:	bf00      	nop
 8003d80:	e00a      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d82:	bf00      	nop
 8003d84:	e008      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e006      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e004      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <DMA_CheckFifoParam+0xe8>
      break;
 8003d96:	bf00      	nop
    }
  } 
  
  return status; 
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	@ 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e16b      	b.n	800409c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 815a 	bne.w	8004096 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d005      	beq.n	8003dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d130      	bne.n	8003e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0201 	and.w	r2, r3, #1
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d017      	beq.n	8003e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d123      	bne.n	8003eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	08da      	lsrs	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3208      	adds	r2, #8
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	08da      	lsrs	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80b4 	beq.w	8004096 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b60      	ldr	r3, [pc, #384]	@ (80040b4 <HAL_GPIO_Init+0x30c>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	4a5f      	ldr	r2, [pc, #380]	@ (80040b4 <HAL_GPIO_Init+0x30c>)
 8003f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80040b4 <HAL_GPIO_Init+0x30c>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80040b8 <HAL_GPIO_Init+0x310>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a52      	ldr	r2, [pc, #328]	@ (80040bc <HAL_GPIO_Init+0x314>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d02b      	beq.n	8003fce <HAL_GPIO_Init+0x226>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a51      	ldr	r2, [pc, #324]	@ (80040c0 <HAL_GPIO_Init+0x318>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d025      	beq.n	8003fca <HAL_GPIO_Init+0x222>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a50      	ldr	r2, [pc, #320]	@ (80040c4 <HAL_GPIO_Init+0x31c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <HAL_GPIO_Init+0x21e>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4f      	ldr	r2, [pc, #316]	@ (80040c8 <HAL_GPIO_Init+0x320>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d019      	beq.n	8003fc2 <HAL_GPIO_Init+0x21a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4e      	ldr	r2, [pc, #312]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0x216>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4d      	ldr	r2, [pc, #308]	@ (80040d0 <HAL_GPIO_Init+0x328>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00d      	beq.n	8003fba <HAL_GPIO_Init+0x212>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80040d4 <HAL_GPIO_Init+0x32c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <HAL_GPIO_Init+0x20e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80040d8 <HAL_GPIO_Init+0x330>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_GPIO_Init+0x20a>
 8003fae:	2307      	movs	r3, #7
 8003fb0:	e00e      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	e00c      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fb6:	2306      	movs	r3, #6
 8003fb8:	e00a      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fba:	2305      	movs	r3, #5
 8003fbc:	e008      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	e006      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e004      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e002      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_GPIO_Init+0x228>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	f002 0203 	and.w	r2, r2, #3
 8003fd6:	0092      	lsls	r2, r2, #2
 8003fd8:	4093      	lsls	r3, r2
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe0:	4935      	ldr	r1, [pc, #212]	@ (80040b8 <HAL_GPIO_Init+0x310>)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	089b      	lsrs	r3, r3, #2
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fee:	4b3b      	ldr	r3, [pc, #236]	@ (80040dc <HAL_GPIO_Init+0x334>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004012:	4a32      	ldr	r2, [pc, #200]	@ (80040dc <HAL_GPIO_Init+0x334>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004018:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <HAL_GPIO_Init+0x334>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800403c:	4a27      	ldr	r2, [pc, #156]	@ (80040dc <HAL_GPIO_Init+0x334>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004042:	4b26      	ldr	r3, [pc, #152]	@ (80040dc <HAL_GPIO_Init+0x334>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004066:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_GPIO_Init+0x334>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800406c:	4b1b      	ldr	r3, [pc, #108]	@ (80040dc <HAL_GPIO_Init+0x334>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004090:	4a12      	ldr	r2, [pc, #72]	@ (80040dc <HAL_GPIO_Init+0x334>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	3301      	adds	r3, #1
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	f67f ae90 	bls.w	8003dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	3724      	adds	r7, #36	@ 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40013800 	.word	0x40013800
 80040bc:	40020000 	.word	0x40020000
 80040c0:	40020400 	.word	0x40020400
 80040c4:	40020800 	.word	0x40020800
 80040c8:	40020c00 	.word	0x40020c00
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40021400 	.word	0x40021400
 80040d4:	40021800 	.word	0x40021800
 80040d8:	40021c00 	.word	0x40021c00
 80040dc:	40013c00 	.word	0x40013c00

080040e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e001      	b.n	8004102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	4613      	mov	r3, r2
 800411e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004120:	787b      	ldrb	r3, [r7, #1]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004126:	887a      	ldrh	r2, [r7, #2]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800412c:	e003      	b.n	8004136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800412e:	887b      	ldrh	r3, [r7, #2]
 8004130:	041a      	lsls	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	619a      	str	r2, [r3, #24]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d006      	beq.n	8004168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800415a:	4a05      	ldr	r2, [pc, #20]	@ (8004170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe f990 	bl	8002488 <HAL_GPIO_EXTI_Callback>
  }
}
 8004168:	bf00      	nop
 800416a:	3708      	adds	r7, #8
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e267      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d075      	beq.n	800427e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004192:	4b88      	ldr	r3, [pc, #544]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b04      	cmp	r3, #4
 800419c:	d00c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419e:	4b85      	ldr	r3, [pc, #532]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d112      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041aa:	4b82      	ldr	r3, [pc, #520]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b6:	d10b      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b8:	4b7e      	ldr	r3, [pc, #504]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d05b      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d157      	bne.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e242      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d8:	d106      	bne.n	80041e8 <HAL_RCC_OscConfig+0x74>
 80041da:	4b76      	ldr	r3, [pc, #472]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0x98>
 80041f2:	4b70      	ldr	r3, [pc, #448]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6f      	ldr	r2, [pc, #444]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b6d      	ldr	r3, [pc, #436]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a6c      	ldr	r2, [pc, #432]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xb0>
 800420c:	4b69      	ldr	r3, [pc, #420]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a68      	ldr	r2, [pc, #416]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b66      	ldr	r3, [pc, #408]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a65      	ldr	r2, [pc, #404]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fe fc76 	bl	8002b1c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fc72 	bl	8002b1c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	@ 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e207      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b5b      	ldr	r3, [pc, #364]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xc0>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004254:	f7fe fc62 	bl	8002b1c <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe fc5e 	bl	8002b1c <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	@ 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e1f3      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d063      	beq.n	8004352 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800428a:	4b4a      	ldr	r3, [pc, #296]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a2:	4b44      	ldr	r3, [pc, #272]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b41      	ldr	r3, [pc, #260]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1c7      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4937      	ldr	r1, [pc, #220]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e03a      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b34      	ldr	r3, [pc, #208]	@ (80043b8 <HAL_RCC_OscConfig+0x244>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fe fc17 	bl	8002b1c <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fe fc13 	bl	8002b1c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e1a8      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004304:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b28      	ldr	r3, [pc, #160]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4925      	ldr	r1, [pc, #148]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
 8004324:	e015      	b.n	8004352 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <HAL_RCC_OscConfig+0x244>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe fbf6 	bl	8002b1c <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004334:	f7fe fbf2 	bl	8002b1c <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e187      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d036      	beq.n	80043cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d016      	beq.n	8004394 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004366:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <HAL_RCC_OscConfig+0x248>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fe fbd6 	bl	8002b1c <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004374:	f7fe fbd2 	bl	8002b1c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e167      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004386:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_OscConfig+0x240>)
 8004388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCC_OscConfig+0x200>
 8004392:	e01b      	b.n	80043cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x248>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fe fbbf 	bl	8002b1c <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	e00e      	b.n	80043c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a2:	f7fe fbbb 	bl	8002b1c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d907      	bls.n	80043c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e150      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80043b4:	40023800 	.word	0x40023800
 80043b8:	42470000 	.word	0x42470000
 80043bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c0:	4b88      	ldr	r3, [pc, #544]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1ea      	bne.n	80043a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8097 	beq.w	8004508 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043de:	4b81      	ldr	r3, [pc, #516]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]
 80043ee:	4b7d      	ldr	r3, [pc, #500]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4a7c      	ldr	r2, [pc, #496]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fa:	4b7a      	ldr	r3, [pc, #488]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	4b77      	ldr	r3, [pc, #476]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d118      	bne.n	8004448 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004416:	4b74      	ldr	r3, [pc, #464]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a73      	ldr	r2, [pc, #460]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800441c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004422:	f7fe fb7b 	bl	8002b1c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442a:	f7fe fb77 	bl	8002b1c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e10c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443c:	4b6a      	ldr	r3, [pc, #424]	@ (80045e8 <HAL_RCC_OscConfig+0x474>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d106      	bne.n	800445e <HAL_RCC_OscConfig+0x2ea>
 8004450:	4b64      	ldr	r3, [pc, #400]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004454:	4a63      	ldr	r2, [pc, #396]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004456:	f043 0301 	orr.w	r3, r3, #1
 800445a:	6713      	str	r3, [r2, #112]	@ 0x70
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b05      	cmp	r3, #5
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x30c>
 8004466:	4b5f      	ldr	r3, [pc, #380]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a5e      	ldr	r2, [pc, #376]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	4b5c      	ldr	r3, [pc, #368]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a5b      	ldr	r2, [pc, #364]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	@ 0x70
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x324>
 8004480:	4b58      	ldr	r3, [pc, #352]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a57      	ldr	r2, [pc, #348]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	4b55      	ldr	r3, [pc, #340]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004490:	4a54      	ldr	r2, [pc, #336]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004492:	f023 0304 	bic.w	r3, r3, #4
 8004496:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fe fb3c 	bl	8002b1c <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a8:	f7fe fb38 	bl	8002b1c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e0cb      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044be:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0ee      	beq.n	80044a8 <HAL_RCC_OscConfig+0x334>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044cc:	f7fe fb26 	bl	8002b1c <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fe fb22 	bl	8002b1c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0b5      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ea:	4b3e      	ldr	r3, [pc, #248]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ee      	bne.n	80044d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d105      	bne.n	8004508 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fc:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004500:	4a38      	ldr	r2, [pc, #224]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004506:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 80a1 	beq.w	8004654 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004512:	4b34      	ldr	r3, [pc, #208]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
 800451a:	2b08      	cmp	r3, #8
 800451c:	d05c      	beq.n	80045d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d141      	bne.n	80045aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004526:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe faf6 	bl	8002b1c <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fe faf2 	bl	8002b1c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e087      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004546:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004560:	019b      	lsls	r3, r3, #6
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	041b      	lsls	r3, r3, #16
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	061b      	lsls	r3, r3, #24
 8004576:	491b      	ldr	r1, [pc, #108]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004582:	f7fe facb 	bl	8002b1c <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458a:	f7fe fac7 	bl	8002b1c <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e05c      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x416>
 80045a8:	e054      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <HAL_RCC_OscConfig+0x478>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b0:	f7fe fab4 	bl	8002b1c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b8:	f7fe fab0 	bl	8002b1c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e045      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_RCC_OscConfig+0x470>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x444>
 80045d6:	e03d      	b.n	8004654 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e038      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004660 <HAL_RCC_OscConfig+0x4ec>)
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d028      	beq.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d121      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d11a      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004626:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0cc      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004678:	4b68      	ldr	r3, [pc, #416]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d90c      	bls.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004686:	4b65      	ldr	r3, [pc, #404]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b63      	ldr	r3, [pc, #396]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0b8      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d020      	beq.n	80046ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b8:	4b59      	ldr	r3, [pc, #356]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	4a58      	ldr	r2, [pc, #352]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046d0:	4b53      	ldr	r3, [pc, #332]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a52      	ldr	r2, [pc, #328]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046dc:	4b50      	ldr	r3, [pc, #320]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	494d      	ldr	r1, [pc, #308]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d044      	beq.n	8004784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004702:	4b47      	ldr	r3, [pc, #284]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d119      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e07f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d003      	beq.n	8004722 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	2b03      	cmp	r3, #3
 8004720:	d107      	bne.n	8004732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004722:	4b3f      	ldr	r3, [pc, #252]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e06f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004732:	4b3b      	ldr	r3, [pc, #236]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e067      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004742:	4b37      	ldr	r3, [pc, #220]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	4934      	ldr	r1, [pc, #208]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004754:	f7fe f9e2 	bl	8002b1c <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fe f9de 	bl	8002b1c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e04f      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004772:	4b2b      	ldr	r3, [pc, #172]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 020c 	and.w	r2, r3, #12
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	429a      	cmp	r2, r3
 8004782:	d1eb      	bne.n	800475c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004784:	4b25      	ldr	r3, [pc, #148]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d20c      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b22      	ldr	r3, [pc, #136]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e032      	b.n	8004812 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4916      	ldr	r1, [pc, #88]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b12      	ldr	r3, [pc, #72]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490e      	ldr	r1, [pc, #56]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ea:	f000 f821 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490a      	ldr	r1, [pc, #40]	@ (8004824 <HAL_RCC_ClockConfig+0x1c0>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	4a09      	ldr	r2, [pc, #36]	@ (8004828 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004806:	4b09      	ldr	r3, [pc, #36]	@ (800482c <HAL_RCC_ClockConfig+0x1c8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f942 	bl	8002a94 <HAL_InitTick>

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023c00 	.word	0x40023c00
 8004820:	40023800 	.word	0x40023800
 8004824:	08007194 	.word	0x08007194
 8004828:	20000008 	.word	0x20000008
 800482c:	2000000c 	.word	0x2000000c

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004834:	b094      	sub	sp, #80	@ 0x50
 8004836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800483c:	2300      	movs	r3, #0
 800483e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004848:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b08      	cmp	r3, #8
 8004852:	d00d      	beq.n	8004870 <HAL_RCC_GetSysClockFreq+0x40>
 8004854:	2b08      	cmp	r3, #8
 8004856:	f200 80e1 	bhi.w	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 800485e:	2b04      	cmp	r3, #4
 8004860:	d003      	beq.n	800486a <HAL_RCC_GetSysClockFreq+0x3a>
 8004862:	e0db      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b73      	ldr	r3, [pc, #460]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004868:	e0db      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800486a:	4b73      	ldr	r3, [pc, #460]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x208>)
 800486c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800486e:	e0d8      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004870:	4b6f      	ldr	r3, [pc, #444]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800487a:	4b6d      	ldr	r3, [pc, #436]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d063      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	099b      	lsrs	r3, r3, #6
 800488c:	2200      	movs	r2, #0
 800488e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004898:	633b      	str	r3, [r7, #48]	@ 0x30
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
 800489e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	f04f 0000 	mov.w	r0, #0
 80048aa:	f04f 0100 	mov.w	r1, #0
 80048ae:	0159      	lsls	r1, r3, #5
 80048b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b4:	0150      	lsls	r0, r2, #5
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4621      	mov	r1, r4
 80048bc:	1a51      	subs	r1, r2, r1
 80048be:	6139      	str	r1, [r7, #16]
 80048c0:	4629      	mov	r1, r5
 80048c2:	eb63 0301 	sbc.w	r3, r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	018b      	lsls	r3, r1, #6
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048de:	4651      	mov	r1, sl
 80048e0:	018a      	lsls	r2, r1, #6
 80048e2:	4651      	mov	r1, sl
 80048e4:	ebb2 0801 	subs.w	r8, r2, r1
 80048e8:	4659      	mov	r1, fp
 80048ea:	eb63 0901 	sbc.w	r9, r3, r1
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004902:	4690      	mov	r8, r2
 8004904:	4699      	mov	r9, r3
 8004906:	4623      	mov	r3, r4
 8004908:	eb18 0303 	adds.w	r3, r8, r3
 800490c:	60bb      	str	r3, [r7, #8]
 800490e:	462b      	mov	r3, r5
 8004910:	eb49 0303 	adc.w	r3, r9, r3
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	f04f 0300 	mov.w	r3, #0
 800491e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004922:	4629      	mov	r1, r5
 8004924:	024b      	lsls	r3, r1, #9
 8004926:	4621      	mov	r1, r4
 8004928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800492c:	4621      	mov	r1, r4
 800492e:	024a      	lsls	r2, r1, #9
 8004930:	4610      	mov	r0, r2
 8004932:	4619      	mov	r1, r3
 8004934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004936:	2200      	movs	r2, #0
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
 800493a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800493c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004940:	f7fb ffa4 	bl	800088c <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4613      	mov	r3, r2
 800494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800494c:	e058      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4b38      	ldr	r3, [pc, #224]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	2200      	movs	r2, #0
 8004956:	4618      	mov	r0, r3
 8004958:	4611      	mov	r1, r2
 800495a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
 8004964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	f04f 0000 	mov.w	r0, #0
 8004970:	f04f 0100 	mov.w	r1, #0
 8004974:	0159      	lsls	r1, r3, #5
 8004976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800497a:	0150      	lsls	r0, r2, #5
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4641      	mov	r1, r8
 8004982:	ebb2 0a01 	subs.w	sl, r2, r1
 8004986:	4649      	mov	r1, r9
 8004988:	eb63 0b01 	sbc.w	fp, r3, r1
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800499c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049a0:	ebb2 040a 	subs.w	r4, r2, sl
 80049a4:	eb63 050b 	sbc.w	r5, r3, fp
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	00eb      	lsls	r3, r5, #3
 80049b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049b6:	00e2      	lsls	r2, r4, #3
 80049b8:	4614      	mov	r4, r2
 80049ba:	461d      	mov	r5, r3
 80049bc:	4643      	mov	r3, r8
 80049be:	18e3      	adds	r3, r4, r3
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	464b      	mov	r3, r9
 80049c4:	eb45 0303 	adc.w	r3, r5, r3
 80049c8:	607b      	str	r3, [r7, #4]
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049d6:	4629      	mov	r1, r5
 80049d8:	028b      	lsls	r3, r1, #10
 80049da:	4621      	mov	r1, r4
 80049dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e0:	4621      	mov	r1, r4
 80049e2:	028a      	lsls	r2, r1, #10
 80049e4:	4610      	mov	r0, r2
 80049e6:	4619      	mov	r1, r3
 80049e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ea:	2200      	movs	r2, #0
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	61fa      	str	r2, [r7, #28]
 80049f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049f4:	f7fb ff4a 	bl	800088c <__aeabi_uldivmod>
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	4613      	mov	r3, r2
 80049fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a00:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004a10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a1a:	e002      	b.n	8004a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3750      	adds	r7, #80	@ 0x50
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	007a1200 	.word	0x007a1200

08004a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000008 	.word	0x20000008

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a58:	f7ff fff0 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	0a9b      	lsrs	r3, r3, #10
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	4903      	ldr	r1, [pc, #12]	@ (8004a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a6a:	5ccb      	ldrb	r3, [r1, r3]
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	080071a4 	.word	0x080071a4

08004a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a80:	f7ff ffdc 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	0b5b      	lsrs	r3, r3, #13
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	4903      	ldr	r1, [pc, #12]	@ (8004aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a92:	5ccb      	ldrb	r3, [r1, r3]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	080071a4 	.word	0x080071a4

08004aa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e041      	b.n	8004b3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7fd fe34 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f000 fad8 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e041      	b.n	8004bd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f839 	bl	8004be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f000 fa89 	bl	8005098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_TIM_PWM_Start+0x24>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e022      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d109      	bne.n	8004c32 <HAL_TIM_PWM_Start+0x3e>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	e015      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d109      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x58>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	bf14      	ite	ne
 8004c44:	2301      	movne	r3, #1
 8004c46:	2300      	moveq	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	e008      	b.n	8004c5e <HAL_TIM_PWM_Start+0x6a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e07c      	b.n	8004d60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x82>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c74:	e013      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x92>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c84:	e00b      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIM_PWM_Start+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c94:	e003      	b.n	8004c9e <HAL_TIM_PWM_Start+0xaa>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	6839      	ldr	r1, [r7, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fce6 	bl	8005678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d68 <HAL_TIM_PWM_Start+0x174>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_PWM_Start+0xcc>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	@ (8004d6c <HAL_TIM_PWM_Start+0x178>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_PWM_Start+0xd0>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_TIM_PWM_Start+0xd2>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <HAL_TIM_PWM_Start+0x174>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d022      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d01d      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d70 <HAL_TIM_PWM_Start+0x17c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d018      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d74 <HAL_TIM_PWM_Start+0x180>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <HAL_TIM_PWM_Start+0x184>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00e      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a16      	ldr	r2, [pc, #88]	@ (8004d6c <HAL_TIM_PWM_Start+0x178>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a18      	ldr	r2, [pc, #96]	@ (8004d7c <HAL_TIM_PWM_Start+0x188>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d004      	beq.n	8004d2a <HAL_TIM_PWM_Start+0x136>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a16      	ldr	r2, [pc, #88]	@ (8004d80 <HAL_TIM_PWM_Start+0x18c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d111      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b06      	cmp	r3, #6
 8004d3a:	d010      	beq.n	8004d5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4c:	e007      	b.n	8004d5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800

08004d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e0ae      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	f200 809f 	bhi.w	8004ef0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004db2:	a201      	add	r2, pc, #4	@ (adr r2, 8004db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004ef1 	.word	0x08004ef1
 8004dc0:	08004ef1 	.word	0x08004ef1
 8004dc4:	08004ef1 	.word	0x08004ef1
 8004dc8:	08004e2d 	.word	0x08004e2d
 8004dcc:	08004ef1 	.word	0x08004ef1
 8004dd0:	08004ef1 	.word	0x08004ef1
 8004dd4:	08004ef1 	.word	0x08004ef1
 8004dd8:	08004e6f 	.word	0x08004e6f
 8004ddc:	08004ef1 	.word	0x08004ef1
 8004de0:	08004ef1 	.word	0x08004ef1
 8004de4:	08004ef1 	.word	0x08004ef1
 8004de8:	08004eaf 	.word	0x08004eaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 f9f6 	bl	80051e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0204 	bic.w	r2, r2, #4
 8004e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6999      	ldr	r1, [r3, #24]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	619a      	str	r2, [r3, #24]
      break;
 8004e2a:	e064      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68b9      	ldr	r1, [r7, #8]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fa46 	bl	80052c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699a      	ldr	r2, [r3, #24]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6999      	ldr	r1, [r3, #24]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	021a      	lsls	r2, r3, #8
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	619a      	str	r2, [r3, #24]
      break;
 8004e6c:	e043      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68b9      	ldr	r1, [r7, #8]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 fa9b 	bl	80053b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0208 	orr.w	r2, r2, #8
 8004e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0204 	bic.w	r2, r2, #4
 8004e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69d9      	ldr	r1, [r3, #28]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
      break;
 8004eac:	e023      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 faef 	bl	8005498 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69d9      	ldr	r1, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	021a      	lsls	r2, r3, #8
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
      break;
 8004eee:	e002      	b.n	8004ef6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_ConfigClockSource+0x1c>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e0b4      	b.n	800508e <HAL_TIM_ConfigClockSource+0x186>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f5c:	d03e      	beq.n	8004fdc <HAL_TIM_ConfigClockSource+0xd4>
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f62:	f200 8087 	bhi.w	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f6a:	f000 8086 	beq.w	800507a <HAL_TIM_ConfigClockSource+0x172>
 8004f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f72:	d87f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b70      	cmp	r3, #112	@ 0x70
 8004f76:	d01a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xa6>
 8004f78:	2b70      	cmp	r3, #112	@ 0x70
 8004f7a:	d87b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b60      	cmp	r3, #96	@ 0x60
 8004f7e:	d050      	beq.n	8005022 <HAL_TIM_ConfigClockSource+0x11a>
 8004f80:	2b60      	cmp	r3, #96	@ 0x60
 8004f82:	d877      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b50      	cmp	r3, #80	@ 0x50
 8004f86:	d03c      	beq.n	8005002 <HAL_TIM_ConfigClockSource+0xfa>
 8004f88:	2b50      	cmp	r3, #80	@ 0x50
 8004f8a:	d873      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d058      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x13a>
 8004f90:	2b40      	cmp	r3, #64	@ 0x40
 8004f92:	d86f      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d064      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	2b30      	cmp	r3, #48	@ 0x30
 8004f9a:	d86b      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d060      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d867      	bhi.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d05c      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d05a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x15a>
 8004fac:	e062      	b.n	8005074 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	f000 fb3b 	bl	8005638 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	609a      	str	r2, [r3, #8]
      break;
 8004fda:	e04f      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	f000 fb24 	bl	8005638 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ffe:	609a      	str	r2, [r3, #8]
      break;
 8005000:	e03c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800500e:	461a      	mov	r2, r3
 8005010:	f000 fa98 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2150      	movs	r1, #80	@ 0x50
 800501a:	4618      	mov	r0, r3
 800501c:	f000 faf1 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8005020:	e02c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800502e:	461a      	mov	r2, r3
 8005030:	f000 fab7 	bl	80055a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2160      	movs	r1, #96	@ 0x60
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fae1 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8005040:	e01c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800504e:	461a      	mov	r2, r3
 8005050:	f000 fa78 	bl	8005544 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2140      	movs	r1, #64	@ 0x40
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fad1 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8005060:	e00c      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4619      	mov	r1, r3
 800506c:	4610      	mov	r0, r2
 800506e:	f000 fac8 	bl	8005602 <TIM_ITRx_SetConfig>
      break;
 8005072:	e003      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e000      	b.n	800507c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800507a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a43      	ldr	r2, [pc, #268]	@ (80051b8 <TIM_Base_SetConfig+0x120>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b6:	d00f      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a40      	ldr	r2, [pc, #256]	@ (80051bc <TIM_Base_SetConfig+0x124>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a3f      	ldr	r2, [pc, #252]	@ (80051c0 <TIM_Base_SetConfig+0x128>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a3e      	ldr	r2, [pc, #248]	@ (80051c4 <TIM_Base_SetConfig+0x12c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x40>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a3d      	ldr	r2, [pc, #244]	@ (80051c8 <TIM_Base_SetConfig+0x130>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a32      	ldr	r2, [pc, #200]	@ (80051b8 <TIM_Base_SetConfig+0x120>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d02b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d027      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a2f      	ldr	r2, [pc, #188]	@ (80051bc <TIM_Base_SetConfig+0x124>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d023      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a2e      	ldr	r2, [pc, #184]	@ (80051c0 <TIM_Base_SetConfig+0x128>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a2d      	ldr	r2, [pc, #180]	@ (80051c4 <TIM_Base_SetConfig+0x12c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a2c      	ldr	r2, [pc, #176]	@ (80051c8 <TIM_Base_SetConfig+0x130>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d017      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a2b      	ldr	r2, [pc, #172]	@ (80051cc <TIM_Base_SetConfig+0x134>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a2a      	ldr	r2, [pc, #168]	@ (80051d0 <TIM_Base_SetConfig+0x138>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00f      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a29      	ldr	r2, [pc, #164]	@ (80051d4 <TIM_Base_SetConfig+0x13c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00b      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a28      	ldr	r2, [pc, #160]	@ (80051d8 <TIM_Base_SetConfig+0x140>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a27      	ldr	r2, [pc, #156]	@ (80051dc <TIM_Base_SetConfig+0x144>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d003      	beq.n	800514a <TIM_Base_SetConfig+0xb2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <TIM_Base_SetConfig+0x148>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d108      	bne.n	800515c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a0e      	ldr	r2, [pc, #56]	@ (80051b8 <TIM_Base_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_Base_SetConfig+0xf2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <TIM_Base_SetConfig+0x130>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d103      	bne.n	8005192 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40010400 	.word	0x40010400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40001800 	.word	0x40001800
 80051dc:	40001c00 	.word	0x40001c00
 80051e0:	40002000 	.word	0x40002000

080051e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b087      	sub	sp, #28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	f023 0201 	bic.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0303 	bic.w	r3, r3, #3
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 0302 	bic.w	r3, r3, #2
 800522c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <TIM_OC1_SetConfig+0xd8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC1_SetConfig+0x64>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a1f      	ldr	r2, [pc, #124]	@ (80052c0 <TIM_OC1_SetConfig+0xdc>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10c      	bne.n	8005262 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f023 0308 	bic.w	r3, r3, #8
 800524e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	f023 0304 	bic.w	r3, r3, #4
 8005260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a15      	ldr	r2, [pc, #84]	@ (80052bc <TIM_OC1_SetConfig+0xd8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC1_SetConfig+0x8e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a14      	ldr	r2, [pc, #80]	@ (80052c0 <TIM_OC1_SetConfig+0xdc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005278:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005280:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	621a      	str	r2, [r3, #32]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	40010000 	.word	0x40010000
 80052c0:	40010400 	.word	0x40010400

080052c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f023 0210 	bic.w	r2, r3, #16
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	021b      	lsls	r3, r3, #8
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0320 	bic.w	r3, r3, #32
 800530e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a22      	ldr	r2, [pc, #136]	@ (80053a8 <TIM_OC2_SetConfig+0xe4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC2_SetConfig+0x68>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a21      	ldr	r2, [pc, #132]	@ (80053ac <TIM_OC2_SetConfig+0xe8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10d      	bne.n	8005348 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	4313      	orrs	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005346:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a17      	ldr	r2, [pc, #92]	@ (80053a8 <TIM_OC2_SetConfig+0xe4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC2_SetConfig+0x94>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a16      	ldr	r2, [pc, #88]	@ (80053ac <TIM_OC2_SetConfig+0xe8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d113      	bne.n	8005380 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800535e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a21      	ldr	r2, [pc, #132]	@ (8005490 <TIM_OC3_SetConfig+0xe0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d003      	beq.n	8005416 <TIM_OC3_SetConfig+0x66>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a20      	ldr	r2, [pc, #128]	@ (8005494 <TIM_OC3_SetConfig+0xe4>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d10d      	bne.n	8005432 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800541c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	021b      	lsls	r3, r3, #8
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a16      	ldr	r2, [pc, #88]	@ (8005490 <TIM_OC3_SetConfig+0xe0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_OC3_SetConfig+0x92>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a15      	ldr	r2, [pc, #84]	@ (8005494 <TIM_OC3_SetConfig+0xe4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40010000 	.word	0x40010000
 8005494:	40010400 	.word	0x40010400

08005498 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a12      	ldr	r2, [pc, #72]	@ (800553c <TIM_OC4_SetConfig+0xa4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC4_SetConfig+0x68>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	@ (8005540 <TIM_OC4_SetConfig+0xa8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d109      	bne.n	8005514 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005506:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	019b      	lsls	r3, r3, #6
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40010000 	.word	0x40010000
 8005540:	40010400 	.word	0x40010400

08005544 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800556e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f023 030a 	bic.w	r3, r3, #10
 8005580:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	621a      	str	r2, [r3, #32]
}
 8005596:	bf00      	nop
 8005598:	371c      	adds	r7, #28
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 0210 	bic.w	r2, r3, #16
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	f043 0307 	orr.w	r3, r3, #7
 8005624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	609a      	str	r2, [r3, #8]
}
 800562c:	bf00      	nop
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005652:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	431a      	orrs	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	371c      	adds	r7, #28
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2201      	movs	r2, #1
 800568c:	fa02 f303 	lsl.w	r3, r2, r3
 8005690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1a      	ldr	r2, [r3, #32]
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	43db      	mvns	r3, r3
 800569a:	401a      	ands	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6a1a      	ldr	r2, [r3, #32]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	fa01 f303 	lsl.w	r3, r1, r3
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d8:	2302      	movs	r3, #2
 80056da:	e05a      	b.n	8005792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a21      	ldr	r2, [pc, #132]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005728:	d01d      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1b      	ldr	r2, [pc, #108]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1a      	ldr	r2, [pc, #104]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a18      	ldr	r2, [pc, #96]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a17      	ldr	r2, [pc, #92]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a15      	ldr	r2, [pc, #84]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10c      	bne.n	8005780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4313      	orrs	r3, r2
 8005776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40010000 	.word	0x40010000
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00
 80057b0:	40010400 	.word	0x40010400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40001800 	.word	0x40001800

080057bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e042      	b.n	8005854 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fd f804 	bl	80027f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2224      	movs	r2, #36	@ 0x24
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd7f 	bl	8006304 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b08a      	sub	sp, #40	@ 0x28
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4613      	mov	r3, r2
 800586a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b20      	cmp	r3, #32
 800587a:	d175      	bne.n	8005968 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <HAL_UART_Transmit+0x2c>
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e06e      	b.n	800596a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	@ 0x21
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800589a:	f7fd f93f 	bl	8002b1c <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	88fa      	ldrh	r2, [r7, #6]
 80058a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058b4:	d108      	bne.n	80058c8 <HAL_UART_Transmit+0x6c>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d104      	bne.n	80058c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	e003      	b.n	80058d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d0:	e02e      	b.n	8005930 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	@ 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fb1d 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e03a      	b.n	800596a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	881b      	ldrh	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	3302      	adds	r3, #2
 800590e:	61bb      	str	r3, [r7, #24]
 8005910:	e007      	b.n	8005922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	3301      	adds	r3, #1
 8005920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005926:	b29b      	uxth	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005934:	b29b      	uxth	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1cb      	bne.n	80058d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	2140      	movs	r1, #64	@ 0x40
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fae9 	bl	8005f1c <UART_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e006      	b.n	800596a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005968:	2302      	movs	r3, #2
  }
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b0ba      	sub	sp, #232	@ 0xe8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80059b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10f      	bne.n	80059da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d009      	beq.n	80059da <HAL_UART_IRQHandler+0x66>
 80059c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fbd7 	bl	8006186 <UART_Receive_IT>
      return;
 80059d8:	e273      	b.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80de 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x22c>
 80059e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d106      	bne.n	80059fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059f4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80d1 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_UART_IRQHandler+0xae>
 8005a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a1a:	f043 0201 	orr.w	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00b      	beq.n	8005a46 <HAL_UART_IRQHandler+0xd2>
 8005a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d005      	beq.n	8005a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f043 0202 	orr.w	r2, r3, #2
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_UART_IRQHandler+0xf6>
 8005a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a62:	f043 0204 	orr.w	r2, r3, #4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d011      	beq.n	8005a9a <HAL_UART_IRQHandler+0x126>
 8005a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d105      	bne.n	8005a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	f043 0208 	orr.w	r2, r3, #8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 820a 	beq.w	8005eb8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d008      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x14e>
 8005ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fb62 	bl	8006186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	bf0c      	ite	eq
 8005ad0:	2301      	moveq	r3, #1
 8005ad2:	2300      	movne	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <HAL_UART_IRQHandler+0x17a>
 8005ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04f      	beq.n	8005b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa6d 	bl	8005fce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d141      	bne.n	8005b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3314      	adds	r3, #20
 8005b08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1d9      	bne.n	8005b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d013      	beq.n	8005b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	4a8a      	ldr	r2, [pc, #552]	@ (8005d84 <HAL_UART_IRQHandler+0x410>)
 8005b5c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd fe94 	bl	8003890 <HAL_DMA_Abort_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b7c:	e00e      	b.n	8005b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f9b6 	bl	8005ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b84:	e00a      	b.n	8005b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9b2 	bl	8005ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e006      	b.n	8005b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9ae 	bl	8005ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b9a:	e18d      	b.n	8005eb8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	bf00      	nop
    return;
 8005b9e:	e18b      	b.n	8005eb8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 8167 	bne.w	8005e78 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8160 	beq.w	8005e78 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8159 	beq.w	8005e78 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60bb      	str	r3, [r7, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60bb      	str	r3, [r7, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be6:	2b40      	cmp	r3, #64	@ 0x40
 8005be8:	f040 80ce 	bne.w	8005d88 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 80a9 	beq.w	8005d54 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	f080 80a2 	bcs.w	8005d54 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c16:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c22:	f000 8088 	beq.w	8005d36 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	330c      	adds	r3, #12
 8005c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1d9      	bne.n	8005c26 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c84:	f023 0301 	bic.w	r3, r3, #1
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3314      	adds	r3, #20
 8005c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ca2:	e841 2300 	strex	r3, r2, [r1]
 8005ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1e1      	bne.n	8005c72 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cb8:	e853 3f00 	ldrex	r3, [r3]
 8005cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cda:	e841 2300 	strex	r3, r2, [r1]
 8005cde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1e3      	bne.n	8005cae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d06:	f023 0310 	bic.w	r3, r3, #16
 8005d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	330c      	adds	r3, #12
 8005d14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005d26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e3      	bne.n	8005cf4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fd fd3d 	bl	80037b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f8d9 	bl	8005f04 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005d52:	e0b3      	b.n	8005ebc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 80ad 	bne.w	8005ebc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6c:	f040 80a6 	bne.w	8005ebc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f8c1 	bl	8005f04 <HAL_UARTEx_RxEventCallback>
      return;
 8005d82:	e09b      	b.n	8005ebc <HAL_UART_IRQHandler+0x548>
 8005d84:	08006095 	.word	0x08006095
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 808e 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005da4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8089 	beq.w	8005ec0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	330c      	adds	r3, #12
 8005dce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005dd2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dd4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dd8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e3      	bne.n	8005dae <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	623b      	str	r3, [r7, #32]
   return(result);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	3314      	adds	r3, #20
 8005e06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e0a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e3      	bne.n	8005de6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	330c      	adds	r3, #12
 8005e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	e853 3f00 	ldrex	r3, [r3]
 8005e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0310 	bic.w	r3, r3, #16
 8005e42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	330c      	adds	r3, #12
 8005e4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e50:	61fa      	str	r2, [r7, #28]
 8005e52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	69b9      	ldr	r1, [r7, #24]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	e841 2300 	strex	r3, r2, [r1]
 8005e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e3      	bne.n	8005e2c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f847 	bl	8005f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e76:	e023      	b.n	8005ec0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <HAL_UART_IRQHandler+0x524>
 8005e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f910 	bl	80060b6 <UART_Transmit_IT>
    return;
 8005e96:	e014      	b.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
 8005ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f950 	bl	8006156 <UART_EndTransmit_IT>
    return;
 8005eb6:	e004      	b.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
    return;
 8005eb8:	bf00      	nop
 8005eba:	e002      	b.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005ebc:	bf00      	nop
 8005ebe:	e000      	b.n	8005ec2 <HAL_UART_IRQHandler+0x54e>
      return;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	37e8      	adds	r7, #232	@ 0xe8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2c:	e03b      	b.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d037      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fc fdf1 	bl	8002b1c <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d101      	bne.n	8005f50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e03a      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d023      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b80      	cmp	r3, #128	@ 0x80
 8005f62:	d020      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b40      	cmp	r3, #64	@ 0x40
 8005f68:	d01d      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d116      	bne.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f78:	2300      	movs	r3, #0
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f81d 	bl	8005fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2208      	movs	r2, #8
 8005f98:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e00f      	b.n	8005fc6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	2300      	movne	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d0b4      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b095      	sub	sp, #84	@ 0x54
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3314      	adds	r3, #20
 8006010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	61fb      	str	r3, [r7, #28]
   return(result);
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	f023 0301 	bic.w	r3, r3, #1
 8006020:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3314      	adds	r3, #20
 8006028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800602a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800602c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1e5      	bne.n	800600a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	2b01      	cmp	r3, #1
 8006044:	d119      	bne.n	800607a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	60bb      	str	r3, [r7, #8]
   return(result);
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	647b      	str	r3, [r7, #68]	@ 0x44
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	330c      	adds	r3, #12
 8006064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006066:	61ba      	str	r2, [r7, #24]
 8006068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	6979      	ldr	r1, [r7, #20]
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	e841 2300 	strex	r3, r2, [r1]
 8006072:	613b      	str	r3, [r7, #16]
   return(result);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1e5      	bne.n	8006046 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006088:	bf00      	nop
 800608a:	3754      	adds	r7, #84	@ 0x54
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f7ff ff21 	bl	8005ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b21      	cmp	r3, #33	@ 0x21
 80060c8:	d13e      	bne.n	8006148 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060d2:	d114      	bne.n	80060fe <UART_Transmit_IT+0x48>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d110      	bne.n	80060fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	1c9a      	adds	r2, r3, #2
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]
 80060fc:	e008      	b.n	8006110 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	1c59      	adds	r1, r3, #1
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6211      	str	r1, [r2, #32]
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10f      	bne.n	8006144 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006132:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006142:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006144:	2300      	movs	r3, #0
 8006146:	e000      	b.n	800614a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
  }
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b082      	sub	sp, #8
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800616c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fea6 	bl	8005ec8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b08c      	sub	sp, #48	@ 0x30
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b22      	cmp	r3, #34	@ 0x22
 80061a0:	f040 80aa 	bne.w	80062f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ac:	d115      	bne.n	80061da <UART_Receive_IT+0x54>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d111      	bne.n	80061da <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	1c9a      	adds	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80061d8:	e024      	b.n	8006224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e8:	d007      	beq.n	80061fa <UART_Receive_IT+0x74>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <UART_Receive_IT+0x82>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e008      	b.n	800621a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006214:	b2da      	uxtb	r2, r3
 8006216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4619      	mov	r1, r3
 8006232:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006234:	2b00      	cmp	r3, #0
 8006236:	d15d      	bne.n	80062f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0220 	bic.w	r2, r2, #32
 8006246:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 0201 	bic.w	r2, r2, #1
 8006266:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627a:	2b01      	cmp	r3, #1
 800627c:	d135      	bne.n	80062ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	627b      	str	r3, [r7, #36]	@ 0x24
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	623a      	str	r2, [r7, #32]
 80062a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d10a      	bne.n	80062dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7ff fe0e 	bl	8005f04 <HAL_UARTEx_RxEventCallback>
 80062e8:	e002      	b.n	80062f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fdf6 	bl	8005edc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e002      	b.n	80062fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062f4:	2300      	movs	r3, #0
 80062f6:	e000      	b.n	80062fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062f8:	2302      	movs	r3, #2
  }
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3730      	adds	r7, #48	@ 0x30
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006308:	b0c0      	sub	sp, #256	@ 0x100
 800630a:	af00      	add	r7, sp, #0
 800630c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	68d9      	ldr	r1, [r3, #12]
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	ea40 0301 	orr.w	r3, r0, r1
 800632c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	431a      	orrs	r2, r3
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	431a      	orrs	r2, r3
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800635c:	f021 010c 	bic.w	r1, r1, #12
 8006360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800636a:	430b      	orrs	r3, r1
 800636c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637e:	6999      	ldr	r1, [r3, #24]
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	ea40 0301 	orr.w	r3, r0, r1
 800638a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b8f      	ldr	r3, [pc, #572]	@ (80065d0 <UART_SetConfig+0x2cc>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d005      	beq.n	80063a4 <UART_SetConfig+0xa0>
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b8d      	ldr	r3, [pc, #564]	@ (80065d4 <UART_SetConfig+0x2d0>)
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d104      	bne.n	80063ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063a4:	f7fe fb6a 	bl	8004a7c <HAL_RCC_GetPCLK2Freq>
 80063a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063ac:	e003      	b.n	80063b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fe fb51 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 80063b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c0:	f040 810c 	bne.w	80065dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	1891      	adds	r1, r2, r2
 80063dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063de:	415b      	adcs	r3, r3
 80063e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063e6:	4621      	mov	r1, r4
 80063e8:	eb12 0801 	adds.w	r8, r2, r1
 80063ec:	4629      	mov	r1, r5
 80063ee:	eb43 0901 	adc.w	r9, r3, r1
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006402:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006406:	4690      	mov	r8, r2
 8006408:	4699      	mov	r9, r3
 800640a:	4623      	mov	r3, r4
 800640c:	eb18 0303 	adds.w	r3, r8, r3
 8006410:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006414:	462b      	mov	r3, r5
 8006416:	eb49 0303 	adc.w	r3, r9, r3
 800641a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800641e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800642a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800642e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006432:	460b      	mov	r3, r1
 8006434:	18db      	adds	r3, r3, r3
 8006436:	653b      	str	r3, [r7, #80]	@ 0x50
 8006438:	4613      	mov	r3, r2
 800643a:	eb42 0303 	adc.w	r3, r2, r3
 800643e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006444:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006448:	f7fa fa20 	bl	800088c <__aeabi_uldivmod>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4b61      	ldr	r3, [pc, #388]	@ (80065d8 <UART_SetConfig+0x2d4>)
 8006452:	fba3 2302 	umull	r2, r3, r3, r2
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	011c      	lsls	r4, r3, #4
 800645a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006464:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006468:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006474:	415b      	adcs	r3, r3
 8006476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006478:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800647c:	4641      	mov	r1, r8
 800647e:	eb12 0a01 	adds.w	sl, r2, r1
 8006482:	4649      	mov	r1, r9
 8006484:	eb43 0b01 	adc.w	fp, r3, r1
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006494:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006498:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800649c:	4692      	mov	sl, r2
 800649e:	469b      	mov	fp, r3
 80064a0:	4643      	mov	r3, r8
 80064a2:	eb1a 0303 	adds.w	r3, sl, r3
 80064a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064aa:	464b      	mov	r3, r9
 80064ac:	eb4b 0303 	adc.w	r3, fp, r3
 80064b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064c8:	460b      	mov	r3, r1
 80064ca:	18db      	adds	r3, r3, r3
 80064cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80064ce:	4613      	mov	r3, r2
 80064d0:	eb42 0303 	adc.w	r3, r2, r3
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064de:	f7fa f9d5 	bl	800088c <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	4b3b      	ldr	r3, [pc, #236]	@ (80065d8 <UART_SetConfig+0x2d4>)
 80064ea:	fba3 2301 	umull	r2, r3, r3, r1
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	2264      	movs	r2, #100	@ 0x64
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	1acb      	subs	r3, r1, r3
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064fe:	4b36      	ldr	r3, [pc, #216]	@ (80065d8 <UART_SetConfig+0x2d4>)
 8006500:	fba3 2302 	umull	r2, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	005b      	lsls	r3, r3, #1
 8006508:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800650c:	441c      	add	r4, r3
 800650e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006512:	2200      	movs	r2, #0
 8006514:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006518:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800651c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	1891      	adds	r1, r2, r2
 8006526:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006528:	415b      	adcs	r3, r3
 800652a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800652c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006530:	4641      	mov	r1, r8
 8006532:	1851      	adds	r1, r2, r1
 8006534:	6339      	str	r1, [r7, #48]	@ 0x30
 8006536:	4649      	mov	r1, r9
 8006538:	414b      	adcs	r3, r1
 800653a:	637b      	str	r3, [r7, #52]	@ 0x34
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006548:	4659      	mov	r1, fp
 800654a:	00cb      	lsls	r3, r1, #3
 800654c:	4651      	mov	r1, sl
 800654e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006552:	4651      	mov	r1, sl
 8006554:	00ca      	lsls	r2, r1, #3
 8006556:	4610      	mov	r0, r2
 8006558:	4619      	mov	r1, r3
 800655a:	4603      	mov	r3, r0
 800655c:	4642      	mov	r2, r8
 800655e:	189b      	adds	r3, r3, r2
 8006560:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006564:	464b      	mov	r3, r9
 8006566:	460a      	mov	r2, r1
 8006568:	eb42 0303 	adc.w	r3, r2, r3
 800656c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800657c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006580:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006584:	460b      	mov	r3, r1
 8006586:	18db      	adds	r3, r3, r3
 8006588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800658a:	4613      	mov	r3, r2
 800658c:	eb42 0303 	adc.w	r3, r2, r3
 8006590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006592:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006596:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800659a:	f7fa f977 	bl	800088c <__aeabi_uldivmod>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <UART_SetConfig+0x2d4>)
 80065a4:	fba3 1302 	umull	r1, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	2164      	movs	r1, #100	@ 0x64
 80065ac:	fb01 f303 	mul.w	r3, r1, r3
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	3332      	adds	r3, #50	@ 0x32
 80065b6:	4a08      	ldr	r2, [pc, #32]	@ (80065d8 <UART_SetConfig+0x2d4>)
 80065b8:	fba2 2303 	umull	r2, r3, r2, r3
 80065bc:	095b      	lsrs	r3, r3, #5
 80065be:	f003 0207 	and.w	r2, r3, #7
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4422      	add	r2, r4
 80065ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065cc:	e106      	b.n	80067dc <UART_SetConfig+0x4d8>
 80065ce:	bf00      	nop
 80065d0:	40011000 	.word	0x40011000
 80065d4:	40011400 	.word	0x40011400
 80065d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065ee:	4642      	mov	r2, r8
 80065f0:	464b      	mov	r3, r9
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	6239      	str	r1, [r7, #32]
 80065f6:	415b      	adcs	r3, r3
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065fe:	4641      	mov	r1, r8
 8006600:	1854      	adds	r4, r2, r1
 8006602:	4649      	mov	r1, r9
 8006604:	eb43 0501 	adc.w	r5, r3, r1
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	f04f 0300 	mov.w	r3, #0
 8006610:	00eb      	lsls	r3, r5, #3
 8006612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006616:	00e2      	lsls	r2, r4, #3
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	4643      	mov	r3, r8
 800661e:	18e3      	adds	r3, r4, r3
 8006620:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006624:	464b      	mov	r3, r9
 8006626:	eb45 0303 	adc.w	r3, r5, r3
 800662a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800663a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800664a:	4629      	mov	r1, r5
 800664c:	008b      	lsls	r3, r1, #2
 800664e:	4621      	mov	r1, r4
 8006650:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006654:	4621      	mov	r1, r4
 8006656:	008a      	lsls	r2, r1, #2
 8006658:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800665c:	f7fa f916 	bl	800088c <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4b60      	ldr	r3, [pc, #384]	@ (80067e8 <UART_SetConfig+0x4e4>)
 8006666:	fba3 2302 	umull	r2, r3, r3, r2
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	011c      	lsls	r4, r3, #4
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006678:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800667c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	1891      	adds	r1, r2, r2
 8006686:	61b9      	str	r1, [r7, #24]
 8006688:	415b      	adcs	r3, r3
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006690:	4641      	mov	r1, r8
 8006692:	1851      	adds	r1, r2, r1
 8006694:	6139      	str	r1, [r7, #16]
 8006696:	4649      	mov	r1, r9
 8006698:	414b      	adcs	r3, r1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066a8:	4659      	mov	r1, fp
 80066aa:	00cb      	lsls	r3, r1, #3
 80066ac:	4651      	mov	r1, sl
 80066ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b2:	4651      	mov	r1, sl
 80066b4:	00ca      	lsls	r2, r1, #3
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	4642      	mov	r2, r8
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066c4:	464b      	mov	r3, r9
 80066c6:	460a      	mov	r2, r1
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066e8:	4649      	mov	r1, r9
 80066ea:	008b      	lsls	r3, r1, #2
 80066ec:	4641      	mov	r1, r8
 80066ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f2:	4641      	mov	r1, r8
 80066f4:	008a      	lsls	r2, r1, #2
 80066f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066fa:	f7fa f8c7 	bl	800088c <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4611      	mov	r1, r2
 8006704:	4b38      	ldr	r3, [pc, #224]	@ (80067e8 <UART_SetConfig+0x4e4>)
 8006706:	fba3 2301 	umull	r2, r3, r3, r1
 800670a:	095b      	lsrs	r3, r3, #5
 800670c:	2264      	movs	r2, #100	@ 0x64
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	1acb      	subs	r3, r1, r3
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	3332      	adds	r3, #50	@ 0x32
 8006718:	4a33      	ldr	r2, [pc, #204]	@ (80067e8 <UART_SetConfig+0x4e4>)
 800671a:	fba2 2303 	umull	r2, r3, r2, r3
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006724:	441c      	add	r4, r3
 8006726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800672a:	2200      	movs	r2, #0
 800672c:	673b      	str	r3, [r7, #112]	@ 0x70
 800672e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006730:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	1891      	adds	r1, r2, r2
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	415b      	adcs	r3, r3
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006744:	4641      	mov	r1, r8
 8006746:	1851      	adds	r1, r2, r1
 8006748:	6039      	str	r1, [r7, #0]
 800674a:	4649      	mov	r1, r9
 800674c:	414b      	adcs	r3, r1
 800674e:	607b      	str	r3, [r7, #4]
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800675c:	4659      	mov	r1, fp
 800675e:	00cb      	lsls	r3, r1, #3
 8006760:	4651      	mov	r1, sl
 8006762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006766:	4651      	mov	r1, sl
 8006768:	00ca      	lsls	r2, r1, #3
 800676a:	4610      	mov	r0, r2
 800676c:	4619      	mov	r1, r3
 800676e:	4603      	mov	r3, r0
 8006770:	4642      	mov	r2, r8
 8006772:	189b      	adds	r3, r3, r2
 8006774:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006776:	464b      	mov	r3, r9
 8006778:	460a      	mov	r2, r1
 800677a:	eb42 0303 	adc.w	r3, r2, r3
 800677e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	663b      	str	r3, [r7, #96]	@ 0x60
 800678a:	667a      	str	r2, [r7, #100]	@ 0x64
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006798:	4649      	mov	r1, r9
 800679a:	008b      	lsls	r3, r1, #2
 800679c:	4641      	mov	r1, r8
 800679e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067a2:	4641      	mov	r1, r8
 80067a4:	008a      	lsls	r2, r1, #2
 80067a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067aa:	f7fa f86f 	bl	800088c <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4b0d      	ldr	r3, [pc, #52]	@ (80067e8 <UART_SetConfig+0x4e4>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	2164      	movs	r1, #100	@ 0x64
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	3332      	adds	r3, #50	@ 0x32
 80067c6:	4a08      	ldr	r2, [pc, #32]	@ (80067e8 <UART_SetConfig+0x4e4>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	f003 020f 	and.w	r2, r3, #15
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4422      	add	r2, r4
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067e2:	46bd      	mov	sp, r7
 80067e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e8:	51eb851f 	.word	0x51eb851f

080067ec <siprintf>:
 80067ec:	b40e      	push	{r1, r2, r3}
 80067ee:	b510      	push	{r4, lr}
 80067f0:	b09d      	sub	sp, #116	@ 0x74
 80067f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80067f4:	9002      	str	r0, [sp, #8]
 80067f6:	9006      	str	r0, [sp, #24]
 80067f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067fc:	480a      	ldr	r0, [pc, #40]	@ (8006828 <siprintf+0x3c>)
 80067fe:	9107      	str	r1, [sp, #28]
 8006800:	9104      	str	r1, [sp, #16]
 8006802:	490a      	ldr	r1, [pc, #40]	@ (800682c <siprintf+0x40>)
 8006804:	f853 2b04 	ldr.w	r2, [r3], #4
 8006808:	9105      	str	r1, [sp, #20]
 800680a:	2400      	movs	r4, #0
 800680c:	a902      	add	r1, sp, #8
 800680e:	6800      	ldr	r0, [r0, #0]
 8006810:	9301      	str	r3, [sp, #4]
 8006812:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006814:	f000 f994 	bl	8006b40 <_svfiprintf_r>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	701c      	strb	r4, [r3, #0]
 800681c:	b01d      	add	sp, #116	@ 0x74
 800681e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006822:	b003      	add	sp, #12
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	20000014 	.word	0x20000014
 800682c:	ffff0208 	.word	0xffff0208

08006830 <memset>:
 8006830:	4402      	add	r2, r0
 8006832:	4603      	mov	r3, r0
 8006834:	4293      	cmp	r3, r2
 8006836:	d100      	bne.n	800683a <memset+0xa>
 8006838:	4770      	bx	lr
 800683a:	f803 1b01 	strb.w	r1, [r3], #1
 800683e:	e7f9      	b.n	8006834 <memset+0x4>

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	@ (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000014 	.word	0x20000014

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	@ (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	@ (8006890 <__libc_init_array+0x44>)
 8006860:	f000 fc64 	bl	800712c <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	080071f0 	.word	0x080071f0
 8006888:	080071f0 	.word	0x080071f0
 800688c:	080071f0 	.word	0x080071f0
 8006890:	080071f4 	.word	0x080071f4

08006894 <__retarget_lock_acquire_recursive>:
 8006894:	4770      	bx	lr

08006896 <__retarget_lock_release_recursive>:
 8006896:	4770      	bx	lr

08006898 <_free_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4605      	mov	r5, r0
 800689c:	2900      	cmp	r1, #0
 800689e:	d041      	beq.n	8006924 <_free_r+0x8c>
 80068a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a4:	1f0c      	subs	r4, r1, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	bfb8      	it	lt
 80068aa:	18e4      	addlt	r4, r4, r3
 80068ac:	f000 f8e0 	bl	8006a70 <__malloc_lock>
 80068b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006928 <_free_r+0x90>)
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x2c>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	4628      	mov	r0, r5
 80068bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c0:	f000 b8dc 	b.w	8006a7c <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x42>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	1821      	adds	r1, r4, r0
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x1e>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x4c>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x42>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1850      	adds	r0, r2, r1
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x6c>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4401      	add	r1, r0
 80068f0:	1850      	adds	r0, r2, r1
 80068f2:	4283      	cmp	r3, r0
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x22>
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	6053      	str	r3, [r2, #4]
 80068fe:	4408      	add	r0, r1
 8006900:	6010      	str	r0, [r2, #0]
 8006902:	e7da      	b.n	80068ba <_free_r+0x22>
 8006904:	d902      	bls.n	800690c <_free_r+0x74>
 8006906:	230c      	movs	r3, #12
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x22>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	1821      	adds	r1, r4, r0
 8006910:	428b      	cmp	r3, r1
 8006912:	bf04      	itt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	6063      	str	r3, [r4, #4]
 800691a:	bf04      	itt	eq
 800691c:	1809      	addeq	r1, r1, r0
 800691e:	6021      	streq	r1, [r4, #0]
 8006920:	6054      	str	r4, [r2, #4]
 8006922:	e7ca      	b.n	80068ba <_free_r+0x22>
 8006924:	bd38      	pop	{r3, r4, r5, pc}
 8006926:	bf00      	nop
 8006928:	200003fc 	.word	0x200003fc

0800692c <sbrk_aligned>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4e0f      	ldr	r6, [pc, #60]	@ (800696c <sbrk_aligned+0x40>)
 8006930:	460c      	mov	r4, r1
 8006932:	6831      	ldr	r1, [r6, #0]
 8006934:	4605      	mov	r5, r0
 8006936:	b911      	cbnz	r1, 800693e <sbrk_aligned+0x12>
 8006938:	f000 fba4 	bl	8007084 <_sbrk_r>
 800693c:	6030      	str	r0, [r6, #0]
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 fb9f 	bl	8007084 <_sbrk_r>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d103      	bne.n	8006952 <sbrk_aligned+0x26>
 800694a:	f04f 34ff 	mov.w	r4, #4294967295
 800694e:	4620      	mov	r0, r4
 8006950:	bd70      	pop	{r4, r5, r6, pc}
 8006952:	1cc4      	adds	r4, r0, #3
 8006954:	f024 0403 	bic.w	r4, r4, #3
 8006958:	42a0      	cmp	r0, r4
 800695a:	d0f8      	beq.n	800694e <sbrk_aligned+0x22>
 800695c:	1a21      	subs	r1, r4, r0
 800695e:	4628      	mov	r0, r5
 8006960:	f000 fb90 	bl	8007084 <_sbrk_r>
 8006964:	3001      	adds	r0, #1
 8006966:	d1f2      	bne.n	800694e <sbrk_aligned+0x22>
 8006968:	e7ef      	b.n	800694a <sbrk_aligned+0x1e>
 800696a:	bf00      	nop
 800696c:	200003f8 	.word	0x200003f8

08006970 <_malloc_r>:
 8006970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006974:	1ccd      	adds	r5, r1, #3
 8006976:	f025 0503 	bic.w	r5, r5, #3
 800697a:	3508      	adds	r5, #8
 800697c:	2d0c      	cmp	r5, #12
 800697e:	bf38      	it	cc
 8006980:	250c      	movcc	r5, #12
 8006982:	2d00      	cmp	r5, #0
 8006984:	4606      	mov	r6, r0
 8006986:	db01      	blt.n	800698c <_malloc_r+0x1c>
 8006988:	42a9      	cmp	r1, r5
 800698a:	d904      	bls.n	8006996 <_malloc_r+0x26>
 800698c:	230c      	movs	r3, #12
 800698e:	6033      	str	r3, [r6, #0]
 8006990:	2000      	movs	r0, #0
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006996:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a6c <_malloc_r+0xfc>
 800699a:	f000 f869 	bl	8006a70 <__malloc_lock>
 800699e:	f8d8 3000 	ldr.w	r3, [r8]
 80069a2:	461c      	mov	r4, r3
 80069a4:	bb44      	cbnz	r4, 80069f8 <_malloc_r+0x88>
 80069a6:	4629      	mov	r1, r5
 80069a8:	4630      	mov	r0, r6
 80069aa:	f7ff ffbf 	bl	800692c <sbrk_aligned>
 80069ae:	1c43      	adds	r3, r0, #1
 80069b0:	4604      	mov	r4, r0
 80069b2:	d158      	bne.n	8006a66 <_malloc_r+0xf6>
 80069b4:	f8d8 4000 	ldr.w	r4, [r8]
 80069b8:	4627      	mov	r7, r4
 80069ba:	2f00      	cmp	r7, #0
 80069bc:	d143      	bne.n	8006a46 <_malloc_r+0xd6>
 80069be:	2c00      	cmp	r4, #0
 80069c0:	d04b      	beq.n	8006a5a <_malloc_r+0xea>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	4639      	mov	r1, r7
 80069c6:	4630      	mov	r0, r6
 80069c8:	eb04 0903 	add.w	r9, r4, r3
 80069cc:	f000 fb5a 	bl	8007084 <_sbrk_r>
 80069d0:	4581      	cmp	r9, r0
 80069d2:	d142      	bne.n	8006a5a <_malloc_r+0xea>
 80069d4:	6821      	ldr	r1, [r4, #0]
 80069d6:	1a6d      	subs	r5, r5, r1
 80069d8:	4629      	mov	r1, r5
 80069da:	4630      	mov	r0, r6
 80069dc:	f7ff ffa6 	bl	800692c <sbrk_aligned>
 80069e0:	3001      	adds	r0, #1
 80069e2:	d03a      	beq.n	8006a5a <_malloc_r+0xea>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	442b      	add	r3, r5
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	f8d8 3000 	ldr.w	r3, [r8]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	bb62      	cbnz	r2, 8006a4c <_malloc_r+0xdc>
 80069f2:	f8c8 7000 	str.w	r7, [r8]
 80069f6:	e00f      	b.n	8006a18 <_malloc_r+0xa8>
 80069f8:	6822      	ldr	r2, [r4, #0]
 80069fa:	1b52      	subs	r2, r2, r5
 80069fc:	d420      	bmi.n	8006a40 <_malloc_r+0xd0>
 80069fe:	2a0b      	cmp	r2, #11
 8006a00:	d917      	bls.n	8006a32 <_malloc_r+0xc2>
 8006a02:	1961      	adds	r1, r4, r5
 8006a04:	42a3      	cmp	r3, r4
 8006a06:	6025      	str	r5, [r4, #0]
 8006a08:	bf18      	it	ne
 8006a0a:	6059      	strne	r1, [r3, #4]
 8006a0c:	6863      	ldr	r3, [r4, #4]
 8006a0e:	bf08      	it	eq
 8006a10:	f8c8 1000 	streq.w	r1, [r8]
 8006a14:	5162      	str	r2, [r4, r5]
 8006a16:	604b      	str	r3, [r1, #4]
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f000 f82f 	bl	8006a7c <__malloc_unlock>
 8006a1e:	f104 000b 	add.w	r0, r4, #11
 8006a22:	1d23      	adds	r3, r4, #4
 8006a24:	f020 0007 	bic.w	r0, r0, #7
 8006a28:	1ac2      	subs	r2, r0, r3
 8006a2a:	bf1c      	itt	ne
 8006a2c:	1a1b      	subne	r3, r3, r0
 8006a2e:	50a3      	strne	r3, [r4, r2]
 8006a30:	e7af      	b.n	8006992 <_malloc_r+0x22>
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	bf0c      	ite	eq
 8006a38:	f8c8 2000 	streq.w	r2, [r8]
 8006a3c:	605a      	strne	r2, [r3, #4]
 8006a3e:	e7eb      	b.n	8006a18 <_malloc_r+0xa8>
 8006a40:	4623      	mov	r3, r4
 8006a42:	6864      	ldr	r4, [r4, #4]
 8006a44:	e7ae      	b.n	80069a4 <_malloc_r+0x34>
 8006a46:	463c      	mov	r4, r7
 8006a48:	687f      	ldr	r7, [r7, #4]
 8006a4a:	e7b6      	b.n	80069ba <_malloc_r+0x4a>
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	d1fb      	bne.n	8006a4c <_malloc_r+0xdc>
 8006a54:	2300      	movs	r3, #0
 8006a56:	6053      	str	r3, [r2, #4]
 8006a58:	e7de      	b.n	8006a18 <_malloc_r+0xa8>
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	6033      	str	r3, [r6, #0]
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f000 f80c 	bl	8006a7c <__malloc_unlock>
 8006a64:	e794      	b.n	8006990 <_malloc_r+0x20>
 8006a66:	6005      	str	r5, [r0, #0]
 8006a68:	e7d6      	b.n	8006a18 <_malloc_r+0xa8>
 8006a6a:	bf00      	nop
 8006a6c:	200003fc 	.word	0x200003fc

08006a70 <__malloc_lock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	@ (8006a78 <__malloc_lock+0x8>)
 8006a72:	f7ff bf0f 	b.w	8006894 <__retarget_lock_acquire_recursive>
 8006a76:	bf00      	nop
 8006a78:	200003f4 	.word	0x200003f4

08006a7c <__malloc_unlock>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	@ (8006a84 <__malloc_unlock+0x8>)
 8006a7e:	f7ff bf0a 	b.w	8006896 <__retarget_lock_release_recursive>
 8006a82:	bf00      	nop
 8006a84:	200003f4 	.word	0x200003f4

08006a88 <__ssputs_r>:
 8006a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	688e      	ldr	r6, [r1, #8]
 8006a8e:	461f      	mov	r7, r3
 8006a90:	42be      	cmp	r6, r7
 8006a92:	680b      	ldr	r3, [r1, #0]
 8006a94:	4682      	mov	sl, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	4690      	mov	r8, r2
 8006a9a:	d82d      	bhi.n	8006af8 <__ssputs_r+0x70>
 8006a9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006aa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006aa4:	d026      	beq.n	8006af4 <__ssputs_r+0x6c>
 8006aa6:	6965      	ldr	r5, [r4, #20]
 8006aa8:	6909      	ldr	r1, [r1, #16]
 8006aaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aae:	eba3 0901 	sub.w	r9, r3, r1
 8006ab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ab6:	1c7b      	adds	r3, r7, #1
 8006ab8:	444b      	add	r3, r9
 8006aba:	106d      	asrs	r5, r5, #1
 8006abc:	429d      	cmp	r5, r3
 8006abe:	bf38      	it	cc
 8006ac0:	461d      	movcc	r5, r3
 8006ac2:	0553      	lsls	r3, r2, #21
 8006ac4:	d527      	bpl.n	8006b16 <__ssputs_r+0x8e>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7ff ff52 	bl	8006970 <_malloc_r>
 8006acc:	4606      	mov	r6, r0
 8006ace:	b360      	cbz	r0, 8006b2a <__ssputs_r+0xa2>
 8006ad0:	6921      	ldr	r1, [r4, #16]
 8006ad2:	464a      	mov	r2, r9
 8006ad4:	f000 fae6 	bl	80070a4 <memcpy>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	6126      	str	r6, [r4, #16]
 8006ae6:	6165      	str	r5, [r4, #20]
 8006ae8:	444e      	add	r6, r9
 8006aea:	eba5 0509 	sub.w	r5, r5, r9
 8006aee:	6026      	str	r6, [r4, #0]
 8006af0:	60a5      	str	r5, [r4, #8]
 8006af2:	463e      	mov	r6, r7
 8006af4:	42be      	cmp	r6, r7
 8006af6:	d900      	bls.n	8006afa <__ssputs_r+0x72>
 8006af8:	463e      	mov	r6, r7
 8006afa:	6820      	ldr	r0, [r4, #0]
 8006afc:	4632      	mov	r2, r6
 8006afe:	4641      	mov	r1, r8
 8006b00:	f000 faa6 	bl	8007050 <memmove>
 8006b04:	68a3      	ldr	r3, [r4, #8]
 8006b06:	1b9b      	subs	r3, r3, r6
 8006b08:	60a3      	str	r3, [r4, #8]
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	4433      	add	r3, r6
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	2000      	movs	r0, #0
 8006b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b16:	462a      	mov	r2, r5
 8006b18:	f000 fad2 	bl	80070c0 <_realloc_r>
 8006b1c:	4606      	mov	r6, r0
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d1e0      	bne.n	8006ae4 <__ssputs_r+0x5c>
 8006b22:	6921      	ldr	r1, [r4, #16]
 8006b24:	4650      	mov	r0, sl
 8006b26:	f7ff feb7 	bl	8006898 <_free_r>
 8006b2a:	230c      	movs	r3, #12
 8006b2c:	f8ca 3000 	str.w	r3, [sl]
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e7e9      	b.n	8006b12 <__ssputs_r+0x8a>
	...

08006b40 <_svfiprintf_r>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4698      	mov	r8, r3
 8006b46:	898b      	ldrh	r3, [r1, #12]
 8006b48:	061b      	lsls	r3, r3, #24
 8006b4a:	b09d      	sub	sp, #116	@ 0x74
 8006b4c:	4607      	mov	r7, r0
 8006b4e:	460d      	mov	r5, r1
 8006b50:	4614      	mov	r4, r2
 8006b52:	d510      	bpl.n	8006b76 <_svfiprintf_r+0x36>
 8006b54:	690b      	ldr	r3, [r1, #16]
 8006b56:	b973      	cbnz	r3, 8006b76 <_svfiprintf_r+0x36>
 8006b58:	2140      	movs	r1, #64	@ 0x40
 8006b5a:	f7ff ff09 	bl	8006970 <_malloc_r>
 8006b5e:	6028      	str	r0, [r5, #0]
 8006b60:	6128      	str	r0, [r5, #16]
 8006b62:	b930      	cbnz	r0, 8006b72 <_svfiprintf_r+0x32>
 8006b64:	230c      	movs	r3, #12
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	b01d      	add	sp, #116	@ 0x74
 8006b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b72:	2340      	movs	r3, #64	@ 0x40
 8006b74:	616b      	str	r3, [r5, #20]
 8006b76:	2300      	movs	r3, #0
 8006b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b7a:	2320      	movs	r3, #32
 8006b7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b84:	2330      	movs	r3, #48	@ 0x30
 8006b86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d24 <_svfiprintf_r+0x1e4>
 8006b8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b8e:	f04f 0901 	mov.w	r9, #1
 8006b92:	4623      	mov	r3, r4
 8006b94:	469a      	mov	sl, r3
 8006b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b9a:	b10a      	cbz	r2, 8006ba0 <_svfiprintf_r+0x60>
 8006b9c:	2a25      	cmp	r2, #37	@ 0x25
 8006b9e:	d1f9      	bne.n	8006b94 <_svfiprintf_r+0x54>
 8006ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ba4:	d00b      	beq.n	8006bbe <_svfiprintf_r+0x7e>
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	4622      	mov	r2, r4
 8006baa:	4629      	mov	r1, r5
 8006bac:	4638      	mov	r0, r7
 8006bae:	f7ff ff6b 	bl	8006a88 <__ssputs_r>
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f000 80a7 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bba:	445a      	add	r2, fp
 8006bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 809f 	beq.w	8006d06 <_svfiprintf_r+0x1c6>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f04f 32ff 	mov.w	r2, #4294967295
 8006bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bd2:	f10a 0a01 	add.w	sl, sl, #1
 8006bd6:	9304      	str	r3, [sp, #16]
 8006bd8:	9307      	str	r3, [sp, #28]
 8006bda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bde:	931a      	str	r3, [sp, #104]	@ 0x68
 8006be0:	4654      	mov	r4, sl
 8006be2:	2205      	movs	r2, #5
 8006be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be8:	484e      	ldr	r0, [pc, #312]	@ (8006d24 <_svfiprintf_r+0x1e4>)
 8006bea:	f7f9 faf9 	bl	80001e0 <memchr>
 8006bee:	9a04      	ldr	r2, [sp, #16]
 8006bf0:	b9d8      	cbnz	r0, 8006c2a <_svfiprintf_r+0xea>
 8006bf2:	06d0      	lsls	r0, r2, #27
 8006bf4:	bf44      	itt	mi
 8006bf6:	2320      	movmi	r3, #32
 8006bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bfc:	0711      	lsls	r1, r2, #28
 8006bfe:	bf44      	itt	mi
 8006c00:	232b      	movmi	r3, #43	@ 0x2b
 8006c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c06:	f89a 3000 	ldrb.w	r3, [sl]
 8006c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c0c:	d015      	beq.n	8006c3a <_svfiprintf_r+0xfa>
 8006c0e:	9a07      	ldr	r2, [sp, #28]
 8006c10:	4654      	mov	r4, sl
 8006c12:	2000      	movs	r0, #0
 8006c14:	f04f 0c0a 	mov.w	ip, #10
 8006c18:	4621      	mov	r1, r4
 8006c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c1e:	3b30      	subs	r3, #48	@ 0x30
 8006c20:	2b09      	cmp	r3, #9
 8006c22:	d94b      	bls.n	8006cbc <_svfiprintf_r+0x17c>
 8006c24:	b1b0      	cbz	r0, 8006c54 <_svfiprintf_r+0x114>
 8006c26:	9207      	str	r2, [sp, #28]
 8006c28:	e014      	b.n	8006c54 <_svfiprintf_r+0x114>
 8006c2a:	eba0 0308 	sub.w	r3, r0, r8
 8006c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c32:	4313      	orrs	r3, r2
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	46a2      	mov	sl, r4
 8006c38:	e7d2      	b.n	8006be0 <_svfiprintf_r+0xa0>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	1d19      	adds	r1, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	9103      	str	r1, [sp, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bfbb      	ittet	lt
 8006c46:	425b      	neglt	r3, r3
 8006c48:	f042 0202 	orrlt.w	r2, r2, #2
 8006c4c:	9307      	strge	r3, [sp, #28]
 8006c4e:	9307      	strlt	r3, [sp, #28]
 8006c50:	bfb8      	it	lt
 8006c52:	9204      	strlt	r2, [sp, #16]
 8006c54:	7823      	ldrb	r3, [r4, #0]
 8006c56:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c58:	d10a      	bne.n	8006c70 <_svfiprintf_r+0x130>
 8006c5a:	7863      	ldrb	r3, [r4, #1]
 8006c5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c5e:	d132      	bne.n	8006cc6 <_svfiprintf_r+0x186>
 8006c60:	9b03      	ldr	r3, [sp, #12]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	9203      	str	r2, [sp, #12]
 8006c68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c6c:	3402      	adds	r4, #2
 8006c6e:	9305      	str	r3, [sp, #20]
 8006c70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d34 <_svfiprintf_r+0x1f4>
 8006c74:	7821      	ldrb	r1, [r4, #0]
 8006c76:	2203      	movs	r2, #3
 8006c78:	4650      	mov	r0, sl
 8006c7a:	f7f9 fab1 	bl	80001e0 <memchr>
 8006c7e:	b138      	cbz	r0, 8006c90 <_svfiprintf_r+0x150>
 8006c80:	9b04      	ldr	r3, [sp, #16]
 8006c82:	eba0 000a 	sub.w	r0, r0, sl
 8006c86:	2240      	movs	r2, #64	@ 0x40
 8006c88:	4082      	lsls	r2, r0
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	3401      	adds	r4, #1
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c94:	4824      	ldr	r0, [pc, #144]	@ (8006d28 <_svfiprintf_r+0x1e8>)
 8006c96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c9a:	2206      	movs	r2, #6
 8006c9c:	f7f9 faa0 	bl	80001e0 <memchr>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d036      	beq.n	8006d12 <_svfiprintf_r+0x1d2>
 8006ca4:	4b21      	ldr	r3, [pc, #132]	@ (8006d2c <_svfiprintf_r+0x1ec>)
 8006ca6:	bb1b      	cbnz	r3, 8006cf0 <_svfiprintf_r+0x1b0>
 8006ca8:	9b03      	ldr	r3, [sp, #12]
 8006caa:	3307      	adds	r3, #7
 8006cac:	f023 0307 	bic.w	r3, r3, #7
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	9303      	str	r3, [sp, #12]
 8006cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cb6:	4433      	add	r3, r6
 8006cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cba:	e76a      	b.n	8006b92 <_svfiprintf_r+0x52>
 8006cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	2001      	movs	r0, #1
 8006cc4:	e7a8      	b.n	8006c18 <_svfiprintf_r+0xd8>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	3401      	adds	r4, #1
 8006cca:	9305      	str	r3, [sp, #20]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f04f 0c0a 	mov.w	ip, #10
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cd8:	3a30      	subs	r2, #48	@ 0x30
 8006cda:	2a09      	cmp	r2, #9
 8006cdc:	d903      	bls.n	8006ce6 <_svfiprintf_r+0x1a6>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0c6      	beq.n	8006c70 <_svfiprintf_r+0x130>
 8006ce2:	9105      	str	r1, [sp, #20]
 8006ce4:	e7c4      	b.n	8006c70 <_svfiprintf_r+0x130>
 8006ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cea:	4604      	mov	r4, r0
 8006cec:	2301      	movs	r3, #1
 8006cee:	e7f0      	b.n	8006cd2 <_svfiprintf_r+0x192>
 8006cf0:	ab03      	add	r3, sp, #12
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006d30 <_svfiprintf_r+0x1f0>)
 8006cf8:	a904      	add	r1, sp, #16
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f3af 8000 	nop.w
 8006d00:	1c42      	adds	r2, r0, #1
 8006d02:	4606      	mov	r6, r0
 8006d04:	d1d6      	bne.n	8006cb4 <_svfiprintf_r+0x174>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	065b      	lsls	r3, r3, #25
 8006d0a:	f53f af2d 	bmi.w	8006b68 <_svfiprintf_r+0x28>
 8006d0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d10:	e72c      	b.n	8006b6c <_svfiprintf_r+0x2c>
 8006d12:	ab03      	add	r3, sp, #12
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	462a      	mov	r2, r5
 8006d18:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <_svfiprintf_r+0x1f0>)
 8006d1a:	a904      	add	r1, sp, #16
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f000 f879 	bl	8006e14 <_printf_i>
 8006d22:	e7ed      	b.n	8006d00 <_svfiprintf_r+0x1c0>
 8006d24:	080071b4 	.word	0x080071b4
 8006d28:	080071be 	.word	0x080071be
 8006d2c:	00000000 	.word	0x00000000
 8006d30:	08006a89 	.word	0x08006a89
 8006d34:	080071ba 	.word	0x080071ba

08006d38 <_printf_common>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	4698      	mov	r8, r3
 8006d40:	688a      	ldr	r2, [r1, #8]
 8006d42:	690b      	ldr	r3, [r1, #16]
 8006d44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bfb8      	it	lt
 8006d4c:	4613      	movlt	r3, r2
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d54:	4607      	mov	r7, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	b10a      	cbz	r2, 8006d5e <_printf_common+0x26>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6033      	str	r3, [r6, #0]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	0699      	lsls	r1, r3, #26
 8006d62:	bf42      	ittt	mi
 8006d64:	6833      	ldrmi	r3, [r6, #0]
 8006d66:	3302      	addmi	r3, #2
 8006d68:	6033      	strmi	r3, [r6, #0]
 8006d6a:	6825      	ldr	r5, [r4, #0]
 8006d6c:	f015 0506 	ands.w	r5, r5, #6
 8006d70:	d106      	bne.n	8006d80 <_printf_common+0x48>
 8006d72:	f104 0a19 	add.w	sl, r4, #25
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	6832      	ldr	r2, [r6, #0]
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dc26      	bgt.n	8006dce <_printf_common+0x96>
 8006d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d84:	6822      	ldr	r2, [r4, #0]
 8006d86:	3b00      	subs	r3, #0
 8006d88:	bf18      	it	ne
 8006d8a:	2301      	movne	r3, #1
 8006d8c:	0692      	lsls	r2, r2, #26
 8006d8e:	d42b      	bmi.n	8006de8 <_printf_common+0xb0>
 8006d90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d94:	4641      	mov	r1, r8
 8006d96:	4638      	mov	r0, r7
 8006d98:	47c8      	blx	r9
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d01e      	beq.n	8006ddc <_printf_common+0xa4>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	6922      	ldr	r2, [r4, #16]
 8006da2:	f003 0306 	and.w	r3, r3, #6
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	bf02      	ittt	eq
 8006daa:	68e5      	ldreq	r5, [r4, #12]
 8006dac:	6833      	ldreq	r3, [r6, #0]
 8006dae:	1aed      	subeq	r5, r5, r3
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	bf0c      	ite	eq
 8006db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db8:	2500      	movne	r5, #0
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bfc4      	itt	gt
 8006dbe:	1a9b      	subgt	r3, r3, r2
 8006dc0:	18ed      	addgt	r5, r5, r3
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	341a      	adds	r4, #26
 8006dc6:	42b5      	cmp	r5, r6
 8006dc8:	d11a      	bne.n	8006e00 <_printf_common+0xc8>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e008      	b.n	8006de0 <_printf_common+0xa8>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	47c8      	blx	r9
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d103      	bne.n	8006de4 <_printf_common+0xac>
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de4:	3501      	adds	r5, #1
 8006de6:	e7c6      	b.n	8006d76 <_printf_common+0x3e>
 8006de8:	18e1      	adds	r1, r4, r3
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	2030      	movs	r0, #48	@ 0x30
 8006dee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006df2:	4422      	add	r2, r4
 8006df4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006df8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	e7c7      	b.n	8006d90 <_printf_common+0x58>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4622      	mov	r2, r4
 8006e04:	4641      	mov	r1, r8
 8006e06:	4638      	mov	r0, r7
 8006e08:	47c8      	blx	r9
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d0e6      	beq.n	8006ddc <_printf_common+0xa4>
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7d9      	b.n	8006dc6 <_printf_common+0x8e>
	...

08006e14 <_printf_i>:
 8006e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	7e0f      	ldrb	r7, [r1, #24]
 8006e1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e1c:	2f78      	cmp	r7, #120	@ 0x78
 8006e1e:	4691      	mov	r9, r2
 8006e20:	4680      	mov	r8, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	469a      	mov	sl, r3
 8006e26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e2a:	d807      	bhi.n	8006e3c <_printf_i+0x28>
 8006e2c:	2f62      	cmp	r7, #98	@ 0x62
 8006e2e:	d80a      	bhi.n	8006e46 <_printf_i+0x32>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	f000 80d1 	beq.w	8006fd8 <_printf_i+0x1c4>
 8006e36:	2f58      	cmp	r7, #88	@ 0x58
 8006e38:	f000 80b8 	beq.w	8006fac <_printf_i+0x198>
 8006e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e44:	e03a      	b.n	8006ebc <_printf_i+0xa8>
 8006e46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e4a:	2b15      	cmp	r3, #21
 8006e4c:	d8f6      	bhi.n	8006e3c <_printf_i+0x28>
 8006e4e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e54 <_printf_i+0x40>)
 8006e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006e3d 	.word	0x08006e3d
 8006e60:	08006e3d 	.word	0x08006e3d
 8006e64:	08006e3d 	.word	0x08006e3d
 8006e68:	08006e3d 	.word	0x08006e3d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e3d 	.word	0x08006e3d
 8006e74:	08006e3d 	.word	0x08006e3d
 8006e78:	08006e3d 	.word	0x08006e3d
 8006e7c:	08006e3d 	.word	0x08006e3d
 8006e80:	08006fbf 	.word	0x08006fbf
 8006e84:	08006eeb 	.word	0x08006eeb
 8006e88:	08006f79 	.word	0x08006f79
 8006e8c:	08006e3d 	.word	0x08006e3d
 8006e90:	08006e3d 	.word	0x08006e3d
 8006e94:	08006fe1 	.word	0x08006fe1
 8006e98:	08006e3d 	.word	0x08006e3d
 8006e9c:	08006eeb 	.word	0x08006eeb
 8006ea0:	08006e3d 	.word	0x08006e3d
 8006ea4:	08006e3d 	.word	0x08006e3d
 8006ea8:	08006f81 	.word	0x08006f81
 8006eac:	6833      	ldr	r3, [r6, #0]
 8006eae:	1d1a      	adds	r2, r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6032      	str	r2, [r6, #0]
 8006eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e09c      	b.n	8006ffa <_printf_i+0x1e6>
 8006ec0:	6833      	ldr	r3, [r6, #0]
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	1d19      	adds	r1, r3, #4
 8006ec6:	6031      	str	r1, [r6, #0]
 8006ec8:	0606      	lsls	r6, r0, #24
 8006eca:	d501      	bpl.n	8006ed0 <_printf_i+0xbc>
 8006ecc:	681d      	ldr	r5, [r3, #0]
 8006ece:	e003      	b.n	8006ed8 <_printf_i+0xc4>
 8006ed0:	0645      	lsls	r5, r0, #25
 8006ed2:	d5fb      	bpl.n	8006ecc <_printf_i+0xb8>
 8006ed4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ed8:	2d00      	cmp	r5, #0
 8006eda:	da03      	bge.n	8006ee4 <_printf_i+0xd0>
 8006edc:	232d      	movs	r3, #45	@ 0x2d
 8006ede:	426d      	negs	r5, r5
 8006ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ee4:	4858      	ldr	r0, [pc, #352]	@ (8007048 <_printf_i+0x234>)
 8006ee6:	230a      	movs	r3, #10
 8006ee8:	e011      	b.n	8006f0e <_printf_i+0xfa>
 8006eea:	6821      	ldr	r1, [r4, #0]
 8006eec:	6833      	ldr	r3, [r6, #0]
 8006eee:	0608      	lsls	r0, r1, #24
 8006ef0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ef4:	d402      	bmi.n	8006efc <_printf_i+0xe8>
 8006ef6:	0649      	lsls	r1, r1, #25
 8006ef8:	bf48      	it	mi
 8006efa:	b2ad      	uxthmi	r5, r5
 8006efc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006efe:	4852      	ldr	r0, [pc, #328]	@ (8007048 <_printf_i+0x234>)
 8006f00:	6033      	str	r3, [r6, #0]
 8006f02:	bf14      	ite	ne
 8006f04:	230a      	movne	r3, #10
 8006f06:	2308      	moveq	r3, #8
 8006f08:	2100      	movs	r1, #0
 8006f0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f0e:	6866      	ldr	r6, [r4, #4]
 8006f10:	60a6      	str	r6, [r4, #8]
 8006f12:	2e00      	cmp	r6, #0
 8006f14:	db05      	blt.n	8006f22 <_printf_i+0x10e>
 8006f16:	6821      	ldr	r1, [r4, #0]
 8006f18:	432e      	orrs	r6, r5
 8006f1a:	f021 0104 	bic.w	r1, r1, #4
 8006f1e:	6021      	str	r1, [r4, #0]
 8006f20:	d04b      	beq.n	8006fba <_printf_i+0x1a6>
 8006f22:	4616      	mov	r6, r2
 8006f24:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f28:	fb03 5711 	mls	r7, r3, r1, r5
 8006f2c:	5dc7      	ldrb	r7, [r0, r7]
 8006f2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f32:	462f      	mov	r7, r5
 8006f34:	42bb      	cmp	r3, r7
 8006f36:	460d      	mov	r5, r1
 8006f38:	d9f4      	bls.n	8006f24 <_printf_i+0x110>
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d10b      	bne.n	8006f56 <_printf_i+0x142>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	07df      	lsls	r7, r3, #31
 8006f42:	d508      	bpl.n	8006f56 <_printf_i+0x142>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	6861      	ldr	r1, [r4, #4]
 8006f48:	4299      	cmp	r1, r3
 8006f4a:	bfde      	ittt	le
 8006f4c:	2330      	movle	r3, #48	@ 0x30
 8006f4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f56:	1b92      	subs	r2, r2, r6
 8006f58:	6122      	str	r2, [r4, #16]
 8006f5a:	f8cd a000 	str.w	sl, [sp]
 8006f5e:	464b      	mov	r3, r9
 8006f60:	aa03      	add	r2, sp, #12
 8006f62:	4621      	mov	r1, r4
 8006f64:	4640      	mov	r0, r8
 8006f66:	f7ff fee7 	bl	8006d38 <_printf_common>
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d14a      	bne.n	8007004 <_printf_i+0x1f0>
 8006f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f72:	b004      	add	sp, #16
 8006f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	f043 0320 	orr.w	r3, r3, #32
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	4832      	ldr	r0, [pc, #200]	@ (800704c <_printf_i+0x238>)
 8006f82:	2778      	movs	r7, #120	@ 0x78
 8006f84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	6831      	ldr	r1, [r6, #0]
 8006f8c:	061f      	lsls	r7, r3, #24
 8006f8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f92:	d402      	bmi.n	8006f9a <_printf_i+0x186>
 8006f94:	065f      	lsls	r7, r3, #25
 8006f96:	bf48      	it	mi
 8006f98:	b2ad      	uxthmi	r5, r5
 8006f9a:	6031      	str	r1, [r6, #0]
 8006f9c:	07d9      	lsls	r1, r3, #31
 8006f9e:	bf44      	itt	mi
 8006fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8006fa4:	6023      	strmi	r3, [r4, #0]
 8006fa6:	b11d      	cbz	r5, 8006fb0 <_printf_i+0x19c>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	e7ad      	b.n	8006f08 <_printf_i+0xf4>
 8006fac:	4826      	ldr	r0, [pc, #152]	@ (8007048 <_printf_i+0x234>)
 8006fae:	e7e9      	b.n	8006f84 <_printf_i+0x170>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	f023 0320 	bic.w	r3, r3, #32
 8006fb6:	6023      	str	r3, [r4, #0]
 8006fb8:	e7f6      	b.n	8006fa8 <_printf_i+0x194>
 8006fba:	4616      	mov	r6, r2
 8006fbc:	e7bd      	b.n	8006f3a <_printf_i+0x126>
 8006fbe:	6833      	ldr	r3, [r6, #0]
 8006fc0:	6825      	ldr	r5, [r4, #0]
 8006fc2:	6961      	ldr	r1, [r4, #20]
 8006fc4:	1d18      	adds	r0, r3, #4
 8006fc6:	6030      	str	r0, [r6, #0]
 8006fc8:	062e      	lsls	r6, r5, #24
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	d501      	bpl.n	8006fd2 <_printf_i+0x1be>
 8006fce:	6019      	str	r1, [r3, #0]
 8006fd0:	e002      	b.n	8006fd8 <_printf_i+0x1c4>
 8006fd2:	0668      	lsls	r0, r5, #25
 8006fd4:	d5fb      	bpl.n	8006fce <_printf_i+0x1ba>
 8006fd6:	8019      	strh	r1, [r3, #0]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	4616      	mov	r6, r2
 8006fde:	e7bc      	b.n	8006f5a <_printf_i+0x146>
 8006fe0:	6833      	ldr	r3, [r6, #0]
 8006fe2:	1d1a      	adds	r2, r3, #4
 8006fe4:	6032      	str	r2, [r6, #0]
 8006fe6:	681e      	ldr	r6, [r3, #0]
 8006fe8:	6862      	ldr	r2, [r4, #4]
 8006fea:	2100      	movs	r1, #0
 8006fec:	4630      	mov	r0, r6
 8006fee:	f7f9 f8f7 	bl	80001e0 <memchr>
 8006ff2:	b108      	cbz	r0, 8006ff8 <_printf_i+0x1e4>
 8006ff4:	1b80      	subs	r0, r0, r6
 8006ff6:	6060      	str	r0, [r4, #4]
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007002:	e7aa      	b.n	8006f5a <_printf_i+0x146>
 8007004:	6923      	ldr	r3, [r4, #16]
 8007006:	4632      	mov	r2, r6
 8007008:	4649      	mov	r1, r9
 800700a:	4640      	mov	r0, r8
 800700c:	47d0      	blx	sl
 800700e:	3001      	adds	r0, #1
 8007010:	d0ad      	beq.n	8006f6e <_printf_i+0x15a>
 8007012:	6823      	ldr	r3, [r4, #0]
 8007014:	079b      	lsls	r3, r3, #30
 8007016:	d413      	bmi.n	8007040 <_printf_i+0x22c>
 8007018:	68e0      	ldr	r0, [r4, #12]
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	4298      	cmp	r0, r3
 800701e:	bfb8      	it	lt
 8007020:	4618      	movlt	r0, r3
 8007022:	e7a6      	b.n	8006f72 <_printf_i+0x15e>
 8007024:	2301      	movs	r3, #1
 8007026:	4632      	mov	r2, r6
 8007028:	4649      	mov	r1, r9
 800702a:	4640      	mov	r0, r8
 800702c:	47d0      	blx	sl
 800702e:	3001      	adds	r0, #1
 8007030:	d09d      	beq.n	8006f6e <_printf_i+0x15a>
 8007032:	3501      	adds	r5, #1
 8007034:	68e3      	ldr	r3, [r4, #12]
 8007036:	9903      	ldr	r1, [sp, #12]
 8007038:	1a5b      	subs	r3, r3, r1
 800703a:	42ab      	cmp	r3, r5
 800703c:	dcf2      	bgt.n	8007024 <_printf_i+0x210>
 800703e:	e7eb      	b.n	8007018 <_printf_i+0x204>
 8007040:	2500      	movs	r5, #0
 8007042:	f104 0619 	add.w	r6, r4, #25
 8007046:	e7f5      	b.n	8007034 <_printf_i+0x220>
 8007048:	080071c5 	.word	0x080071c5
 800704c:	080071d6 	.word	0x080071d6

08007050 <memmove>:
 8007050:	4288      	cmp	r0, r1
 8007052:	b510      	push	{r4, lr}
 8007054:	eb01 0402 	add.w	r4, r1, r2
 8007058:	d902      	bls.n	8007060 <memmove+0x10>
 800705a:	4284      	cmp	r4, r0
 800705c:	4623      	mov	r3, r4
 800705e:	d807      	bhi.n	8007070 <memmove+0x20>
 8007060:	1e43      	subs	r3, r0, #1
 8007062:	42a1      	cmp	r1, r4
 8007064:	d008      	beq.n	8007078 <memmove+0x28>
 8007066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800706a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800706e:	e7f8      	b.n	8007062 <memmove+0x12>
 8007070:	4402      	add	r2, r0
 8007072:	4601      	mov	r1, r0
 8007074:	428a      	cmp	r2, r1
 8007076:	d100      	bne.n	800707a <memmove+0x2a>
 8007078:	bd10      	pop	{r4, pc}
 800707a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800707e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007082:	e7f7      	b.n	8007074 <memmove+0x24>

08007084 <_sbrk_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4d06      	ldr	r5, [pc, #24]	@ (80070a0 <_sbrk_r+0x1c>)
 8007088:	2300      	movs	r3, #0
 800708a:	4604      	mov	r4, r0
 800708c:	4608      	mov	r0, r1
 800708e:	602b      	str	r3, [r5, #0]
 8007090:	f7fb fc6c 	bl	800296c <_sbrk>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d102      	bne.n	800709e <_sbrk_r+0x1a>
 8007098:	682b      	ldr	r3, [r5, #0]
 800709a:	b103      	cbz	r3, 800709e <_sbrk_r+0x1a>
 800709c:	6023      	str	r3, [r4, #0]
 800709e:	bd38      	pop	{r3, r4, r5, pc}
 80070a0:	200003f0 	.word	0x200003f0

080070a4 <memcpy>:
 80070a4:	440a      	add	r2, r1
 80070a6:	4291      	cmp	r1, r2
 80070a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070ac:	d100      	bne.n	80070b0 <memcpy+0xc>
 80070ae:	4770      	bx	lr
 80070b0:	b510      	push	{r4, lr}
 80070b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ba:	4291      	cmp	r1, r2
 80070bc:	d1f9      	bne.n	80070b2 <memcpy+0xe>
 80070be:	bd10      	pop	{r4, pc}

080070c0 <_realloc_r>:
 80070c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	4607      	mov	r7, r0
 80070c6:	4614      	mov	r4, r2
 80070c8:	460d      	mov	r5, r1
 80070ca:	b921      	cbnz	r1, 80070d6 <_realloc_r+0x16>
 80070cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d0:	4611      	mov	r1, r2
 80070d2:	f7ff bc4d 	b.w	8006970 <_malloc_r>
 80070d6:	b92a      	cbnz	r2, 80070e4 <_realloc_r+0x24>
 80070d8:	f7ff fbde 	bl	8006898 <_free_r>
 80070dc:	4625      	mov	r5, r4
 80070de:	4628      	mov	r0, r5
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070e4:	f000 f81a 	bl	800711c <_malloc_usable_size_r>
 80070e8:	4284      	cmp	r4, r0
 80070ea:	4606      	mov	r6, r0
 80070ec:	d802      	bhi.n	80070f4 <_realloc_r+0x34>
 80070ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070f2:	d8f4      	bhi.n	80070de <_realloc_r+0x1e>
 80070f4:	4621      	mov	r1, r4
 80070f6:	4638      	mov	r0, r7
 80070f8:	f7ff fc3a 	bl	8006970 <_malloc_r>
 80070fc:	4680      	mov	r8, r0
 80070fe:	b908      	cbnz	r0, 8007104 <_realloc_r+0x44>
 8007100:	4645      	mov	r5, r8
 8007102:	e7ec      	b.n	80070de <_realloc_r+0x1e>
 8007104:	42b4      	cmp	r4, r6
 8007106:	4622      	mov	r2, r4
 8007108:	4629      	mov	r1, r5
 800710a:	bf28      	it	cs
 800710c:	4632      	movcs	r2, r6
 800710e:	f7ff ffc9 	bl	80070a4 <memcpy>
 8007112:	4629      	mov	r1, r5
 8007114:	4638      	mov	r0, r7
 8007116:	f7ff fbbf 	bl	8006898 <_free_r>
 800711a:	e7f1      	b.n	8007100 <_realloc_r+0x40>

0800711c <_malloc_usable_size_r>:
 800711c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007120:	1f18      	subs	r0, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfbc      	itt	lt
 8007126:	580b      	ldrlt	r3, [r1, r0]
 8007128:	18c0      	addlt	r0, r0, r3
 800712a:	4770      	bx	lr

0800712c <_init>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr

08007138 <_fini>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr
