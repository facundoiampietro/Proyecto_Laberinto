
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000716c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080072fc  080072fc  000082fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a0  080073a0  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080073a0  080073a0  000083a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a8  080073a8  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a8  080073a8  000083a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073ac  080073ac  000083ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080073b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          000003a8  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e978  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8f  00000000  00000000  00017a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000199a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  0001a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022702  00000000  00000000  0001b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010409  00000000  00000000  0003da2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d876a  00000000  00000000  0004de34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012659e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042a8  00000000  00000000  001265e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0012a88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072e4 	.word	0x080072e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080072e4 	.word	0x080072e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bbc:	f002 f824 	bl	8002c08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc0:	f000 f9ce 	bl	8000f60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc4:	f000 fb62 	bl	800128c <MX_GPIO_Init>
	MX_DMA_Init();
 8000bc8:	f000 fb40 	bl	800124c <MX_DMA_Init>
	MX_ADC1_Init();
 8000bcc:	f000 fa32 	bl	8001034 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000bd0:	f000 fa90 	bl	80010f4 <MX_TIM3_Init>
	MX_UART5_Init();
 8000bd4:	f000 fb10 	bl	80011f8 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	499b      	ldr	r1, [pc, #620]	@ (8000e48 <main+0x290>)
 8000bdc:	489b      	ldr	r0, [pc, #620]	@ (8000e4c <main+0x294>)
 8000bde:	f002 f8ed 	bl	8002dbc <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000be2:	4b9b      	ldr	r3, [pc, #620]	@ (8000e50 <main+0x298>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000be8:	4b99      	ldr	r3, [pc, #612]	@ (8000e50 <main+0x298>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	739a      	strb	r2, [r3, #14]
 8000bee:	4b98      	ldr	r3, [pc, #608]	@ (8000e50 <main+0x298>)
 8000bf0:	7b9a      	ldrb	r2, [r3, #14]
 8000bf2:	4b97      	ldr	r3, [pc, #604]	@ (8000e50 <main+0x298>)
 8000bf4:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000bf6:	4b96      	ldr	r3, [pc, #600]	@ (8000e50 <main+0x298>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	4b94      	ldr	r3, [pc, #592]	@ (8000e50 <main+0x298>)
 8000bfe:	7b5a      	ldrb	r2, [r3, #13]
 8000c00:	4b93      	ldr	r3, [pc, #588]	@ (8000e50 <main+0x298>)
 8000c02:	729a      	strb	r2, [r3, #10]
 8000c04:	4b92      	ldr	r3, [pc, #584]	@ (8000e50 <main+0x298>)
 8000c06:	7a9a      	ldrb	r2, [r3, #10]
 8000c08:	4b91      	ldr	r3, [pc, #580]	@ (8000e50 <main+0x298>)
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000c0c:	4b90      	ldr	r3, [pc, #576]	@ (8000e50 <main+0x298>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	731a      	strb	r2, [r3, #12]
 8000c12:	4b8f      	ldr	r3, [pc, #572]	@ (8000e50 <main+0x298>)
 8000c14:	7b1a      	ldrb	r2, [r3, #12]
 8000c16:	4b8e      	ldr	r3, [pc, #568]	@ (8000e50 <main+0x298>)
 8000c18:	725a      	strb	r2, [r3, #9]
 8000c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e50 <main+0x298>)
 8000c1c:	7a5a      	ldrb	r2, [r3, #9]
 8000c1e:	4b8c      	ldr	r3, [pc, #560]	@ (8000e50 <main+0x298>)
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	4b8b      	ldr	r3, [pc, #556]	@ (8000e50 <main+0x298>)
 8000c24:	799a      	ldrb	r2, [r3, #6]
 8000c26:	4b8a      	ldr	r3, [pc, #552]	@ (8000e50 <main+0x298>)
 8000c28:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000c2a:	4b89      	ldr	r3, [pc, #548]	@ (8000e50 <main+0x298>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	721a      	strb	r2, [r3, #8]
 8000c30:	4b87      	ldr	r3, [pc, #540]	@ (8000e50 <main+0x298>)
 8000c32:	7a1a      	ldrb	r2, [r3, #8]
 8000c34:	4b86      	ldr	r3, [pc, #536]	@ (8000e50 <main+0x298>)
 8000c36:	715a      	strb	r2, [r3, #5]
 8000c38:	4b85      	ldr	r3, [pc, #532]	@ (8000e50 <main+0x298>)
 8000c3a:	795a      	ldrb	r2, [r3, #5]
 8000c3c:	4b84      	ldr	r3, [pc, #528]	@ (8000e50 <main+0x298>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000c40:	4b83      	ldr	r3, [pc, #524]	@ (8000e50 <main+0x298>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	711a      	strb	r2, [r3, #4]
 8000c46:	4b82      	ldr	r3, [pc, #520]	@ (8000e50 <main+0x298>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b81      	ldr	r3, [pc, #516]	@ (8000e50 <main+0x298>)
 8000c4c:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000c4e:	4b80      	ldr	r3, [pc, #512]	@ (8000e50 <main+0x298>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000c54:	4b7f      	ldr	r3, [pc, #508]	@ (8000e54 <main+0x29c>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000c5a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e54 <main+0x29c>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b7c      	ldr	r3, [pc, #496]	@ (8000e54 <main+0x29c>)
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b7b      	ldr	r3, [pc, #492]	@ (8000e54 <main+0x29c>)
 8000c66:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000c68:	4b7a      	ldr	r3, [pc, #488]	@ (8000e54 <main+0x29c>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000c6e:	4b79      	ldr	r3, [pc, #484]	@ (8000e54 <main+0x29c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	72da      	strb	r2, [r3, #11]
 8000c74:	4b77      	ldr	r3, [pc, #476]	@ (8000e54 <main+0x29c>)
 8000c76:	7ada      	ldrb	r2, [r3, #11]
 8000c78:	4b76      	ldr	r3, [pc, #472]	@ (8000e54 <main+0x29c>)
 8000c7a:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000c7c:	4b75      	ldr	r3, [pc, #468]	@ (8000e54 <main+0x29c>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000c82:	4b74      	ldr	r3, [pc, #464]	@ (8000e54 <main+0x29c>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	735a      	strb	r2, [r3, #13]
 8000c88:	4b72      	ldr	r3, [pc, #456]	@ (8000e54 <main+0x29c>)
 8000c8a:	7b5a      	ldrb	r2, [r3, #13]
 8000c8c:	4b71      	ldr	r3, [pc, #452]	@ (8000e54 <main+0x29c>)
 8000c8e:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000c90:	4b70      	ldr	r3, [pc, #448]	@ (8000e54 <main+0x29c>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000c96:	4b6f      	ldr	r3, [pc, #444]	@ (8000e54 <main+0x29c>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	721a      	strb	r2, [r3, #8]
 8000c9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000e54 <main+0x29c>)
 8000c9e:	7a1a      	ldrb	r2, [r3, #8]
 8000ca0:	4b6c      	ldr	r3, [pc, #432]	@ (8000e54 <main+0x29c>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e54 <main+0x29c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
 8000caa:	4b6a      	ldr	r3, [pc, #424]	@ (8000e54 <main+0x29c>)
 8000cac:	7a9a      	ldrb	r2, [r3, #10]
 8000cae:	4b69      	ldr	r3, [pc, #420]	@ (8000e54 <main+0x29c>)
 8000cb0:	725a      	strb	r2, [r3, #9]
 8000cb2:	4b68      	ldr	r3, [pc, #416]	@ (8000e54 <main+0x29c>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b67      	ldr	r3, [pc, #412]	@ (8000e54 <main+0x29c>)
 8000cb8:	719a      	strb	r2, [r3, #6]
 8000cba:	4b66      	ldr	r3, [pc, #408]	@ (8000e54 <main+0x29c>)
 8000cbc:	799a      	ldrb	r2, [r3, #6]
 8000cbe:	4b65      	ldr	r3, [pc, #404]	@ (8000e54 <main+0x29c>)
 8000cc0:	715a      	strb	r2, [r3, #5]

	girando = 0;
 8000cc2:	4b65      	ldr	r3, [pc, #404]	@ (8000e58 <main+0x2a0>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	4863      	ldr	r0, [pc, #396]	@ (8000e5c <main+0x2a4>)
 8000cd0:	f003 fafa 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cda:	4860      	ldr	r0, [pc, #384]	@ (8000e5c <main+0x2a4>)
 8000cdc:	f003 faf4 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	485d      	ldr	r0, [pc, #372]	@ (8000e5c <main+0x2a4>)
 8000ce8:	f003 faee 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	485a      	ldr	r0, [pc, #360]	@ (8000e5c <main+0x2a4>)
 8000cf4:	f003 fae8 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4859      	ldr	r0, [pc, #356]	@ (8000e60 <main+0x2a8>)
 8000cfc:	f004 f856 	bl	8004dac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000d00:	210c      	movs	r1, #12
 8000d02:	4857      	ldr	r0, [pc, #348]	@ (8000e60 <main+0x2a8>)
 8000d04:	f004 f852 	bl	8004dac <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_min; // rueda a velocidad media (condigurable)
 8000d08:	4b56      	ldr	r3, [pc, #344]	@ (8000e64 <main+0x2ac>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_min; // rueda a velocidad media
 8000d0e:	4b55      	ldr	r3, [pc, #340]	@ (8000e64 <main+0x2ac>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1a:	4853      	ldr	r0, [pc, #332]	@ (8000e68 <main+0x2b0>)
 8000d1c:	f003 fad4 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d26:	4850      	ldr	r0, [pc, #320]	@ (8000e68 <main+0x2b0>)
 8000d28:	f003 face 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d32:	484d      	ldr	r0, [pc, #308]	@ (8000e68 <main+0x2b0>)
 8000d34:	f003 fac8 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d3e:	484a      	ldr	r0, [pc, #296]	@ (8000e68 <main+0x2b0>)
 8000d40:	f003 fac2 	bl	80042c8 <HAL_GPIO_WritePin>

	ubicacion = 0;
 8000d44:	4b49      	ldr	r3, [pc, #292]	@ (8000e6c <main+0x2b4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	uart_llegada = 0;
 8000d4a:	4b49      	ldr	r3, [pc, #292]	@ (8000e70 <main+0x2b8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]

	prueba = 6; //Aca se elige que programa queremos que se realice
 8000d50:	4b48      	ldr	r3, [pc, #288]	@ (8000e74 <main+0x2bc>)
 8000d52:	2206      	movs	r2, #6
 8000d54:	701a      	strb	r2, [r3, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		switch (prueba) {
 8000d56:	4b47      	ldr	r3, [pc, #284]	@ (8000e74 <main+0x2bc>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b0c      	cmp	r3, #12
 8000d5c:	d8fb      	bhi.n	8000d56 <main+0x19e>
 8000d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <main+0x1ac>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d99 	.word	0x08000d99
 8000d68:	08000d57 	.word	0x08000d57
 8000d6c:	08000d57 	.word	0x08000d57
 8000d70:	08000d57 	.word	0x08000d57
 8000d74:	08000d9f 	.word	0x08000d9f
 8000d78:	08000db1 	.word	0x08000db1
 8000d7c:	08000dcf 	.word	0x08000dcf
 8000d80:	08000d57 	.word	0x08000d57
 8000d84:	08000d57 	.word	0x08000d57
 8000d88:	08000d57 	.word	0x08000d57
 8000d8c:	08000df9 	.word	0x08000df9
 8000d90:	08000e89 	.word	0x08000e89
 8000d94:	08000f31 	.word	0x08000f31

		case 0: {
			prueba_avanzar();
 8000d98:	f000 fce8 	bl	800176c <prueba_avanzar>
			break;
 8000d9c:	e0cc      	b.n	8000f38 <main+0x380>
		}
		case 4: {
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da4:	4830      	ldr	r0, [pc, #192]	@ (8000e68 <main+0x2b0>)
 8000da6:	f003 fa8f 	bl	80042c8 <HAL_GPIO_WritePin>
			programa_principal();
 8000daa:	f000 fce5 	bl	8001778 <programa_principal>
			break;
 8000dae:	e0c3      	b.n	8000f38 <main+0x380>
		}
		case 5: {
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000db6:	482c      	ldr	r0, [pc, #176]	@ (8000e68 <main+0x2b0>)
 8000db8:	f003 fa86 	bl	80042c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dc2:	4829      	ldr	r0, [pc, #164]	@ (8000e68 <main+0x2b0>)
 8000dc4:	f003 fa80 	bl	80042c8 <HAL_GPIO_WritePin>
			ajuste_automatico();
 8000dc8:	f000 fbfe 	bl	80015c8 <ajuste_automatico>
			break;
 8000dcc:	e0b4      	b.n	8000f38 <main+0x380>
		}
		case 6: {
			sensor_izq_min = 32700;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	@ (8000e78 <main+0x2c0>)
 8000dd0:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000dd4:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000dd6:	4b29      	ldr	r3, [pc, #164]	@ (8000e7c <main+0x2c4>)
 8000dd8:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000ddc:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000dde:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <main+0x2c8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000de4:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <main+0x2cc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	801a      	strh	r2, [r3, #0]
			ubicacion=0;
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <main+0x2b4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
			prueba = 5;
 8000df0:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <main+0x2bc>)
 8000df2:	2205      	movs	r2, #5
 8000df4:	701a      	strb	r2, [r3, #0]
			break;
 8000df6:	e09f      	b.n	8000f38 <main+0x380>
		}
		case 10:
			TIM3->CCR3 = 0;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <main+0x2ac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000dfe:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <main+0x2ac>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e0a:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <main+0x2b0>)
 8000e0c:	f003 fa5c 	bl	80042c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e16:	4814      	ldr	r0, [pc, #80]	@ (8000e68 <main+0x2b0>)
 8000e18:	f003 fa56 	bl	80042c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e22:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <main+0x2b0>)
 8000e24:	f003 fa50 	bl	80042c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2e:	480e      	ldr	r0, [pc, #56]	@ (8000e68 <main+0x2b0>)
 8000e30:	f003 fa4a 	bl	80042c8 <HAL_GPIO_WritePin>
			envio_llegada();
 8000e34:	f001 fc1a 	bl	800266c <envio_llegada>
			 prueba = 4;
			 HAL_Delay(5000);

			 }
			 } */
			HAL_Delay(3000); //escpera 5 segundos... suspenso
 8000e38:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e3c:	f001 ff56 	bl	8002cec <HAL_Delay>
			prueba = 11;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <main+0x2bc>)
 8000e42:	220b      	movs	r2, #11
 8000e44:	701a      	strb	r2, [r3, #0]
			break;
 8000e46:	e077      	b.n	8000f38 <main+0x380>
 8000e48:	20000238 	.word	0x20000238
 8000e4c:	20000080 	.word	0x20000080
 8000e50:	200001dc 	.word	0x200001dc
 8000e54:	200001ec 	.word	0x200001ec
 8000e58:	2000022c 	.word	0x2000022c
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	20000128 	.word	0x20000128
 8000e64:	40000400 	.word	0x40000400
 8000e68:	40020c00 	.word	0x40020c00
 8000e6c:	200001d8 	.word	0x200001d8
 8000e70:	200001ff 	.word	0x200001ff
 8000e74:	200001fd 	.word	0x200001fd
 8000e78:	20000002 	.word	0x20000002
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	20000200 	.word	0x20000200
 8000e84:	20000202 	.word	0x20000202
		case 11:
			eliminar_repetidos(camino_solucion, contador_casillas);
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <main+0x384>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	482c      	ldr	r0, [pc, #176]	@ (8000f40 <main+0x388>)
 8000e90:	f000 fac8 	bl	8001424 <eliminar_repetidos>
			contador_casillas = contador_casillas - 1;
 8000e94:	4b29      	ldr	r3, [pc, #164]	@ (8000f3c <main+0x384>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <main+0x384>)
 8000e9e:	701a      	strb	r2, [r3, #0]

			contador_giros = 0;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <main+0x38c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
			ubicacion = casilla_n = camino_solucion[contador_casillas];
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <main+0x384>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <main+0x388>)
 8000eae:	5c9a      	ldrb	r2, [r3, r2]
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <main+0x390>)
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <main+0x390>)
 8000eb6:	781a      	ldrb	r2, [r3, #0]
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <main+0x394>)
 8000eba:	701a      	strb	r2, [r3, #0]
			envio_ubicacion(ubicacion, casilla_n);
 8000ebc:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <main+0x394>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4a21      	ldr	r2, [pc, #132]	@ (8000f48 <main+0x390>)
 8000ec2:	7812      	ldrb	r2, [r2, #0]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fb76 	bl	80025b8 <envio_ubicacion>
			casilla_n = camino_solucion[contador_casillas]; //calcula la casilla a la que hay q ir
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <main+0x384>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <main+0x388>)
 8000ed4:	5c9a      	ldrb	r2, [r3, r2]
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <main+0x390>)
 8000ed8:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000eda:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <main+0x394>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4a1a      	ldr	r2, [pc, #104]	@ (8000f48 <main+0x390>)
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 fd31 	bl	800194c <obtener_orientacion_futura>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <main+0x398>)
 8000ef0:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <main+0x39c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <main+0x398>)
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fd51 	bl	80019a4 <obtenerGiro>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <main+0x3a0>)
 8000f08:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <main+0x398>)
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <main+0x39c>)
 8000f10:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 8000f12:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <main+0x3a0>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fed4 	bl	8001cc4 <ejecutarGiro>

			contador_casillas = contador_casillas - 1;
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <main+0x384>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <main+0x384>)
 8000f26:	701a      	strb	r2, [r3, #0]

			prueba = 12;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <main+0x3a4>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	701a      	strb	r2, [r3, #0]
			break;
 8000f2e:	e003      	b.n	8000f38 <main+0x380>
		case 12:
			de_reversa_mami();
 8000f30:	f000 fac8 	bl	80014c4 <de_reversa_mami>
			break;
 8000f34:	bf00      	nop
 8000f36:	e70e      	b.n	8000d56 <main+0x19e>
		switch (prueba) {
 8000f38:	e70d      	b.n	8000d56 <main+0x19e>
 8000f3a:	bf00      	nop
 8000f3c:	200001fc 	.word	0x200001fc
 8000f40:	2000020c 	.word	0x2000020c
 8000f44:	200001fe 	.word	0x200001fe
 8000f48:	20000000 	.word	0x20000000
 8000f4c:	200001d8 	.word	0x200001d8
 8000f50:	200001da 	.word	0x200001da
 8000f54:	200001d9 	.word	0x200001d9
 8000f58:	200001db 	.word	0x200001db
 8000f5c:	200001fd 	.word	0x200001fd

08000f60 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	@ 0x50
 8000f64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	@ 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f005 fd3a 	bl	80069e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b28      	ldr	r3, [pc, #160]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a27      	ldr	r2, [pc, #156]	@ (800102c <SystemClock_Config+0xcc>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a21      	ldr	r2, [pc, #132]	@ (8001030 <SystemClock_Config+0xd0>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2310      	movs	r3, #16
 8000fc6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000fd4:	2332      	movs	r3, #50	@ 0x32
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000fe0:	f107 0320 	add.w	r3, r7, #32
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 f9a1 	bl	800432c <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x94>
		Error_Handler();
 8000ff0:	f001 fbdc 	bl	80027ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001000:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001004:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800100a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f003 fc02 	bl	800481c <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc2>
		Error_Handler();
 800101e:	f001 fbc5 	bl	80027ac <Error_Handler>
	}
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001046:	4b28      	ldr	r3, [pc, #160]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001048:	4a28      	ldr	r2, [pc, #160]	@ (80010ec <MX_ADC1_Init+0xb8>)
 800104a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800104c:	4b26      	ldr	r3, [pc, #152]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 800104e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001052:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001054:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 800105a:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 800105c:	2201      	movs	r2, #1
 800105e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001060:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001062:	2201      	movs	r2, #1
 8001064:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001066:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800106e:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001070:	2200      	movs	r2, #0
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001076:	4a1e      	ldr	r2, [pc, #120]	@ (80010f0 <MX_ADC1_Init+0xbc>)
 8001078:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001082:	2202      	movs	r2, #2
 8001084:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001094:	4814      	ldr	r0, [pc, #80]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 8001096:	f001 fe4d 	bl	8002d34 <HAL_ADC_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x70>
		Error_Handler();
 80010a0:	f001 fb84 	bl	80027ac <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80010a4:	2309      	movs	r3, #9
 80010a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 80010b6:	f001 ff9f 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0x90>
		Error_Handler();
 80010c0:	f001 fb74 	bl	80027ac <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 80010c4:	2308      	movs	r3, #8
 80010c6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_ADC1_Init+0xb4>)
 80010d2:	f001 ff91 	bl	8002ff8 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0xac>
		Error_Handler();
 80010dc:	f001 fb66 	bl	80027ac <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000080 	.word	0x20000080
 80010ec:	40012000 	.word	0x40012000
 80010f0:	0f000001 	.word	0x0f000001

080010f4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	@ 0x38
 80010f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80010fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001108:	f107 0320 	add.w	r3, r7, #32
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001124:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001126:	4a33      	ldr	r2, [pc, #204]	@ (80011f4 <MX_TIM3_Init+0x100>)
 8001128:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800112a:	4b31      	ldr	r3, [pc, #196]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8001136:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001138:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800113c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	4b2c      	ldr	r3, [pc, #176]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800114a:	4829      	ldr	r0, [pc, #164]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 800114c:	f003 fd86 	bl	8004c5c <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0x66>
		Error_Handler();
 8001156:	f001 fb29 	bl	80027ac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001160:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001164:	4619      	mov	r1, r3
 8001166:	4822      	ldr	r0, [pc, #136]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001168:	f003 ffaa 	bl	80050c0 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM3_Init+0x82>
		Error_Handler();
 8001172:	f001 fb1b 	bl	80027ac <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001176:	481e      	ldr	r0, [pc, #120]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001178:	f003 fdbf 	bl	8004cfa <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x92>
		Error_Handler();
 8001182:	f001 fb13 	bl	80027ac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	4619      	mov	r1, r3
 8001194:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 8001196:	f004 fb71 	bl	800587c <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM3_Init+0xb0>
		Error_Handler();
 80011a0:	f001 fb04 	bl	80027ac <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	@ 0x60
 80011a6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2208      	movs	r2, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 80011bc:	f003 febe 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM3_Init+0xd6>
		Error_Handler();
 80011c6:	f001 faf1 	bl	80027ac <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	220c      	movs	r2, #12
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 80011d2:	f003 feb3 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0xec>
		Error_Handler();
 80011dc:	f001 fae6 	bl	80027ac <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM3_Init+0xfc>)
 80011e2:	f001 fbab 	bl	800293c <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3738      	adds	r7, #56	@ 0x38
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000128 	.word	0x20000128
 80011f4:	40000400 	.word	0x40000400

080011f8 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80011fc:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_UART5_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	@ (8001248 <MX_UART5_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <MX_UART5_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <MX_UART5_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <MX_UART5_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <MX_UART5_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <MX_UART5_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	@ (8001244 <MX_UART5_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <MX_UART5_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800122e:	4805      	ldr	r0, [pc, #20]	@ (8001244 <MX_UART5_Init+0x4c>)
 8001230:	f004 fba0 	bl	8005974 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_UART5_Init+0x46>
		Error_Handler();
 800123a:	f001 fab7 	bl	80027ac <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000170 	.word	0x20000170
 8001248:	40005000 	.word	0x40005000

0800124c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <MX_DMA_Init+0x3c>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <MX_DMA_Init+0x3c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2038      	movs	r0, #56	@ 0x38
 8001274:	f002 fa3b 	bl	80036ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001278:	2038      	movs	r0, #56	@ 0x38
 800127a:	f002 fa54 	bl	8003726 <HAL_NVIC_EnableIRQ>

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b59      	ldr	r3, [pc, #356]	@ (800140c <MX_GPIO_Init+0x180>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a58      	ldr	r2, [pc, #352]	@ (800140c <MX_GPIO_Init+0x180>)
 80012ac:	f043 0310 	orr.w	r3, r3, #16
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b56      	ldr	r3, [pc, #344]	@ (800140c <MX_GPIO_Init+0x180>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b52      	ldr	r3, [pc, #328]	@ (800140c <MX_GPIO_Init+0x180>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a51      	ldr	r2, [pc, #324]	@ (800140c <MX_GPIO_Init+0x180>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b4f      	ldr	r3, [pc, #316]	@ (800140c <MX_GPIO_Init+0x180>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <MX_GPIO_Init+0x180>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a4a      	ldr	r2, [pc, #296]	@ (800140c <MX_GPIO_Init+0x180>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b48      	ldr	r3, [pc, #288]	@ (800140c <MX_GPIO_Init+0x180>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b44      	ldr	r3, [pc, #272]	@ (800140c <MX_GPIO_Init+0x180>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a43      	ldr	r2, [pc, #268]	@ (800140c <MX_GPIO_Init+0x180>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <MX_GPIO_Init+0x180>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <MX_GPIO_Init+0x180>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a3c      	ldr	r2, [pc, #240]	@ (800140c <MX_GPIO_Init+0x180>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b3a      	ldr	r3, [pc, #232]	@ (800140c <MX_GPIO_Init+0x180>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	4837      	ldr	r0, [pc, #220]	@ (8001410 <MX_GPIO_Init+0x184>)
 8001334:	f002 ffc8 	bl	80042c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800133e:	4835      	ldr	r0, [pc, #212]	@ (8001414 <MX_GPIO_Init+0x188>)
 8001340:	f002 ffc2 	bl	80042c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800134a:	4833      	ldr	r0, [pc, #204]	@ (8001418 <MX_GPIO_Init+0x18c>)
 800134c:	f002 ffbc 	bl	80042c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001350:	2308      	movs	r3, #8
 8001352:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001354:	2301      	movs	r3, #1
 8001356:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	482a      	ldr	r0, [pc, #168]	@ (8001410 <MX_GPIO_Init+0x184>)
 8001368:	f002 fdfa 	bl	8003f60 <HAL_GPIO_Init>

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 800136c:	2301      	movs	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4827      	ldr	r0, [pc, #156]	@ (800141c <MX_GPIO_Init+0x190>)
 8001380:	f002 fdee 	bl	8003f60 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin;
 8001384:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001388:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	481d      	ldr	r0, [pc, #116]	@ (8001414 <MX_GPIO_Init+0x188>)
 800139e:	f002 fddf 	bl	8003f60 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
	GPIO_InitStruct.Pin = led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin;
 80013a2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	4817      	ldr	r0, [pc, #92]	@ (8001418 <MX_GPIO_Init+0x18c>)
 80013bc:	f002 fdd0 	bl	8003f60 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_frontal_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin;
 80013c0:	2340      	movs	r3, #64	@ 0x40
 80013c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(sensor_frontal_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	@ (8001420 <MX_GPIO_Init+0x194>)
 80013d4:	f002 fdc4 	bl	8003f60 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_linea_Pin;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(sensor_linea_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_GPIO_Init+0x194>)
 80013ee:	f002 fdb7 	bl	8003f60 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2017      	movs	r0, #23
 80013f8:	f002 f979 	bl	80036ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013fc:	2017      	movs	r0, #23
 80013fe:	f002 f992 	bl	8003726 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	@ 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40021000 	.word	0x40021000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020c00 	.word	0x40020c00
 800141c:	40020000 	.word	0x40020000
 8001420:	40020800 	.word	0x40020800

08001424 <eliminar_repetidos>:

/* USER CODE BEGIN 4 */

void eliminar_repetidos(uint8_t *camino_solucion, uint8_t contador_casillas) {
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < contador_casillas - 1; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e039      	b.n	80014aa <eliminar_repetidos+0x86>
		for (int j = i + 1; j < contador_casillas; j++) {
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	e02e      	b.n	800149c <eliminar_repetidos+0x78>
			if (camino_solucion[i] == camino_solucion[j]) {
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	440b      	add	r3, r1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d121      	bne.n	8001496 <eliminar_repetidos+0x72>
				// Se encontró repetido: eliminar todo entre i+1 y j inclusive
				int cantidad_a_eliminar = j - i;
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	60bb      	str	r3, [r7, #8]

				for (int k = j; k < contador_casillas; k++) {
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e00d      	b.n	800147c <eliminar_repetidos+0x58>
					camino_solucion[k - cantidad_a_eliminar] = camino_solucion[k];
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	441a      	add	r2, r3
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1acb      	subs	r3, r1, r3
 800146c:	4619      	mov	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	440b      	add	r3, r1
 8001472:	7812      	ldrb	r2, [r2, #0]
 8001474:	701a      	strb	r2, [r3, #0]
				for (int k = j; k < contador_casillas; k++) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3301      	adds	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	dbed      	blt.n	8001460 <eliminar_repetidos+0x3c>
				}

				contador_casillas = contador_casillas - cantidad_a_eliminar;
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	78fa      	ldrb	r2, [r7, #3]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	70fb      	strb	r3, [r7, #3]
				i = -1;  // Reiniciar para volver a analizar todo desde el inicio
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	617b      	str	r3, [r7, #20]
				break;
 8001494:	e006      	b.n	80014a4 <eliminar_repetidos+0x80>
		for (int j = i + 1; j < contador_casillas; j++) {
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	3301      	adds	r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbcc      	blt.n	800143e <eliminar_repetidos+0x1a>
	for (int i = 0; i < contador_casillas - 1; i++) {
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	697a      	ldr	r2, [r7, #20]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	dbc0      	blt.n	8001436 <eliminar_repetidos+0x12>
			}
		}
	}

}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	371c      	adds	r7, #28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <de_reversa_mami>:

void de_reversa_mami(void) {  //codigo para ir de la casilla 15 a la 0... muy chiche
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0

	if (solicitud_linea == 1) { //cambio de casilla
 80014c8:	4b34      	ldr	r3, [pc, #208]	@ (800159c <de_reversa_mami+0xd8>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d153      	bne.n	800157a <de_reversa_mami+0xb6>
			contador_giros = 0;
 80014d2:	4b33      	ldr	r3, [pc, #204]	@ (80015a0 <de_reversa_mami+0xdc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
			contador_casillas = contador_casillas + 1;
 80014d8:	4b32      	ldr	r3, [pc, #200]	@ (80015a4 <de_reversa_mami+0xe0>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b30      	ldr	r3, [pc, #192]	@ (80015a4 <de_reversa_mami+0xe0>)
 80014e2:	701a      	strb	r2, [r3, #0]
			ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80014e4:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <de_reversa_mami+0xe4>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	4a30      	ldr	r2, [pc, #192]	@ (80015ac <de_reversa_mami+0xe8>)
 80014ea:	7812      	ldrb	r2, [r2, #0]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fa92 	bl	8001a18 <act_ubicacion>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <de_reversa_mami+0xe4>)
 80014fa:	701a      	strb	r2, [r3, #0]
			envio_ubicacion(ubicacion, casilla_n);
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <de_reversa_mami+0xe4>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4a2b      	ldr	r2, [pc, #172]	@ (80015b0 <de_reversa_mami+0xec>)
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f001 f856 	bl	80025b8 <envio_ubicacion>
			casilla_n = camino_solucion[contador_casillas]; //calcula la casilla a la que hay q ir
 800150c:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <de_reversa_mami+0xe0>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <de_reversa_mami+0xf0>)
 8001514:	5c9a      	ldrb	r2, [r3, r2]
 8001516:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <de_reversa_mami+0xec>)
 8001518:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 800151a:	4b25      	ldr	r3, [pc, #148]	@ (80015b0 <de_reversa_mami+0xec>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f8d2 	bl	80026c8 <envio_casilla_n>
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <de_reversa_mami+0xe4>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4a21      	ldr	r2, [pc, #132]	@ (80015b0 <de_reversa_mami+0xec>)
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fa0c 	bl	800194c <obtener_orientacion_futura>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <de_reversa_mami+0xf4>)
 800153a:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800153c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ac <de_reversa_mami+0xe8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <de_reversa_mami+0xf4>)
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fa2c 	bl	80019a4 <obtenerGiro>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <de_reversa_mami+0xf8>)
 8001552:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001554:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <de_reversa_mami+0xf4>)
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <de_reversa_mami+0xe8>)
 800155a:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <de_reversa_mami+0xf8>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fbaf 	bl	8001cc4 <ejecutarGiro>
			camino_solucion[contador_casillas] = ubicacion;
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <de_reversa_mami+0xe0>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <de_reversa_mami+0xe4>)
 800156e:	7819      	ldrb	r1, [r3, #0]
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <de_reversa_mami+0xf0>)
 8001572:	5499      	strb	r1, [r3, r2]
			solicitud_linea = 0;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <de_reversa_mami+0xd8>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
		}
	if (filtrado_linea == 1) {
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <de_reversa_mami+0xfc>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <de_reversa_mami+0xc4>
			filtrado_linea_funcion();
 8001584:	f001 f8cc 	bl	8002720 <filtrado_linea_funcion>
		}
	if (ubicacion == 0)
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <de_reversa_mami+0xe4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <de_reversa_mami+0xd2>
		prueba = 10;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <de_reversa_mami+0x100>)
 8001592:	220a      	movs	r2, #10
 8001594:	701a      	strb	r2, [r3, #0]
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000234 	.word	0x20000234
 80015a0:	200001fe 	.word	0x200001fe
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	200001d8 	.word	0x200001d8
 80015ac:	200001d9 	.word	0x200001d9
 80015b0:	20000000 	.word	0x20000000
 80015b4:	2000020c 	.word	0x2000020c
 80015b8:	200001da 	.word	0x200001da
 80015bc:	200001db 	.word	0x200001db
 80015c0:	20000235 	.word	0x20000235
 80015c4:	200001fd 	.word	0x200001fd

080015c8 <ajuste_automatico>:
void ajuste_automatico(void) {
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	af00      	add	r7, sp, #0

	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80015cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001740 <ajuste_automatico+0x178>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d003      	beq.n	80015dc <ajuste_automatico+0x14>
 80015d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001744 <ajuste_automatico+0x17c>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d107      	bne.n	80015ec <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80015dc:	4b58      	ldr	r3, [pc, #352]	@ (8001740 <ajuste_automatico+0x178>)
 80015de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80015e2:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80015e4:	4b57      	ldr	r3, [pc, #348]	@ (8001744 <ajuste_automatico+0x17c>)
 80015e6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80015ea:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80015ec:	4b54      	ldr	r3, [pc, #336]	@ (8001740 <ajuste_automatico+0x178>)
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <ajuste_automatico+0x180>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d904      	bls.n	8001604 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 80015fa:	4b53      	ldr	r3, [pc, #332]	@ (8001748 <ajuste_automatico+0x180>)
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b4f      	ldr	r3, [pc, #316]	@ (8001740 <ajuste_automatico+0x178>)
 8001602:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8001604:	4b4f      	ldr	r3, [pc, #316]	@ (8001744 <ajuste_automatico+0x17c>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	4b50      	ldr	r3, [pc, #320]	@ (800174c <ajuste_automatico+0x184>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	429a      	cmp	r2, r3
 8001610:	d904      	bls.n	800161c <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8001612:	4b4e      	ldr	r3, [pc, #312]	@ (800174c <ajuste_automatico+0x184>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <ajuste_automatico+0x17c>)
 800161a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 800161c:	4b4c      	ldr	r3, [pc, #304]	@ (8001750 <ajuste_automatico+0x188>)
 800161e:	881a      	ldrh	r2, [r3, #0]
 8001620:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <ajuste_automatico+0x180>)
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	429a      	cmp	r2, r3
 8001628:	d204      	bcs.n	8001634 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800162a:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <ajuste_automatico+0x180>)
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	b29a      	uxth	r2, r3
 8001630:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <ajuste_automatico+0x188>)
 8001632:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001634:	4b47      	ldr	r3, [pc, #284]	@ (8001754 <ajuste_automatico+0x18c>)
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	4b44      	ldr	r3, [pc, #272]	@ (800174c <ajuste_automatico+0x184>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	429a      	cmp	r2, r3
 8001640:	d204      	bcs.n	800164c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001642:	4b42      	ldr	r3, [pc, #264]	@ (800174c <ajuste_automatico+0x184>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <ajuste_automatico+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 800164c:	2101      	movs	r1, #1
 800164e:	4842      	ldr	r0, [pc, #264]	@ (8001758 <ajuste_automatico+0x190>)
 8001650:	f002 fe22 	bl	8004298 <HAL_GPIO_ReadPin>
 8001654:	4603      	mov	r3, r0
 8001656:	2b01      	cmp	r3, #1
 8001658:	d168      	bne.n	800172c <ajuste_automatico+0x164>
		HAL_Delay(40);
 800165a:	2028      	movs	r0, #40	@ 0x28
 800165c:	f001 fb46 	bl	8002cec <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001660:	2101      	movs	r1, #1
 8001662:	483d      	ldr	r0, [pc, #244]	@ (8001758 <ajuste_automatico+0x190>)
 8001664:	f002 fe18 	bl	8004298 <HAL_GPIO_ReadPin>
 8001668:	4603      	mov	r3, r0
 800166a:	2b01      	cmp	r3, #1
 800166c:	d15e      	bne.n	800172c <ajuste_automatico+0x164>
			margen_d = ((sensor_der_max * 0.6) + (sensor_der_min * 0.4));
 800166e:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <ajuste_automatico+0x188>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f880 	bl	8000778 <__aeabi_i2d>
 8001678:	a32d      	add	r3, pc, #180	@ (adr r3, 8001730 <ajuste_automatico+0x168>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe fdff 	bl	8000280 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4614      	mov	r4, r2
 8001688:	461d      	mov	r5, r3
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <ajuste_automatico+0x178>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f872 	bl	8000778 <__aeabi_i2d>
 8001694:	a328      	add	r3, pc, #160	@ (adr r3, 8001738 <ajuste_automatico+0x170>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fdf1 	bl	8000280 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe ff1b 	bl	80004e0 <__adddf3>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f8cb 	bl	800084c <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <ajuste_automatico+0x194>)
 80016bc:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.6) + (sensor_izq_min * 0.4));
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <ajuste_automatico+0x18c>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f858 	bl	8000778 <__aeabi_i2d>
 80016c8:	a319      	add	r3, pc, #100	@ (adr r3, 8001730 <ajuste_automatico+0x168>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fdd7 	bl	8000280 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <ajuste_automatico+0x17c>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff f84a 	bl	8000778 <__aeabi_i2d>
 80016e4:	a314      	add	r3, pc, #80	@ (adr r3, 8001738 <ajuste_automatico+0x170>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe fdc9 	bl	8000280 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fef3 	bl	80004e0 <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f8a3 	bl	800084c <__aeabi_d2uiz>
 8001706:	4603      	mov	r3, r0
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <ajuste_automatico+0x198>)
 800170c:	801a      	strh	r2, [r3, #0]
			prueba = 4;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <ajuste_automatico+0x19c>)
 8001710:	2204      	movs	r2, #4
 8001712:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800171a:	4813      	ldr	r0, [pc, #76]	@ (8001768 <ajuste_automatico+0x1a0>)
 800171c:	f002 fdd4 	bl	80042c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001726:	4810      	ldr	r0, [pc, #64]	@ (8001768 <ajuste_automatico+0x1a0>)
 8001728:	f002 fdce 	bl	80042c8 <HAL_GPIO_WritePin>
		}
	}
}
 800172c:	bf00      	nop
 800172e:	bdb0      	pop	{r4, r5, r7, pc}
 8001730:	33333333 	.word	0x33333333
 8001734:	3fe33333 	.word	0x3fe33333
 8001738:	9999999a 	.word	0x9999999a
 800173c:	3fd99999 	.word	0x3fd99999
 8001740:	20000004 	.word	0x20000004
 8001744:	20000002 	.word	0x20000002
 8001748:	200002ba 	.word	0x200002ba
 800174c:	200002b8 	.word	0x200002b8
 8001750:	20000202 	.word	0x20000202
 8001754:	20000200 	.word	0x20000200
 8001758:	40020000 	.word	0x40020000
 800175c:	20000206 	.word	0x20000206
 8001760:	20000204 	.word	0x20000204
 8001764:	200001fd 	.word	0x200001fd
 8001768:	40020c00 	.word	0x40020c00

0800176c <prueba_avanzar>:
	ejecutarGiro(izquierda);
	correccion_avanzar();
	while (1)
		;
}
void prueba_avanzar(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8001770:	f000 fa14 	bl	8001b9c <avanzar>
//	ejecutarGiro(izquierda);
//	ejecutarGiro(adelante);

	;
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <programa_principal>:
			pedido = true;
	}
	return pedido;
}

void programa_principal(void) {
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	correccion_avanzar();
 800177c:	f000 f9cc 	bl	8001b18 <correccion_avanzar>
	//avanzar();
	if (solicitud_linea == 1) { //cambio de casilla
 8001780:	4b64      	ldr	r3, [pc, #400]	@ (8001914 <programa_principal+0x19c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d15c      	bne.n	8001844 <programa_principal+0xcc>
		contador_giros = 0;
 800178a:	4b63      	ldr	r3, [pc, #396]	@ (8001918 <programa_principal+0x1a0>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 8001790:	4b62      	ldr	r3, [pc, #392]	@ (800191c <programa_principal+0x1a4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b60      	ldr	r3, [pc, #384]	@ (800191c <programa_principal+0x1a4>)
 800179a:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800179c:	4b60      	ldr	r3, [pc, #384]	@ (8001920 <programa_principal+0x1a8>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4a60      	ldr	r2, [pc, #384]	@ (8001924 <programa_principal+0x1ac>)
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f936 	bl	8001a18 <act_ubicacion>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <programa_principal+0x1a8>)
 80017b2:	701a      	strb	r2, [r3, #0]
		envio_ubicacion(ubicacion, casilla_n);
 80017b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001920 <programa_principal+0x1a8>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4a5b      	ldr	r2, [pc, #364]	@ (8001928 <programa_principal+0x1b0>)
 80017ba:	7812      	ldrb	r2, [r2, #0]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fefa 	bl	80025b8 <envio_ubicacion>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80017c4:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <programa_principal+0x1a8>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b56      	ldr	r3, [pc, #344]	@ (8001924 <programa_principal+0x1ac>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4957      	ldr	r1, [pc, #348]	@ (800192c <programa_principal+0x1b4>)
 80017ce:	4858      	ldr	r0, [pc, #352]	@ (8001930 <programa_principal+0x1b8>)
 80017d0:	f000 fc84 	bl	80020dc <calculo_minimo_peso>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <programa_principal+0x1b0>)
 80017da:	701a      	strb	r2, [r3, #0]
		envio_casilla_n(casilla_n);
 80017dc:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <programa_principal+0x1b0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 ff71 	bl	80026c8 <envio_casilla_n>
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80017e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001920 <programa_principal+0x1a8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001928 <programa_principal+0x1b0>)
 80017ec:	7812      	ldrb	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f8ab 	bl	800194c <obtener_orientacion_futura>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <programa_principal+0x1bc>)
 80017fc:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80017fe:	4b49      	ldr	r3, [pc, #292]	@ (8001924 <programa_principal+0x1ac>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4a4c      	ldr	r2, [pc, #304]	@ (8001934 <programa_principal+0x1bc>)
 8001804:	7812      	ldrb	r2, [r2, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f8cb 	bl	80019a4 <obtenerGiro>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b49      	ldr	r3, [pc, #292]	@ (8001938 <programa_principal+0x1c0>)
 8001814:	701a      	strb	r2, [r3, #0]
		if (ubicacion != 15){
 8001816:	4b42      	ldr	r3, [pc, #264]	@ (8001920 <programa_principal+0x1a8>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b0f      	cmp	r3, #15
 800181c:	d003      	beq.n	8001826 <programa_principal+0xae>
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 800181e:	4b45      	ldr	r3, [pc, #276]	@ (8001934 <programa_principal+0x1bc>)
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <programa_principal+0x1ac>)
 8001824:	701a      	strb	r2, [r3, #0]
		}
		ejecutarGiro(giro); //giro y me voy del if
 8001826:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <programa_principal+0x1c0>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fa4a 	bl	8001cc4 <ejecutarGiro>
		camino_solucion[contador_casillas] = ubicacion;
 8001830:	4b3a      	ldr	r3, [pc, #232]	@ (800191c <programa_principal+0x1a4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b3a      	ldr	r3, [pc, #232]	@ (8001920 <programa_principal+0x1a8>)
 8001838:	7819      	ldrb	r1, [r3, #0]
 800183a:	4b40      	ldr	r3, [pc, #256]	@ (800193c <programa_principal+0x1c4>)
 800183c:	5499      	strb	r1, [r3, r2]
		solicitud_linea = 0;
 800183e:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <programa_principal+0x19c>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8001844:	2140      	movs	r1, #64	@ 0x40
 8001846:	483e      	ldr	r0, [pc, #248]	@ (8001940 <programa_principal+0x1c8>)
 8001848:	f002 fd26 	bl	8004298 <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d14f      	bne.n	80018f2 <programa_principal+0x17a>
		HAL_Delay(tiempo_rebotes);
 8001852:	2014      	movs	r0, #20
 8001854:	f001 fa4a 	bl	8002cec <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8001858:	2140      	movs	r1, #64	@ 0x40
 800185a:	4839      	ldr	r0, [pc, #228]	@ (8001940 <programa_principal+0x1c8>)
 800185c:	f002 fd1c 	bl	8004298 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d145      	bne.n	80018f2 <programa_principal+0x17a>
			envio_pared();
 8001866:	f000 fedb 	bl	8002620 <envio_pared>
			//mini_avance();
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <programa_principal+0x1a8>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	4a2d      	ldr	r2, [pc, #180]	@ (8001924 <programa_principal+0x1ac>)
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4619      	mov	r1, r3
 8001874:	482d      	ldr	r0, [pc, #180]	@ (800192c <programa_principal+0x1b4>)
 8001876:	f000 fb3f 	bl	8001ef8 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 800187a:	492d      	ldr	r1, [pc, #180]	@ (8001930 <programa_principal+0x1b8>)
 800187c:	482b      	ldr	r0, [pc, #172]	@ (800192c <programa_principal+0x1b4>)
 800187e:	f000 fb8d 	bl	8001f9c <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8001882:	4b27      	ldr	r3, [pc, #156]	@ (8001920 <programa_principal+0x1a8>)
 8001884:	781a      	ldrb	r2, [r3, #0]
 8001886:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <programa_principal+0x1ac>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4928      	ldr	r1, [pc, #160]	@ (800192c <programa_principal+0x1b4>)
 800188c:	4828      	ldr	r0, [pc, #160]	@ (8001930 <programa_principal+0x1b8>)
 800188e:	f000 fc25 	bl	80020dc <calculo_minimo_peso>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b24      	ldr	r3, [pc, #144]	@ (8001928 <programa_principal+0x1b0>)
 8001898:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 800189a:	4b23      	ldr	r3, [pc, #140]	@ (8001928 <programa_principal+0x1b0>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 ff12 	bl	80026c8 <envio_casilla_n>
			//	envio_contador(contador_aux);
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80018a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <programa_principal+0x1a8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001928 <programa_principal+0x1b0>)
 80018aa:	7812      	ldrb	r2, [r2, #0]
 80018ac:	4611      	mov	r1, r2
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 f84c 	bl	800194c <obtener_orientacion_futura>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <programa_principal+0x1bc>)
 80018ba:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80018bc:	4b19      	ldr	r3, [pc, #100]	@ (8001924 <programa_principal+0x1ac>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001934 <programa_principal+0x1bc>)
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f86c 	bl	80019a4 <obtenerGiro>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <programa_principal+0x1c0>)
 80018d2:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <programa_principal+0x1bc>)
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <programa_principal+0x1ac>)
 80018da:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 80018dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <programa_principal+0x1a0>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <programa_principal+0x170>
				mini_retroceso();
 80018e4:	f000 f9d2 	bl	8001c8c <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 80018e8:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <programa_principal+0x1c0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 f9e9 	bl	8001cc4 <ejecutarGiro>
		}
	}
	if (filtrado_linea == 1) {
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <programa_principal+0x1cc>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <programa_principal+0x188>
		filtrado_linea_funcion();
 80018fc:	f000 ff10 	bl	8002720 <filtrado_linea_funcion>
	}
	if (ubicacion == 15) {
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <programa_principal+0x1a8>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d102      	bne.n	800190e <programa_principal+0x196>
		prueba = 10;
 8001908:	4b0f      	ldr	r3, [pc, #60]	@ (8001948 <programa_principal+0x1d0>)
 800190a:	220a      	movs	r2, #10
 800190c:	701a      	strb	r2, [r3, #0]
	}
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000234 	.word	0x20000234
 8001918:	200001fe 	.word	0x200001fe
 800191c:	200001fc 	.word	0x200001fc
 8001920:	200001d8 	.word	0x200001d8
 8001924:	200001d9 	.word	0x200001d9
 8001928:	20000000 	.word	0x20000000
 800192c:	200001ec 	.word	0x200001ec
 8001930:	200001dc 	.word	0x200001dc
 8001934:	200001da 	.word	0x200001da
 8001938:	200001db 	.word	0x200001db
 800193c:	2000020c 	.word	0x2000020c
 8001940:	40020800 	.word	0x40020800
 8001944:	20000235 	.word	0x20000235
 8001948:	200001fd 	.word	0x200001fd

0800194c <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion + 1)
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	3301      	adds	r3, #1
 8001962:	429a      	cmp	r2, r3
 8001964:	d101      	bne.n	800196a <obtener_orientacion_futura+0x1e>
		return oeste;
 8001966:	2303      	movs	r3, #3
 8001968:	e015      	b.n	8001996 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 800196a:	79ba      	ldrb	r2, [r7, #6]
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	3b01      	subs	r3, #1
 8001970:	429a      	cmp	r2, r3
 8001972:	d101      	bne.n	8001978 <obtener_orientacion_futura+0x2c>
		return este;
 8001974:	2301      	movs	r3, #1
 8001976:	e00e      	b.n	8001996 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8001978:	79ba      	ldrb	r2, [r7, #6]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	3304      	adds	r3, #4
 800197e:	429a      	cmp	r2, r3
 8001980:	d101      	bne.n	8001986 <obtener_orientacion_futura+0x3a>
		return norte;
 8001982:	2300      	movs	r3, #0
 8001984:	e007      	b.n	8001996 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8001986:	79ba      	ldrb	r2, [r7, #6]
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3b04      	subs	r3, #4
 800198c:	429a      	cmp	r2, r3
 800198e:	d101      	bne.n	8001994 <obtener_orientacion_futura+0x48>
		return sur;
 8001990:	2302      	movs	r3, #2
 8001992:	e000      	b.n	8001996 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8001994:	2364      	movs	r3, #100	@ 0x64
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	460a      	mov	r2, r1
 80019ae:	71fb      	strb	r3, [r7, #7]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 80019b4:	79ba      	ldrb	r2, [r7, #6]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	3304      	adds	r3, #4
 80019bc:	425a      	negs	r2, r3
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	f002 0203 	and.w	r2, r2, #3
 80019c6:	bf58      	it	pl
 80019c8:	4253      	negpl	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
	if (ubicacion == 15){
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <obtenerGiro+0x70>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d101      	bne.n	80019d8 <obtenerGiro+0x34>
		return adelante;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e016      	b.n	8001a06 <obtenerGiro+0x62>
	}
	switch (diferencia) {
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d812      	bhi.n	8001a04 <obtenerGiro+0x60>
 80019de:	a201      	add	r2, pc, #4	@ (adr r2, 80019e4 <obtenerGiro+0x40>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019f9 	.word	0x080019f9
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a01 	.word	0x08001a01
	case 0:
		return adelante;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e006      	b.n	8001a06 <obtenerGiro+0x62>
	case 1:
		return derecha;
 80019f8:	2302      	movs	r3, #2
 80019fa:	e004      	b.n	8001a06 <obtenerGiro+0x62>
	case 2:
		return giro_180;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e002      	b.n	8001a06 <obtenerGiro+0x62>
	case 3:
		return izquierda;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <obtenerGiro+0x62>
	default:
		return 100; // Error
 8001a04:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	200001d8 	.word	0x200001d8

08001a18 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d81a      	bhi.n	8001a64 <act_ubicacion+0x4c>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <act_ubicacion+0x1c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a4d 	.word	0x08001a4d
 8001a3c:	08001a55 	.word	0x08001a55
 8001a40:	08001a5d 	.word	0x08001a5d
	case 0:
		return ubicacion + 4;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	3304      	adds	r3, #4
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	e00c      	b.n	8001a66 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	e008      	b.n	8001a66 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	3b04      	subs	r3, #4
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	e004      	b.n	8001a66 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e000      	b.n	8001a66 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8001a64:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop

08001a74 <promediar>:

void promediar(uint16_t *buffer) {
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e012      	b.n	8001ab0 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	4413      	add	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	dde9      	ble.n	8001a8a <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b06      	ldr	r3, [pc, #24]	@ (8001ad8 <promediar+0x64>)
 8001abe:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <promediar+0x68>)
 8001ac8:	801a      	strh	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200002b8 	.word	0x200002b8
 8001adc:	200002ba 	.word	0x200002ba

08001ae0 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001aea:	f7ff ffc3 	bl	8001a74 <promediar>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000238 	.word	0x20000238

08001afc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <HAL_ADC_ConvCpltCallback+0x18>)
 8001b06:	f7ff ffb5 	bl	8001a74 <promediar>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000278 	.word	0x20000278

08001b18 <correccion_avanzar>:
void correccion_avanzar(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo //auto demian
		if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <correccion_avanzar+0x74>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <correccion_avanzar+0x78>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d209      	bcs.n	8001b3e <correccion_avanzar+0x26>
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <correccion_avanzar+0x7c>)
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <correccion_avanzar+0x80>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d202      	bcs.n	8001b3e <correccion_avanzar+0x26>
	 apagar_izquierda();  // apagar motor derecho
 8001b38:	f000 f858 	bl	8001bec <apagar_izquierda>
 8001b3c:	e024      	b.n	8001b88 <correccion_avanzar+0x70>
	 } else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001b3e:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <correccion_avanzar+0x78>)
 8001b40:	881a      	ldrh	r2, [r3, #0]
 8001b42:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <correccion_avanzar+0x74>)
 8001b44:	881b      	ldrh	r3, [r3, #0]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d209      	bcs.n	8001b60 <correccion_avanzar+0x48>
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <correccion_avanzar+0x80>)
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <correccion_avanzar+0x7c>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d202      	bcs.n	8001b60 <correccion_avanzar+0x48>
	 apagar_derecha();  //apaga motor izquierdo
 8001b5a:	f000 f86f 	bl	8001c3c <apagar_derecha>
 8001b5e:	e013      	b.n	8001b88 <correccion_avanzar+0x70>
	 } else if ((margen_i > sensor_izq_avg) && (sensor_der_avg < margen_d)){
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <correccion_avanzar+0x78>)
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	4b09      	ldr	r3, [pc, #36]	@ (8001b8c <correccion_avanzar+0x74>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d909      	bls.n	8001b82 <correccion_avanzar+0x6a>
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <correccion_avanzar+0x80>)
 8001b70:	881b      	ldrh	r3, [r3, #0]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <correccion_avanzar+0x7c>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d202      	bcs.n	8001b82 <correccion_avanzar+0x6a>
	 avanzar();
 8001b7c:	f000 f80e 	bl	8001b9c <avanzar>
 8001b80:	e002      	b.n	8001b88 <correccion_avanzar+0x70>
	 } else {
	 avanzar();
 8001b82:	f000 f80b 	bl	8001b9c <avanzar>
		avanzar();
	} else {
		avanzar();
	}
	*/
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200002b8 	.word	0x200002b8
 8001b90:	20000204 	.word	0x20000204
 8001b94:	20000206 	.word	0x20000206
 8001b98:	200002ba 	.word	0x200002ba

08001b9c <avanzar>:
void avanzar(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ba6:	480f      	ldr	r0, [pc, #60]	@ (8001be4 <avanzar+0x48>)
 8001ba8:	f002 fb8e 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <avanzar+0x48>)
 8001bb4:	f002 fb88 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bbe:	4809      	ldr	r0, [pc, #36]	@ (8001be4 <avanzar+0x48>)
 8001bc0:	f002 fb82 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bca:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <avanzar+0x48>)
 8001bcc:	f002 fb7c 	bl	80042c8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <avanzar+0x4c>)
 8001bd2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <avanzar+0x4c>)
 8001bda:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40000400 	.word	0x40000400

08001bec <apagar_izquierda>:

void apagar_izquierda(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bf6:	480f      	ldr	r0, [pc, #60]	@ (8001c34 <apagar_izquierda+0x48>)
 8001bf8:	f002 fb66 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c02:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <apagar_izquierda+0x48>)
 8001c04:	f002 fb60 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c0e:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <apagar_izquierda+0x48>)
 8001c10:	f002 fb5a 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c1a:	4806      	ldr	r0, [pc, #24]	@ (8001c34 <apagar_izquierda+0x48>)
 8001c1c:	f002 fb54 	bl	80042c8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <apagar_izquierda+0x4c>)
 8001c22:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c26:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_min; // rueda a velocidad media
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <apagar_izquierda+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40000400 	.word	0x40000400

08001c3c <apagar_derecha>:

void apagar_derecha(void) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c46:	480f      	ldr	r0, [pc, #60]	@ (8001c84 <apagar_derecha+0x48>)
 8001c48:	f002 fb3e 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c52:	480c      	ldr	r0, [pc, #48]	@ (8001c84 <apagar_derecha+0x48>)
 8001c54:	f002 fb38 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c5e:	4809      	ldr	r0, [pc, #36]	@ (8001c84 <apagar_derecha+0x48>)
 8001c60:	f002 fb32 	bl	80042c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c6a:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <apagar_derecha+0x48>)
 8001c6c:	f002 fb2c 	bl	80042c8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_min; // rueda a velocidad media (condigurable)
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <apagar_derecha+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <apagar_derecha+0x4c>)
 8001c78:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 8001c7c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40000400 	.word	0x40000400

08001c8c <mini_retroceso>:

void mini_retroceso(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001c90:	2002      	movs	r0, #2
 8001c92:	f000 f8cd 	bl	8001e30 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001c96:	2002      	movs	r0, #2
 8001c98:	f000 f8fc 	bl	8001e94 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001c9c:	2064      	movs	r0, #100	@ 0x64
 8001c9e:	f001 f825 	bl	8002cec <HAL_Delay>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <mini_avance>:
void mini_avance(void) {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 f8c0 	bl	8001e30 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f8ef 	bl	8001e94 <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001cb6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001cba:	f001 f817 	bl	8002cec <HAL_Delay>
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]

	switch (giro) {
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	f200 80a4 	bhi.w	8001e1e <ejecutarGiro+0x15a>
 8001cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cdc <ejecutarGiro+0x18>)
 8001cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cdc:	08001ced 	.word	0x08001ced
 8001ce0:	08001d73 	.word	0x08001d73
 8001ce4:	08001cf3 	.word	0x08001cf3
 8001ce8:	08001df5 	.word	0x08001df5
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001cec:	f7ff ffdb 	bl	8001ca6 <mini_avance>
		break;
 8001cf0:	e095      	b.n	8001e1e <ejecutarGiro+0x15a>
	case derecha:
		if (contador_giros == 0) {
 8001cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8001e28 <ejecutarGiro+0x164>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d126      	bne.n	8001d48 <ejecutarGiro+0x84>
			contador_giros = contador_giros + 1;
 8001cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001e28 <ejecutarGiro+0x164>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b49      	ldr	r3, [pc, #292]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d04:	701a      	strb	r2, [r3, #0]
			mini_avance();
 8001d06:	f7ff ffce 	bl	8001ca6 <mini_avance>
			setMotorIzquierdo(avance);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 f890 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 f8bf 	bl	8001e94 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001d16:	20c8      	movs	r0, #200	@ 0xc8
 8001d18:	f000 ffe8 	bl	8002cec <HAL_Delay>
			setMotorIzquierdo(avance);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f000 f887 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001d22:	2002      	movs	r0, #2
 8001d24:	f000 f8b6 	bl	8001e94 <setMotorDerecho>
			if (ultima_rueda_apagada_d) {
 8001d28:	4b40      	ldr	r3, [pc, #256]	@ (8001e2c <ejecutarGiro+0x168>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <ejecutarGiro+0x76>
				HAL_Delay(tiempo_giro90_der_min); //si ultima_rueda_apagada_d es true significa q la ultima rueda q se apago es la derecha, es decir q estará inclinado hacia la derecha. por lo q si quiere ir a la derecha, necesita un valor minimo de giro
 8001d30:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8001d34:	f000 ffda 	bl	8002cec <HAL_Delay>
 8001d38:	e003      	b.n	8001d42 <ejecutarGiro+0x7e>
			} else {
				HAL_Delay(tiempo_giro90_der_max); //caso opuesto al anterior, la ultima rueda q se apago es la izq, se inclina hacia de izquierda por lo q necesita un valor max
 8001d3a:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001d3e:	f000 ffd5 	bl	8002cec <HAL_Delay>
			}

			mini_avance();
 8001d42:	f7ff ffb0 	bl	8001ca6 <mini_avance>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001d46:	e06a      	b.n	8001e1e <ejecutarGiro+0x15a>
			contador_giros = contador_giros + 1;
 8001d48:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b35      	ldr	r3, [pc, #212]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d52:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001d54:	f7ff ff9a 	bl	8001c8c <mini_retroceso>
			setMotorIzquierdo(avance);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f000 f869 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f000 f898 	bl	8001e94 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001d64:	f240 208a 	movw	r0, #650	@ 0x28a
 8001d68:	f000 ffc0 	bl	8002cec <HAL_Delay>
			mini_avance();
 8001d6c:	f7ff ff9b 	bl	8001ca6 <mini_avance>
		break;
 8001d70:	e055      	b.n	8001e1e <ejecutarGiro+0x15a>
	case izquierda:
		if (contador_giros == 0) {
 8001d72:	4b2d      	ldr	r3, [pc, #180]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d126      	bne.n	8001dc8 <ejecutarGiro+0x104>
			contador_giros = contador_giros + 1;
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <ejecutarGiro+0x164>)
 8001d84:	701a      	strb	r2, [r3, #0]
			mini_avance();
 8001d86:	f7ff ff8e 	bl	8001ca6 <mini_avance>
			setMotorIzquierdo(avance);
 8001d8a:	2001      	movs	r0, #1
 8001d8c:	f000 f850 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 f87f 	bl	8001e94 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001d96:	20c8      	movs	r0, #200	@ 0xc8
 8001d98:	f000 ffa8 	bl	8002cec <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f000 f847 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 f876 	bl	8001e94 <setMotorDerecho>
			if (ultima_rueda_apagada_d) {
 8001da8:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <ejecutarGiro+0x168>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <ejecutarGiro+0xf6>
				HAL_Delay(tiempo_giro90_izq_max); //si ultima_rueda_apagada_d es true significa q la ultima rueda q se apago es la derecha, es decir q estará inclinado hacia la derecha. por lo q si quiere ir a la izquierda, necesita un valor maximo de giro
 8001db0:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001db4:	f000 ff9a 	bl	8002cec <HAL_Delay>
 8001db8:	e003      	b.n	8001dc2 <ejecutarGiro+0xfe>
			} else {
				HAL_Delay(tiempo_giro90_izq_min); //lo opuesto a lo anterior.
 8001dba:	f44f 700c 	mov.w	r0, #560	@ 0x230
 8001dbe:	f000 ff95 	bl	8002cec <HAL_Delay>
			}

			mini_avance();
 8001dc2:	f7ff ff70 	bl	8001ca6 <mini_avance>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001dc6:	e02a      	b.n	8001e1e <ejecutarGiro+0x15a>
			contador_giros = contador_giros + 1;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <ejecutarGiro+0x164>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <ejecutarGiro+0x164>)
 8001dd2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001dd4:	20c8      	movs	r0, #200	@ 0xc8
 8001dd6:	f000 ff89 	bl	8002cec <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f000 f828 	bl	8001e30 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001de0:	2001      	movs	r0, #1
 8001de2:	f000 f857 	bl	8001e94 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001de6:	f240 208a 	movw	r0, #650	@ 0x28a
 8001dea:	f000 ff7f 	bl	8002cec <HAL_Delay>
			mini_avance();
 8001dee:	f7ff ff5a 	bl	8001ca6 <mini_avance>
		break;
 8001df2:	e014      	b.n	8001e1e <ejecutarGiro+0x15a>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <ejecutarGiro+0x164>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e28 <ejecutarGiro+0x164>)
 8001dfe:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001e00:	2001      	movs	r0, #1
 8001e02:	f000 f815 	bl	8001e30 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001e06:	2002      	movs	r0, #2
 8001e08:	f000 f844 	bl	8001e94 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001e0c:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8001e10:	f000 ff6c 	bl	8002cec <HAL_Delay>
		mini_avance();
 8001e14:	f7ff ff47 	bl	8001ca6 <mini_avance>
		mini_avance();
 8001e18:	f7ff ff45 	bl	8001ca6 <mini_avance>
		break;
 8001e1c:	bf00      	nop
	 avanzar();
	 }
	 }
	 */

}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200001fe 	.word	0x200001fe
 8001e2c:	20000209 	.word	0x20000209

08001e30 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <setMotorIzquierdo+0x5c>)
 8001e3c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001e40:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d002      	beq.n	8001e4e <setMotorIzquierdo+0x1e>
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d00d      	beq.n	8001e68 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001e4c:	e019      	b.n	8001e82 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e54:	480e      	ldr	r0, [pc, #56]	@ (8001e90 <setMotorIzquierdo+0x60>)
 8001e56:	f002 fa37 	bl	80042c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e60:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <setMotorIzquierdo+0x60>)
 8001e62:	f002 fa31 	bl	80042c8 <HAL_GPIO_WritePin>
		break;
 8001e66:	e00c      	b.n	8001e82 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e6e:	4808      	ldr	r0, [pc, #32]	@ (8001e90 <setMotorIzquierdo+0x60>)
 8001e70:	f002 fa2a 	bl	80042c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e7a:	4805      	ldr	r0, [pc, #20]	@ (8001e90 <setMotorIzquierdo+0x60>)
 8001e7c:	f002 fa24 	bl	80042c8 <HAL_GPIO_WritePin>
		break;
 8001e80:	bf00      	nop
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40020400 	.word	0x40020400

08001e94 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <setMotorDerecho+0x5c>)
 8001ea0:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ea4:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d002      	beq.n	8001eb2 <setMotorDerecho+0x1e>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d00d      	beq.n	8001ecc <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001eb0:	e019      	b.n	8001ee6 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eb8:	480e      	ldr	r0, [pc, #56]	@ (8001ef4 <setMotorDerecho+0x60>)
 8001eba:	f002 fa05 	bl	80042c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ec4:	480b      	ldr	r0, [pc, #44]	@ (8001ef4 <setMotorDerecho+0x60>)
 8001ec6:	f002 f9ff 	bl	80042c8 <HAL_GPIO_WritePin>
		break;
 8001eca:	e00c      	b.n	8001ee6 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ed2:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <setMotorDerecho+0x60>)
 8001ed4:	f002 f9f8 	bl	80042c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ede:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <setMotorDerecho+0x60>)
 8001ee0:	f002 f9f2 	bl	80042c8 <HAL_GPIO_WritePin>
		break;
 8001ee4:	bf00      	nop
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
 8001f04:	4613      	mov	r3, r2
 8001f06:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001f08:	78bb      	ldrb	r3, [r7, #2]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d83a      	bhi.n	8001f84 <act_pared+0x8c>
 8001f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <act_pared+0x1c>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f3d 	.word	0x08001f3d
 8001f1c:	08001f55 	.word	0x08001f55
 8001f20:	08001f6d 	.word	0x08001f6d
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	781a      	ldrb	r2, [r3, #0]
 8001f2c:	78fb      	ldrb	r3, [r7, #3]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	440b      	add	r3, r1
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]
		break;
 8001f3a:	e025      	b.n	8001f88 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	440b      	add	r3, r1
 8001f4a:	f042 0204 	orr.w	r2, r2, #4
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
		break;
 8001f52:	e019      	b.n	8001f88 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	440b      	add	r3, r1
 8001f62:	f042 0202 	orr.w	r2, r2, #2
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
		break;
 8001f6a:	e00d      	b.n	8001f88 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	781a      	ldrb	r2, [r3, #0]
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	440b      	add	r3, r1
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	701a      	strb	r2, [r3, #0]
		break;
 8001f82:	e001      	b.n	8001f88 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001f84:	2300      	movs	r3, #0
 8001f86:	e003      	b.n	8001f90 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	781b      	ldrb	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e08b      	b.n	80020c4 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e081      	b.n	80020b6 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001fb2:	2364      	movs	r3, #100	@ 0x64
 8001fb4:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b0b      	cmp	r3, #11
 8001fba:	dc15      	bgt.n	8001fe8 <act_pesos+0x4c>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	7dfa      	ldrb	r2, [r7, #23]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d905      	bls.n	8001fe8 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d01e      	beq.n	800202c <act_pesos+0x90>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b07      	cmp	r3, #7
 8001ff2:	d01b      	beq.n	800202c <act_pesos+0x90>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b0b      	cmp	r3, #11
 8001ff8:	d018      	beq.n	800202c <act_pesos+0x90>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d015      	beq.n	800202c <act_pesos+0x90>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10d      	bne.n	800202c <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	7dfa      	ldrb	r2, [r7, #23]
 800201c:	429a      	cmp	r2, r3
 800201e:	d905      	bls.n	800202c <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3301      	adds	r3, #1
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2b03      	cmp	r3, #3
 8002030:	dd15      	ble.n	800205e <act_pesos+0xc2>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10d      	bne.n	800205e <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3b04      	subs	r3, #4
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	7dfa      	ldrb	r2, [r7, #23]
 800204e:	429a      	cmp	r2, r3
 8002050:	d905      	bls.n	800205e <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3b04      	subs	r3, #4
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f003 0304 	and.w	r3, r3, #4
 800206a:	2b00      	cmp	r3, #0
 800206c:	d119      	bne.n	80020a2 <act_pesos+0x106>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d016      	beq.n	80020a2 <act_pesos+0x106>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b04      	cmp	r3, #4
 8002078:	d013      	beq.n	80020a2 <act_pesos+0x106>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b08      	cmp	r3, #8
 800207e:	d010      	beq.n	80020a2 <act_pesos+0x106>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d00d      	beq.n	80020a2 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3b01      	subs	r3, #1
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4413      	add	r3, r2
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	7dfa      	ldrb	r2, [r7, #23]
 8002092:	429a      	cmp	r2, r3
 8002094:	d905      	bls.n	80020a2 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	3b01      	subs	r3, #1
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	7dfa      	ldrb	r2, [r7, #23]
 80020aa:	3201      	adds	r2, #1
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	3301      	adds	r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b0e      	cmp	r3, #14
 80020ba:	f77f af7a 	ble.w	8001fb2 <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	3301      	adds	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	2b0e      	cmp	r3, #14
 80020c8:	f77f af70 	ble.w	8001fac <act_pesos+0x10>
		}
	}
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 80020dc:	b480      	push	{r7}
 80020de:	b087      	sub	sp, #28
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	460b      	mov	r3, r1
 80020ec:	71fb      	strb	r3, [r7, #7]
 80020ee:	4613      	mov	r3, r2
 80020f0:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 80020f2:	230f      	movs	r3, #15
 80020f4:	75fb      	strb	r3, [r7, #23]
	if (ubicacion == 15) {
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d105      	bne.n	8002108 <calculo_minimo_peso+0x2c>
		casilla_n = 15;
 80020fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002368 <calculo_minimo_peso+0x28c>)
 80020fe:	220f      	movs	r2, #15
 8002100:	701a      	strb	r2, [r3, #0]
		return casilla_n;
 8002102:	4b99      	ldr	r3, [pc, #612]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	e24e      	b.n	80025a6 <calculo_minimo_peso+0x4ca>
	} else {

		switch (orientacion_actual) {	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
 8002108:	79bb      	ldrb	r3, [r7, #6]
 800210a:	2b03      	cmp	r3, #3
 800210c:	f200 824a 	bhi.w	80025a4 <calculo_minimo_peso+0x4c8>
 8002110:	a201      	add	r2, pc, #4	@ (adr r2, 8002118 <calculo_minimo_peso+0x3c>)
 8002112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002116:	bf00      	nop
 8002118:	08002129 	.word	0x08002129
 800211c:	0800248b 	.word	0x0800248b
 8002120:	0800224f 	.word	0x0800224f
 8002124:	08002371 	.word	0x08002371
		case norte:
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	3304      	adds	r3, #4
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	7dfa      	ldrb	r2, [r7, #23]
 8002134:	429a      	cmp	r2, r3
 8002136:	d915      	bls.n	8002164 <calculo_minimo_peso+0x88>
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <calculo_minimo_peso+0x88>
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	2b0b      	cmp	r3, #11
 800214c:	d80a      	bhi.n	8002164 <calculo_minimo_peso+0x88>
				minimo_peso = peso[ubicacion + 4];
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	3304      	adds	r3, #4
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	3304      	adds	r3, #4
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b81      	ldr	r3, [pc, #516]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002162:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3301      	adds	r3, #1
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	7dfa      	ldrb	r2, [r7, #23]
 8002170:	429a      	cmp	r2, r3
 8002172:	d91e      	bls.n	80021b2 <calculo_minimo_peso+0xd6>
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	4413      	add	r3, r2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d116      	bne.n	80021b2 <calculo_minimo_peso+0xd6>
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d013      	beq.n	80021b2 <calculo_minimo_peso+0xd6>
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	2b07      	cmp	r3, #7
 800218e:	d010      	beq.n	80021b2 <calculo_minimo_peso+0xd6>
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b0b      	cmp	r3, #11
 8002194:	d00d      	beq.n	80021b2 <calculo_minimo_peso+0xd6>
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d00a      	beq.n	80021b2 <calculo_minimo_peso+0xd6>
				minimo_peso = peso[ubicacion + 1];
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	3301      	adds	r3, #1
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002368 <calculo_minimo_peso+0x28c>)
 80021b0:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	7dfa      	ldrb	r2, [r7, #23]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d924      	bls.n	800220c <calculo_minimo_peso+0x130>
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11c      	bne.n	800220c <calculo_minimo_peso+0x130>
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d019      	beq.n	800220c <calculo_minimo_peso+0x130>
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d016      	beq.n	800220c <calculo_minimo_peso+0x130>
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b08      	cmp	r3, #8
 80021e2:	d013      	beq.n	800220c <calculo_minimo_peso+0x130>
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	2b0c      	cmp	r3, #12
 80021e8:	d010      	beq.n	800220c <calculo_minimo_peso+0x130>
				contador_aux = contador_aux + 1;
 80021ea:	4b60      	ldr	r3, [pc, #384]	@ (800236c <calculo_minimo_peso+0x290>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b5e      	ldr	r3, [pc, #376]	@ (800236c <calculo_minimo_peso+0x290>)
 80021f4:	701a      	strb	r2, [r3, #0]
				minimo_peso = peso[ubicacion - 1];
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4413      	add	r3, r2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	3b01      	subs	r3, #1
 8002206:	b2da      	uxtb	r2, r3
 8002208:	4b57      	ldr	r3, [pc, #348]	@ (8002368 <calculo_minimo_peso+0x28c>)
 800220a:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	3b04      	subs	r3, #4
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	7dfa      	ldrb	r2, [r7, #23]
 8002218:	429a      	cmp	r2, r3
 800221a:	d915      	bls.n	8002248 <calculo_minimo_peso+0x16c>
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10d      	bne.n	8002248 <calculo_minimo_peso+0x16c>
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	2b03      	cmp	r3, #3
 8002230:	d90a      	bls.n	8002248 <calculo_minimo_peso+0x16c>
				minimo_peso = peso[ubicacion - 4];
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	3b04      	subs	r3, #4
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	3b04      	subs	r3, #4
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b48      	ldr	r3, [pc, #288]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002246:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002248:	4b47      	ldr	r3, [pc, #284]	@ (8002368 <calculo_minimo_peso+0x28c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	e1ab      	b.n	80025a6 <calculo_minimo_peso+0x4ca>
			break;
		case sur:
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3b04      	subs	r3, #4
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	7dfa      	ldrb	r2, [r7, #23]
 800225a:	429a      	cmp	r2, r3
 800225c:	d915      	bls.n	800228a <calculo_minimo_peso+0x1ae>
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <calculo_minimo_peso+0x1ae>
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d90a      	bls.n	800228a <calculo_minimo_peso+0x1ae>
				minimo_peso = peso[ubicacion - 4];
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	3b04      	subs	r3, #4
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3b04      	subs	r3, #4
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b38      	ldr	r3, [pc, #224]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002288:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3301      	adds	r3, #1
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	7dfa      	ldrb	r2, [r7, #23]
 8002296:	429a      	cmp	r2, r3
 8002298:	d91e      	bls.n	80022d8 <calculo_minimo_peso+0x1fc>
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <calculo_minimo_peso+0x1fc>
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d013      	beq.n	80022d8 <calculo_minimo_peso+0x1fc>
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	2b07      	cmp	r3, #7
 80022b4:	d010      	beq.n	80022d8 <calculo_minimo_peso+0x1fc>
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2b0b      	cmp	r3, #11
 80022ba:	d00d      	beq.n	80022d8 <calculo_minimo_peso+0x1fc>
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	d00a      	beq.n	80022d8 <calculo_minimo_peso+0x1fc>
				minimo_peso = peso[ubicacion + 1];
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	3301      	adds	r3, #1
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	4b24      	ldr	r3, [pc, #144]	@ (8002368 <calculo_minimo_peso+0x28c>)
 80022d6:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	3b01      	subs	r3, #1
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	7dfa      	ldrb	r2, [r7, #23]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d91e      	bls.n	8002326 <calculo_minimo_peso+0x24a>
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	4413      	add	r3, r2
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <calculo_minimo_peso+0x24a>
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d013      	beq.n	8002326 <calculo_minimo_peso+0x24a>
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	2b04      	cmp	r3, #4
 8002302:	d010      	beq.n	8002326 <calculo_minimo_peso+0x24a>
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2b08      	cmp	r3, #8
 8002308:	d00d      	beq.n	8002326 <calculo_minimo_peso+0x24a>
 800230a:	79fb      	ldrb	r3, [r7, #7]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d00a      	beq.n	8002326 <calculo_minimo_peso+0x24a>
				minimo_peso = peso[ubicacion - 1];
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	3b01      	subs	r3, #1
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	3b01      	subs	r3, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002324:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	3304      	adds	r3, #4
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4413      	add	r3, r2
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	7dfa      	ldrb	r2, [r7, #23]
 8002332:	429a      	cmp	r2, r3
 8002334:	d915      	bls.n	8002362 <calculo_minimo_peso+0x286>
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <calculo_minimo_peso+0x286>
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b0b      	cmp	r3, #11
 800234a:	d80a      	bhi.n	8002362 <calculo_minimo_peso+0x286>
				minimo_peso = peso[ubicacion + 4];
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	3304      	adds	r3, #4
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	3304      	adds	r3, #4
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b02      	ldr	r3, [pc, #8]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002360:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002362:	4b01      	ldr	r3, [pc, #4]	@ (8002368 <calculo_minimo_peso+0x28c>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	e11e      	b.n	80025a6 <calculo_minimo_peso+0x4ca>
 8002368:	20000000 	.word	0x20000000
 800236c:	20000208 	.word	0x20000208
			break;
		case oeste:
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	3301      	adds	r3, #1
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	7dfa      	ldrb	r2, [r7, #23]
 800237c:	429a      	cmp	r2, r3
 800237e:	d91e      	bls.n	80023be <calculo_minimo_peso+0x2e2>
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d116      	bne.n	80023be <calculo_minimo_peso+0x2e2>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d013      	beq.n	80023be <calculo_minimo_peso+0x2e2>
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b07      	cmp	r3, #7
 800239a:	d010      	beq.n	80023be <calculo_minimo_peso+0x2e2>
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b0b      	cmp	r3, #11
 80023a0:	d00d      	beq.n	80023be <calculo_minimo_peso+0x2e2>
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	d00a      	beq.n	80023be <calculo_minimo_peso+0x2e2>
				minimo_peso = peso[ubicacion + 1];
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	3301      	adds	r3, #1
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	3301      	adds	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b7e      	ldr	r3, [pc, #504]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 80023bc:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	3304      	adds	r3, #4
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4413      	add	r3, r2
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	7dfa      	ldrb	r2, [r7, #23]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d915      	bls.n	80023fa <calculo_minimo_peso+0x31e>
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <calculo_minimo_peso+0x31e>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b0b      	cmp	r3, #11
 80023e2:	d80a      	bhi.n	80023fa <calculo_minimo_peso+0x31e>
				minimo_peso = peso[ubicacion + 4];
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	3304      	adds	r3, #4
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4413      	add	r3, r2
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	3304      	adds	r3, #4
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 80023f8:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	3b04      	subs	r3, #4
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	7dfa      	ldrb	r2, [r7, #23]
 8002406:	429a      	cmp	r2, r3
 8002408:	d915      	bls.n	8002436 <calculo_minimo_peso+0x35a>
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	68ba      	ldr	r2, [r7, #8]
 800240e:	4413      	add	r3, r2
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <calculo_minimo_peso+0x35a>
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d90a      	bls.n	8002436 <calculo_minimo_peso+0x35a>
				minimo_peso = peso[ubicacion - 4];
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3b04      	subs	r3, #4
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	3b04      	subs	r3, #4
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b60      	ldr	r3, [pc, #384]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 8002434:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	3b01      	subs	r3, #1
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	7dfa      	ldrb	r2, [r7, #23]
 8002442:	429a      	cmp	r2, r3
 8002444:	d91e      	bls.n	8002484 <calculo_minimo_peso+0x3a8>
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d116      	bne.n	8002484 <calculo_minimo_peso+0x3a8>
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <calculo_minimo_peso+0x3a8>
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d010      	beq.n	8002484 <calculo_minimo_peso+0x3a8>
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d00d      	beq.n	8002484 <calculo_minimo_peso+0x3a8>
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d00a      	beq.n	8002484 <calculo_minimo_peso+0x3a8>
				minimo_peso = peso[ubicacion - 1];
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	3b01      	subs	r3, #1
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4413      	add	r3, r2
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	3b01      	subs	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b4c      	ldr	r3, [pc, #304]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 8002482:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002484:	4b4b      	ldr	r3, [pc, #300]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	e08d      	b.n	80025a6 <calculo_minimo_peso+0x4ca>
			break;
		case este:
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	3b01      	subs	r3, #1
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4413      	add	r3, r2
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	7dfa      	ldrb	r2, [r7, #23]
 8002496:	429a      	cmp	r2, r3
 8002498:	d91e      	bls.n	80024d8 <calculo_minimo_peso+0x3fc>
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	4413      	add	r3, r2
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <calculo_minimo_peso+0x3fc>
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <calculo_minimo_peso+0x3fc>
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d010      	beq.n	80024d8 <calculo_minimo_peso+0x3fc>
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d00d      	beq.n	80024d8 <calculo_minimo_peso+0x3fc>
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d00a      	beq.n	80024d8 <calculo_minimo_peso+0x3fc>
				minimo_peso = peso[ubicacion - 1];
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	4413      	add	r3, r2
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 80024d6:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	3304      	adds	r3, #4
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	7dfa      	ldrb	r2, [r7, #23]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d915      	bls.n	8002514 <calculo_minimo_peso+0x438>
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <calculo_minimo_peso+0x438>
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	2b0b      	cmp	r3, #11
 80024fc:	d80a      	bhi.n	8002514 <calculo_minimo_peso+0x438>
				minimo_peso = peso[ubicacion + 4];
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	3304      	adds	r3, #4
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	3304      	adds	r3, #4
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b28      	ldr	r3, [pc, #160]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 8002512:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	3b04      	subs	r3, #4
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	7dfa      	ldrb	r2, [r7, #23]
 8002520:	429a      	cmp	r2, r3
 8002522:	d915      	bls.n	8002550 <calculo_minimo_peso+0x474>
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <calculo_minimo_peso+0x474>
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d90a      	bls.n	8002550 <calculo_minimo_peso+0x474>
				minimo_peso = peso[ubicacion - 4];
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	3b04      	subs	r3, #4
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	3b04      	subs	r3, #4
 800254a:	b2da      	uxtb	r2, r3
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 800254e:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	3301      	adds	r3, #1
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	7dfa      	ldrb	r2, [r7, #23]
 800255c:	429a      	cmp	r2, r3
 800255e:	d91e      	bls.n	800259e <calculo_minimo_peso+0x4c2>
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d116      	bne.n	800259e <calculo_minimo_peso+0x4c2>
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d013      	beq.n	800259e <calculo_minimo_peso+0x4c2>
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b07      	cmp	r3, #7
 800257a:	d010      	beq.n	800259e <calculo_minimo_peso+0x4c2>
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	2b0b      	cmp	r3, #11
 8002580:	d00d      	beq.n	800259e <calculo_minimo_peso+0x4c2>
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d00a      	beq.n	800259e <calculo_minimo_peso+0x4c2>
				minimo_peso = peso[ubicacion + 1];
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	3301      	adds	r3, #1
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 800259c:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <calculo_minimo_peso+0x4d8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	e000      	b.n	80025a6 <calculo_minimo_peso+0x4ca>
			break;
		default:
			return 100;
 80025a4:	2364      	movs	r3, #100	@ 0x64
		}
	}
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <envio_ubicacion>:

void envio_ubicacion(uint8_t ubicacion, uint8_t casilla_n) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	460a      	mov	r2, r1
 80025c2:	71fb      	strb	r3, [r7, #7]
 80025c4:	4613      	mov	r3, r2
 80025c6:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion) {
 80025c8:	79ba      	ldrb	r2, [r7, #6]
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d11a      	bne.n	8002606 <envio_ubicacion+0x4e>
		mensaje[0] = '\0';
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <envio_ubicacion+0x58>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
		sprintf(mensaje, "Ubicacion: %d", ubicacion);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	461a      	mov	r2, r3
 80025da:	490e      	ldr	r1, [pc, #56]	@ (8002614 <envio_ubicacion+0x5c>)
 80025dc:	480c      	ldr	r0, [pc, #48]	@ (8002610 <envio_ubicacion+0x58>)
 80025de:	f004 f9e1 	bl	80069a4 <siprintf>
		strcat(mensaje, "\r\n");
 80025e2:	480b      	ldr	r0, [pc, #44]	@ (8002610 <envio_ubicacion+0x58>)
 80025e4:	f7fd fdf4 	bl	80001d0 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <envio_ubicacion+0x58>)
 80025ee:	4413      	add	r3, r2
 80025f0:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <envio_ubicacion+0x60>)
 80025f2:	8811      	ldrh	r1, [r2, #0]
 80025f4:	7892      	ldrb	r2, [r2, #2]
 80025f6:	8019      	strh	r1, [r3, #0]
 80025f8:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80025fa:	2332      	movs	r3, #50	@ 0x32
 80025fc:	2220      	movs	r2, #32
 80025fe:	4904      	ldr	r1, [pc, #16]	@ (8002610 <envio_ubicacion+0x58>)
 8002600:	4806      	ldr	r0, [pc, #24]	@ (800261c <envio_ubicacion+0x64>)
 8002602:	f003 fa07 	bl	8005a14 <HAL_UART_Transmit>
	}

}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001b8 	.word	0x200001b8
 8002614:	080072fc 	.word	0x080072fc
 8002618:	0800730c 	.word	0x0800730c
 800261c:	20000170 	.word	0x20000170

08002620 <envio_pared>:
void envio_pared(void) {
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	mensaje[0] = '\0';
 8002624:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <envio_pared+0x3c>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
	sprintf(mensaje, "Choque pared");
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <envio_pared+0x40>)
 800262c:	480b      	ldr	r0, [pc, #44]	@ (800265c <envio_pared+0x3c>)
 800262e:	f004 f9b9 	bl	80069a4 <siprintf>
	strcat(mensaje, "\r\n");
 8002632:	480a      	ldr	r0, [pc, #40]	@ (800265c <envio_pared+0x3c>)
 8002634:	f7fd fdcc 	bl	80001d0 <strlen>
 8002638:	4603      	mov	r3, r0
 800263a:	461a      	mov	r2, r3
 800263c:	4b07      	ldr	r3, [pc, #28]	@ (800265c <envio_pared+0x3c>)
 800263e:	4413      	add	r3, r2
 8002640:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <envio_pared+0x44>)
 8002642:	8811      	ldrh	r1, [r2, #0]
 8002644:	7892      	ldrb	r2, [r2, #2]
 8002646:	8019      	strh	r1, [r3, #0]
 8002648:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800264a:	2332      	movs	r3, #50	@ 0x32
 800264c:	2220      	movs	r2, #32
 800264e:	4903      	ldr	r1, [pc, #12]	@ (800265c <envio_pared+0x3c>)
 8002650:	4805      	ldr	r0, [pc, #20]	@ (8002668 <envio_pared+0x48>)
 8002652:	f003 f9df 	bl	8005a14 <HAL_UART_Transmit>
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200001b8 	.word	0x200001b8
 8002660:	08007310 	.word	0x08007310
 8002664:	0800730c 	.word	0x0800730c
 8002668:	20000170 	.word	0x20000170

0800266c <envio_llegada>:

void envio_llegada(void) {
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	af00      	add	r7, sp, #0
	if (uart_llegada == 0) {
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <envio_llegada+0x4c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11c      	bne.n	80026b2 <envio_llegada+0x46>
		mensaje[0] = '\0';
 8002678:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <envio_llegada+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]
		strcat(mensaje, "Llegue a la meta \r\n");
 800267e:	480f      	ldr	r0, [pc, #60]	@ (80026bc <envio_llegada+0x50>)
 8002680:	f7fd fda6 	bl	80001d0 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	461a      	mov	r2, r3
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <envio_llegada+0x50>)
 800268a:	4413      	add	r3, r2
 800268c:	4a0c      	ldr	r2, [pc, #48]	@ (80026c0 <envio_llegada+0x54>)
 800268e:	461d      	mov	r5, r3
 8002690:	4614      	mov	r4, r2
 8002692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002694:	6028      	str	r0, [r5, #0]
 8002696:	6069      	str	r1, [r5, #4]
 8002698:	60aa      	str	r2, [r5, #8]
 800269a:	60eb      	str	r3, [r5, #12]
 800269c:	6820      	ldr	r0, [r4, #0]
 800269e:	6128      	str	r0, [r5, #16]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80026a0:	2332      	movs	r3, #50	@ 0x32
 80026a2:	2220      	movs	r2, #32
 80026a4:	4905      	ldr	r1, [pc, #20]	@ (80026bc <envio_llegada+0x50>)
 80026a6:	4807      	ldr	r0, [pc, #28]	@ (80026c4 <envio_llegada+0x58>)
 80026a8:	f003 f9b4 	bl	8005a14 <HAL_UART_Transmit>
		uart_llegada = 1;
 80026ac:	4b02      	ldr	r3, [pc, #8]	@ (80026b8 <envio_llegada+0x4c>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
	}
}
 80026b2:	bf00      	nop
 80026b4:	bdb0      	pop	{r4, r5, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200001ff 	.word	0x200001ff
 80026bc:	200001b8 	.word	0x200001b8
 80026c0:	08007320 	.word	0x08007320
 80026c4:	20000170 	.word	0x20000170

080026c8 <envio_casilla_n>:

void envio_casilla_n(uint8_t casilla_n) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
	mensaje[0] = '\0';
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <envio_casilla_n+0x48>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
	sprintf(mensaje, "Siguiente casilla: %d", casilla_n);
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	461a      	mov	r2, r3
 80026dc:	490d      	ldr	r1, [pc, #52]	@ (8002714 <envio_casilla_n+0x4c>)
 80026de:	480c      	ldr	r0, [pc, #48]	@ (8002710 <envio_casilla_n+0x48>)
 80026e0:	f004 f960 	bl	80069a4 <siprintf>
	strcat(mensaje, "\r\n");
 80026e4:	480a      	ldr	r0, [pc, #40]	@ (8002710 <envio_casilla_n+0x48>)
 80026e6:	f7fd fd73 	bl	80001d0 <strlen>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <envio_casilla_n+0x48>)
 80026f0:	4413      	add	r3, r2
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <envio_casilla_n+0x50>)
 80026f4:	8811      	ldrh	r1, [r2, #0]
 80026f6:	7892      	ldrb	r2, [r2, #2]
 80026f8:	8019      	strh	r1, [r3, #0]
 80026fa:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80026fc:	2332      	movs	r3, #50	@ 0x32
 80026fe:	2220      	movs	r2, #32
 8002700:	4903      	ldr	r1, [pc, #12]	@ (8002710 <envio_casilla_n+0x48>)
 8002702:	4806      	ldr	r0, [pc, #24]	@ (800271c <envio_casilla_n+0x54>)
 8002704:	f003 f986 	bl	8005a14 <HAL_UART_Transmit>

}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	200001b8 	.word	0x200001b8
 8002714:	08007334 	.word	0x08007334
 8002718:	0800730c 	.word	0x0800730c
 800271c:	20000170 	.word	0x20000170

08002720 <filtrado_linea_funcion>:
void filtrado_linea_funcion(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual_2 = HAL_GetTick();
 8002726:	f000 fad5 	bl	8002cd4 <HAL_GetTick>
 800272a:	6078      	str	r0, [r7, #4]
	if (tiempo_rebotes <= (tiempo_actual_2 - tiempo_inicio_2)) {
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <filtrado_linea_funcion+0x40>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b13      	cmp	r3, #19
 8002736:	d90e      	bls.n	8002756 <filtrado_linea_funcion+0x36>
		GPIO_PinState estado_sensor_2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	480a      	ldr	r0, [pc, #40]	@ (8002764 <filtrado_linea_funcion+0x44>)
 800273c:	f001 fdac 	bl	8004298 <HAL_GPIO_ReadPin>
 8002740:	4603      	mov	r3, r0
 8002742:	70fb      	strb	r3, [r7, #3]
		if (GPIO_PIN_RESET == estado_sensor_2) {
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <filtrado_linea_funcion+0x30>
			solicitud_linea = 1;
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <filtrado_linea_funcion+0x48>)
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]
		}
		filtrado_linea = 0;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <filtrado_linea_funcion+0x4c>)
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
	}
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000230 	.word	0x20000230
 8002764:	40020800 	.word	0x40020800
 8002768:	20000234 	.word	0x20000234
 800276c:	20000235 	.word	0x20000235

08002770 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == sensor_linea_Pin) && (filtrado_linea == 0)) {
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d10c      	bne.n	800279a <HAL_GPIO_EXTI_Callback+0x2a>
 8002780:	4b08      	ldr	r3, [pc, #32]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x34>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_GPIO_EXTI_Callback+0x2a>
		tiempo_inicio_2 = HAL_GetTick();
 800278a:	f000 faa3 	bl	8002cd4 <HAL_GetTick>
 800278e:	4603      	mov	r3, r0
 8002790:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <HAL_GPIO_EXTI_Callback+0x38>)
 8002792:	6013      	str	r3, [r2, #0]
		filtrado_linea = 1;
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_GPIO_EXTI_Callback+0x34>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
	}
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000235 	.word	0x20000235
 80027a8:	20000230 	.word	0x20000230

080027ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b0:	b672      	cpsid	i
}
 80027b2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027b4:	bf00      	nop
 80027b6:	e7fd      	b.n	80027b4 <Error_Handler+0x8>

080027b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	4b10      	ldr	r3, [pc, #64]	@ (8002804 <HAL_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002804 <HAL_MspInit+0x4c>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_MspInit+0x4c>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	@ (8002804 <HAL_MspInit+0x4c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <HAL_MspInit+0x4c>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_MspInit+0x4c>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027f6:	2007      	movs	r0, #7
 80027f8:	f000 ff6e 	bl	80036d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a2f      	ldr	r2, [pc, #188]	@ (80028e4 <HAL_ADC_MspInit+0xdc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d158      	bne.n	80028dc <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b2e      	ldr	r3, [pc, #184]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 8002834:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002838:	6453      	str	r3, [r2, #68]	@ 0x44
 800283a:	4b2b      	ldr	r3, [pc, #172]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4a26      	ldr	r2, [pc, #152]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <HAL_ADC_MspInit+0xe0>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 8002862:	2303      	movs	r3, #3
 8002864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002866:	2303      	movs	r3, #3
 8002868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	481d      	ldr	r0, [pc, #116]	@ (80028ec <HAL_ADC_MspInit+0xe4>)
 8002876:	f001 fb73 	bl	8003f60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800287a:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 800287c:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_ADC_MspInit+0xec>)
 800287e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800288c:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 8002894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002898:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 800289c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ba:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028bc:	2200      	movs	r2, #0
 80028be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80028c0:	480b      	ldr	r0, [pc, #44]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028c2:	f000 ff4b 	bl	800375c <HAL_DMA_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80028cc:	f7ff ff6e 	bl	80027ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80028d6:	4a06      	ldr	r2, [pc, #24]	@ (80028f0 <HAL_ADC_MspInit+0xe8>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028dc:	bf00      	nop
 80028de:	3728      	adds	r7, #40	@ 0x28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012000 	.word	0x40012000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020400 	.word	0x40020400
 80028f0:	200000c8 	.word	0x200000c8
 80028f4:	40026410 	.word	0x40026410

080028f8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0b      	ldr	r2, [pc, #44]	@ (8002934 <HAL_TIM_Base_MspInit+0x3c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10d      	bne.n	8002926 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_TIM_Base_MspInit+0x40>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a09      	ldr	r2, [pc, #36]	@ (8002938 <HAL_TIM_Base_MspInit+0x40>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b07      	ldr	r3, [pc, #28]	@ (8002938 <HAL_TIM_Base_MspInit+0x40>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40000400 	.word	0x40000400
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_TIM_MspPostInit+0x68>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d11e      	bne.n	800299c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_TIM_MspPostInit+0x6c>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a10      	ldr	r2, [pc, #64]	@ (80029a8 <HAL_TIM_MspPostInit+0x6c>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_TIM_MspPostInit+0x6c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 800297a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800297e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002988:	2300      	movs	r3, #0
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800298c:	2302      	movs	r3, #2
 800298e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 030c 	add.w	r3, r7, #12
 8002994:	4619      	mov	r1, r3
 8002996:	4805      	ldr	r0, [pc, #20]	@ (80029ac <HAL_TIM_MspPostInit+0x70>)
 8002998:	f001 fae2 	bl	8003f60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800299c:	bf00      	nop
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40020800 	.word	0x40020800

080029b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	@ 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a80 <HAL_UART_MspInit+0xd0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d152      	bne.n	8002a78 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 80029dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e2:	4b28      	ldr	r3, [pc, #160]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a23      	ldr	r2, [pc, #140]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b21      	ldr	r3, [pc, #132]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	4a1c      	ldr	r2, [pc, #112]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 8002a14:	f043 0308 	orr.w	r3, r3, #8
 8002a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_UART_MspInit+0xd4>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a34:	2303      	movs	r3, #3
 8002a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4619      	mov	r1, r3
 8002a42:	4811      	ldr	r0, [pc, #68]	@ (8002a88 <HAL_UART_MspInit+0xd8>)
 8002a44:	f001 fa8c 	bl	8003f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	480a      	ldr	r0, [pc, #40]	@ (8002a8c <HAL_UART_MspInit+0xdc>)
 8002a64:	f001 fa7c 	bl	8003f60 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2035      	movs	r0, #53	@ 0x35
 8002a6e:	f000 fe3e 	bl	80036ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002a72:	2035      	movs	r0, #53	@ 0x35
 8002a74:	f000 fe57 	bl	8003726 <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8002a78:	bf00      	nop
 8002a7a:	3728      	adds	r7, #40	@ 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40005000 	.word	0x40005000
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00

08002a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <NMI_Handler+0x4>

08002a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <HardFault_Handler+0x4>

08002aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <MemManage_Handler+0x4>

08002aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <BusFault_Handler+0x4>

08002ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab4:	bf00      	nop
 8002ab6:	e7fd      	b.n	8002ab4 <UsageFault_Handler+0x4>

08002ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae6:	f000 f8e1 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}

08002aee <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 8002af2:	2080      	movs	r0, #128	@ 0x80
 8002af4:	f001 fc02 	bl	80042fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002b00:	4802      	ldr	r0, [pc, #8]	@ (8002b0c <UART5_IRQHandler+0x10>)
 8002b02:	f003 f813 	bl	8005b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000170 	.word	0x20000170

08002b10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <DMA2_Stream0_IRQHandler+0x10>)
 8002b16:	f000 ffb9 	bl	8003a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200000c8 	.word	0x200000c8

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f003 ff50 	bl	80069f8 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20020000 	.word	0x20020000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	200002bc 	.word	0x200002bc
 8002b8c:	20000410 	.word	0x20000410

08002b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	@ (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002bec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bb8:	f7ff ffea 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	@ (8002bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8002c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be2:	f003 ff0f 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002be6:	f7fd ffe7 	bl	8000bb8 <main>
  bx  lr    
 8002bea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002bf8:	080073b0 	.word	0x080073b0
  ldr r2, =_sbss
 8002bfc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002c00:	2000040c 	.word	0x2000040c

08002c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC_IRQHandler>
	...

08002c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_Init+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <HAL_Init+0x40>)
 8002c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <HAL_Init+0x40>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_Init+0x40>)
 8002c1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c24:	4b08      	ldr	r3, [pc, #32]	@ (8002c48 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a07      	ldr	r2, [pc, #28]	@ (8002c48 <HAL_Init+0x40>)
 8002c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c30:	2003      	movs	r0, #3
 8002c32:	f000 fd51 	bl	80036d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f808 	bl	8002c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c3c:	f7ff fdbc 	bl	80027b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00

08002c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c54:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_InitTick+0x54>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x58>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 fd69 	bl	8003742 <HAL_SYSTICK_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00e      	b.n	8002c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b0f      	cmp	r3, #15
 8002c7e:	d80a      	bhi.n	8002c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c80:	2200      	movs	r2, #0
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f000 fd31 	bl	80036ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c8c:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <HAL_InitTick+0x5c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	e000      	b.n	8002c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	20000010 	.word	0x20000010
 8002ca8:	2000000c 	.word	0x2000000c

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_IncTick+0x20>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000010 	.word	0x20000010
 8002cd0:	200002c0 	.word	0x200002c0

08002cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <HAL_GetTick+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	200002c0 	.word	0x200002c0

08002cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff ffee 	bl	8002cd4 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d005      	beq.n	8002d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_Delay+0x44>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d12:	bf00      	nop
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8f7      	bhi.n	8002d14 <HAL_Delay+0x28>
  {
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000010 	.word	0x20000010

08002d34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e033      	b.n	8002db2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fd58 	bl	8002808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	f003 0310 	and.w	r3, r3, #16
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d118      	bne.n	8002da4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d7a:	f023 0302 	bic.w	r3, r3, #2
 8002d7e:	f043 0202 	orr.w	r2, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa58 	bl	800323c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002da2:	e001      	b.n	8002da8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_Start_DMA+0x22>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e0eb      	b.n	8002fb6 <HAL_ADC_Start_DMA+0x1fa>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d018      	beq.n	8002e26 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e04:	4b6e      	ldr	r3, [pc, #440]	@ (8002fc0 <HAL_ADC_Start_DMA+0x204>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a6e      	ldr	r2, [pc, #440]	@ (8002fc4 <HAL_ADC_Start_DMA+0x208>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9a      	lsrs	r2, r3, #18
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002e18:	e002      	b.n	8002e20 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f9      	bne.n	8002e1a <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e34:	d107      	bne.n	8002e46 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e44:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 80a3 	bne.w	8002f9c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d007      	beq.n	8002e88 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e94:	d106      	bne.n	8002ea4 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f023 0206 	bic.w	r2, r3, #6
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ea2:	e002      	b.n	8002eaa <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002eb2:	4b45      	ldr	r3, [pc, #276]	@ (8002fc8 <HAL_ADC_Start_DMA+0x20c>)
 8002eb4:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eba:	4a44      	ldr	r2, [pc, #272]	@ (8002fcc <HAL_ADC_Start_DMA+0x210>)
 8002ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	4a43      	ldr	r2, [pc, #268]	@ (8002fd0 <HAL_ADC_Start_DMA+0x214>)
 8002ec4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	4a42      	ldr	r2, [pc, #264]	@ (8002fd4 <HAL_ADC_Start_DMA+0x218>)
 8002ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ee6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	334c      	adds	r3, #76	@ 0x4c
 8002f02:	4619      	mov	r1, r3
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f000 fcd6 	bl	80038b8 <HAL_DMA_Start_IT>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12a      	bne.n	8002f72 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd8 <HAL_ADC_Start_DMA+0x21c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d015      	beq.n	8002f52 <HAL_ADC_Start_DMA+0x196>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <HAL_ADC_Start_DMA+0x220>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d105      	bne.n	8002f3c <HAL_ADC_Start_DMA+0x180>
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_ADC_Start_DMA+0x20c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a27      	ldr	r2, [pc, #156]	@ (8002fe0 <HAL_ADC_Start_DMA+0x224>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d136      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
 8002f46:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_ADC_Start_DMA+0x20c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d130      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d129      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e020      	b.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a18      	ldr	r2, [pc, #96]	@ (8002fd8 <HAL_ADC_Start_DMA+0x21c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d114      	bne.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	431bde83 	.word	0x431bde83
 8002fc8:	40012300 	.word	0x40012300
 8002fcc:	08003435 	.word	0x08003435
 8002fd0:	080034ef 	.word	0x080034ef
 8002fd4:	0800350b 	.word	0x0800350b
 8002fd8:	40012000 	.word	0x40012000
 8002fdc:	40012100 	.word	0x40012100
 8002fe0:	40012200 	.word	0x40012200

08002fe4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x1c>
 8003010:	2302      	movs	r3, #2
 8003012:	e105      	b.n	8003220 <HAL_ADC_ConfigChannel+0x228>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b09      	cmp	r3, #9
 8003022:	d925      	bls.n	8003070 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68d9      	ldr	r1, [r3, #12]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	4613      	mov	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	3b1e      	subs	r3, #30
 800303a:	2207      	movs	r2, #7
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43da      	mvns	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	400a      	ands	r2, r1
 8003048:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68d9      	ldr	r1, [r3, #12]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	4603      	mov	r3, r0
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4403      	add	r3, r0
 8003062:	3b1e      	subs	r3, #30
 8003064:	409a      	lsls	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
 800306e:	e022      	b.n	80030b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6919      	ldr	r1, [r3, #16]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	2207      	movs	r2, #7
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	400a      	ands	r2, r1
 8003092:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	4618      	mov	r0, r3
 80030a6:	4603      	mov	r3, r0
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4403      	add	r3, r0
 80030ac:	409a      	lsls	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d824      	bhi.n	8003108 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	3b05      	subs	r3, #5
 80030d0:	221f      	movs	r2, #31
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	400a      	ands	r2, r1
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	4618      	mov	r0, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	3b05      	subs	r3, #5
 80030fa:	fa00 f203 	lsl.w	r2, r0, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	@ 0x34
 8003106:	e04c      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d824      	bhi.n	800315a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	3b23      	subs	r3, #35	@ 0x23
 8003122:	221f      	movs	r2, #31
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43da      	mvns	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	400a      	ands	r2, r1
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	4618      	mov	r0, r3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3b23      	subs	r3, #35	@ 0x23
 800314c:	fa00 f203 	lsl.w	r2, r0, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
 8003158:	e023      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	@ 0x41
 800316c:	221f      	movs	r2, #31
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4618      	mov	r0, r3
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	3b41      	subs	r3, #65	@ 0x41
 8003196:	fa00 f203 	lsl.w	r2, r0, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a2:	4b22      	ldr	r3, [pc, #136]	@ (800322c <HAL_ADC_ConfigChannel+0x234>)
 80031a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <HAL_ADC_ConfigChannel+0x238>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d109      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1cc>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b12      	cmp	r3, #18
 80031b6:	d105      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <HAL_ADC_ConfigChannel+0x238>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d123      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x21e>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d003      	beq.n	80031de <HAL_ADC_ConfigChannel+0x1e6>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b11      	cmp	r3, #17
 80031dc:	d11b      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d111      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f2:	4b10      	ldr	r3, [pc, #64]	@ (8003234 <HAL_ADC_ConfigChannel+0x23c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a10      	ldr	r2, [pc, #64]	@ (8003238 <HAL_ADC_ConfigChannel+0x240>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	0c9a      	lsrs	r2, r3, #18
 80031fe:	4613      	mov	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003208:	e002      	b.n	8003210 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	3b01      	subs	r3, #1
 800320e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f9      	bne.n	800320a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40012300 	.word	0x40012300
 8003230:	40012000 	.word	0x40012000
 8003234:	20000008 	.word	0x20000008
 8003238:	431bde83 	.word	0x431bde83

0800323c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003244:	4b79      	ldr	r3, [pc, #484]	@ (800342c <ADC_Init+0x1f0>)
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	431a      	orrs	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	4a58      	ldr	r2, [pc, #352]	@ (8003430 <ADC_Init+0x1f4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80032e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e00f      	b.n	800333a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0202 	bic.w	r2, r2, #2
 8003348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	7e1b      	ldrb	r3, [r3, #24]
 8003354:	005a      	lsls	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003376:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003386:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	3b01      	subs	r3, #1
 8003394:	035a      	lsls	r2, r3, #13
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	e007      	b.n	80033b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	051a      	lsls	r2, r3, #20
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80033e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033f2:	025a      	lsls	r2, r3, #9
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6899      	ldr	r1, [r3, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	029a      	lsls	r2, r3, #10
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40012300 	.word	0x40012300
 8003430:	0f000001 	.word	0x0f000001

08003434 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d13c      	bne.n	80034c8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d12b      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800346c:	2b00      	cmp	r3, #0
 800346e:	d127      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003488:	2b00      	cmp	r3, #0
 800348a:	d119      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0220 	bic.w	r2, r2, #32
 800349a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7fe fb1b 	bl	8001afc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034c6:	e00e      	b.n	80034e6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fd85 	bl	8002fe4 <HAL_ADC_ErrorCallback>
}
 80034da:	e004      	b.n	80034e6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
}
 80034e6:	bf00      	nop
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7fe faef 	bl	8001ae0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2240      	movs	r2, #64	@ 0x40
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003522:	f043 0204 	orr.w	r2, r3, #4
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f7ff fd5a 	bl	8002fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	@ (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4907      	ldr	r1, [pc, #28]	@ (80035d4 <__NVIC_EnableIRQ+0x38>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000e100 	.word	0xe000e100

080035d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	db0a      	blt.n	8003602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	490c      	ldr	r1, [pc, #48]	@ (8003624 <__NVIC_SetPriority+0x4c>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003600:	e00a      	b.n	8003618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4908      	ldr	r1, [pc, #32]	@ (8003628 <__NVIC_SetPriority+0x50>)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	3b04      	subs	r3, #4
 8003610:	0112      	lsls	r2, r2, #4
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	440b      	add	r3, r1
 8003616:	761a      	strb	r2, [r3, #24]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000e100 	.word	0xe000e100
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	@ 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f1c3 0307 	rsb	r3, r3, #7
 8003646:	2b04      	cmp	r3, #4
 8003648:	bf28      	it	cs
 800364a:	2304      	movcs	r3, #4
 800364c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3304      	adds	r3, #4
 8003652:	2b06      	cmp	r3, #6
 8003654:	d902      	bls.n	800365c <NVIC_EncodePriority+0x30>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3b03      	subs	r3, #3
 800365a:	e000      	b.n	800365e <NVIC_EncodePriority+0x32>
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	401a      	ands	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003674:	f04f 31ff 	mov.w	r1, #4294967295
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	43d9      	mvns	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	4313      	orrs	r3, r2
         );
}
 8003686:	4618      	mov	r0, r3
 8003688:	3724      	adds	r7, #36	@ 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036a4:	d301      	bcc.n	80036aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036aa:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <SysTick_Config+0x40>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b2:	210f      	movs	r1, #15
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f7ff ff8e 	bl	80035d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <SysTick_Config+0x40>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c2:	4b04      	ldr	r3, [pc, #16]	@ (80036d4 <SysTick_Config+0x40>)
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000e010 	.word	0xe000e010

080036d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff29 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003700:	f7ff ff3e 	bl	8003580 <__NVIC_GetPriorityGrouping>
 8003704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7ff ff8e 	bl	800362c <NVIC_EncodePriority>
 8003710:	4602      	mov	r2, r0
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff5d 	bl	80035d8 <__NVIC_SetPriority>
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff31 	bl	800359c <__NVIC_EnableIRQ>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffa2 	bl	8003694 <SysTick_Config>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff fab4 	bl	8002cd4 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e099      	b.n	80038ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003798:	e00f      	b.n	80037ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800379a:	f7ff fa9b 	bl	8002cd4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d908      	bls.n	80037ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2203      	movs	r2, #3
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e078      	b.n	80038ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e8      	bne.n	800379a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4b38      	ldr	r3, [pc, #224]	@ (80038b4 <HAL_DMA_Init+0x158>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2b04      	cmp	r3, #4
 8003812:	d107      	bne.n	8003824 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	4313      	orrs	r3, r2
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0307 	bic.w	r3, r3, #7
 800383a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	2b04      	cmp	r3, #4
 800384c:	d117      	bne.n	800387e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00e      	beq.n	800387e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fb01 	bl	8003e68 <DMA_CheckFifoParam>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2240      	movs	r2, #64	@ 0x40
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800387a:	2301      	movs	r3, #1
 800387c:	e016      	b.n	80038ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 fab8 	bl	8003dfc <DMA_CalcBaseAndBitshift>
 800388c:	4603      	mov	r3, r0
 800388e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	223f      	movs	r2, #63	@ 0x3f
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	f010803f 	.word	0xf010803f

080038b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_DMA_Start_IT+0x26>
 80038da:	2302      	movs	r3, #2
 80038dc:	e040      	b.n	8003960 <HAL_DMA_Start_IT+0xa8>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d12f      	bne.n	8003952 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2202      	movs	r2, #2
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fa4a 	bl	8003da0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003910:	223f      	movs	r2, #63	@ 0x3f
 8003912:	409a      	lsls	r2, r3
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0216 	orr.w	r2, r2, #22
 8003926:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0208 	orr.w	r2, r2, #8
 800393e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	e005      	b.n	800395e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800395a:	2302      	movs	r3, #2
 800395c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003976:	f7ff f9ad 	bl	8002cd4 <HAL_GetTick>
 800397a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d008      	beq.n	800399a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e052      	b.n	8003a40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0216 	bic.w	r2, r2, #22
 80039a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d103      	bne.n	80039ca <HAL_DMA_Abort+0x62>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0208 	bic.w	r2, r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ea:	e013      	b.n	8003a14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039ec:	f7ff f972 	bl	8002cd4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d90c      	bls.n	8003a14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2203      	movs	r2, #3
 8003a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e015      	b.n	8003a40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e4      	bne.n	80039ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a26:	223f      	movs	r2, #63	@ 0x3f
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d004      	beq.n	8003a66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2280      	movs	r2, #128	@ 0x80
 8003a60:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00c      	b.n	8003a80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2205      	movs	r2, #5
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a98:	4b8e      	ldr	r3, [pc, #568]	@ (8003cd4 <HAL_DMA_IRQHandler+0x248>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a8e      	ldr	r2, [pc, #568]	@ (8003cd8 <HAL_DMA_IRQHandler+0x24c>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aaa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01a      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0204 	bic.w	r2, r2, #4
 8003ade:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	409a      	lsls	r2, r3
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	2204      	movs	r2, #4
 8003b34:	409a      	lsls	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b50:	2204      	movs	r2, #4
 8003b52:	409a      	lsls	r2, r3
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b68:	2210      	movs	r2, #16
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d043      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03c      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b86:	2210      	movs	r2, #16
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d018      	beq.n	8003bce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d024      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	4798      	blx	r3
 8003bba:	e01f      	b.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e016      	b.n	8003bfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0208 	bic.w	r2, r2, #8
 8003bea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c00:	2220      	movs	r2, #32
 8003c02:	409a      	lsls	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 808f 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0310 	and.w	r3, r3, #16
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 8087 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c22:	2220      	movs	r2, #32
 8003c24:	409a      	lsls	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d136      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0216 	bic.w	r2, r2, #22
 8003c44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <HAL_DMA_IRQHandler+0x1da>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d007      	beq.n	8003c76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0208 	bic.w	r2, r2, #8
 8003c74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c7a:	223f      	movs	r2, #63	@ 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d07e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
        }
        return;
 8003ca2:	e079      	b.n	8003d98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10d      	bne.n	8003cdc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d031      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
 8003cd0:	e02c      	b.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
 8003cd2:	bf00      	nop
 8003cd4:	20000008 	.word	0x20000008
 8003cd8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d023      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4798      	blx	r3
 8003cec:	e01e      	b.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0210 	bic.w	r2, r2, #16
 8003d0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d032      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d022      	beq.n	8003d86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2205      	movs	r2, #5
 8003d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d307      	bcc.n	8003d74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f2      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x2cc>
 8003d72:	e000      	b.n	8003d76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
 8003d96:	e000      	b.n	8003d9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d98:	bf00      	nop
    }
  }
}
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
 8003dcc:	d108      	bne.n	8003de0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dde:	e007      	b.n	8003df0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]
}
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	3b10      	subs	r3, #16
 8003e0c:	4a14      	ldr	r2, [pc, #80]	@ (8003e60 <DMA_CalcBaseAndBitshift+0x64>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <DMA_CalcBaseAndBitshift+0x68>)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b03      	cmp	r3, #3
 8003e28:	d909      	bls.n	8003e3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	1d1a      	adds	r2, r3, #4
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e3c:	e007      	b.n	8003e4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	aaaaaaab 	.word	0xaaaaaaab
 8003e64:	08007364 	.word	0x08007364

08003e68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11f      	bne.n	8003ec2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d856      	bhi.n	8003f36 <DMA_CheckFifoParam+0xce>
 8003e88:	a201      	add	r2, pc, #4	@ (adr r2, 8003e90 <DMA_CheckFifoParam+0x28>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ea1 	.word	0x08003ea1
 8003e94:	08003eb3 	.word	0x08003eb3
 8003e98:	08003ea1 	.word	0x08003ea1
 8003e9c:	08003f37 	.word	0x08003f37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d046      	beq.n	8003f3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb0:	e043      	b.n	8003f3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003eba:	d140      	bne.n	8003f3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec0:	e03d      	b.n	8003f3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	d121      	bne.n	8003f10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b03      	cmp	r3, #3
 8003ed0:	d837      	bhi.n	8003f42 <DMA_CheckFifoParam+0xda>
 8003ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <DMA_CheckFifoParam+0x70>)
 8003ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed8:	08003ee9 	.word	0x08003ee9
 8003edc:	08003eef 	.word	0x08003eef
 8003ee0:	08003ee9 	.word	0x08003ee9
 8003ee4:	08003f01 	.word	0x08003f01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	73fb      	strb	r3, [r7, #15]
      break;
 8003eec:	e030      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d025      	beq.n	8003f46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003efe:	e022      	b.n	8003f46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f08:	d11f      	bne.n	8003f4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f0e:	e01c      	b.n	8003f4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d903      	bls.n	8003f1e <DMA_CheckFifoParam+0xb6>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d003      	beq.n	8003f24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f1c:	e018      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	73fb      	strb	r3, [r7, #15]
      break;
 8003f22:	e015      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	73fb      	strb	r3, [r7, #15]
      break;
 8003f34:	e00b      	b.n	8003f4e <DMA_CheckFifoParam+0xe6>
      break;
 8003f36:	bf00      	nop
 8003f38:	e00a      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e008      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e006      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f42:	bf00      	nop
 8003f44:	e004      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <DMA_CheckFifoParam+0xe8>
      break;
 8003f4e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	@ 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e16b      	b.n	8004254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 815a 	bne.w	800424e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d130      	bne.n	8004014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0201 	and.w	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d017      	beq.n	8004050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80b4 	beq.w	800424e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b60      	ldr	r3, [pc, #384]	@ (800426c <HAL_GPIO_Init+0x30c>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	4a5f      	ldr	r2, [pc, #380]	@ (800426c <HAL_GPIO_Init+0x30c>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80040f6:	4b5d      	ldr	r3, [pc, #372]	@ (800426c <HAL_GPIO_Init+0x30c>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a5b      	ldr	r2, [pc, #364]	@ (8004270 <HAL_GPIO_Init+0x310>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a52      	ldr	r2, [pc, #328]	@ (8004274 <HAL_GPIO_Init+0x314>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02b      	beq.n	8004186 <HAL_GPIO_Init+0x226>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a51      	ldr	r2, [pc, #324]	@ (8004278 <HAL_GPIO_Init+0x318>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d025      	beq.n	8004182 <HAL_GPIO_Init+0x222>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a50      	ldr	r2, [pc, #320]	@ (800427c <HAL_GPIO_Init+0x31c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01f      	beq.n	800417e <HAL_GPIO_Init+0x21e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a4f      	ldr	r2, [pc, #316]	@ (8004280 <HAL_GPIO_Init+0x320>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d019      	beq.n	800417a <HAL_GPIO_Init+0x21a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a4e      	ldr	r2, [pc, #312]	@ (8004284 <HAL_GPIO_Init+0x324>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_Init+0x216>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a4d      	ldr	r2, [pc, #308]	@ (8004288 <HAL_GPIO_Init+0x328>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00d      	beq.n	8004172 <HAL_GPIO_Init+0x212>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4c      	ldr	r2, [pc, #304]	@ (800428c <HAL_GPIO_Init+0x32c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <HAL_GPIO_Init+0x20e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4b      	ldr	r2, [pc, #300]	@ (8004290 <HAL_GPIO_Init+0x330>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_GPIO_Init+0x20a>
 8004166:	2307      	movs	r3, #7
 8004168:	e00e      	b.n	8004188 <HAL_GPIO_Init+0x228>
 800416a:	2308      	movs	r3, #8
 800416c:	e00c      	b.n	8004188 <HAL_GPIO_Init+0x228>
 800416e:	2306      	movs	r3, #6
 8004170:	e00a      	b.n	8004188 <HAL_GPIO_Init+0x228>
 8004172:	2305      	movs	r3, #5
 8004174:	e008      	b.n	8004188 <HAL_GPIO_Init+0x228>
 8004176:	2304      	movs	r3, #4
 8004178:	e006      	b.n	8004188 <HAL_GPIO_Init+0x228>
 800417a:	2303      	movs	r3, #3
 800417c:	e004      	b.n	8004188 <HAL_GPIO_Init+0x228>
 800417e:	2302      	movs	r3, #2
 8004180:	e002      	b.n	8004188 <HAL_GPIO_Init+0x228>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <HAL_GPIO_Init+0x228>
 8004186:	2300      	movs	r3, #0
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	f002 0203 	and.w	r2, r2, #3
 800418e:	0092      	lsls	r2, r2, #2
 8004190:	4093      	lsls	r3, r2
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4313      	orrs	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004198:	4935      	ldr	r1, [pc, #212]	@ (8004270 <HAL_GPIO_Init+0x310>)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	3302      	adds	r3, #2
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004294 <HAL_GPIO_Init+0x334>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ca:	4a32      	ldr	r2, [pc, #200]	@ (8004294 <HAL_GPIO_Init+0x334>)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d0:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <HAL_GPIO_Init+0x334>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f4:	4a27      	ldr	r2, [pc, #156]	@ (8004294 <HAL_GPIO_Init+0x334>)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041fa:	4b26      	ldr	r3, [pc, #152]	@ (8004294 <HAL_GPIO_Init+0x334>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800421e:	4a1d      	ldr	r2, [pc, #116]	@ (8004294 <HAL_GPIO_Init+0x334>)
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004224:	4b1b      	ldr	r3, [pc, #108]	@ (8004294 <HAL_GPIO_Init+0x334>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004248:	4a12      	ldr	r2, [pc, #72]	@ (8004294 <HAL_GPIO_Init+0x334>)
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b0f      	cmp	r3, #15
 8004258:	f67f ae90 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	3724      	adds	r7, #36	@ 0x24
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40023800 	.word	0x40023800
 8004270:	40013800 	.word	0x40013800
 8004274:	40020000 	.word	0x40020000
 8004278:	40020400 	.word	0x40020400
 800427c:	40020800 	.word	0x40020800
 8004280:	40020c00 	.word	0x40020c00
 8004284:	40021000 	.word	0x40021000
 8004288:	40021400 	.word	0x40021400
 800428c:	40021800 	.word	0x40021800
 8004290:	40021c00 	.word	0x40021c00
 8004294:	40013c00 	.word	0x40013c00

08004298 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	460b      	mov	r3, r1
 80042a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	887b      	ldrh	r3, [r7, #2]
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e001      	b.n	80042ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
 80042d4:	4613      	mov	r3, r2
 80042d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d8:	787b      	ldrb	r3, [r7, #1]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042de:	887a      	ldrh	r2, [r7, #2]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e4:	e003      	b.n	80042ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042e6:	887b      	ldrh	r3, [r7, #2]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004306:	4b08      	ldr	r3, [pc, #32]	@ (8004328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004312:	4a05      	ldr	r2, [pc, #20]	@ (8004328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe fa28 	bl	8002770 <HAL_GPIO_EXTI_Callback>
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40013c00 	.word	0x40013c00

0800432c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e267      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d075      	beq.n	8004436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800434a:	4b88      	ldr	r3, [pc, #544]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00c      	beq.n	8004370 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004356:	4b85      	ldr	r3, [pc, #532]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800435e:	2b08      	cmp	r3, #8
 8004360:	d112      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004362:	4b82      	ldr	r3, [pc, #520]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800436a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800436e:	d10b      	bne.n	8004388 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	4b7e      	ldr	r3, [pc, #504]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d05b      	beq.n	8004434 <HAL_RCC_OscConfig+0x108>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d157      	bne.n	8004434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e242      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_OscConfig+0x74>
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a75      	ldr	r2, [pc, #468]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e01d      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x98>
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a6f      	ldr	r2, [pc, #444]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	4b6d      	ldr	r3, [pc, #436]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a6c      	ldr	r2, [pc, #432]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0xb0>
 80043c4:	4b69      	ldr	r3, [pc, #420]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b66      	ldr	r3, [pc, #408]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a65      	ldr	r2, [pc, #404]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80043d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d013      	beq.n	800440c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e4:	f7fe fc76 	bl	8002cd4 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ec:	f7fe fc72 	bl	8002cd4 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b64      	cmp	r3, #100	@ 0x64
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e207      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	4b5b      	ldr	r3, [pc, #364]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0xc0>
 800440a:	e014      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fc62 	bl	8002cd4 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004414:	f7fe fc5e 	bl	8002cd4 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b64      	cmp	r3, #100	@ 0x64
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e1f3      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	4b51      	ldr	r3, [pc, #324]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0xe8>
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d063      	beq.n	800450a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004442:	4b4a      	ldr	r3, [pc, #296]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444e:	4b47      	ldr	r3, [pc, #284]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004456:	2b08      	cmp	r3, #8
 8004458:	d11c      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445a:	4b44      	ldr	r3, [pc, #272]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d116      	bne.n	8004494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004466:	4b41      	ldr	r3, [pc, #260]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1c7      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447e:	4b3b      	ldr	r3, [pc, #236]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4937      	ldr	r1, [pc, #220]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	e03a      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d020      	beq.n	80044de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800449c:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe fc17 	bl	8002cd4 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fe fc13 	bl	8002cd4 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1a8      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	4b2b      	ldr	r3, [pc, #172]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	4b28      	ldr	r3, [pc, #160]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4925      	ldr	r1, [pc, #148]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]
 80044dc:	e015      	b.n	800450a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044de:	4b24      	ldr	r3, [pc, #144]	@ (8004570 <HAL_RCC_OscConfig+0x244>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fbf6 	bl	8002cd4 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ec:	f7fe fbf2 	bl	8002cd4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e187      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b00      	cmp	r3, #0
 8004514:	d036      	beq.n	8004584 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d016      	beq.n	800454c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451e:	4b15      	ldr	r3, [pc, #84]	@ (8004574 <HAL_RCC_OscConfig+0x248>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004524:	f7fe fbd6 	bl	8002cd4 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452c:	f7fe fbd2 	bl	8002cd4 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e167      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <HAL_RCC_OscConfig+0x240>)
 8004540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x200>
 800454a:	e01b      	b.n	8004584 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454c:	4b09      	ldr	r3, [pc, #36]	@ (8004574 <HAL_RCC_OscConfig+0x248>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004552:	f7fe fbbf 	bl	8002cd4 <HAL_GetTick>
 8004556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004558:	e00e      	b.n	8004578 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455a:	f7fe fbbb 	bl	8002cd4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d907      	bls.n	8004578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e150      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800456c:	40023800 	.word	0x40023800
 8004570:	42470000 	.word	0x42470000
 8004574:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b88      	ldr	r3, [pc, #544]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800457a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ea      	bne.n	800455a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8097 	beq.w	80046c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b81      	ldr	r3, [pc, #516]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	4b7d      	ldr	r3, [pc, #500]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	4a7c      	ldr	r2, [pc, #496]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045b2:	4b7a      	ldr	r3, [pc, #488]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b77      	ldr	r3, [pc, #476]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b74      	ldr	r3, [pc, #464]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a73      	ldr	r2, [pc, #460]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fe fb7b 	bl	8002cd4 <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fe fb77 	bl	8002cd4 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e10c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b6a      	ldr	r3, [pc, #424]	@ (80047a0 <HAL_RCC_OscConfig+0x474>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x2ea>
 8004608:	4b64      	ldr	r3, [pc, #400]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460c:	4a63      	ldr	r2, [pc, #396]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6713      	str	r3, [r2, #112]	@ 0x70
 8004614:	e01c      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b05      	cmp	r3, #5
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x30c>
 800461e:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	4a5e      	ldr	r2, [pc, #376]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	6713      	str	r3, [r2, #112]	@ 0x70
 800462a:	4b5c      	ldr	r3, [pc, #368]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	4a5b      	ldr	r2, [pc, #364]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6713      	str	r3, [r2, #112]	@ 0x70
 8004636:	e00b      	b.n	8004650 <HAL_RCC_OscConfig+0x324>
 8004638:	4b58      	ldr	r3, [pc, #352]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800463a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463c:	4a57      	ldr	r2, [pc, #348]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	6713      	str	r3, [r2, #112]	@ 0x70
 8004644:	4b55      	ldr	r3, [pc, #340]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004648:	4a54      	ldr	r2, [pc, #336]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 800464a:	f023 0304 	bic.w	r3, r3, #4
 800464e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d015      	beq.n	8004684 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fe fb3c 	bl	8002cd4 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fe fb38 	bl	8002cd4 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e0cb      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004676:	4b49      	ldr	r3, [pc, #292]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ee      	beq.n	8004660 <HAL_RCC_OscConfig+0x334>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004684:	f7fe fb26 	bl	8002cd4 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe fb22 	bl	8002cd4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0b5      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a2:	4b3e      	ldr	r3, [pc, #248]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1ee      	bne.n	800468c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ae:	7dfb      	ldrb	r3, [r7, #23]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b4:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	4a38      	ldr	r2, [pc, #224]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 80a1 	beq.w	800480c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ca:	4b34      	ldr	r3, [pc, #208]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d05c      	beq.n	8004790 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d141      	bne.n	8004762 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fe faf6 	bl	8002cd4 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fe faf2 	bl	8002cd4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e087      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b27      	ldr	r3, [pc, #156]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	019b      	lsls	r3, r3, #6
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	085b      	lsrs	r3, r3, #1
 8004722:	3b01      	subs	r3, #1
 8004724:	041b      	lsls	r3, r3, #16
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	061b      	lsls	r3, r3, #24
 800472e:	491b      	ldr	r1, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004734:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fe facb 	bl	8002cd4 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004742:	f7fe fac7 	bl	8002cd4 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e05c      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x416>
 8004760:	e054      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b10      	ldr	r3, [pc, #64]	@ (80047a4 <HAL_RCC_OscConfig+0x478>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fe fab4 	bl	8002cd4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fe fab0 	bl	8002cd4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e045      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <HAL_RCC_OscConfig+0x470>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x444>
 800478e:	e03d      	b.n	800480c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e038      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
 800479c:	40023800 	.word	0x40023800
 80047a0:	40007000 	.word	0x40007000
 80047a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004818 <HAL_RCC_OscConfig+0x4ec>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d028      	beq.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d121      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d11a      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	085b      	lsrs	r3, r3, #1
 80047f0:	3b01      	subs	r3, #1
 80047f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d107      	bne.n	8004808 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004802:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800

0800481c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0cc      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004830:	4b68      	ldr	r3, [pc, #416]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d90c      	bls.n	8004858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800483e:	4b65      	ldr	r3, [pc, #404]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b63      	ldr	r3, [pc, #396]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0b8      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d020      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004870:	4b59      	ldr	r3, [pc, #356]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a58      	ldr	r2, [pc, #352]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800487a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004888:	4b53      	ldr	r3, [pc, #332]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4a52      	ldr	r2, [pc, #328]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004894:	4b50      	ldr	r3, [pc, #320]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	494d      	ldr	r1, [pc, #308]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d044      	beq.n	800493c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	4b47      	ldr	r3, [pc, #284]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d119      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e07f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d003      	beq.n	80048da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d6:	2b03      	cmp	r3, #3
 80048d8:	d107      	bne.n	80048ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048da:	4b3f      	ldr	r3, [pc, #252]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e06f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ea:	4b3b      	ldr	r3, [pc, #236]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e067      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048fa:	4b37      	ldr	r3, [pc, #220]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f023 0203 	bic.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	4934      	ldr	r1, [pc, #208]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	4313      	orrs	r3, r2
 800490a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800490c:	f7fe f9e2 	bl	8002cd4 <HAL_GetTick>
 8004910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	e00a      	b.n	800492a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004914:	f7fe f9de 	bl	8002cd4 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004922:	4293      	cmp	r3, r2
 8004924:	d901      	bls.n	800492a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e04f      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492a:	4b2b      	ldr	r3, [pc, #172]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 020c 	and.w	r2, r3, #12
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	429a      	cmp	r2, r3
 800493a:	d1eb      	bne.n	8004914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800493c:	4b25      	ldr	r3, [pc, #148]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d20c      	bcs.n	8004964 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b22      	ldr	r3, [pc, #136]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004952:	4b20      	ldr	r3, [pc, #128]	@ (80049d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d001      	beq.n	8004964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e032      	b.n	80049ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004970:	4b19      	ldr	r3, [pc, #100]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4916      	ldr	r1, [pc, #88]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d009      	beq.n	80049a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	490e      	ldr	r1, [pc, #56]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049a2:	f000 f821 	bl	80049e8 <HAL_RCC_GetSysClockFreq>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	490a      	ldr	r1, [pc, #40]	@ (80049dc <HAL_RCC_ClockConfig+0x1c0>)
 80049b4:	5ccb      	ldrb	r3, [r1, r3]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	4a09      	ldr	r2, [pc, #36]	@ (80049e0 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_RCC_ClockConfig+0x1c8>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fe f942 	bl	8002c4c <HAL_InitTick>

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023c00 	.word	0x40023c00
 80049d8:	40023800 	.word	0x40023800
 80049dc:	0800734c 	.word	0x0800734c
 80049e0:	20000008 	.word	0x20000008
 80049e4:	2000000c 	.word	0x2000000c

080049e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049ec:	b094      	sub	sp, #80	@ 0x50
 80049ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a00:	4b79      	ldr	r3, [pc, #484]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d00d      	beq.n	8004a28 <HAL_RCC_GetSysClockFreq+0x40>
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	f200 80e1 	bhi.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x34>
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a1a:	e0db      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a1c:	4b73      	ldr	r3, [pc, #460]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x204>)
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a20:	e0db      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a22:	4b73      	ldr	r3, [pc, #460]	@ (8004bf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a26:	e0d8      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a28:	4b6f      	ldr	r3, [pc, #444]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a32:	4b6d      	ldr	r3, [pc, #436]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	099b      	lsrs	r3, r3, #6
 8004a44:	2200      	movs	r2, #0
 8004a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a52:	2300      	movs	r3, #0
 8004a54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	f04f 0000 	mov.w	r0, #0
 8004a62:	f04f 0100 	mov.w	r1, #0
 8004a66:	0159      	lsls	r1, r3, #5
 8004a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6c:	0150      	lsls	r0, r2, #5
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4621      	mov	r1, r4
 8004a74:	1a51      	subs	r1, r2, r1
 8004a76:	6139      	str	r1, [r7, #16]
 8004a78:	4629      	mov	r1, r5
 8004a7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a8c:	4659      	mov	r1, fp
 8004a8e:	018b      	lsls	r3, r1, #6
 8004a90:	4651      	mov	r1, sl
 8004a92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a96:	4651      	mov	r1, sl
 8004a98:	018a      	lsls	r2, r1, #6
 8004a9a:	4651      	mov	r1, sl
 8004a9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	eb63 0901 	sbc.w	r9, r3, r1
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004aba:	4690      	mov	r8, r2
 8004abc:	4699      	mov	r9, r3
 8004abe:	4623      	mov	r3, r4
 8004ac0:	eb18 0303 	adds.w	r3, r8, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	462b      	mov	r3, r5
 8004ac8:	eb49 0303 	adc.w	r3, r9, r3
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ada:	4629      	mov	r1, r5
 8004adc:	024b      	lsls	r3, r1, #9
 8004ade:	4621      	mov	r1, r4
 8004ae0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	024a      	lsls	r2, r1, #9
 8004ae8:	4610      	mov	r0, r2
 8004aea:	4619      	mov	r1, r3
 8004aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aee:	2200      	movs	r2, #0
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004af4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af8:	f7fb fec8 	bl	800088c <__aeabi_uldivmod>
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	4613      	mov	r3, r2
 8004b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b04:	e058      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b38      	ldr	r3, [pc, #224]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4611      	mov	r1, r2
 8004b12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	f04f 0000 	mov.w	r0, #0
 8004b28:	f04f 0100 	mov.w	r1, #0
 8004b2c:	0159      	lsls	r1, r3, #5
 8004b2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b32:	0150      	lsls	r0, r2, #5
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4641      	mov	r1, r8
 8004b3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b58:	ebb2 040a 	subs.w	r4, r2, sl
 8004b5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4643      	mov	r3, r8
 8004b76:	18e3      	adds	r3, r4, r3
 8004b78:	603b      	str	r3, [r7, #0]
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	eb45 0303 	adc.w	r3, r5, r3
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	028b      	lsls	r3, r1, #10
 8004b92:	4621      	mov	r1, r4
 8004b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b98:	4621      	mov	r1, r4
 8004b9a:	028a      	lsls	r2, r1, #10
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	61fa      	str	r2, [r7, #28]
 8004ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bac:	f7fb fe6e 	bl	800088c <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004be8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCC_GetSysClockFreq+0x204>)
 8004bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3750      	adds	r7, #80	@ 0x50
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	@ (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000008 	.word	0x20000008

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a9b      	lsrs	r3, r3, #10
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4903      	ldr	r1, [pc, #12]	@ (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	0800735c 	.word	0x0800735c

08004c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c38:	f7ff ffdc 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0b5b      	lsrs	r3, r3, #13
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4903      	ldr	r1, [pc, #12]	@ (8004c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4a:	5ccb      	ldrb	r3, [r1, r3]
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	0800735c 	.word	0x0800735c

08004c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e041      	b.n	8004cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7fd fe38 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f000 fad8 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e041      	b.n	8004d90 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f839 	bl	8004d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f000 fa89 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x24>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e022      	b.n	8004e16 <HAL_TIM_PWM_Start+0x6a>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d109      	bne.n	8004dea <HAL_TIM_PWM_Start+0x3e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e015      	b.n	8004e16 <HAL_TIM_PWM_Start+0x6a>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d109      	bne.n	8004e04 <HAL_TIM_PWM_Start+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e008      	b.n	8004e16 <HAL_TIM_PWM_Start+0x6a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e07c      	b.n	8004f18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_TIM_PWM_Start+0x82>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e2c:	e013      	b.n	8004e56 <HAL_TIM_PWM_Start+0xaa>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d104      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x92>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e3c:	e00b      	b.n	8004e56 <HAL_TIM_PWM_Start+0xaa>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d104      	bne.n	8004e4e <HAL_TIM_PWM_Start+0xa2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e4c:	e003      	b.n	8004e56 <HAL_TIM_PWM_Start+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fce6 	bl	8005830 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a2d      	ldr	r2, [pc, #180]	@ (8004f20 <HAL_TIM_PWM_Start+0x174>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_PWM_Start+0xcc>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2c      	ldr	r2, [pc, #176]	@ (8004f24 <HAL_TIM_PWM_Start+0x178>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_TIM_PWM_Start+0xd0>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e000      	b.n	8004e7e <HAL_TIM_PWM_Start+0xd2>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a22      	ldr	r2, [pc, #136]	@ (8004f20 <HAL_TIM_PWM_Start+0x174>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d022      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea4:	d01d      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <HAL_TIM_PWM_Start+0x17c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d018      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <HAL_TIM_PWM_Start+0x180>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d013      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f30 <HAL_TIM_PWM_Start+0x184>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	@ (8004f24 <HAL_TIM_PWM_Start+0x178>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d009      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a18      	ldr	r2, [pc, #96]	@ (8004f34 <HAL_TIM_PWM_Start+0x188>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d004      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x136>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <HAL_TIM_PWM_Start+0x18c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d111      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d010      	beq.n	8004f16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f04:	e007      	b.n	8004f16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40010400 	.word	0x40010400
 8004f28:	40000400 	.word	0x40000400
 8004f2c:	40000800 	.word	0x40000800
 8004f30:	40000c00 	.word	0x40000c00
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40001800 	.word	0x40001800

08004f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0ae      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	f200 809f 	bhi.w	80050a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004fa5 	.word	0x08004fa5
 8004f74:	080050a9 	.word	0x080050a9
 8004f78:	080050a9 	.word	0x080050a9
 8004f7c:	080050a9 	.word	0x080050a9
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	080050a9 	.word	0x080050a9
 8004f88:	080050a9 	.word	0x080050a9
 8004f8c:	080050a9 	.word	0x080050a9
 8004f90:	08005027 	.word	0x08005027
 8004f94:	080050a9 	.word	0x080050a9
 8004f98:	080050a9 	.word	0x080050a9
 8004f9c:	080050a9 	.word	0x080050a9
 8004fa0:	08005067 	.word	0x08005067
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 f9f6 	bl	800539c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0208 	orr.w	r2, r2, #8
 8004fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0204 	bic.w	r2, r2, #4
 8004fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6999      	ldr	r1, [r3, #24]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691a      	ldr	r2, [r3, #16]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	619a      	str	r2, [r3, #24]
      break;
 8004fe2:	e064      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fa46 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	619a      	str	r2, [r3, #24]
      break;
 8005024:	e043      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	4618      	mov	r0, r3
 800502e:	f000 fa9b 	bl	8005568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0208 	orr.w	r2, r2, #8
 8005040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0204 	bic.w	r2, r2, #4
 8005050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69d9      	ldr	r1, [r3, #28]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	61da      	str	r2, [r3, #28]
      break;
 8005064:	e023      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 faef 	bl	8005650 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	021a      	lsls	r2, r3, #8
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	61da      	str	r2, [r3, #28]
      break;
 80050a6:	e002      	b.n	80050ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050ca:	2300      	movs	r3, #0
 80050cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_ConfigClockSource+0x1c>
 80050d8:	2302      	movs	r3, #2
 80050da:	e0b4      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x186>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005114:	d03e      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0xd4>
 8005116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800511a:	f200 8087 	bhi.w	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	f000 8086 	beq.w	8005232 <HAL_TIM_ConfigClockSource+0x172>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d87f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b70      	cmp	r3, #112	@ 0x70
 800512e:	d01a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xa6>
 8005130:	2b70      	cmp	r3, #112	@ 0x70
 8005132:	d87b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005134:	2b60      	cmp	r3, #96	@ 0x60
 8005136:	d050      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x11a>
 8005138:	2b60      	cmp	r3, #96	@ 0x60
 800513a:	d877      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800513c:	2b50      	cmp	r3, #80	@ 0x50
 800513e:	d03c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xfa>
 8005140:	2b50      	cmp	r3, #80	@ 0x50
 8005142:	d873      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d058      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x13a>
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d86f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800514c:	2b30      	cmp	r3, #48	@ 0x30
 800514e:	d064      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005150:	2b30      	cmp	r3, #48	@ 0x30
 8005152:	d86b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d060      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d867      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005160:	2b10      	cmp	r3, #16
 8005162:	d05a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15a>
 8005164:	e062      	b.n	800522c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	f000 fb3b 	bl	80057f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	609a      	str	r2, [r3, #8]
      break;
 8005192:	e04f      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	f000 fb24 	bl	80057f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051b6:	609a      	str	r2, [r3, #8]
      break;
 80051b8:	e03c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 fa98 	bl	80056fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2150      	movs	r1, #80	@ 0x50
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 faf1 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80051d8:	e02c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 fab7 	bl	800575a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2160      	movs	r1, #96	@ 0x60
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fae1 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 80051f8:	e01c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 fa78 	bl	80056fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2140      	movs	r1, #64	@ 0x40
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fad1 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005218:	e00c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 fac8 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 800522a:	e003      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	e000      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a43      	ldr	r2, [pc, #268]	@ (8005370 <TIM_Base_SetConfig+0x120>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a40      	ldr	r2, [pc, #256]	@ (8005374 <TIM_Base_SetConfig+0x124>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3f      	ldr	r2, [pc, #252]	@ (8005378 <TIM_Base_SetConfig+0x128>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3e      	ldr	r2, [pc, #248]	@ (800537c <TIM_Base_SetConfig+0x12c>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3d      	ldr	r2, [pc, #244]	@ (8005380 <TIM_Base_SetConfig+0x130>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a32      	ldr	r2, [pc, #200]	@ (8005370 <TIM_Base_SetConfig+0x120>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b0:	d027      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005374 <TIM_Base_SetConfig+0x124>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d023      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005378 <TIM_Base_SetConfig+0x128>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	@ (800537c <TIM_Base_SetConfig+0x12c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2c      	ldr	r2, [pc, #176]	@ (8005380 <TIM_Base_SetConfig+0x130>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005384 <TIM_Base_SetConfig+0x134>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005388 <TIM_Base_SetConfig+0x138>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a29      	ldr	r2, [pc, #164]	@ (800538c <TIM_Base_SetConfig+0x13c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a28      	ldr	r2, [pc, #160]	@ (8005390 <TIM_Base_SetConfig+0x140>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a27      	ldr	r2, [pc, #156]	@ (8005394 <TIM_Base_SetConfig+0x144>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a26      	ldr	r2, [pc, #152]	@ (8005398 <TIM_Base_SetConfig+0x148>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a0e      	ldr	r2, [pc, #56]	@ (8005370 <TIM_Base_SetConfig+0x120>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_Base_SetConfig+0xf2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a10      	ldr	r2, [pc, #64]	@ (8005380 <TIM_Base_SetConfig+0x130>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d103      	bne.n	800534a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f043 0204 	orr.w	r2, r3, #4
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40014400 	.word	0x40014400
 800538c:	40014800 	.word	0x40014800
 8005390:	40001800 	.word	0x40001800
 8005394:	40001c00 	.word	0x40001c00
 8005398:	40002000 	.word	0x40002000

0800539c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f023 0201 	bic.w	r2, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0302 	bic.w	r3, r3, #2
 80053e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a20      	ldr	r2, [pc, #128]	@ (8005474 <TIM_OC1_SetConfig+0xd8>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC1_SetConfig+0x64>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a1f      	ldr	r2, [pc, #124]	@ (8005478 <TIM_OC1_SetConfig+0xdc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d10c      	bne.n	800541a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f023 0308 	bic.w	r3, r3, #8
 8005406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a15      	ldr	r2, [pc, #84]	@ (8005474 <TIM_OC1_SetConfig+0xd8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC1_SetConfig+0x8e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a14      	ldr	r2, [pc, #80]	@ (8005478 <TIM_OC1_SetConfig+0xdc>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40010000 	.word	0x40010000
 8005478:	40010400 	.word	0x40010400

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f023 0210 	bic.w	r2, r3, #16
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a22      	ldr	r2, [pc, #136]	@ (8005560 <TIM_OC2_SetConfig+0xe4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d003      	beq.n	80054e4 <TIM_OC2_SetConfig+0x68>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a21      	ldr	r2, [pc, #132]	@ (8005564 <TIM_OC2_SetConfig+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d10d      	bne.n	8005500 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a17      	ldr	r2, [pc, #92]	@ (8005560 <TIM_OC2_SetConfig+0xe4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC2_SetConfig+0x94>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a16      	ldr	r2, [pc, #88]	@ (8005564 <TIM_OC2_SetConfig+0xe8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d113      	bne.n	8005538 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40010400 	.word	0x40010400

08005568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	021b      	lsls	r3, r3, #8
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a21      	ldr	r2, [pc, #132]	@ (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d003      	beq.n	80055ce <TIM_OC3_SetConfig+0x66>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a20      	ldr	r2, [pc, #128]	@ (800564c <TIM_OC3_SetConfig+0xe4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a16      	ldr	r2, [pc, #88]	@ (8005648 <TIM_OC3_SetConfig+0xe0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC3_SetConfig+0x92>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a15      	ldr	r2, [pc, #84]	@ (800564c <TIM_OC3_SetConfig+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d113      	bne.n	8005622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40010000 	.word	0x40010000
 800564c:	40010400 	.word	0x40010400

08005650 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800569a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	031b      	lsls	r3, r3, #12
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	@ (80056f4 <TIM_OC4_SetConfig+0xa4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_OC4_SetConfig+0x68>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a11      	ldr	r2, [pc, #68]	@ (80056f8 <TIM_OC4_SetConfig+0xa8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d109      	bne.n	80056cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	019b      	lsls	r3, r3, #6
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40010400 	.word	0x40010400

080056fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b087      	sub	sp, #28
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f023 0201 	bic.w	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	f023 030a 	bic.w	r3, r3, #10
 8005738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575a:	b480      	push	{r7}
 800575c:	b087      	sub	sp, #28
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0210 	bic.w	r2, r3, #16
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	031b      	lsls	r3, r3, #12
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f043 0307 	orr.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	431a      	orrs	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 031f 	and.w	r3, r3, #31
 8005842:	2201      	movs	r2, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1a      	ldr	r2, [r3, #32]
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	43db      	mvns	r3, r3
 8005852:	401a      	ands	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f003 031f 	and.w	r3, r3, #31
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	fa01 f303 	lsl.w	r3, r1, r3
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d101      	bne.n	8005894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005890:	2302      	movs	r3, #2
 8005892:	e05a      	b.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a21      	ldr	r2, [pc, #132]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d022      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e0:	d01d      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d018      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a17      	ldr	r2, [pc, #92]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10c      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40010000 	.word	0x40010000
 800595c:	40000400 	.word	0x40000400
 8005960:	40000800 	.word	0x40000800
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40010400 	.word	0x40010400
 800596c:	40014000 	.word	0x40014000
 8005970:	40001800 	.word	0x40001800

08005974 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e042      	b.n	8005a0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fd f808 	bl	80029b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	@ 0x24
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fd7f 	bl	80064bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	@ 0x28
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d175      	bne.n	8005b20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d002      	beq.n	8005a40 <HAL_UART_Transmit+0x2c>
 8005a3a:	88fb      	ldrh	r3, [r7, #6]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e06e      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2221      	movs	r2, #33	@ 0x21
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a52:	f7fd f93f 	bl	8002cd4 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6c:	d108      	bne.n	8005a80 <HAL_UART_Transmit+0x6c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d104      	bne.n	8005a80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	61bb      	str	r3, [r7, #24]
 8005a7e:	e003      	b.n	8005a88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a88:	e02e      	b.n	8005ae8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2180      	movs	r1, #128	@ 0x80
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fb1d 	bl	80060d4 <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e03a      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ac0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e007      	b.n	8005ada <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1cb      	bne.n	8005a8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2200      	movs	r2, #0
 8005afa:	2140      	movs	r1, #64	@ 0x40
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 fae9 	bl	80060d4 <UART_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0ba      	sub	sp, #232	@ 0xe8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_UART_IRQHandler+0x66>
 8005b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fbd7 	bl	800633e <UART_Receive_IT>
      return;
 8005b90:	e273      	b.n	800607a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 80de 	beq.w	8005d58 <HAL_UART_IRQHandler+0x22c>
 8005b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80d1 	beq.w	8005d58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_UART_IRQHandler+0xae>
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd2:	f043 0201 	orr.w	r2, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <HAL_UART_IRQHandler+0xd2>
 8005be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <HAL_UART_IRQHandler+0xf6>
 8005c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d005      	beq.n	8005c22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d011      	beq.n	8005c52 <HAL_UART_IRQHandler+0x126>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d105      	bne.n	8005c46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d005      	beq.n	8005c52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	f043 0208 	orr.w	r2, r3, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 820a 	beq.w	8006070 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d008      	beq.n	8005c7a <HAL_UART_IRQHandler+0x14e>
 8005c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb62 	bl	800633e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	bf0c      	ite	eq
 8005c88:	2301      	moveq	r3, #1
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c96:	f003 0308 	and.w	r3, r3, #8
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_UART_IRQHandler+0x17a>
 8005c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d04f      	beq.n	8005d46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fa6d 	bl	8006186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d141      	bne.n	8005d3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3314      	adds	r3, #20
 8005cc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3314      	adds	r3, #20
 8005ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d9      	bne.n	8005cba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d013      	beq.n	8005d36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d12:	4a8a      	ldr	r2, [pc, #552]	@ (8005f3c <HAL_UART_IRQHandler+0x410>)
 8005d14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd fe94 	bl	8003a48 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	e00e      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9b6 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	e00a      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9b2 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e006      	b.n	8005d54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9ae 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d52:	e18d      	b.n	8006070 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	bf00      	nop
    return;
 8005d56:	e18b      	b.n	8006070 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	f040 8167 	bne.w	8006030 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d66:	f003 0310 	and.w	r3, r3, #16
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8160 	beq.w	8006030 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f003 0310 	and.w	r3, r3, #16
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 8159 	beq.w	8006030 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	60bb      	str	r3, [r7, #8]
 8005d92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9e:	2b40      	cmp	r3, #64	@ 0x40
 8005da0:	f040 80ce 	bne.w	8005f40 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80a9 	beq.w	8005f0c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f080 80a2 	bcs.w	8005f0c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dda:	f000 8088 	beq.w	8005eee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	330c      	adds	r3, #12
 8005de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005df4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1d9      	bne.n	8005dde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e3c:	f023 0301 	bic.w	r3, r3, #1
 8005e40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3314      	adds	r3, #20
 8005e4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e1      	bne.n	8005e2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3314      	adds	r3, #20
 8005e86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005e8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005e90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005e92:	e841 2300 	strex	r3, r2, [r1]
 8005e96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1e3      	bne.n	8005e66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ebe:	f023 0310 	bic.w	r3, r3, #16
 8005ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	330c      	adds	r3, #12
 8005ecc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ed0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ed2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ed6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e3      	bne.n	8005eac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fd fd3d 	bl	8003968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8d9 	bl	80060bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005f0a:	e0b3      	b.n	8006074 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f14:	429a      	cmp	r2, r3
 8005f16:	f040 80ad 	bne.w	8006074 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f24:	f040 80a6 	bne.w	8006074 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8c1 	bl	80060bc <HAL_UARTEx_RxEventCallback>
      return;
 8005f3a:	e09b      	b.n	8006074 <HAL_UART_IRQHandler+0x548>
 8005f3c:	0800624d 	.word	0x0800624d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 808e 	beq.w	8006078 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8089 	beq.w	8006078 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	330c      	adds	r3, #12
 8005f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e3      	bne.n	8005f66 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	623b      	str	r3, [r7, #32]
   return(result);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0310 	bic.w	r3, r3, #16
 8005ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006008:	61fa      	str	r2, [r7, #28]
 800600a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	69b9      	ldr	r1, [r7, #24]
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	617b      	str	r3, [r7, #20]
   return(result);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f847 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800602e:	e023      	b.n	8006078 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006038:	2b00      	cmp	r3, #0
 800603a:	d009      	beq.n	8006050 <HAL_UART_IRQHandler+0x524>
 800603c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f910 	bl	800626e <UART_Transmit_IT>
    return;
 800604e:	e014      	b.n	800607a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <HAL_UART_IRQHandler+0x54e>
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f950 	bl	800630e <UART_EndTransmit_IT>
    return;
 800606e:	e004      	b.n	800607a <HAL_UART_IRQHandler+0x54e>
    return;
 8006070:	bf00      	nop
 8006072:	e002      	b.n	800607a <HAL_UART_IRQHandler+0x54e>
      return;
 8006074:	bf00      	nop
 8006076:	e000      	b.n	800607a <HAL_UART_IRQHandler+0x54e>
      return;
 8006078:	bf00      	nop
  }
}
 800607a:	37e8      	adds	r7, #232	@ 0xe8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e4:	e03b      	b.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d037      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fc fdf1 	bl	8002cd4 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <UART_WaitOnFlagUntilTimeout+0x30>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e03a      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b00      	cmp	r3, #0
 8006114:	d023      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b80      	cmp	r3, #128	@ 0x80
 800611a:	d020      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d01d      	beq.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b08      	cmp	r3, #8
 800612e:	d116      	bne.n	800615e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f81d 	bl	8006186 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2208      	movs	r2, #8
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e00f      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4013      	ands	r3, r2
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	bf0c      	ite	eq
 800616e:	2301      	moveq	r3, #1
 8006170:	2300      	movne	r3, #0
 8006172:	b2db      	uxtb	r3, r3
 8006174:	461a      	mov	r2, r3
 8006176:	79fb      	ldrb	r3, [r7, #7]
 8006178:	429a      	cmp	r2, r3
 800617a:	d0b4      	beq.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006186:	b480      	push	{r7}
 8006188:	b095      	sub	sp, #84	@ 0x54
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	330c      	adds	r3, #12
 80061ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80061b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1e5      	bne.n	800618e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3314      	adds	r3, #20
 80061e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ea:	e841 2300 	strex	r3, r2, [r1]
 80061ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d1e5      	bne.n	80061c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d119      	bne.n	8006232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	330c      	adds	r3, #12
 8006204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	60bb      	str	r3, [r7, #8]
   return(result);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f023 0310 	bic.w	r3, r3, #16
 8006214:	647b      	str	r3, [r7, #68]	@ 0x44
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	330c      	adds	r3, #12
 800621c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800621e:	61ba      	str	r2, [r7, #24]
 8006220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006222:	6979      	ldr	r1, [r7, #20]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	e841 2300 	strex	r3, r2, [r1]
 800622a:	613b      	str	r3, [r7, #16]
   return(result);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1e5      	bne.n	80061fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006240:	bf00      	nop
 8006242:	3754      	adds	r7, #84	@ 0x54
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006258:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff21 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006266:	bf00      	nop
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800626e:	b480      	push	{r7}
 8006270:	b085      	sub	sp, #20
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b21      	cmp	r3, #33	@ 0x21
 8006280:	d13e      	bne.n	8006300 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800628a:	d114      	bne.n	80062b6 <UART_Transmit_IT+0x48>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d110      	bne.n	80062b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	621a      	str	r2, [r3, #32]
 80062b4:	e008      	b.n	80062c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	1c59      	adds	r1, r3, #1
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6211      	str	r1, [r2, #32]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	4619      	mov	r1, r3
 80062d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10f      	bne.n	80062fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e000      	b.n	8006302 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006300:	2302      	movs	r3, #2
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006324:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fea6 	bl	8006080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b08c      	sub	sp, #48	@ 0x30
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006346:	2300      	movs	r3, #0
 8006348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b22      	cmp	r3, #34	@ 0x22
 8006358:	f040 80aa 	bne.w	80064b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006364:	d115      	bne.n	8006392 <UART_Receive_IT+0x54>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d111      	bne.n	8006392 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	b29b      	uxth	r3, r3
 800637c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006380:	b29a      	uxth	r2, r3
 8006382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006390:	e024      	b.n	80063dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063a0:	d007      	beq.n	80063b2 <UART_Receive_IT+0x74>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10a      	bne.n	80063c0 <UART_Receive_IT+0x82>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	701a      	strb	r2, [r3, #0]
 80063be:	e008      	b.n	80063d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	4619      	mov	r1, r3
 80063ea:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d15d      	bne.n	80064ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0220 	bic.w	r2, r2, #32
 80063fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800640e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0201 	bic.w	r2, r2, #1
 800641e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	2b01      	cmp	r3, #1
 8006434:	d135      	bne.n	80064a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f023 0310 	bic.w	r3, r3, #16
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800645c:	623a      	str	r2, [r7, #32]
 800645e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	61bb      	str	r3, [r7, #24]
   return(result);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	2b10      	cmp	r3, #16
 800647c:	d10a      	bne.n	8006494 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fe0e 	bl	80060bc <HAL_UARTEx_RxEventCallback>
 80064a0:	e002      	b.n	80064a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fdf6 	bl	8006094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e002      	b.n	80064b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3730      	adds	r7, #48	@ 0x30
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064c0:	b0c0      	sub	sp, #256	@ 0x100
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d8:	68d9      	ldr	r1, [r3, #12]
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	ea40 0301 	orr.w	r3, r0, r1
 80064e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006514:	f021 010c 	bic.w	r1, r1, #12
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006522:	430b      	orrs	r3, r1
 8006524:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006536:	6999      	ldr	r1, [r3, #24]
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	ea40 0301 	orr.w	r3, r0, r1
 8006542:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b8f      	ldr	r3, [pc, #572]	@ (8006788 <UART_SetConfig+0x2cc>)
 800654c:	429a      	cmp	r2, r3
 800654e:	d005      	beq.n	800655c <UART_SetConfig+0xa0>
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b8d      	ldr	r3, [pc, #564]	@ (800678c <UART_SetConfig+0x2d0>)
 8006558:	429a      	cmp	r2, r3
 800655a:	d104      	bne.n	8006566 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800655c:	f7fe fb6a 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 8006560:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006564:	e003      	b.n	800656e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006566:	f7fe fb51 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 800656a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006578:	f040 810c 	bne.w	8006794 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800657c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006580:	2200      	movs	r2, #0
 8006582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006586:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800658a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800658e:	4622      	mov	r2, r4
 8006590:	462b      	mov	r3, r5
 8006592:	1891      	adds	r1, r2, r2
 8006594:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006596:	415b      	adcs	r3, r3
 8006598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800659a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800659e:	4621      	mov	r1, r4
 80065a0:	eb12 0801 	adds.w	r8, r2, r1
 80065a4:	4629      	mov	r1, r5
 80065a6:	eb43 0901 	adc.w	r9, r3, r1
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065be:	4690      	mov	r8, r2
 80065c0:	4699      	mov	r9, r3
 80065c2:	4623      	mov	r3, r4
 80065c4:	eb18 0303 	adds.w	r3, r8, r3
 80065c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065cc:	462b      	mov	r3, r5
 80065ce:	eb49 0303 	adc.w	r3, r9, r3
 80065d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065ea:	460b      	mov	r3, r1
 80065ec:	18db      	adds	r3, r3, r3
 80065ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f0:	4613      	mov	r3, r2
 80065f2:	eb42 0303 	adc.w	r3, r2, r3
 80065f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006600:	f7fa f944 	bl	800088c <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4b61      	ldr	r3, [pc, #388]	@ (8006790 <UART_SetConfig+0x2d4>)
 800660a:	fba3 2302 	umull	r2, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	011c      	lsls	r4, r3, #4
 8006612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006616:	2200      	movs	r2, #0
 8006618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800661c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006620:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	1891      	adds	r1, r2, r2
 800662a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800662c:	415b      	adcs	r3, r3
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006630:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006634:	4641      	mov	r1, r8
 8006636:	eb12 0a01 	adds.w	sl, r2, r1
 800663a:	4649      	mov	r1, r9
 800663c:	eb43 0b01 	adc.w	fp, r3, r1
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800664c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006650:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006654:	4692      	mov	sl, r2
 8006656:	469b      	mov	fp, r3
 8006658:	4643      	mov	r3, r8
 800665a:	eb1a 0303 	adds.w	r3, sl, r3
 800665e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006662:	464b      	mov	r3, r9
 8006664:	eb4b 0303 	adc.w	r3, fp, r3
 8006668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006678:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800667c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006680:	460b      	mov	r3, r1
 8006682:	18db      	adds	r3, r3, r3
 8006684:	643b      	str	r3, [r7, #64]	@ 0x40
 8006686:	4613      	mov	r3, r2
 8006688:	eb42 0303 	adc.w	r3, r2, r3
 800668c:	647b      	str	r3, [r7, #68]	@ 0x44
 800668e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006692:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006696:	f7fa f8f9 	bl	800088c <__aeabi_uldivmod>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4611      	mov	r1, r2
 80066a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006790 <UART_SetConfig+0x2d4>)
 80066a2:	fba3 2301 	umull	r2, r3, r3, r1
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	2264      	movs	r2, #100	@ 0x64
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	1acb      	subs	r3, r1, r3
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80066b6:	4b36      	ldr	r3, [pc, #216]	@ (8006790 <UART_SetConfig+0x2d4>)
 80066b8:	fba3 2302 	umull	r2, r3, r3, r2
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066c4:	441c      	add	r4, r3
 80066c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	1891      	adds	r1, r2, r2
 80066de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066e0:	415b      	adcs	r3, r3
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066e8:	4641      	mov	r1, r8
 80066ea:	1851      	adds	r1, r2, r1
 80066ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80066ee:	4649      	mov	r1, r9
 80066f0:	414b      	adcs	r3, r1
 80066f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006700:	4659      	mov	r1, fp
 8006702:	00cb      	lsls	r3, r1, #3
 8006704:	4651      	mov	r1, sl
 8006706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800670a:	4651      	mov	r1, sl
 800670c:	00ca      	lsls	r2, r1, #3
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	4603      	mov	r3, r0
 8006714:	4642      	mov	r2, r8
 8006716:	189b      	adds	r3, r3, r2
 8006718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800671c:	464b      	mov	r3, r9
 800671e:	460a      	mov	r2, r1
 8006720:	eb42 0303 	adc.w	r3, r2, r3
 8006724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006734:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006738:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800673c:	460b      	mov	r3, r1
 800673e:	18db      	adds	r3, r3, r3
 8006740:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006742:	4613      	mov	r3, r2
 8006744:	eb42 0303 	adc.w	r3, r2, r3
 8006748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800674a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800674e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006752:	f7fa f89b 	bl	800088c <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4b0d      	ldr	r3, [pc, #52]	@ (8006790 <UART_SetConfig+0x2d4>)
 800675c:	fba3 1302 	umull	r1, r3, r3, r2
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	2164      	movs	r1, #100	@ 0x64
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	3332      	adds	r3, #50	@ 0x32
 800676e:	4a08      	ldr	r2, [pc, #32]	@ (8006790 <UART_SetConfig+0x2d4>)
 8006770:	fba2 2303 	umull	r2, r3, r2, r3
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	f003 0207 	and.w	r2, r3, #7
 800677a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4422      	add	r2, r4
 8006782:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006784:	e106      	b.n	8006994 <UART_SetConfig+0x4d8>
 8006786:	bf00      	nop
 8006788:	40011000 	.word	0x40011000
 800678c:	40011400 	.word	0x40011400
 8006790:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006798:	2200      	movs	r2, #0
 800679a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800679e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	1891      	adds	r1, r2, r2
 80067ac:	6239      	str	r1, [r7, #32]
 80067ae:	415b      	adcs	r3, r3
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067b6:	4641      	mov	r1, r8
 80067b8:	1854      	adds	r4, r2, r1
 80067ba:	4649      	mov	r1, r9
 80067bc:	eb43 0501 	adc.w	r5, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	00eb      	lsls	r3, r5, #3
 80067ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067ce:	00e2      	lsls	r2, r4, #3
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	4643      	mov	r3, r8
 80067d6:	18e3      	adds	r3, r4, r3
 80067d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067dc:	464b      	mov	r3, r9
 80067de:	eb45 0303 	adc.w	r3, r5, r3
 80067e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067f6:	f04f 0200 	mov.w	r2, #0
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006802:	4629      	mov	r1, r5
 8006804:	008b      	lsls	r3, r1, #2
 8006806:	4621      	mov	r1, r4
 8006808:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800680c:	4621      	mov	r1, r4
 800680e:	008a      	lsls	r2, r1, #2
 8006810:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006814:	f7fa f83a 	bl	800088c <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4b60      	ldr	r3, [pc, #384]	@ (80069a0 <UART_SetConfig+0x4e4>)
 800681e:	fba3 2302 	umull	r2, r3, r3, r2
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	011c      	lsls	r4, r3, #4
 8006826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800682a:	2200      	movs	r2, #0
 800682c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006830:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006838:	4642      	mov	r2, r8
 800683a:	464b      	mov	r3, r9
 800683c:	1891      	adds	r1, r2, r2
 800683e:	61b9      	str	r1, [r7, #24]
 8006840:	415b      	adcs	r3, r3
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006848:	4641      	mov	r1, r8
 800684a:	1851      	adds	r1, r2, r1
 800684c:	6139      	str	r1, [r7, #16]
 800684e:	4649      	mov	r1, r9
 8006850:	414b      	adcs	r3, r1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006860:	4659      	mov	r1, fp
 8006862:	00cb      	lsls	r3, r1, #3
 8006864:	4651      	mov	r1, sl
 8006866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800686a:	4651      	mov	r1, sl
 800686c:	00ca      	lsls	r2, r1, #3
 800686e:	4610      	mov	r0, r2
 8006870:	4619      	mov	r1, r3
 8006872:	4603      	mov	r3, r0
 8006874:	4642      	mov	r2, r8
 8006876:	189b      	adds	r3, r3, r2
 8006878:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800687c:	464b      	mov	r3, r9
 800687e:	460a      	mov	r2, r1
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006892:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068a0:	4649      	mov	r1, r9
 80068a2:	008b      	lsls	r3, r1, #2
 80068a4:	4641      	mov	r1, r8
 80068a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068aa:	4641      	mov	r1, r8
 80068ac:	008a      	lsls	r2, r1, #2
 80068ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80068b2:	f7f9 ffeb 	bl	800088c <__aeabi_uldivmod>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4611      	mov	r1, r2
 80068bc:	4b38      	ldr	r3, [pc, #224]	@ (80069a0 <UART_SetConfig+0x4e4>)
 80068be:	fba3 2301 	umull	r2, r3, r3, r1
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	2264      	movs	r2, #100	@ 0x64
 80068c6:	fb02 f303 	mul.w	r3, r2, r3
 80068ca:	1acb      	subs	r3, r1, r3
 80068cc:	011b      	lsls	r3, r3, #4
 80068ce:	3332      	adds	r3, #50	@ 0x32
 80068d0:	4a33      	ldr	r2, [pc, #204]	@ (80069a0 <UART_SetConfig+0x4e4>)
 80068d2:	fba2 2303 	umull	r2, r3, r2, r3
 80068d6:	095b      	lsrs	r3, r3, #5
 80068d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068dc:	441c      	add	r4, r3
 80068de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e2:	2200      	movs	r2, #0
 80068e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80068e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80068e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068ec:	4642      	mov	r2, r8
 80068ee:	464b      	mov	r3, r9
 80068f0:	1891      	adds	r1, r2, r2
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	415b      	adcs	r3, r3
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068fc:	4641      	mov	r1, r8
 80068fe:	1851      	adds	r1, r2, r1
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	4649      	mov	r1, r9
 8006904:	414b      	adcs	r3, r1
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006914:	4659      	mov	r1, fp
 8006916:	00cb      	lsls	r3, r1, #3
 8006918:	4651      	mov	r1, sl
 800691a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800691e:	4651      	mov	r1, sl
 8006920:	00ca      	lsls	r2, r1, #3
 8006922:	4610      	mov	r0, r2
 8006924:	4619      	mov	r1, r3
 8006926:	4603      	mov	r3, r0
 8006928:	4642      	mov	r2, r8
 800692a:	189b      	adds	r3, r3, r2
 800692c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800692e:	464b      	mov	r3, r9
 8006930:	460a      	mov	r2, r1
 8006932:	eb42 0303 	adc.w	r3, r2, r3
 8006936:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	663b      	str	r3, [r7, #96]	@ 0x60
 8006942:	667a      	str	r2, [r7, #100]	@ 0x64
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006950:	4649      	mov	r1, r9
 8006952:	008b      	lsls	r3, r1, #2
 8006954:	4641      	mov	r1, r8
 8006956:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800695a:	4641      	mov	r1, r8
 800695c:	008a      	lsls	r2, r1, #2
 800695e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006962:	f7f9 ff93 	bl	800088c <__aeabi_uldivmod>
 8006966:	4602      	mov	r2, r0
 8006968:	460b      	mov	r3, r1
 800696a:	4b0d      	ldr	r3, [pc, #52]	@ (80069a0 <UART_SetConfig+0x4e4>)
 800696c:	fba3 1302 	umull	r1, r3, r3, r2
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	2164      	movs	r1, #100	@ 0x64
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	3332      	adds	r3, #50	@ 0x32
 800697e:	4a08      	ldr	r2, [pc, #32]	@ (80069a0 <UART_SetConfig+0x4e4>)
 8006980:	fba2 2303 	umull	r2, r3, r2, r3
 8006984:	095b      	lsrs	r3, r3, #5
 8006986:	f003 020f 	and.w	r2, r3, #15
 800698a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4422      	add	r2, r4
 8006992:	609a      	str	r2, [r3, #8]
}
 8006994:	bf00      	nop
 8006996:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800699a:	46bd      	mov	sp, r7
 800699c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a0:	51eb851f 	.word	0x51eb851f

080069a4 <siprintf>:
 80069a4:	b40e      	push	{r1, r2, r3}
 80069a6:	b510      	push	{r4, lr}
 80069a8:	b09d      	sub	sp, #116	@ 0x74
 80069aa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80069ac:	9002      	str	r0, [sp, #8]
 80069ae:	9006      	str	r0, [sp, #24]
 80069b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80069b4:	480a      	ldr	r0, [pc, #40]	@ (80069e0 <siprintf+0x3c>)
 80069b6:	9107      	str	r1, [sp, #28]
 80069b8:	9104      	str	r1, [sp, #16]
 80069ba:	490a      	ldr	r1, [pc, #40]	@ (80069e4 <siprintf+0x40>)
 80069bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	2400      	movs	r4, #0
 80069c4:	a902      	add	r1, sp, #8
 80069c6:	6800      	ldr	r0, [r0, #0]
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	941b      	str	r4, [sp, #108]	@ 0x6c
 80069cc:	f000 f994 	bl	8006cf8 <_svfiprintf_r>
 80069d0:	9b02      	ldr	r3, [sp, #8]
 80069d2:	701c      	strb	r4, [r3, #0]
 80069d4:	b01d      	add	sp, #116	@ 0x74
 80069d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069da:	b003      	add	sp, #12
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	20000014 	.word	0x20000014
 80069e4:	ffff0208 	.word	0xffff0208

080069e8 <memset>:
 80069e8:	4402      	add	r2, r0
 80069ea:	4603      	mov	r3, r0
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d100      	bne.n	80069f2 <memset+0xa>
 80069f0:	4770      	bx	lr
 80069f2:	f803 1b01 	strb.w	r1, [r3], #1
 80069f6:	e7f9      	b.n	80069ec <memset+0x4>

080069f8 <__errno>:
 80069f8:	4b01      	ldr	r3, [pc, #4]	@ (8006a00 <__errno+0x8>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20000014 	.word	0x20000014

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	@ (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	@ (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	@ (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	@ (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 fc64 	bl	80072e4 <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	080073a8 	.word	0x080073a8
 8006a40:	080073a8 	.word	0x080073a8
 8006a44:	080073a8 	.word	0x080073a8
 8006a48:	080073ac 	.word	0x080073ac

08006a4c <__retarget_lock_acquire_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <__retarget_lock_release_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <_free_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4605      	mov	r5, r0
 8006a54:	2900      	cmp	r1, #0
 8006a56:	d041      	beq.n	8006adc <_free_r+0x8c>
 8006a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a5c:	1f0c      	subs	r4, r1, #4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	18e4      	addlt	r4, r4, r3
 8006a64:	f000 f8e0 	bl	8006c28 <__malloc_lock>
 8006a68:	4a1d      	ldr	r2, [pc, #116]	@ (8006ae0 <_free_r+0x90>)
 8006a6a:	6813      	ldr	r3, [r2, #0]
 8006a6c:	b933      	cbnz	r3, 8006a7c <_free_r+0x2c>
 8006a6e:	6063      	str	r3, [r4, #4]
 8006a70:	6014      	str	r4, [r2, #0]
 8006a72:	4628      	mov	r0, r5
 8006a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a78:	f000 b8dc 	b.w	8006c34 <__malloc_unlock>
 8006a7c:	42a3      	cmp	r3, r4
 8006a7e:	d908      	bls.n	8006a92 <_free_r+0x42>
 8006a80:	6820      	ldr	r0, [r4, #0]
 8006a82:	1821      	adds	r1, r4, r0
 8006a84:	428b      	cmp	r3, r1
 8006a86:	bf01      	itttt	eq
 8006a88:	6819      	ldreq	r1, [r3, #0]
 8006a8a:	685b      	ldreq	r3, [r3, #4]
 8006a8c:	1809      	addeq	r1, r1, r0
 8006a8e:	6021      	streq	r1, [r4, #0]
 8006a90:	e7ed      	b.n	8006a6e <_free_r+0x1e>
 8006a92:	461a      	mov	r2, r3
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	b10b      	cbz	r3, 8006a9c <_free_r+0x4c>
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d9fa      	bls.n	8006a92 <_free_r+0x42>
 8006a9c:	6811      	ldr	r1, [r2, #0]
 8006a9e:	1850      	adds	r0, r2, r1
 8006aa0:	42a0      	cmp	r0, r4
 8006aa2:	d10b      	bne.n	8006abc <_free_r+0x6c>
 8006aa4:	6820      	ldr	r0, [r4, #0]
 8006aa6:	4401      	add	r1, r0
 8006aa8:	1850      	adds	r0, r2, r1
 8006aaa:	4283      	cmp	r3, r0
 8006aac:	6011      	str	r1, [r2, #0]
 8006aae:	d1e0      	bne.n	8006a72 <_free_r+0x22>
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	6053      	str	r3, [r2, #4]
 8006ab6:	4408      	add	r0, r1
 8006ab8:	6010      	str	r0, [r2, #0]
 8006aba:	e7da      	b.n	8006a72 <_free_r+0x22>
 8006abc:	d902      	bls.n	8006ac4 <_free_r+0x74>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	602b      	str	r3, [r5, #0]
 8006ac2:	e7d6      	b.n	8006a72 <_free_r+0x22>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	1821      	adds	r1, r4, r0
 8006ac8:	428b      	cmp	r3, r1
 8006aca:	bf04      	itt	eq
 8006acc:	6819      	ldreq	r1, [r3, #0]
 8006ace:	685b      	ldreq	r3, [r3, #4]
 8006ad0:	6063      	str	r3, [r4, #4]
 8006ad2:	bf04      	itt	eq
 8006ad4:	1809      	addeq	r1, r1, r0
 8006ad6:	6021      	streq	r1, [r4, #0]
 8006ad8:	6054      	str	r4, [r2, #4]
 8006ada:	e7ca      	b.n	8006a72 <_free_r+0x22>
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000408 	.word	0x20000408

08006ae4 <sbrk_aligned>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b24 <sbrk_aligned+0x40>)
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6831      	ldr	r1, [r6, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	b911      	cbnz	r1, 8006af6 <sbrk_aligned+0x12>
 8006af0:	f000 fba4 	bl	800723c <_sbrk_r>
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 fb9f 	bl	800723c <_sbrk_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d103      	bne.n	8006b0a <sbrk_aligned+0x26>
 8006b02:	f04f 34ff 	mov.w	r4, #4294967295
 8006b06:	4620      	mov	r0, r4
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d0f8      	beq.n	8006b06 <sbrk_aligned+0x22>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fb90 	bl	800723c <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1f2      	bne.n	8006b06 <sbrk_aligned+0x22>
 8006b20:	e7ef      	b.n	8006b02 <sbrk_aligned+0x1e>
 8006b22:	bf00      	nop
 8006b24:	20000404 	.word	0x20000404

08006b28 <_malloc_r>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d904      	bls.n	8006b4e <_malloc_r+0x26>
 8006b44:	230c      	movs	r3, #12
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c24 <_malloc_r+0xfc>
 8006b52:	f000 f869 	bl	8006c28 <__malloc_lock>
 8006b56:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	bb44      	cbnz	r4, 8006bb0 <_malloc_r+0x88>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ffbf 	bl	8006ae4 <sbrk_aligned>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	4604      	mov	r4, r0
 8006b6a:	d158      	bne.n	8006c1e <_malloc_r+0xf6>
 8006b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b70:	4627      	mov	r7, r4
 8006b72:	2f00      	cmp	r7, #0
 8006b74:	d143      	bne.n	8006bfe <_malloc_r+0xd6>
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d04b      	beq.n	8006c12 <_malloc_r+0xea>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	eb04 0903 	add.w	r9, r4, r3
 8006b84:	f000 fb5a 	bl	800723c <_sbrk_r>
 8006b88:	4581      	cmp	r9, r0
 8006b8a:	d142      	bne.n	8006c12 <_malloc_r+0xea>
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	1a6d      	subs	r5, r5, r1
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa6 	bl	8006ae4 <sbrk_aligned>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d03a      	beq.n	8006c12 <_malloc_r+0xea>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	442b      	add	r3, r5
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	bb62      	cbnz	r2, 8006c04 <_malloc_r+0xdc>
 8006baa:	f8c8 7000 	str.w	r7, [r8]
 8006bae:	e00f      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	1b52      	subs	r2, r2, r5
 8006bb4:	d420      	bmi.n	8006bf8 <_malloc_r+0xd0>
 8006bb6:	2a0b      	cmp	r2, #11
 8006bb8:	d917      	bls.n	8006bea <_malloc_r+0xc2>
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	6025      	str	r5, [r4, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	6059      	strne	r1, [r3, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	bf08      	it	eq
 8006bc8:	f8c8 1000 	streq.w	r1, [r8]
 8006bcc:	5162      	str	r2, [r4, r5]
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f82f 	bl	8006c34 <__malloc_unlock>
 8006bd6:	f104 000b 	add.w	r0, r4, #11
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	f020 0007 	bic.w	r0, r0, #7
 8006be0:	1ac2      	subs	r2, r0, r3
 8006be2:	bf1c      	itt	ne
 8006be4:	1a1b      	subne	r3, r3, r0
 8006be6:	50a3      	strne	r3, [r4, r2]
 8006be8:	e7af      	b.n	8006b4a <_malloc_r+0x22>
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	bf0c      	ite	eq
 8006bf0:	f8c8 2000 	streq.w	r2, [r8]
 8006bf4:	605a      	strne	r2, [r3, #4]
 8006bf6:	e7eb      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7ae      	b.n	8006b5c <_malloc_r+0x34>
 8006bfe:	463c      	mov	r4, r7
 8006c00:	687f      	ldr	r7, [r7, #4]
 8006c02:	e7b6      	b.n	8006b72 <_malloc_r+0x4a>
 8006c04:	461a      	mov	r2, r3
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d1fb      	bne.n	8006c04 <_malloc_r+0xdc>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6053      	str	r3, [r2, #4]
 8006c10:	e7de      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f80c 	bl	8006c34 <__malloc_unlock>
 8006c1c:	e794      	b.n	8006b48 <_malloc_r+0x20>
 8006c1e:	6005      	str	r5, [r0, #0]
 8006c20:	e7d6      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c22:	bf00      	nop
 8006c24:	20000408 	.word	0x20000408

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff bf0f 	b.w	8006a4c <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000400 	.word	0x20000400

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	@ (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff bf0a 	b.w	8006a4e <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000400 	.word	0x20000400

08006c40 <__ssputs_r>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	688e      	ldr	r6, [r1, #8]
 8006c46:	461f      	mov	r7, r3
 8006c48:	42be      	cmp	r6, r7
 8006c4a:	680b      	ldr	r3, [r1, #0]
 8006c4c:	4682      	mov	sl, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4690      	mov	r8, r2
 8006c52:	d82d      	bhi.n	8006cb0 <__ssputs_r+0x70>
 8006c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c5c:	d026      	beq.n	8006cac <__ssputs_r+0x6c>
 8006c5e:	6965      	ldr	r5, [r4, #20]
 8006c60:	6909      	ldr	r1, [r1, #16]
 8006c62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c66:	eba3 0901 	sub.w	r9, r3, r1
 8006c6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c6e:	1c7b      	adds	r3, r7, #1
 8006c70:	444b      	add	r3, r9
 8006c72:	106d      	asrs	r5, r5, #1
 8006c74:	429d      	cmp	r5, r3
 8006c76:	bf38      	it	cc
 8006c78:	461d      	movcc	r5, r3
 8006c7a:	0553      	lsls	r3, r2, #21
 8006c7c:	d527      	bpl.n	8006cce <__ssputs_r+0x8e>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7ff ff52 	bl	8006b28 <_malloc_r>
 8006c84:	4606      	mov	r6, r0
 8006c86:	b360      	cbz	r0, 8006ce2 <__ssputs_r+0xa2>
 8006c88:	6921      	ldr	r1, [r4, #16]
 8006c8a:	464a      	mov	r2, r9
 8006c8c:	f000 fae6 	bl	800725c <memcpy>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c9a:	81a3      	strh	r3, [r4, #12]
 8006c9c:	6126      	str	r6, [r4, #16]
 8006c9e:	6165      	str	r5, [r4, #20]
 8006ca0:	444e      	add	r6, r9
 8006ca2:	eba5 0509 	sub.w	r5, r5, r9
 8006ca6:	6026      	str	r6, [r4, #0]
 8006ca8:	60a5      	str	r5, [r4, #8]
 8006caa:	463e      	mov	r6, r7
 8006cac:	42be      	cmp	r6, r7
 8006cae:	d900      	bls.n	8006cb2 <__ssputs_r+0x72>
 8006cb0:	463e      	mov	r6, r7
 8006cb2:	6820      	ldr	r0, [r4, #0]
 8006cb4:	4632      	mov	r2, r6
 8006cb6:	4641      	mov	r1, r8
 8006cb8:	f000 faa6 	bl	8007208 <memmove>
 8006cbc:	68a3      	ldr	r3, [r4, #8]
 8006cbe:	1b9b      	subs	r3, r3, r6
 8006cc0:	60a3      	str	r3, [r4, #8]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	4433      	add	r3, r6
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	2000      	movs	r0, #0
 8006cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cce:	462a      	mov	r2, r5
 8006cd0:	f000 fad2 	bl	8007278 <_realloc_r>
 8006cd4:	4606      	mov	r6, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d1e0      	bne.n	8006c9c <__ssputs_r+0x5c>
 8006cda:	6921      	ldr	r1, [r4, #16]
 8006cdc:	4650      	mov	r0, sl
 8006cde:	f7ff feb7 	bl	8006a50 <_free_r>
 8006ce2:	230c      	movs	r3, #12
 8006ce4:	f8ca 3000 	str.w	r3, [sl]
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cee:	81a3      	strh	r3, [r4, #12]
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e7e9      	b.n	8006cca <__ssputs_r+0x8a>
	...

08006cf8 <_svfiprintf_r>:
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	4698      	mov	r8, r3
 8006cfe:	898b      	ldrh	r3, [r1, #12]
 8006d00:	061b      	lsls	r3, r3, #24
 8006d02:	b09d      	sub	sp, #116	@ 0x74
 8006d04:	4607      	mov	r7, r0
 8006d06:	460d      	mov	r5, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	d510      	bpl.n	8006d2e <_svfiprintf_r+0x36>
 8006d0c:	690b      	ldr	r3, [r1, #16]
 8006d0e:	b973      	cbnz	r3, 8006d2e <_svfiprintf_r+0x36>
 8006d10:	2140      	movs	r1, #64	@ 0x40
 8006d12:	f7ff ff09 	bl	8006b28 <_malloc_r>
 8006d16:	6028      	str	r0, [r5, #0]
 8006d18:	6128      	str	r0, [r5, #16]
 8006d1a:	b930      	cbnz	r0, 8006d2a <_svfiprintf_r+0x32>
 8006d1c:	230c      	movs	r3, #12
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295
 8006d24:	b01d      	add	sp, #116	@ 0x74
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	2340      	movs	r3, #64	@ 0x40
 8006d2c:	616b      	str	r3, [r5, #20]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d32:	2320      	movs	r3, #32
 8006d34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d3c:	2330      	movs	r3, #48	@ 0x30
 8006d3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006edc <_svfiprintf_r+0x1e4>
 8006d42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d46:	f04f 0901 	mov.w	r9, #1
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	469a      	mov	sl, r3
 8006d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d52:	b10a      	cbz	r2, 8006d58 <_svfiprintf_r+0x60>
 8006d54:	2a25      	cmp	r2, #37	@ 0x25
 8006d56:	d1f9      	bne.n	8006d4c <_svfiprintf_r+0x54>
 8006d58:	ebba 0b04 	subs.w	fp, sl, r4
 8006d5c:	d00b      	beq.n	8006d76 <_svfiprintf_r+0x7e>
 8006d5e:	465b      	mov	r3, fp
 8006d60:	4622      	mov	r2, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff ff6b 	bl	8006c40 <__ssputs_r>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	f000 80a7 	beq.w	8006ebe <_svfiprintf_r+0x1c6>
 8006d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d72:	445a      	add	r2, fp
 8006d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d76:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 809f 	beq.w	8006ebe <_svfiprintf_r+0x1c6>
 8006d80:	2300      	movs	r3, #0
 8006d82:	f04f 32ff 	mov.w	r2, #4294967295
 8006d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d8a:	f10a 0a01 	add.w	sl, sl, #1
 8006d8e:	9304      	str	r3, [sp, #16]
 8006d90:	9307      	str	r3, [sp, #28]
 8006d92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d98:	4654      	mov	r4, sl
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	484e      	ldr	r0, [pc, #312]	@ (8006edc <_svfiprintf_r+0x1e4>)
 8006da2:	f7f9 fa1d 	bl	80001e0 <memchr>
 8006da6:	9a04      	ldr	r2, [sp, #16]
 8006da8:	b9d8      	cbnz	r0, 8006de2 <_svfiprintf_r+0xea>
 8006daa:	06d0      	lsls	r0, r2, #27
 8006dac:	bf44      	itt	mi
 8006dae:	2320      	movmi	r3, #32
 8006db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006db4:	0711      	lsls	r1, r2, #28
 8006db6:	bf44      	itt	mi
 8006db8:	232b      	movmi	r3, #43	@ 0x2b
 8006dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc4:	d015      	beq.n	8006df2 <_svfiprintf_r+0xfa>
 8006dc6:	9a07      	ldr	r2, [sp, #28]
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2000      	movs	r0, #0
 8006dcc:	f04f 0c0a 	mov.w	ip, #10
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dd6:	3b30      	subs	r3, #48	@ 0x30
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	d94b      	bls.n	8006e74 <_svfiprintf_r+0x17c>
 8006ddc:	b1b0      	cbz	r0, 8006e0c <_svfiprintf_r+0x114>
 8006dde:	9207      	str	r2, [sp, #28]
 8006de0:	e014      	b.n	8006e0c <_svfiprintf_r+0x114>
 8006de2:	eba0 0308 	sub.w	r3, r0, r8
 8006de6:	fa09 f303 	lsl.w	r3, r9, r3
 8006dea:	4313      	orrs	r3, r2
 8006dec:	9304      	str	r3, [sp, #16]
 8006dee:	46a2      	mov	sl, r4
 8006df0:	e7d2      	b.n	8006d98 <_svfiprintf_r+0xa0>
 8006df2:	9b03      	ldr	r3, [sp, #12]
 8006df4:	1d19      	adds	r1, r3, #4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	9103      	str	r1, [sp, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfbb      	ittet	lt
 8006dfe:	425b      	neglt	r3, r3
 8006e00:	f042 0202 	orrlt.w	r2, r2, #2
 8006e04:	9307      	strge	r3, [sp, #28]
 8006e06:	9307      	strlt	r3, [sp, #28]
 8006e08:	bfb8      	it	lt
 8006e0a:	9204      	strlt	r2, [sp, #16]
 8006e0c:	7823      	ldrb	r3, [r4, #0]
 8006e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e10:	d10a      	bne.n	8006e28 <_svfiprintf_r+0x130>
 8006e12:	7863      	ldrb	r3, [r4, #1]
 8006e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e16:	d132      	bne.n	8006e7e <_svfiprintf_r+0x186>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	9203      	str	r2, [sp, #12]
 8006e20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e24:	3402      	adds	r4, #2
 8006e26:	9305      	str	r3, [sp, #20]
 8006e28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006eec <_svfiprintf_r+0x1f4>
 8006e2c:	7821      	ldrb	r1, [r4, #0]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	4650      	mov	r0, sl
 8006e32:	f7f9 f9d5 	bl	80001e0 <memchr>
 8006e36:	b138      	cbz	r0, 8006e48 <_svfiprintf_r+0x150>
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	eba0 000a 	sub.w	r0, r0, sl
 8006e3e:	2240      	movs	r2, #64	@ 0x40
 8006e40:	4082      	lsls	r2, r0
 8006e42:	4313      	orrs	r3, r2
 8006e44:	3401      	adds	r4, #1
 8006e46:	9304      	str	r3, [sp, #16]
 8006e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4c:	4824      	ldr	r0, [pc, #144]	@ (8006ee0 <_svfiprintf_r+0x1e8>)
 8006e4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e52:	2206      	movs	r2, #6
 8006e54:	f7f9 f9c4 	bl	80001e0 <memchr>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d036      	beq.n	8006eca <_svfiprintf_r+0x1d2>
 8006e5c:	4b21      	ldr	r3, [pc, #132]	@ (8006ee4 <_svfiprintf_r+0x1ec>)
 8006e5e:	bb1b      	cbnz	r3, 8006ea8 <_svfiprintf_r+0x1b0>
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	3307      	adds	r3, #7
 8006e64:	f023 0307 	bic.w	r3, r3, #7
 8006e68:	3308      	adds	r3, #8
 8006e6a:	9303      	str	r3, [sp, #12]
 8006e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6e:	4433      	add	r3, r6
 8006e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e72:	e76a      	b.n	8006d4a <_svfiprintf_r+0x52>
 8006e74:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e78:	460c      	mov	r4, r1
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	e7a8      	b.n	8006dd0 <_svfiprintf_r+0xd8>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	3401      	adds	r4, #1
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	4619      	mov	r1, r3
 8006e86:	f04f 0c0a 	mov.w	ip, #10
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e90:	3a30      	subs	r2, #48	@ 0x30
 8006e92:	2a09      	cmp	r2, #9
 8006e94:	d903      	bls.n	8006e9e <_svfiprintf_r+0x1a6>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0c6      	beq.n	8006e28 <_svfiprintf_r+0x130>
 8006e9a:	9105      	str	r1, [sp, #20]
 8006e9c:	e7c4      	b.n	8006e28 <_svfiprintf_r+0x130>
 8006e9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e7f0      	b.n	8006e8a <_svfiprintf_r+0x192>
 8006ea8:	ab03      	add	r3, sp, #12
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	462a      	mov	r2, r5
 8006eae:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee8 <_svfiprintf_r+0x1f0>)
 8006eb0:	a904      	add	r1, sp, #16
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	f3af 8000 	nop.w
 8006eb8:	1c42      	adds	r2, r0, #1
 8006eba:	4606      	mov	r6, r0
 8006ebc:	d1d6      	bne.n	8006e6c <_svfiprintf_r+0x174>
 8006ebe:	89ab      	ldrh	r3, [r5, #12]
 8006ec0:	065b      	lsls	r3, r3, #25
 8006ec2:	f53f af2d 	bmi.w	8006d20 <_svfiprintf_r+0x28>
 8006ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ec8:	e72c      	b.n	8006d24 <_svfiprintf_r+0x2c>
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	462a      	mov	r2, r5
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <_svfiprintf_r+0x1f0>)
 8006ed2:	a904      	add	r1, sp, #16
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f000 f879 	bl	8006fcc <_printf_i>
 8006eda:	e7ed      	b.n	8006eb8 <_svfiprintf_r+0x1c0>
 8006edc:	0800736c 	.word	0x0800736c
 8006ee0:	08007376 	.word	0x08007376
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	08006c41 	.word	0x08006c41
 8006eec:	08007372 	.word	0x08007372

08006ef0 <_printf_common>:
 8006ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	4698      	mov	r8, r3
 8006ef8:	688a      	ldr	r2, [r1, #8]
 8006efa:	690b      	ldr	r3, [r1, #16]
 8006efc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	bfb8      	it	lt
 8006f04:	4613      	movlt	r3, r2
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	b10a      	cbz	r2, 8006f16 <_printf_common+0x26>
 8006f12:	3301      	adds	r3, #1
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	0699      	lsls	r1, r3, #26
 8006f1a:	bf42      	ittt	mi
 8006f1c:	6833      	ldrmi	r3, [r6, #0]
 8006f1e:	3302      	addmi	r3, #2
 8006f20:	6033      	strmi	r3, [r6, #0]
 8006f22:	6825      	ldr	r5, [r4, #0]
 8006f24:	f015 0506 	ands.w	r5, r5, #6
 8006f28:	d106      	bne.n	8006f38 <_printf_common+0x48>
 8006f2a:	f104 0a19 	add.w	sl, r4, #25
 8006f2e:	68e3      	ldr	r3, [r4, #12]
 8006f30:	6832      	ldr	r2, [r6, #0]
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	42ab      	cmp	r3, r5
 8006f36:	dc26      	bgt.n	8006f86 <_printf_common+0x96>
 8006f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	3b00      	subs	r3, #0
 8006f40:	bf18      	it	ne
 8006f42:	2301      	movne	r3, #1
 8006f44:	0692      	lsls	r2, r2, #26
 8006f46:	d42b      	bmi.n	8006fa0 <_printf_common+0xb0>
 8006f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f4c:	4641      	mov	r1, r8
 8006f4e:	4638      	mov	r0, r7
 8006f50:	47c8      	blx	r9
 8006f52:	3001      	adds	r0, #1
 8006f54:	d01e      	beq.n	8006f94 <_printf_common+0xa4>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	6922      	ldr	r2, [r4, #16]
 8006f5a:	f003 0306 	and.w	r3, r3, #6
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	bf02      	ittt	eq
 8006f62:	68e5      	ldreq	r5, [r4, #12]
 8006f64:	6833      	ldreq	r3, [r6, #0]
 8006f66:	1aed      	subeq	r5, r5, r3
 8006f68:	68a3      	ldr	r3, [r4, #8]
 8006f6a:	bf0c      	ite	eq
 8006f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f70:	2500      	movne	r5, #0
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bfc4      	itt	gt
 8006f76:	1a9b      	subgt	r3, r3, r2
 8006f78:	18ed      	addgt	r5, r5, r3
 8006f7a:	2600      	movs	r6, #0
 8006f7c:	341a      	adds	r4, #26
 8006f7e:	42b5      	cmp	r5, r6
 8006f80:	d11a      	bne.n	8006fb8 <_printf_common+0xc8>
 8006f82:	2000      	movs	r0, #0
 8006f84:	e008      	b.n	8006f98 <_printf_common+0xa8>
 8006f86:	2301      	movs	r3, #1
 8006f88:	4652      	mov	r2, sl
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	47c8      	blx	r9
 8006f90:	3001      	adds	r0, #1
 8006f92:	d103      	bne.n	8006f9c <_printf_common+0xac>
 8006f94:	f04f 30ff 	mov.w	r0, #4294967295
 8006f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9c:	3501      	adds	r5, #1
 8006f9e:	e7c6      	b.n	8006f2e <_printf_common+0x3e>
 8006fa0:	18e1      	adds	r1, r4, r3
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	2030      	movs	r0, #48	@ 0x30
 8006fa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006faa:	4422      	add	r2, r4
 8006fac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006fb4:	3302      	adds	r3, #2
 8006fb6:	e7c7      	b.n	8006f48 <_printf_common+0x58>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4622      	mov	r2, r4
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	4638      	mov	r0, r7
 8006fc0:	47c8      	blx	r9
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0e6      	beq.n	8006f94 <_printf_common+0xa4>
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7d9      	b.n	8006f7e <_printf_common+0x8e>
	...

08006fcc <_printf_i>:
 8006fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	7e0f      	ldrb	r7, [r1, #24]
 8006fd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fd4:	2f78      	cmp	r7, #120	@ 0x78
 8006fd6:	4691      	mov	r9, r2
 8006fd8:	4680      	mov	r8, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	469a      	mov	sl, r3
 8006fde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fe2:	d807      	bhi.n	8006ff4 <_printf_i+0x28>
 8006fe4:	2f62      	cmp	r7, #98	@ 0x62
 8006fe6:	d80a      	bhi.n	8006ffe <_printf_i+0x32>
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	f000 80d1 	beq.w	8007190 <_printf_i+0x1c4>
 8006fee:	2f58      	cmp	r7, #88	@ 0x58
 8006ff0:	f000 80b8 	beq.w	8007164 <_printf_i+0x198>
 8006ff4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ff8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ffc:	e03a      	b.n	8007074 <_printf_i+0xa8>
 8006ffe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007002:	2b15      	cmp	r3, #21
 8007004:	d8f6      	bhi.n	8006ff4 <_printf_i+0x28>
 8007006:	a101      	add	r1, pc, #4	@ (adr r1, 800700c <_printf_i+0x40>)
 8007008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800700c:	08007065 	.word	0x08007065
 8007010:	08007079 	.word	0x08007079
 8007014:	08006ff5 	.word	0x08006ff5
 8007018:	08006ff5 	.word	0x08006ff5
 800701c:	08006ff5 	.word	0x08006ff5
 8007020:	08006ff5 	.word	0x08006ff5
 8007024:	08007079 	.word	0x08007079
 8007028:	08006ff5 	.word	0x08006ff5
 800702c:	08006ff5 	.word	0x08006ff5
 8007030:	08006ff5 	.word	0x08006ff5
 8007034:	08006ff5 	.word	0x08006ff5
 8007038:	08007177 	.word	0x08007177
 800703c:	080070a3 	.word	0x080070a3
 8007040:	08007131 	.word	0x08007131
 8007044:	08006ff5 	.word	0x08006ff5
 8007048:	08006ff5 	.word	0x08006ff5
 800704c:	08007199 	.word	0x08007199
 8007050:	08006ff5 	.word	0x08006ff5
 8007054:	080070a3 	.word	0x080070a3
 8007058:	08006ff5 	.word	0x08006ff5
 800705c:	08006ff5 	.word	0x08006ff5
 8007060:	08007139 	.word	0x08007139
 8007064:	6833      	ldr	r3, [r6, #0]
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6032      	str	r2, [r6, #0]
 800706c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007070:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007074:	2301      	movs	r3, #1
 8007076:	e09c      	b.n	80071b2 <_printf_i+0x1e6>
 8007078:	6833      	ldr	r3, [r6, #0]
 800707a:	6820      	ldr	r0, [r4, #0]
 800707c:	1d19      	adds	r1, r3, #4
 800707e:	6031      	str	r1, [r6, #0]
 8007080:	0606      	lsls	r6, r0, #24
 8007082:	d501      	bpl.n	8007088 <_printf_i+0xbc>
 8007084:	681d      	ldr	r5, [r3, #0]
 8007086:	e003      	b.n	8007090 <_printf_i+0xc4>
 8007088:	0645      	lsls	r5, r0, #25
 800708a:	d5fb      	bpl.n	8007084 <_printf_i+0xb8>
 800708c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007090:	2d00      	cmp	r5, #0
 8007092:	da03      	bge.n	800709c <_printf_i+0xd0>
 8007094:	232d      	movs	r3, #45	@ 0x2d
 8007096:	426d      	negs	r5, r5
 8007098:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800709c:	4858      	ldr	r0, [pc, #352]	@ (8007200 <_printf_i+0x234>)
 800709e:	230a      	movs	r3, #10
 80070a0:	e011      	b.n	80070c6 <_printf_i+0xfa>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	6833      	ldr	r3, [r6, #0]
 80070a6:	0608      	lsls	r0, r1, #24
 80070a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80070ac:	d402      	bmi.n	80070b4 <_printf_i+0xe8>
 80070ae:	0649      	lsls	r1, r1, #25
 80070b0:	bf48      	it	mi
 80070b2:	b2ad      	uxthmi	r5, r5
 80070b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80070b6:	4852      	ldr	r0, [pc, #328]	@ (8007200 <_printf_i+0x234>)
 80070b8:	6033      	str	r3, [r6, #0]
 80070ba:	bf14      	ite	ne
 80070bc:	230a      	movne	r3, #10
 80070be:	2308      	moveq	r3, #8
 80070c0:	2100      	movs	r1, #0
 80070c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80070c6:	6866      	ldr	r6, [r4, #4]
 80070c8:	60a6      	str	r6, [r4, #8]
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	db05      	blt.n	80070da <_printf_i+0x10e>
 80070ce:	6821      	ldr	r1, [r4, #0]
 80070d0:	432e      	orrs	r6, r5
 80070d2:	f021 0104 	bic.w	r1, r1, #4
 80070d6:	6021      	str	r1, [r4, #0]
 80070d8:	d04b      	beq.n	8007172 <_printf_i+0x1a6>
 80070da:	4616      	mov	r6, r2
 80070dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80070e0:	fb03 5711 	mls	r7, r3, r1, r5
 80070e4:	5dc7      	ldrb	r7, [r0, r7]
 80070e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070ea:	462f      	mov	r7, r5
 80070ec:	42bb      	cmp	r3, r7
 80070ee:	460d      	mov	r5, r1
 80070f0:	d9f4      	bls.n	80070dc <_printf_i+0x110>
 80070f2:	2b08      	cmp	r3, #8
 80070f4:	d10b      	bne.n	800710e <_printf_i+0x142>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	07df      	lsls	r7, r3, #31
 80070fa:	d508      	bpl.n	800710e <_printf_i+0x142>
 80070fc:	6923      	ldr	r3, [r4, #16]
 80070fe:	6861      	ldr	r1, [r4, #4]
 8007100:	4299      	cmp	r1, r3
 8007102:	bfde      	ittt	le
 8007104:	2330      	movle	r3, #48	@ 0x30
 8007106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800710a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800710e:	1b92      	subs	r2, r2, r6
 8007110:	6122      	str	r2, [r4, #16]
 8007112:	f8cd a000 	str.w	sl, [sp]
 8007116:	464b      	mov	r3, r9
 8007118:	aa03      	add	r2, sp, #12
 800711a:	4621      	mov	r1, r4
 800711c:	4640      	mov	r0, r8
 800711e:	f7ff fee7 	bl	8006ef0 <_printf_common>
 8007122:	3001      	adds	r0, #1
 8007124:	d14a      	bne.n	80071bc <_printf_i+0x1f0>
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	b004      	add	sp, #16
 800712c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	f043 0320 	orr.w	r3, r3, #32
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	4832      	ldr	r0, [pc, #200]	@ (8007204 <_printf_i+0x238>)
 800713a:	2778      	movs	r7, #120	@ 0x78
 800713c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	6831      	ldr	r1, [r6, #0]
 8007144:	061f      	lsls	r7, r3, #24
 8007146:	f851 5b04 	ldr.w	r5, [r1], #4
 800714a:	d402      	bmi.n	8007152 <_printf_i+0x186>
 800714c:	065f      	lsls	r7, r3, #25
 800714e:	bf48      	it	mi
 8007150:	b2ad      	uxthmi	r5, r5
 8007152:	6031      	str	r1, [r6, #0]
 8007154:	07d9      	lsls	r1, r3, #31
 8007156:	bf44      	itt	mi
 8007158:	f043 0320 	orrmi.w	r3, r3, #32
 800715c:	6023      	strmi	r3, [r4, #0]
 800715e:	b11d      	cbz	r5, 8007168 <_printf_i+0x19c>
 8007160:	2310      	movs	r3, #16
 8007162:	e7ad      	b.n	80070c0 <_printf_i+0xf4>
 8007164:	4826      	ldr	r0, [pc, #152]	@ (8007200 <_printf_i+0x234>)
 8007166:	e7e9      	b.n	800713c <_printf_i+0x170>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	f023 0320 	bic.w	r3, r3, #32
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	e7f6      	b.n	8007160 <_printf_i+0x194>
 8007172:	4616      	mov	r6, r2
 8007174:	e7bd      	b.n	80070f2 <_printf_i+0x126>
 8007176:	6833      	ldr	r3, [r6, #0]
 8007178:	6825      	ldr	r5, [r4, #0]
 800717a:	6961      	ldr	r1, [r4, #20]
 800717c:	1d18      	adds	r0, r3, #4
 800717e:	6030      	str	r0, [r6, #0]
 8007180:	062e      	lsls	r6, r5, #24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	d501      	bpl.n	800718a <_printf_i+0x1be>
 8007186:	6019      	str	r1, [r3, #0]
 8007188:	e002      	b.n	8007190 <_printf_i+0x1c4>
 800718a:	0668      	lsls	r0, r5, #25
 800718c:	d5fb      	bpl.n	8007186 <_printf_i+0x1ba>
 800718e:	8019      	strh	r1, [r3, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	4616      	mov	r6, r2
 8007196:	e7bc      	b.n	8007112 <_printf_i+0x146>
 8007198:	6833      	ldr	r3, [r6, #0]
 800719a:	1d1a      	adds	r2, r3, #4
 800719c:	6032      	str	r2, [r6, #0]
 800719e:	681e      	ldr	r6, [r3, #0]
 80071a0:	6862      	ldr	r2, [r4, #4]
 80071a2:	2100      	movs	r1, #0
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7f9 f81b 	bl	80001e0 <memchr>
 80071aa:	b108      	cbz	r0, 80071b0 <_printf_i+0x1e4>
 80071ac:	1b80      	subs	r0, r0, r6
 80071ae:	6060      	str	r0, [r4, #4]
 80071b0:	6863      	ldr	r3, [r4, #4]
 80071b2:	6123      	str	r3, [r4, #16]
 80071b4:	2300      	movs	r3, #0
 80071b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071ba:	e7aa      	b.n	8007112 <_printf_i+0x146>
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	4632      	mov	r2, r6
 80071c0:	4649      	mov	r1, r9
 80071c2:	4640      	mov	r0, r8
 80071c4:	47d0      	blx	sl
 80071c6:	3001      	adds	r0, #1
 80071c8:	d0ad      	beq.n	8007126 <_printf_i+0x15a>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	079b      	lsls	r3, r3, #30
 80071ce:	d413      	bmi.n	80071f8 <_printf_i+0x22c>
 80071d0:	68e0      	ldr	r0, [r4, #12]
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	4298      	cmp	r0, r3
 80071d6:	bfb8      	it	lt
 80071d8:	4618      	movlt	r0, r3
 80071da:	e7a6      	b.n	800712a <_printf_i+0x15e>
 80071dc:	2301      	movs	r3, #1
 80071de:	4632      	mov	r2, r6
 80071e0:	4649      	mov	r1, r9
 80071e2:	4640      	mov	r0, r8
 80071e4:	47d0      	blx	sl
 80071e6:	3001      	adds	r0, #1
 80071e8:	d09d      	beq.n	8007126 <_printf_i+0x15a>
 80071ea:	3501      	adds	r5, #1
 80071ec:	68e3      	ldr	r3, [r4, #12]
 80071ee:	9903      	ldr	r1, [sp, #12]
 80071f0:	1a5b      	subs	r3, r3, r1
 80071f2:	42ab      	cmp	r3, r5
 80071f4:	dcf2      	bgt.n	80071dc <_printf_i+0x210>
 80071f6:	e7eb      	b.n	80071d0 <_printf_i+0x204>
 80071f8:	2500      	movs	r5, #0
 80071fa:	f104 0619 	add.w	r6, r4, #25
 80071fe:	e7f5      	b.n	80071ec <_printf_i+0x220>
 8007200:	0800737d 	.word	0x0800737d
 8007204:	0800738e 	.word	0x0800738e

08007208 <memmove>:
 8007208:	4288      	cmp	r0, r1
 800720a:	b510      	push	{r4, lr}
 800720c:	eb01 0402 	add.w	r4, r1, r2
 8007210:	d902      	bls.n	8007218 <memmove+0x10>
 8007212:	4284      	cmp	r4, r0
 8007214:	4623      	mov	r3, r4
 8007216:	d807      	bhi.n	8007228 <memmove+0x20>
 8007218:	1e43      	subs	r3, r0, #1
 800721a:	42a1      	cmp	r1, r4
 800721c:	d008      	beq.n	8007230 <memmove+0x28>
 800721e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007226:	e7f8      	b.n	800721a <memmove+0x12>
 8007228:	4402      	add	r2, r0
 800722a:	4601      	mov	r1, r0
 800722c:	428a      	cmp	r2, r1
 800722e:	d100      	bne.n	8007232 <memmove+0x2a>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800723a:	e7f7      	b.n	800722c <memmove+0x24>

0800723c <_sbrk_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	@ (8007258 <_sbrk_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fb fc6c 	bl	8002b24 <_sbrk>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_sbrk_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_sbrk_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	200003fc 	.word	0x200003fc

0800725c <memcpy>:
 800725c:	440a      	add	r2, r1
 800725e:	4291      	cmp	r1, r2
 8007260:	f100 33ff 	add.w	r3, r0, #4294967295
 8007264:	d100      	bne.n	8007268 <memcpy+0xc>
 8007266:	4770      	bx	lr
 8007268:	b510      	push	{r4, lr}
 800726a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800726e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007272:	4291      	cmp	r1, r2
 8007274:	d1f9      	bne.n	800726a <memcpy+0xe>
 8007276:	bd10      	pop	{r4, pc}

08007278 <_realloc_r>:
 8007278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727c:	4607      	mov	r7, r0
 800727e:	4614      	mov	r4, r2
 8007280:	460d      	mov	r5, r1
 8007282:	b921      	cbnz	r1, 800728e <_realloc_r+0x16>
 8007284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007288:	4611      	mov	r1, r2
 800728a:	f7ff bc4d 	b.w	8006b28 <_malloc_r>
 800728e:	b92a      	cbnz	r2, 800729c <_realloc_r+0x24>
 8007290:	f7ff fbde 	bl	8006a50 <_free_r>
 8007294:	4625      	mov	r5, r4
 8007296:	4628      	mov	r0, r5
 8007298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800729c:	f000 f81a 	bl	80072d4 <_malloc_usable_size_r>
 80072a0:	4284      	cmp	r4, r0
 80072a2:	4606      	mov	r6, r0
 80072a4:	d802      	bhi.n	80072ac <_realloc_r+0x34>
 80072a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80072aa:	d8f4      	bhi.n	8007296 <_realloc_r+0x1e>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff fc3a 	bl	8006b28 <_malloc_r>
 80072b4:	4680      	mov	r8, r0
 80072b6:	b908      	cbnz	r0, 80072bc <_realloc_r+0x44>
 80072b8:	4645      	mov	r5, r8
 80072ba:	e7ec      	b.n	8007296 <_realloc_r+0x1e>
 80072bc:	42b4      	cmp	r4, r6
 80072be:	4622      	mov	r2, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	bf28      	it	cs
 80072c4:	4632      	movcs	r2, r6
 80072c6:	f7ff ffc9 	bl	800725c <memcpy>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4638      	mov	r0, r7
 80072ce:	f7ff fbbf 	bl	8006a50 <_free_r>
 80072d2:	e7f1      	b.n	80072b8 <_realloc_r+0x40>

080072d4 <_malloc_usable_size_r>:
 80072d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d8:	1f18      	subs	r0, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfbc      	itt	lt
 80072de:	580b      	ldrlt	r3, [r1, r0]
 80072e0:	18c0      	addlt	r0, r0, r3
 80072e2:	4770      	bx	lr

080072e4 <_init>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr

080072f0 <_fini>:
 80072f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f2:	bf00      	nop
 80072f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f6:	bc08      	pop	{r3}
 80072f8:	469e      	mov	lr, r3
 80072fa:	4770      	bx	lr
