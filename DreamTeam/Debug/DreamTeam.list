
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004424  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c4  080045c4  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045cc  080045cc  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045cc  080045cc  000055cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045d0  080045d0  000055d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080045d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          000001bc  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aaf3  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b7a  00000000  00000000  00010b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  000126b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000924  00000000  00000000  00013288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021380  00000000  00000000  00013bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfd9  00000000  00000000  00034f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2153  00000000  00000000  00041f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114058  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003178  00000000  00000000  0011409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  00117214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004594 	.word	0x08004594

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004594 	.word	0x08004594

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f8:	f001 fa48 	bl	800198c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fc:	f000 f8fc 	bl	80006f8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000500:	f000 fa66 	bl	80009d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa44 	bl	8000990 <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f960 	bl	80007cc <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f9be 	bl	800088c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	4971      	ldr	r1, [pc, #452]	@ (80006d8 <main+0x1e4>)
 8000514:	4871      	ldr	r0, [pc, #452]	@ (80006dc <main+0x1e8>)
 8000516:	f001 fb13 	bl	8001b40 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b71      	ldr	r3, [pc, #452]	@ (80006e0 <main+0x1ec>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b6f      	ldr	r3, [pc, #444]	@ (80006e0 <main+0x1ec>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b6e      	ldr	r3, [pc, #440]	@ (80006e0 <main+0x1ec>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b6d      	ldr	r3, [pc, #436]	@ (80006e0 <main+0x1ec>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b6c      	ldr	r3, [pc, #432]	@ (80006e0 <main+0x1ec>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b6a      	ldr	r3, [pc, #424]	@ (80006e0 <main+0x1ec>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b69      	ldr	r3, [pc, #420]	@ (80006e0 <main+0x1ec>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b68      	ldr	r3, [pc, #416]	@ (80006e0 <main+0x1ec>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b67      	ldr	r3, [pc, #412]	@ (80006e0 <main+0x1ec>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b66      	ldr	r3, [pc, #408]	@ (80006e0 <main+0x1ec>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b65      	ldr	r3, [pc, #404]	@ (80006e0 <main+0x1ec>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b64      	ldr	r3, [pc, #400]	@ (80006e0 <main+0x1ec>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b63      	ldr	r3, [pc, #396]	@ (80006e0 <main+0x1ec>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b62      	ldr	r3, [pc, #392]	@ (80006e0 <main+0x1ec>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b61      	ldr	r3, [pc, #388]	@ (80006e0 <main+0x1ec>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b60      	ldr	r3, [pc, #384]	@ (80006e0 <main+0x1ec>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b5f      	ldr	r3, [pc, #380]	@ (80006e0 <main+0x1ec>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b5d      	ldr	r3, [pc, #372]	@ (80006e0 <main+0x1ec>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b5c      	ldr	r3, [pc, #368]	@ (80006e0 <main+0x1ec>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b5b      	ldr	r3, [pc, #364]	@ (80006e0 <main+0x1ec>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <main+0x1ec>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b59      	ldr	r3, [pc, #356]	@ (80006e0 <main+0x1ec>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b58      	ldr	r3, [pc, #352]	@ (80006e0 <main+0x1ec>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b57      	ldr	r3, [pc, #348]	@ (80006e0 <main+0x1ec>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b56      	ldr	r3, [pc, #344]	@ (80006e0 <main+0x1ec>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 800058c:	4b55      	ldr	r3, [pc, #340]	@ (80006e4 <main+0x1f0>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <main+0x1f0>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b52      	ldr	r3, [pc, #328]	@ (80006e4 <main+0x1f0>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b51      	ldr	r3, [pc, #324]	@ (80006e4 <main+0x1f0>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b50      	ldr	r3, [pc, #320]	@ (80006e4 <main+0x1f0>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b4f      	ldr	r3, [pc, #316]	@ (80006e4 <main+0x1f0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b4d      	ldr	r3, [pc, #308]	@ (80006e4 <main+0x1f0>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b4c      	ldr	r3, [pc, #304]	@ (80006e4 <main+0x1f0>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b4b      	ldr	r3, [pc, #300]	@ (80006e4 <main+0x1f0>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <main+0x1f0>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b48      	ldr	r3, [pc, #288]	@ (80006e4 <main+0x1f0>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b47      	ldr	r3, [pc, #284]	@ (80006e4 <main+0x1f0>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b46      	ldr	r3, [pc, #280]	@ (80006e4 <main+0x1f0>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b45      	ldr	r3, [pc, #276]	@ (80006e4 <main+0x1f0>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b43      	ldr	r3, [pc, #268]	@ (80006e4 <main+0x1f0>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b42      	ldr	r3, [pc, #264]	@ (80006e4 <main+0x1f0>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b41      	ldr	r3, [pc, #260]	@ (80006e4 <main+0x1f0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <main+0x1f0>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b3f      	ldr	r3, [pc, #252]	@ (80006e4 <main+0x1f0>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b3e      	ldr	r3, [pc, #248]	@ (80006e4 <main+0x1f0>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b3d      	ldr	r3, [pc, #244]	@ (80006e4 <main+0x1f0>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b3c      	ldr	r3, [pc, #240]	@ (80006e4 <main+0x1f0>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b3b      	ldr	r3, [pc, #236]	@ (80006e4 <main+0x1f0>)
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	4839      	ldr	r0, [pc, #228]	@ (80006e8 <main+0x1f4>)
 8000602:	f002 fc91 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	4836      	ldr	r0, [pc, #216]	@ (80006e8 <main+0x1f4>)
 800060e:	f002 fc8b 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4833      	ldr	r0, [pc, #204]	@ (80006e8 <main+0x1f4>)
 800061a:	f002 fc85 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4830      	ldr	r0, [pc, #192]	@ (80006e8 <main+0x1f4>)
 8000626:	f002 fc7f 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	482f      	ldr	r0, [pc, #188]	@ (80006ec <main+0x1f8>)
 800062e:	f003 f9a1 	bl	8003974 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	482d      	ldr	r0, [pc, #180]	@ (80006ec <main+0x1f8>)
 8000636:	f003 f99d 	bl	8003974 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <main+0x1fc>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b2b      	ldr	r3, [pc, #172]	@ (80006f0 <main+0x1fc>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 4; //Aca se elige que programa queremos que se realice
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <main+0x200>)
 800064c:	2204      	movs	r2, #4
 800064e:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		switch (prueba) {
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <main+0x200>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b65      	cmp	r3, #101	@ 0x65
 8000656:	d03a      	beq.n	80006ce <main+0x1da>
 8000658:	2b65      	cmp	r3, #101	@ 0x65
 800065a:	dcf9      	bgt.n	8000650 <main+0x15c>
 800065c:	2b0a      	cmp	r3, #10
 800065e:	dc1d      	bgt.n	800069c <main+0x1a8>
 8000660:	2b00      	cmp	r3, #0
 8000662:	dbf5      	blt.n	8000650 <main+0x15c>
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d8f3      	bhi.n	8000650 <main+0x15c>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <main+0x17c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006a3 	.word	0x080006a3
 8000674:	080006a9 	.word	0x080006a9
 8000678:	08000651 	.word	0x08000651
 800067c:	08000651 	.word	0x08000651
 8000680:	080006af 	.word	0x080006af
 8000684:	080006b5 	.word	0x080006b5
 8000688:	08000651 	.word	0x08000651
 800068c:	08000651 	.word	0x08000651
 8000690:	08000651 	.word	0x08000651
 8000694:	08000651 	.word	0x08000651
 8000698:	080006bb 	.word	0x080006bb
 800069c:	2b64      	cmp	r3, #100	@ 0x64
 800069e:	d013      	beq.n	80006c8 <main+0x1d4>
 80006a0:	e7d6      	b.n	8000650 <main+0x15c>

		case 0:
			prueba_avanzar();
 80006a2:	f000 fa23 	bl	8000aec <prueba_avanzar>
			break;
 80006a6:	e016      	b.n	80006d6 <main+0x1e2>

		case 1:
			prueba_giros_y_sensores();
 80006a8:	f000 fa2c 	bl	8000b04 <prueba_giros_y_sensores>
			break;
 80006ac:	e013      	b.n	80006d6 <main+0x1e2>

		case 4:
			programa_principal();
 80006ae:	f000 faff 	bl	8000cb0 <programa_principal>
			break;
 80006b2:	e010      	b.n	80006d6 <main+0x1e2>

		case 5:
			ajuste_automatico();
 80006b4:	f000 fa02 	bl	8000abc <ajuste_automatico>
			break;
 80006b8:	e00d      	b.n	80006d6 <main+0x1e2>

		case 10:{
			TIM3->CCR3 = 0;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <main+0x1fc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <main+0x1fc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	641a      	str	r2, [r3, #64]	@ 0x40
		}
			break;
 80006c6:	e006      	b.n	80006d6 <main+0x1e2>
		case 100:
			prueba_casilla_n();
 80006c8:	f000 fa98 	bl	8000bfc <prueba_casilla_n>
			break;
 80006cc:	e003      	b.n	80006d6 <main+0x1e2>

		case 101:
			prueba_post_relleno();
 80006ce:	f000 fabb 	bl	8000c48 <prueba_post_relleno>
			break;
 80006d2:	bf00      	nop
 80006d4:	e7bc      	b.n	8000650 <main+0x15c>
		switch (prueba) {
 80006d6:	e7bb      	b.n	8000650 <main+0x15c>
 80006d8:	20000148 	.word	0x20000148
 80006dc:	20000030 	.word	0x20000030
 80006e0:	20000124 	.word	0x20000124
 80006e4:	20000134 	.word	0x20000134
 80006e8:	40020400 	.word	0x40020400
 80006ec:	200000d8 	.word	0x200000d8
 80006f0:	40000400 	.word	0x40000400
 80006f4:	20000145 	.word	0x20000145

080006f8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b094      	sub	sp, #80	@ 0x50
 80006fc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	2230      	movs	r2, #48	@ 0x30
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f003 ff18 	bl	800453c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	4a27      	ldr	r2, [pc, #156]	@ (80007c4 <SystemClock_Config+0xcc>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	@ 0x40
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <SystemClock_Config+0xcc>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	@ (80007c8 <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <SystemClock_Config+0xd0>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <SystemClock_Config+0xd0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000754:	2302      	movs	r3, #2
 8000756:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075c:	2310      	movs	r3, #16
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000768:	2308      	movs	r3, #8
 800076a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 800076c:	2332      	movs	r3, #50	@ 0x32
 800076e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000770:	2304      	movs	r3, #4
 8000772:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000774:	2307      	movs	r3, #7
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000778:	f107 0320 	add.w	r3, r7, #32
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fbed 	bl	8002f5c <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x94>
		Error_Handler();
 8000788:	f000 ff88 	bl	800169c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000798:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800079c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800079e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fe4e 	bl	800344c <HAL_RCC_ClockConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc2>
		Error_Handler();
 80007b6:	f000 ff71 	bl	800169c <Error_Handler>
	}
}
 80007ba:	bf00      	nop
 80007bc:	3750      	adds	r7, #80	@ 0x50
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007e0:	4a28      	ldr	r2, [pc, #160]	@ (8000884 <MX_ADC1_Init+0xb8>)
 80007e2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007ea:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80007f2:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80007f8:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000808:	2200      	movs	r2, #0
 800080a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800080e:	4a1e      	ldr	r2, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xbc>)
 8000810:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000818:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800081a:	2202      	movs	r2, #2
 800081c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800081e:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000820:	2201      	movs	r2, #1
 8000822:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800082c:	4814      	ldr	r0, [pc, #80]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800082e:	f001 f943 	bl	8001ab8 <HAL_ADC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000838:	f000 ff30 	bl	800169c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800083c:	2309      	movs	r3, #9
 800083e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000848:	463b      	mov	r3, r7
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800084e:	f001 fa95 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000858:	f000 ff20 	bl	800169c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800085c:	2308      	movs	r3, #8
 800085e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800086a:	f001 fa87 	bl	8001d7c <HAL_ADC_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000874:	f000 ff12 	bl	800169c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000030 	.word	0x20000030
 8000884:	40012000 	.word	0x40012000
 8000888:	0f000001 	.word	0x0f000001

0800088c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	@ 0x38
 8000890:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000892:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
 80008b8:	615a      	str	r2, [r3, #20]
 80008ba:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008bc:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008be:	4a33      	ldr	r2, [pc, #204]	@ (800098c <MX_TIM3_Init+0x100>)
 80008c0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80008c2:	4b31      	ldr	r3, [pc, #196]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008d0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80008d4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80008e2:	4829      	ldr	r0, [pc, #164]	@ (8000988 <MX_TIM3_Init+0xfc>)
 80008e4:	f002 ff9e 	bl	8003824 <HAL_TIM_Base_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM3_Init+0x66>
		Error_Handler();
 80008ee:	f000 fed5 	bl	800169c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4822      	ldr	r0, [pc, #136]	@ (8000988 <MX_TIM3_Init+0xfc>)
 8000900:	f003 f9c2 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x82>
		Error_Handler();
 800090a:	f000 fec7 	bl	800169c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800090e:	481e      	ldr	r0, [pc, #120]	@ (8000988 <MX_TIM3_Init+0xfc>)
 8000910:	f002 ffd7 	bl	80038c2 <HAL_TIM_PWM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0x92>
		Error_Handler();
 800091a:	f000 febf 	bl	800169c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000926:	f107 0320 	add.w	r3, r7, #32
 800092a:	4619      	mov	r1, r3
 800092c:	4816      	ldr	r0, [pc, #88]	@ (8000988 <MX_TIM3_Init+0xfc>)
 800092e:	f003 fd89 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000938:	f000 feb0 	bl	800169c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093c:	2360      	movs	r3, #96	@ 0x60
 800093e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2208      	movs	r2, #8
 8000950:	4619      	mov	r1, r3
 8000952:	480d      	ldr	r0, [pc, #52]	@ (8000988 <MX_TIM3_Init+0xfc>)
 8000954:	f003 f8d6 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800095e:	f000 fe9d 	bl	800169c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	220c      	movs	r2, #12
 8000966:	4619      	mov	r1, r3
 8000968:	4807      	ldr	r0, [pc, #28]	@ (8000988 <MX_TIM3_Init+0xfc>)
 800096a:	f003 f8cb 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000974:	f000 fe92 	bl	800169c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000978:	4803      	ldr	r0, [pc, #12]	@ (8000988 <MX_TIM3_Init+0xfc>)
 800097a:	f000 ff57 	bl	800182c <HAL_TIM_MspPostInit>

}
 800097e:	bf00      	nop
 8000980:	3738      	adds	r7, #56	@ 0x38
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000d8 	.word	0x200000d8
 800098c:	40000400 	.word	0x40000400

08000990 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <MX_DMA_Init+0x3c>)
 80009a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_DMA_Init+0x3c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2038      	movs	r0, #56	@ 0x38
 80009b8:	f001 fd5b 	bl	8002472 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009bc:	2038      	movs	r0, #56	@ 0x38
 80009be:	f001 fd74 	bl	80024aa <HAL_NVIC_EnableIRQ>

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b30      	ldr	r3, [pc, #192]	@ (8000aac <MX_GPIO_Init+0xdc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a2f      	ldr	r2, [pc, #188]	@ (8000aac <MX_GPIO_Init+0xdc>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b2d      	ldr	r3, [pc, #180]	@ (8000aac <MX_GPIO_Init+0xdc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a28      	ldr	r2, [pc, #160]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b26      	ldr	r3, [pc, #152]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2108      	movs	r1, #8
 8000a3e:	481c      	ldr	r0, [pc, #112]	@ (8000ab0 <MX_GPIO_Init+0xe0>)
 8000a40:	f002 fa72 	bl	8002f28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000a4a:	481a      	ldr	r0, [pc, #104]	@ (8000ab4 <MX_GPIO_Init+0xe4>)
 8000a4c:	f002 fa6c 	bl	8002f28 <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a50:	2308      	movs	r3, #8
 8000a52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4812      	ldr	r0, [pc, #72]	@ (8000ab0 <MX_GPIO_Init+0xe0>)
 8000a68:	f002 f8aa 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000a6c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a70:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	480b      	ldr	r0, [pc, #44]	@ (8000ab4 <MX_GPIO_Init+0xe4>)
 8000a86:	f002 f89b 	bl	8002bc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8000a8a:	23c0      	movs	r3, #192	@ 0xc0
 8000a8c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <MX_GPIO_Init+0xe8>)
 8000a9e:	f002 f88f 	bl	8002bc0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3720      	adds	r7, #32
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40020400 	.word	0x40020400
 8000ab8:	40020800 	.word	0x40020800

08000abc <ajuste_automatico>:

/* USER CODE BEGIN 4 */
void ajuste_automatico(void) {
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
		if (sensor_der_min > sensor_der_avg) {
 8000ac0:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <ajuste_automatico+0x28>)
 8000ac2:	881a      	ldrh	r2, [r3, #0]
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <ajuste_automatico+0x2c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d904      	bls.n	8000ad8 <ajuste_automatico+0x1c>
			sensor_der_min = sensor_der_avg;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <ajuste_automatico+0x2c>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b03      	ldr	r3, [pc, #12]	@ (8000ae4 <ajuste_automatico+0x28>)
 8000ad6:	801a      	strh	r2, [r3, #0]
		}
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000002 	.word	0x20000002
 8000ae8:	200001ca 	.word	0x200001ca

08000aec <prueba_avanzar>:

void prueba_avanzar(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	correccion_avanzar();//codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000af0:	f000 fa74 	bl	8000fdc <correccion_avanzar>
	ejecutarGiro(izquierda);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 fb23 	bl	8001140 <ejecutarGiro>
	correccion_avanzar();
 8000afa:	f000 fa6f 	bl	8000fdc <correccion_avanzar>
	while(1);
 8000afe:	bf00      	nop
 8000b00:	e7fd      	b.n	8000afe <prueba_avanzar+0x12>
	...

08000b04 <prueba_giros_y_sensores>:
}

void prueba_giros_y_sensores(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000b08:	f000 fa68 	bl	8000fdc <correccion_avanzar>
	if (verificar_sensor()) {
 8000b0c:	f000 fc06 	bl	800131c <verificar_sensor>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d00b      	beq.n	8000b2e <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b16:	4b36      	ldr	r3, [pc, #216]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	4a36      	ldr	r2, [pc, #216]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 f9db 	bl	8000edc <act_ubicacion>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b31      	ldr	r3, [pc, #196]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 8000b2e:	4b30      	ldr	r3, [pc, #192]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b08      	cmp	r3, #8
 8000b34:	d121      	bne.n	8000b7a <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000b36:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b3a:	f000 ff99 	bl	8001a70 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fafe 	bl	8001140 <ejecutarGiro>
		orientacion_actual = oeste;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000b4a:	e012      	b.n	8000b72 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000b4c:	f000 fa46 	bl	8000fdc <correccion_avanzar>
			if (verificar_sensor()) {
 8000b50:	f000 fbe4 	bl	800131c <verificar_sensor>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b5a:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4a25      	ldr	r2, [pc, #148]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f9b9 	bl	8000edc <act_ubicacion>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b70:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000b72:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d0e8      	beq.n	8000b4c <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	d121      	bne.n	8000bc6 <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 8000b82:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b86:	f000 ff73 	bl	8001a70 <HAL_Delay>
		ejecutarGiro(derecha);
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	f000 fad8 	bl	8001140 <ejecutarGiro>
		orientacion_actual = norte;
 8000b90:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000b96:	e012      	b.n	8000bbe <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 8000b98:	f000 fa20 	bl	8000fdc <correccion_avanzar>
			if (verificar_sensor()) {
 8000b9c:	f000 fbbe 	bl	800131c <verificar_sensor>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d00b      	beq.n	8000bbe <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000ba6:	4b12      	ldr	r3, [pc, #72]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f993 	bl	8000edc <act_ubicacion>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b09      	cmp	r3, #9
 8000bc4:	d0e8      	beq.n	8000b98 <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13)
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <prueba_giros_y_sensores+0xec>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b0d      	cmp	r3, #13
 8000bcc:	d10e      	bne.n	8000bec <prueba_giros_y_sensores+0xe8>
			&& (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)
 8000bce:	2140      	movs	r1, #64	@ 0x40
 8000bd0:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <prueba_giros_y_sensores+0xf4>)
 8000bd2:	f002 f991 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d107      	bne.n	8000bec <prueba_giros_y_sensores+0xe8>
					== GPIO_PIN_RESET)) {
		ejecutarGiro(giro_180);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 faaf 	bl	8001140 <ejecutarGiro>
		orientacion_actual = sur;
 8000be2:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <prueba_giros_y_sensores+0xf0>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000be8:	f000 f9f8 	bl	8000fdc <correccion_avanzar>
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000120 	.word	0x20000120
 8000bf4:	20000121 	.word	0x20000121
 8000bf8:	40020800 	.word	0x40020800

08000bfc <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <prueba_casilla_n+0x3c>)
 8000c02:	2207      	movs	r2, #7
 8000c04:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <prueba_casilla_n+0x40>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <prueba_casilla_n+0x44>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	@ (8000c40 <prueba_casilla_n+0x44>)
 8000c14:	2203      	movs	r2, #3
 8000c16:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <prueba_casilla_n+0x44>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //deberia dar que tiene que ir a 11
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <prueba_casilla_n+0x3c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4905      	ldr	r1, [pc, #20]	@ (8000c3c <prueba_casilla_n+0x40>)
 8000c26:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <prueba_casilla_n+0x44>)
 8000c28:	f000 fc9a 	bl	8001560 <calculo_minimo_peso>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	461a      	mov	r2, r3
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <prueba_casilla_n+0x48>)
 8000c32:	701a      	strb	r2, [r3, #0]

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000120 	.word	0x20000120
 8000c3c:	20000134 	.word	0x20000134
 8000c40:	20000124 	.word	0x20000124
 8000c44:	20000000 	.word	0x20000000

08000c48 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	ubicacion = 5;
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <prueba_post_relleno+0x54>)
 8000c4e:	2205      	movs	r2, #5
 8000c50:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <prueba_post_relleno+0x58>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <prueba_post_relleno+0x54>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4a10      	ldr	r2, [pc, #64]	@ (8000ca0 <prueba_post_relleno+0x58>)
 8000c5e:	7812      	ldrb	r2, [r2, #0]
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8dc 	bl	8000e20 <obtener_orientacion_futura>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <prueba_post_relleno+0x5c>)
 8000c6e:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <prueba_post_relleno+0x60>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <prueba_post_relleno+0x60>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <prueba_post_relleno+0x5c>)
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 f8f9 	bl	8000e78 <obtenerGiro>
 8000c86:	4603      	mov	r3, r0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <prueba_post_relleno+0x64>)
 8000c8c:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <prueba_post_relleno+0x64>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fa54 	bl	8001140 <ejecutarGiro>
	while (1);
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <prueba_post_relleno+0x50>
 8000c9c:	20000120 	.word	0x20000120
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000122 	.word	0x20000122
 8000ca8:	20000121 	.word	0x20000121
 8000cac:	20000123 	.word	0x20000123

08000cb0 <programa_principal>:
}

void programa_principal(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000cb4:	f000 f992 	bl	8000fdc <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 8000cb8:	f000 fb30 	bl	800131c <verificar_sensor>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d040      	beq.n	8000d44 <programa_principal+0x94>
		contador_giros = 0;
 8000cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8000df4 <programa_principal+0x144>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
		contador_casillas= contador_casillas + 1;
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8000df8 <programa_principal+0x148>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b49      	ldr	r3, [pc, #292]	@ (8000df8 <programa_principal+0x148>)
 8000cd2:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000cd4:	4b49      	ldr	r3, [pc, #292]	@ (8000dfc <programa_principal+0x14c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4a49      	ldr	r2, [pc, #292]	@ (8000e00 <programa_principal+0x150>)
 8000cda:	7812      	ldrb	r2, [r2, #0]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f8fc 	bl	8000edc <act_ubicacion>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b44      	ldr	r3, [pc, #272]	@ (8000dfc <programa_principal+0x14c>)
 8000cea:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000cec:	4b43      	ldr	r3, [pc, #268]	@ (8000dfc <programa_principal+0x14c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4944      	ldr	r1, [pc, #272]	@ (8000e04 <programa_principal+0x154>)
 8000cf4:	4844      	ldr	r0, [pc, #272]	@ (8000e08 <programa_principal+0x158>)
 8000cf6:	f000 fc33 	bl	8001560 <calculo_minimo_peso>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <programa_principal+0x15c>)
 8000d00:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <programa_principal+0x14c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4a41      	ldr	r2, [pc, #260]	@ (8000e0c <programa_principal+0x15c>)
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f887 	bl	8000e20 <obtener_orientacion_futura>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b3e      	ldr	r3, [pc, #248]	@ (8000e10 <programa_principal+0x160>)
 8000d18:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000d1a:	4b39      	ldr	r3, [pc, #228]	@ (8000e00 <programa_principal+0x150>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8000e10 <programa_principal+0x160>)
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f8a7 	bl	8000e78 <obtenerGiro>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b39      	ldr	r3, [pc, #228]	@ (8000e14 <programa_principal+0x164>)
 8000d30:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000d32:	4b37      	ldr	r3, [pc, #220]	@ (8000e10 <programa_principal+0x160>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <programa_principal+0x150>)
 8000d38:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000d3a:	4b36      	ldr	r3, [pc, #216]	@ (8000e14 <programa_principal+0x164>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f9fe 	bl	8001140 <ejecutarGiro>
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8000d44:	2140      	movs	r1, #64	@ 0x40
 8000d46:	4834      	ldr	r0, [pc, #208]	@ (8000e18 <programa_principal+0x168>)
 8000d48:	f002 f8d6 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d147      	bne.n	8000de2 <programa_principal+0x132>
		HAL_Delay(tiempo_rebotes);
 8000d52:	2014      	movs	r0, #20
 8000d54:	f000 fe8c 	bl	8001a70 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8000d58:	2140      	movs	r1, #64	@ 0x40
 8000d5a:	482f      	ldr	r0, [pc, #188]	@ (8000e18 <programa_principal+0x168>)
 8000d5c:	f002 f8cc 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d13d      	bne.n	8000de2 <programa_principal+0x132>
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <programa_principal+0x14c>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <programa_principal+0x150>)
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4824      	ldr	r0, [pc, #144]	@ (8000e04 <programa_principal+0x154>)
 8000d72:	f000 fb03 	bl	800137c <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 8000d76:	4924      	ldr	r1, [pc, #144]	@ (8000e08 <programa_principal+0x158>)
 8000d78:	4822      	ldr	r0, [pc, #136]	@ (8000e04 <programa_principal+0x154>)
 8000d7a:	f000 fb51 	bl	8001420 <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <programa_principal+0x14c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	491f      	ldr	r1, [pc, #124]	@ (8000e04 <programa_principal+0x154>)
 8000d86:	4820      	ldr	r0, [pc, #128]	@ (8000e08 <programa_principal+0x158>)
 8000d88:	f000 fbea 	bl	8001560 <calculo_minimo_peso>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b1e      	ldr	r3, [pc, #120]	@ (8000e0c <programa_principal+0x15c>)
 8000d92:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <programa_principal+0x14c>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <programa_principal+0x15c>)
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	4611      	mov	r1, r2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f83e 	bl	8000e20 <obtener_orientacion_futura>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <programa_principal+0x160>)
 8000daa:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000dac:	4b14      	ldr	r3, [pc, #80]	@ (8000e00 <programa_principal+0x150>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	@ (8000e10 <programa_principal+0x160>)
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	4611      	mov	r1, r2
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 f85e 	bl	8000e78 <obtenerGiro>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <programa_principal+0x164>)
 8000dc2:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <programa_principal+0x160>)
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000e00 <programa_principal+0x150>)
 8000dca:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <programa_principal+0x144>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <programa_principal+0x128>
				mini_retroceso();
 8000dd4:	f000 f9a6 	bl	8001124 <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <programa_principal+0x164>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f9af 	bl	8001140 <ejecutarGiro>
		}
	}
	if (ubicacion == 15) {
 8000de2:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <programa_principal+0x14c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d102      	bne.n	8000df0 <programa_principal+0x140>
		prueba = 10;
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <programa_principal+0x16c>)
 8000dec:	220a      	movs	r2, #10
 8000dee:	701a      	strb	r2, [r3, #0]
	}
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000146 	.word	0x20000146
 8000df8:	20000144 	.word	0x20000144
 8000dfc:	20000120 	.word	0x20000120
 8000e00:	20000121 	.word	0x20000121
 8000e04:	20000134 	.word	0x20000134
 8000e08:	20000124 	.word	0x20000124
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000122 	.word	0x20000122
 8000e14:	20000123 	.word	0x20000123
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	20000145 	.word	0x20000145

08000e20 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	3301      	adds	r3, #1
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d101      	bne.n	8000e3e <obtener_orientacion_futura+0x1e>
		return oeste;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e015      	b.n	8000e6a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000e3e:	79ba      	ldrb	r2, [r7, #6]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d101      	bne.n	8000e4c <obtener_orientacion_futura+0x2c>
		return este;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e00e      	b.n	8000e6a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000e4c:	79ba      	ldrb	r2, [r7, #6]
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	3304      	adds	r3, #4
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d101      	bne.n	8000e5a <obtener_orientacion_futura+0x3a>
		return norte;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e007      	b.n	8000e6a <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000e5a:	79ba      	ldrb	r2, [r7, #6]
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d101      	bne.n	8000e68 <obtener_orientacion_futura+0x48>
		return sur;
 8000e64:	2302      	movs	r3, #2
 8000e66:	e000      	b.n	8000e6a <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000e68:	2364      	movs	r3, #100	@ 0x64
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	460a      	mov	r2, r1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	4613      	mov	r3, r2
 8000e86:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000e88:	79ba      	ldrb	r2, [r7, #6]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	3304      	adds	r3, #4
 8000e90:	425a      	negs	r2, r3
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	f002 0203 	and.w	r2, r2, #3
 8000e9a:	bf58      	it	pl
 8000e9c:	4253      	negpl	r3, r2
 8000e9e:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d812      	bhi.n	8000ecc <obtenerGiro+0x54>
 8000ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8000eac <obtenerGiro+0x34>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ec1 	.word	0x08000ec1
 8000eb4:	08000ec5 	.word	0x08000ec5
 8000eb8:	08000ec9 	.word	0x08000ec9
	case 0:
		return adelante;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	e006      	b.n	8000ece <obtenerGiro+0x56>
	case 1:
		return derecha;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e004      	b.n	8000ece <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e002      	b.n	8000ece <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <obtenerGiro+0x56>
	default:
		return 100; // Error
 8000ecc:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d81a      	bhi.n	8000f28 <act_ubicacion+0x4c>
 8000ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef8 <act_ubicacion+0x1c>)
 8000ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef8:	08000f09 	.word	0x08000f09
 8000efc:	08000f11 	.word	0x08000f11
 8000f00:	08000f19 	.word	0x08000f19
 8000f04:	08000f21 	.word	0x08000f21
	case 0:
		return ubicacion + 4;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	e00c      	b.n	8000f2a <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e008      	b.n	8000f2a <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	e004      	b.n	8000f2a <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	e000      	b.n	8000f2a <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8000f28:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <promediar>:

void promediar(uint16_t *buffer) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e012      	b.n	8000f74 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	4413      	add	r3, r2
 8000f58:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3304      	adds	r3, #4
 8000f6c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b0f      	cmp	r3, #15
 8000f78:	dde9      	ble.n	8000f4e <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <promediar+0x64>)
 8000f82:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <promediar+0x68>)
 8000f8c:	801a      	strh	r2, [r3, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200001c8 	.word	0x200001c8
 8000fa0:	200001ca 	.word	0x200001ca

08000fa4 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8000fac:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000fae:	f7ff ffc3 	bl	8000f38 <promediar>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000148 	.word	0x20000148

08000fc0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <HAL_ADC_ConvCpltCallback+0x18>)
 8000fca:	f7ff ffb5 	bl	8000f38 <promediar>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000188 	.word	0x20000188

08000fdc <correccion_avanzar>:
void correccion_avanzar(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <correccion_avanzar+0x50>)
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000fea:	d209      	bcs.n	8001000 <correccion_avanzar+0x24>
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <correccion_avanzar+0x54>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d902      	bls.n	8001000 <correccion_avanzar+0x24>
		apagar_derecha();  // apagar motor derecho
 8000ffa:	f000 f86b 	bl	80010d4 <apagar_derecha>
 8000ffe:	e012      	b.n	8001026 <correccion_avanzar+0x4a>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 8001000:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <correccion_avanzar+0x50>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800100a:	d909      	bls.n	8001020 <correccion_avanzar+0x44>
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <correccion_avanzar+0x54>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	f240 424b 	movw	r2, #1099	@ 0x44b
 8001016:	4293      	cmp	r3, r2
 8001018:	d802      	bhi.n	8001020 <correccion_avanzar+0x44>
		apagar_izquierda();  //apaga motor izquierdo
 800101a:	f000 f833 	bl	8001084 <apagar_izquierda>
 800101e:	e002      	b.n	8001026 <correccion_avanzar+0x4a>
	} else {
		avanzar();
 8001020:	f000 f808 	bl	8001034 <avanzar>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001c8 	.word	0x200001c8
 8001030:	200001ca 	.word	0x200001ca

08001034 <avanzar>:
void avanzar(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <avanzar+0x48>)
 8001040:	f001 ff72 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800104a:	480c      	ldr	r0, [pc, #48]	@ (800107c <avanzar+0x48>)
 800104c:	f001 ff6c 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001056:	4809      	ldr	r0, [pc, #36]	@ (800107c <avanzar+0x48>)
 8001058:	f001 ff66 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001062:	4806      	ldr	r0, [pc, #24]	@ (800107c <avanzar+0x48>)
 8001064:	f001 ff60 	bl	8002f28 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <avanzar+0x4c>)
 800106a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800106e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <avanzar+0x4c>)
 8001072:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001076:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40020400 	.word	0x40020400
 8001080:	40000400 	.word	0x40000400

08001084 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800108e:	480f      	ldr	r0, [pc, #60]	@ (80010cc <apagar_izquierda+0x48>)
 8001090:	f001 ff4a 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800109a:	480c      	ldr	r0, [pc, #48]	@ (80010cc <apagar_izquierda+0x48>)
 800109c:	f001 ff44 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a6:	4809      	ldr	r0, [pc, #36]	@ (80010cc <apagar_izquierda+0x48>)
 80010a8:	f001 ff3e 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b2:	4806      	ldr	r0, [pc, #24]	@ (80010cc <apagar_izquierda+0x48>)
 80010b4:	f001 ff38 	bl	8002f28 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <apagar_izquierda+0x4c>)
 80010ba:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010be:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <apagar_izquierda+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40000400 	.word	0x40000400

080010d4 <apagar_derecha>:

void apagar_derecha(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010de:	480f      	ldr	r0, [pc, #60]	@ (800111c <apagar_derecha+0x48>)
 80010e0:	f001 ff22 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ea:	480c      	ldr	r0, [pc, #48]	@ (800111c <apagar_derecha+0x48>)
 80010ec:	f001 ff1c 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010f6:	4809      	ldr	r0, [pc, #36]	@ (800111c <apagar_derecha+0x48>)
 80010f8:	f001 ff16 	bl	8002f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <apagar_derecha+0x48>)
 8001104:	f001 ff10 	bl	8002f28 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <apagar_derecha+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800110e:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <apagar_derecha+0x4c>)
 8001110:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40020400 	.word	0x40020400
 8001120:	40000400 	.word	0x40000400

08001124 <mini_retroceso>:

void mini_retroceso(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001128:	2002      	movs	r0, #2
 800112a:	f000 f893 	bl	8001254 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 800112e:	2002      	movs	r0, #2
 8001130:	f000 f8c2 	bl	80012b8 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001134:	20c8      	movs	r0, #200	@ 0xc8
 8001136:	f000 fc9b 	bl	8001a70 <HAL_Delay>
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2b03      	cmp	r3, #3
 800114e:	d87b      	bhi.n	8001248 <ejecutarGiro+0x108>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <ejecutarGiro+0x18>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001169 	.word	0x08001169
 800115c:	080011c9 	.word	0x080011c9
 8001160:	0800117f 	.word	0x0800117f
 8001164:	08001213 	.word	0x08001213
	case adelante:
		setMotorIzquierdo(avance);
 8001168:	2001      	movs	r0, #1
 800116a:	f000 f873 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 f8a2 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 8001174:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001178:	f000 fc7a 	bl	8001a70 <HAL_Delay>
		break;
 800117c:	e064      	b.n	8001248 <ejecutarGiro+0x108>


	case derecha:
		contador_giros = contador_giros + 1;
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <ejecutarGiro+0x110>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b32      	ldr	r3, [pc, #200]	@ (8001250 <ejecutarGiro+0x110>)
 8001188:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 800118a:	2001      	movs	r0, #1
 800118c:	f000 f862 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001190:	2001      	movs	r0, #1
 8001192:	f000 f891 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto_avanzar);
 8001196:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800119a:	f000 fc69 	bl	8001a70 <HAL_Delay>
		setMotorIzquierdo(avance);
 800119e:	2001      	movs	r0, #1
 80011a0:	f000 f858 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 80011a4:	2002      	movs	r0, #2
 80011a6:	f000 f887 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 80011aa:	f240 203f 	movw	r0, #575	@ 0x23f
 80011ae:	f000 fc5f 	bl	8001a70 <HAL_Delay>
		setMotorIzquierdo(avance);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 f84e 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80011b8:	2001      	movs	r0, #1
 80011ba:	f000 f87d 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 80011be:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011c2:	f000 fc55 	bl	8001a70 <HAL_Delay>
		break;
 80011c6:	e03f      	b.n	8001248 <ejecutarGiro+0x108>


	case izquierda:
		contador_giros = contador_giros + 1;
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <ejecutarGiro+0x110>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <ejecutarGiro+0x110>)
 80011d2:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f000 f83d 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80011da:	2001      	movs	r0, #1
 80011dc:	f000 f86c 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto_avanzar);
 80011e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011e4:	f000 fc44 	bl	8001a70 <HAL_Delay>
		setMotorIzquierdo(retroceso);
 80011e8:	2002      	movs	r0, #2
 80011ea:	f000 f833 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 f862 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 80011f4:	f240 203f 	movw	r0, #575	@ 0x23f
 80011f8:	f000 fc3a 	bl	8001a70 <HAL_Delay>
		setMotorIzquierdo(avance);
 80011fc:	2001      	movs	r0, #1
 80011fe:	f000 f829 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001202:	2001      	movs	r0, #1
 8001204:	f000 f858 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 8001208:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800120c:	f000 fc30 	bl	8001a70 <HAL_Delay>
		break;
 8001210:	e01a      	b.n	8001248 <ejecutarGiro+0x108>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <ejecutarGiro+0x110>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <ejecutarGiro+0x110>)
 800121c:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 800121e:	2001      	movs	r0, #1
 8001220:	f000 f818 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001224:	2002      	movs	r0, #2
 8001226:	f000 f847 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 800122a:	f240 404c 	movw	r0, #1100	@ 0x44c
 800122e:	f000 fc1f 	bl	8001a70 <HAL_Delay>
		setMotorIzquierdo(avance);
 8001232:	2001      	movs	r0, #1
 8001234:	f000 f80e 	bl	8001254 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f83d 	bl	80012b8 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 800123e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001242:	f000 fc15 	bl	8001a70 <HAL_Delay>
		break;
 8001246:	bf00      	nop

	}
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000146 	.word	0x20000146

08001254 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 800125e:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <setMotorIzquierdo+0x5c>)
 8001260:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001264:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d002      	beq.n	8001272 <setMotorIzquierdo+0x1e>
 800126c:	2b02      	cmp	r3, #2
 800126e:	d00d      	beq.n	800128c <setMotorIzquierdo+0x38>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
				GPIO_PIN_RESET);
		break;
	}
}
 8001270:	e019      	b.n	80012a6 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001278:	480e      	ldr	r0, [pc, #56]	@ (80012b4 <setMotorIzquierdo+0x60>)
 800127a:	f001 fe55 	bl	8002f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 800127e:	2201      	movs	r2, #1
 8001280:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <setMotorIzquierdo+0x60>)
 8001286:	f001 fe4f 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 800128a:	e00c      	b.n	80012a6 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001292:	4808      	ldr	r0, [pc, #32]	@ (80012b4 <setMotorIzquierdo+0x60>)
 8001294:	f001 fe48 	bl	8002f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <setMotorIzquierdo+0x60>)
 80012a0:	f001 fe42 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 80012a4:	bf00      	nop
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40000400 	.word	0x40000400
 80012b4:	40020400 	.word	0x40020400

080012b8 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <setMotorDerecho+0x5c>)
 80012c4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d002      	beq.n	80012d6 <setMotorDerecho+0x1e>
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d00d      	beq.n	80012f0 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 80012d4:	e019      	b.n	800130a <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012dc:	480e      	ldr	r0, [pc, #56]	@ (8001318 <setMotorDerecho+0x60>)
 80012de:	f001 fe23 	bl	8002f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012e8:	480b      	ldr	r0, [pc, #44]	@ (8001318 <setMotorDerecho+0x60>)
 80012ea:	f001 fe1d 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 80012ee:	e00c      	b.n	800130a <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <setMotorDerecho+0x60>)
 80012f8:	f001 fe16 	bl	8002f28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <setMotorDerecho+0x60>)
 8001304:	f001 fe10 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001308:	bf00      	nop
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40000400 	.word	0x40000400
 8001318:	40020400 	.word	0x40020400

0800131c <verificar_sensor>:

bool verificar_sensor(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 8001322:	2300      	movs	r3, #0
 8001324:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001326:	2180      	movs	r1, #128	@ 0x80
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <verificar_sensor+0x58>)
 800132a:	f001 fde5 	bl	8002ef8 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 8001332:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <verificar_sensor+0x5c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	79ba      	ldrb	r2, [r7, #6]
 8001338:	429a      	cmp	r2, r3
 800133a:	d015      	beq.n	8001368 <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 800133c:	2014      	movs	r0, #20
 800133e:	f000 fb97 	bl	8001a70 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001342:	2180      	movs	r1, #128	@ 0x80
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <verificar_sensor+0x58>)
 8001346:	f001 fdd7 	bl	8002ef8 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 800134e:	797a      	ldrb	r2, [r7, #5]
 8001350:	79bb      	ldrb	r3, [r7, #6]
 8001352:	429a      	cmp	r2, r3
 8001354:	d102      	bne.n	800135c <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 8001356:	4a08      	ldr	r2, [pc, #32]	@ (8001378 <verificar_sensor+0x5c>)
 8001358:	797b      	ldrb	r3, [r7, #5]
 800135a:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <verificar_sensor+0x5c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <verificar_sensor+0x4c>
			pedido = true;
 8001364:	2301      	movs	r3, #1
 8001366:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 8001368:	79fb      	ldrb	r3, [r7, #7]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40020800 	.word	0x40020800
 8001378:	20000004 	.word	0x20000004

0800137c <act_pared>:


uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	4613      	mov	r3, r2
 800138a:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 800138c:	78bb      	ldrb	r3, [r7, #2]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d83a      	bhi.n	8001408 <act_pared+0x8c>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <act_pared+0x1c>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	080013d9 	.word	0x080013d9
 80013a4:	080013f1 	.word	0x080013f1
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	781a      	ldrb	r2, [r3, #0]
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	440b      	add	r3, r1
 80013b6:	f042 0208 	orr.w	r2, r2, #8
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	701a      	strb	r2, [r3, #0]
		break;
 80013be:	e025      	b.n	800140c <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	440b      	add	r3, r1
 80013ce:	f042 0204 	orr.w	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]
		break;
 80013d6:	e019      	b.n	800140c <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	440b      	add	r3, r1
 80013e6:	f042 0202 	orr.w	r2, r2, #2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
		break;
 80013ee:	e00d      	b.n	800140c <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	440b      	add	r3, r1
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	701a      	strb	r2, [r3, #0]
		break;
 8001406:	e001      	b.n	800140c <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001408:	2300      	movs	r3, #0
 800140a:	e003      	b.n	8001414 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 800140c:	78fb      	ldrb	r3, [r7, #3]
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <act_pesos>:

void act_pesos(uint8_t * pared , uint8_t * peso) {
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 8; j++) {
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	e08b      	b.n	8001548 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros-1; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e081      	b.n	800153a <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001436:	2364      	movs	r3, #100	@ 0x64
 8001438:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b0b      	cmp	r3, #11
 800143e:	dc15      	bgt.n	800146c <act_pesos+0x4c>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10d      	bne.n	800146c <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3304      	adds	r3, #4
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	7dfa      	ldrb	r2, [r7, #23]
 800145c:	429a      	cmp	r2, r3
 800145e:	d905      	bls.n	800146c <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3304      	adds	r3, #4
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b03      	cmp	r3, #3
 8001470:	d01e      	beq.n	80014b0 <act_pesos+0x90>
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b07      	cmp	r3, #7
 8001476:	d01b      	beq.n	80014b0 <act_pesos+0x90>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b0b      	cmp	r3, #11
 800147c:	d018      	beq.n	80014b0 <act_pesos+0x90>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d015      	beq.n	80014b0 <act_pesos+0x90>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	3301      	adds	r3, #1
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	7dfa      	ldrb	r2, [r7, #23]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d905      	bls.n	80014b0 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3301      	adds	r3, #1
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	dd15      	ble.n	80014e2 <act_pesos+0xc2>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10d      	bne.n	80014e2 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b04      	subs	r3, #4
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	7dfa      	ldrb	r2, [r7, #23]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d905      	bls.n	80014e2 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3b04      	subs	r3, #4
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d119      	bne.n	8001526 <act_pesos+0x106>
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d016      	beq.n	8001526 <act_pesos+0x106>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d013      	beq.n	8001526 <act_pesos+0x106>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2b08      	cmp	r3, #8
 8001502:	d010      	beq.n	8001526 <act_pesos+0x106>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d00d      	beq.n	8001526 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	7dfa      	ldrb	r2, [r7, #23]
 8001516:	429a      	cmp	r2, r3
 8001518:	d905      	bls.n	8001526 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3b01      	subs	r3, #1
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	4413      	add	r3, r2
 800152c:	7dfa      	ldrb	r2, [r7, #23]
 800152e:	3201      	adds	r2, #1
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros-1; i++) {
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b0e      	cmp	r3, #14
 800153e:	f77f af7a 	ble.w	8001436 <act_pesos+0x16>
	for (int j = 0; j < 8; j++) {
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	3301      	adds	r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	2b07      	cmp	r3, #7
 800154c:	f77f af70 	ble.w	8001430 <act_pesos+0x10>
				}
	}
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t * peso,	uint8_t * pared, uint8_t ubicacion) {
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	4613      	mov	r3, r2
 800156c:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 800156e:	230f      	movs	r3, #15
 8001570:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	3304      	adds	r3, #4
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	4413      	add	r3, r2
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	7dfa      	ldrb	r2, [r7, #23]
 800157e:	429a      	cmp	r2, r3
 8001580:	d915      	bls.n	80015ae <calculo_minimo_peso+0x4e>
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	4413      	add	r3, r2
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10d      	bne.n	80015ae <calculo_minimo_peso+0x4e>
			&& (ubicacion + 4 < cant_casilleros))) {
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b0b      	cmp	r3, #11
 8001596:	d80a      	bhi.n	80015ae <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	3304      	adds	r3, #4
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	3304      	adds	r3, #4
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <calculo_minimo_peso+0x138>)
 80015ac:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0)
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	3301      	adds	r3, #1
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	7dfa      	ldrb	r2, [r7, #23]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d91e      	bls.n	80015fc <calculo_minimo_peso+0x9c>
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <calculo_minimo_peso+0x9c>
			&& !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d013      	beq.n	80015fc <calculo_minimo_peso+0x9c>
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b07      	cmp	r3, #7
 80015d8:	d010      	beq.n	80015fc <calculo_minimo_peso+0x9c>
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b0b      	cmp	r3, #11
 80015de:	d00d      	beq.n	80015fc <calculo_minimo_peso+0x9c>
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d00a      	beq.n	80015fc <calculo_minimo_peso+0x9c>
					|| ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
		minimo_peso = peso[ubicacion + 1];
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	3301      	adds	r3, #1
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <calculo_minimo_peso+0x138>)
 80015fa:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	3b04      	subs	r3, #4
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	7dfa      	ldrb	r2, [r7, #23]
 8001608:	429a      	cmp	r2, r3
 800160a:	d915      	bls.n	8001638 <calculo_minimo_peso+0xd8>
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	4413      	add	r3, r2
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <calculo_minimo_peso+0xd8>
			&& (4 <= ubicacion))) {
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d90a      	bls.n	8001638 <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	3b04      	subs	r3, #4
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b04      	subs	r3, #4
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <calculo_minimo_peso+0x138>)
 8001636:	701a      	strb	r2, [r3, #0]

	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	3b01      	subs	r3, #1
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	7dfa      	ldrb	r2, [r7, #23]
 8001644:	429a      	cmp	r2, r3
 8001646:	d91e      	bls.n	8001686 <calculo_minimo_peso+0x126>
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d116      	bne.n	8001686 <calculo_minimo_peso+0x126>
			&& !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d013      	beq.n	8001686 <calculo_minimo_peso+0x126>
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d010      	beq.n	8001686 <calculo_minimo_peso+0x126>
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b0b      	cmp	r3, #11
 8001668:	d00d      	beq.n	8001686 <calculo_minimo_peso+0x126>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b0f      	cmp	r3, #15
 800166e:	d00a      	beq.n	8001686 <calculo_minimo_peso+0x126>
					|| ubicacion == 15))) {
		minimo_peso = peso[ubicacion - 1];
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	3b01      	subs	r3, #1
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	3b01      	subs	r3, #1
 8001680:	b2da      	uxtb	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <calculo_minimo_peso+0x138>)
 8001684:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <calculo_minimo_peso+0x138>)
 8001688:	781b      	ldrb	r3, [r3, #0]
}
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000000 	.word	0x20000000

0800169c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a08      	ldr	r2, [pc, #32]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 feb8 	bl	800245c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	@ 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_ADC_MspInit+0xdc>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d158      	bne.n	80017cc <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a2d      	ldr	r2, [pc, #180]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 8001724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b2b      	ldr	r3, [pc, #172]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a26      	ldr	r2, [pc, #152]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b24      	ldr	r3, [pc, #144]	@ (80017d8 <HAL_ADC_MspInit+0xe0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 8001752:	2303      	movs	r3, #3
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	481d      	ldr	r0, [pc, #116]	@ (80017dc <HAL_ADC_MspInit+0xe4>)
 8001766:	f001 fa2b 	bl	8002bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_ADC_MspInit+0xec>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 8001784:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001788:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 800178c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001790:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 8001794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001798:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 800179c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 80017a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 80017b2:	f000 fe95 	bl	80024e0 <HAL_DMA_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80017bc:	f7ff ff6e 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 80017c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017c6:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_ADC_MspInit+0xe8>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	@ 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40012000 	.word	0x40012000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400
 80017e0:	20000078 	.word	0x20000078
 80017e4:	40026410 	.word	0x40026410

080017e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	4a09      	ldr	r2, [pc, #36]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6413      	str	r3, [r2, #64]	@ 0x40
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40000400 	.word	0x40000400
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <HAL_TIM_MspPostInit+0x68>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d11e      	bne.n	800188c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a10      	ldr	r2, [pc, #64]	@ (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <HAL_TIM_MspPostInit+0x6c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 800186a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800186e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187c:	2302      	movs	r3, #2
 800187e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4619      	mov	r1, r3
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <HAL_TIM_MspPostInit+0x70>)
 8001888:	f001 f99a 	bl	8002bc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3720      	adds	r7, #32
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40000400 	.word	0x40000400
 8001898:	40023800 	.word	0x40023800
 800189c:	40020800 	.word	0x40020800

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <NMI_Handler+0x4>

080018a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <MemManage_Handler+0x4>

080018b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <BusFault_Handler+0x4>

080018c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <UsageFault_Handler+0x4>

080018c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018f6:	f000 f89b 	bl	8001a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <DMA2_Stream0_IRQHandler+0x10>)
 8001906:	f000 fef1 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000078 	.word	0x20000078

08001914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001918:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <SystemInit+0x20>)
 800191a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800191e:	4a05      	ldr	r2, [pc, #20]	@ (8001934 <SystemInit+0x20>)
 8001920:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001924:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001938:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800193c:	f7ff ffea 	bl	8001914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480c      	ldr	r0, [pc, #48]	@ (8001974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001942:	490d      	ldr	r1, [pc, #52]	@ (8001978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001958:	4c0a      	ldr	r4, [pc, #40]	@ (8001984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f002 fdf1 	bl	800454c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196a:	f7fe fdc3 	bl	80004f4 <main>
  bx  lr    
 800196e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001978:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800197c:	080045d4 	.word	0x080045d4
  ldr r2, =_sbss
 8001980:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001984:	200001d0 	.word	0x200001d0

08001988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001988:	e7fe      	b.n	8001988 <ADC_IRQHandler>
	...

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001990:	4b0e      	ldr	r3, [pc, #56]	@ (80019cc <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <HAL_Init+0x40>)
 8001996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800199a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800199c:	4b0b      	ldr	r3, [pc, #44]	@ (80019cc <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_Init+0x40>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <HAL_Init+0x40>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b4:	2003      	movs	r0, #3
 80019b6:	f000 fd51 	bl	800245c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 f808 	bl	80019d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019c0:	f7ff fe72 	bl	80016a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023c00 	.word	0x40023c00

080019d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_InitTick+0x54>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_InitTick+0x58>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	4619      	mov	r1, r3
 80019e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fd69 	bl	80024c6 <HAL_SYSTICK_Config>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00e      	b.n	8001a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b0f      	cmp	r3, #15
 8001a02:	d80a      	bhi.n	8001a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a04:	2200      	movs	r2, #0
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f000 fd31 	bl	8002472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a10:	4a06      	ldr	r2, [pc, #24]	@ (8001a2c <HAL_InitTick+0x5c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000010 	.word	0x20000010
 8001a2c:	2000000c 	.word	0x2000000c

08001a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_IncTick+0x20>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_IncTick+0x24>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	4a04      	ldr	r2, [pc, #16]	@ (8001a54 <HAL_IncTick+0x24>)
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000010 	.word	0x20000010
 8001a54:	200001cc 	.word	0x200001cc

08001a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_GetTick+0x14>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200001cc 	.word	0x200001cc

08001a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a78:	f7ff ffee 	bl	8001a58 <HAL_GetTick>
 8001a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a88:	d005      	beq.n	8001a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab4 <HAL_Delay+0x44>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a96:	bf00      	nop
 8001a98:	f7ff ffde 	bl	8001a58 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d8f7      	bhi.n	8001a98 <HAL_Delay+0x28>
  {
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000010 	.word	0x20000010

08001ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e033      	b.n	8001b36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fe0e 	bl	80016f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d118      	bne.n	8001b28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001afe:	f023 0302 	bic.w	r3, r3, #2
 8001b02:	f043 0202 	orr.w	r2, r3, #2
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fa58 	bl	8001fc0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f023 0303 	bic.w	r3, r3, #3
 8001b1e:	f043 0201 	orr.w	r2, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b26:	e001      	b.n	8001b2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Start_DMA+0x22>
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e0eb      	b.n	8001d3a <HAL_ADC_Start_DMA+0x1fa>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d018      	beq.n	8001baa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b88:	4b6e      	ldr	r3, [pc, #440]	@ (8001d44 <HAL_ADC_Start_DMA+0x204>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d48 <HAL_ADC_Start_DMA+0x208>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bb8:	d107      	bne.n	8001bca <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80a3 	bne.w	8001d20 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c00:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c04:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1e:	f023 0206 	bic.w	r2, r3, #6
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c36:	4b45      	ldr	r3, [pc, #276]	@ (8001d4c <HAL_ADC_Start_DMA+0x20c>)
 8001c38:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3e:	4a44      	ldr	r2, [pc, #272]	@ (8001d50 <HAL_ADC_Start_DMA+0x210>)
 8001c40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c46:	4a43      	ldr	r2, [pc, #268]	@ (8001d54 <HAL_ADC_Start_DMA+0x214>)
 8001c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4e:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_ADC_Start_DMA+0x218>)
 8001c50:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c7a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	334c      	adds	r3, #76	@ 0x4c
 8001c86:	4619      	mov	r1, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f000 fcd6 	bl	800263c <HAL_DMA_Start_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12a      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d5c <HAL_ADC_Start_DMA+0x21c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d015      	beq.n	8001cd6 <HAL_ADC_Start_DMA+0x196>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2c      	ldr	r2, [pc, #176]	@ (8001d60 <HAL_ADC_Start_DMA+0x220>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d105      	bne.n	8001cc0 <HAL_ADC_Start_DMA+0x180>
 8001cb4:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_ADC_Start_DMA+0x20c>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 031f 	and.w	r3, r3, #31
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <HAL_ADC_Start_DMA+0x224>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d136      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
 8001cca:	4b20      	ldr	r3, [pc, #128]	@ (8001d4c <HAL_ADC_Start_DMA+0x20c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0310 	and.w	r3, r3, #16
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d130      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d129      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	e020      	b.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	@ (8001d5c <HAL_ADC_Start_DMA+0x21c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d11b      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d114      	bne.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e00b      	b.n	8001d38 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	f043 0210 	orr.w	r2, r3, #16
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f043 0201 	orr.w	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3720      	adds	r7, #32
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008
 8001d48:	431bde83 	.word	0x431bde83
 8001d4c:	40012300 	.word	0x40012300
 8001d50:	080021b9 	.word	0x080021b9
 8001d54:	08002273 	.word	0x08002273
 8001d58:	0800228f 	.word	0x0800228f
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	40012100 	.word	0x40012100
 8001d64:	40012200 	.word	0x40012200

08001d68 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1c>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e105      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x228>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b09      	cmp	r3, #9
 8001da6:	d925      	bls.n	8001df4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68d9      	ldr	r1, [r3, #12]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b1e      	subs	r3, #30
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	4603      	mov	r3, r0
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4403      	add	r3, r0
 8001de6:	3b1e      	subs	r3, #30
 8001de8:	409a      	lsls	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	e022      	b.n	8001e3a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6919      	ldr	r1, [r3, #16]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	2207      	movs	r2, #7
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	400a      	ands	r2, r1
 8001e16:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4618      	mov	r0, r3
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4403      	add	r3, r0
 8001e30:	409a      	lsls	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d824      	bhi.n	8001e8c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b05      	subs	r3, #5
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	400a      	ands	r2, r1
 8001e62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b05      	subs	r3, #5
 8001e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8a:	e04c      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d824      	bhi.n	8001ede <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b23      	subs	r3, #35	@ 0x23
 8001ea6:	221f      	movs	r2, #31
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43da      	mvns	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b23      	subs	r3, #35	@ 0x23
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	631a      	str	r2, [r3, #48]	@ 0x30
 8001edc:	e023      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b41      	subs	r3, #65	@ 0x41
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	400a      	ands	r2, r1
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b41      	subs	r3, #65	@ 0x41
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f26:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x234>)
 8001f28:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x238>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d109      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1cc>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b12      	cmp	r3, #18
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a19      	ldr	r2, [pc, #100]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x238>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d123      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x21e>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b10      	cmp	r3, #16
 8001f58:	d003      	beq.n	8001f62 <HAL_ADC_ConfigChannel+0x1e6>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b11      	cmp	r3, #17
 8001f60:	d11b      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d111      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x23c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a10      	ldr	r2, [pc, #64]	@ (8001fbc <HAL_ADC_ConfigChannel+0x240>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9a      	lsrs	r2, r3, #18
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f8c:	e002      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40012300 	.word	0x40012300
 8001fb4:	40012000 	.word	0x40012000
 8001fb8:	20000008 	.word	0x20000008
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc8:	4b79      	ldr	r3, [pc, #484]	@ (80021b0 <ADC_Init+0x1f0>)
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ff4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	021a      	lsls	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689a      	ldr	r2, [r3, #8]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6899      	ldr	r1, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002052:	4a58      	ldr	r2, [pc, #352]	@ (80021b4 <ADC_Init+0x1f4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d022      	beq.n	800209e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002066:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e00f      	b.n	80020be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020bc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0202 	bic.w	r2, r2, #2
 80020cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6899      	ldr	r1, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7e1b      	ldrb	r3, [r3, #24]
 80020d8:	005a      	lsls	r2, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020fa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800210a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	3b01      	subs	r3, #1
 8002118:	035a      	lsls	r2, r3, #13
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	e007      	b.n	8002134 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002132:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	3b01      	subs	r3, #1
 8002150:	051a      	lsls	r2, r3, #20
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002176:	025a      	lsls	r2, r3, #9
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800218e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	029a      	lsls	r2, r3, #10
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	40012300 	.word	0x40012300
 80021b4:	0f000001 	.word	0x0f000001

080021b8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d13c      	bne.n	800224c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d12b      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d127      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d119      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0220 	bic.w	r2, r2, #32
 800221e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002230:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223c:	f043 0201 	orr.w	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7fe febb 	bl	8000fc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800224a:	e00e      	b.n	800226a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f003 0310 	and.w	r3, r3, #16
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f7ff fd85 	bl	8001d68 <HAL_ADC_ErrorCallback>
}
 800225e:	e004      	b.n	800226a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800227e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7fe fe8f 	bl	8000fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2240      	movs	r2, #64	@ 0x40
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f043 0204 	orr.w	r2, r3, #4
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f7ff fd5a 	bl	8001d68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ee:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	60d3      	str	r3, [r2, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d301      	bcc.n	800242e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242a:	2301      	movs	r3, #1
 800242c:	e00f      	b.n	800244e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242e:	4a0a      	ldr	r2, [pc, #40]	@ (8002458 <SysTick_Config+0x40>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002436:	210f      	movs	r1, #15
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f7ff ff8e 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <SysTick_Config+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <SysTick_Config+0x40>)
 8002448:	2207      	movs	r2, #7
 800244a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	e000e010 	.word	0xe000e010

0800245c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ff29 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002484:	f7ff ff3e 	bl	8002304 <__NVIC_GetPriorityGrouping>
 8002488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	6978      	ldr	r0, [r7, #20]
 8002490:	f7ff ff8e 	bl	80023b0 <NVIC_EncodePriority>
 8002494:	4602      	mov	r2, r0
 8002496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249a:	4611      	mov	r1, r2
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff5d 	bl	800235c <__NVIC_SetPriority>
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff31 	bl	8002320 <__NVIC_EnableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffa2 	bl	8002418 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff fab4 	bl	8001a58 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e099      	b.n	8002630 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251c:	e00f      	b.n	800253e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251e:	f7ff fa9b 	bl	8001a58 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b05      	cmp	r3, #5
 800252a:	d908      	bls.n	800253e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2203      	movs	r2, #3
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e078      	b.n	8002630 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e8      	bne.n	800251e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4b38      	ldr	r3, [pc, #224]	@ (8002638 <HAL_DMA_Init+0x158>)
 8002558:	4013      	ands	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	2b04      	cmp	r3, #4
 8002596:	d107      	bne.n	80025a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4313      	orrs	r3, r2
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0307 	bic.w	r3, r3, #7
 80025be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d117      	bne.n	8002602 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fa6f 	bl	8002ac8 <DMA_CheckFifoParam>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2240      	movs	r2, #64	@ 0x40
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025fe:	2301      	movs	r3, #1
 8002600:	e016      	b.n	8002630 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa26 	bl	8002a5c <DMA_CalcBaseAndBitshift>
 8002610:	4603      	mov	r3, r0
 8002612:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002618:	223f      	movs	r2, #63	@ 0x3f
 800261a:	409a      	lsls	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	f010803f 	.word	0xf010803f

0800263c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_DMA_Start_IT+0x26>
 800265e:	2302      	movs	r3, #2
 8002660:	e040      	b.n	80026e4 <HAL_DMA_Start_IT+0xa8>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b01      	cmp	r3, #1
 8002674:	d12f      	bne.n	80026d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68b9      	ldr	r1, [r7, #8]
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f9b8 	bl	8002a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	223f      	movs	r2, #63	@ 0x3f
 8002696:	409a      	lsls	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0216 	orr.w	r2, r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0208 	orr.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e005      	b.n	80026e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026de:	2302      	movs	r3, #2
 80026e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002934 <HAL_DMA_IRQHandler+0x248>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002938 <HAL_DMA_IRQHandler+0x24c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2208      	movs	r2, #8
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	2204      	movs	r2, #4
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	2204      	movs	r2, #4
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2210      	movs	r2, #16
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d043      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03c      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	2210      	movs	r2, #16
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d024      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e01f      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e016      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2220      	movs	r2, #32
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 808f 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8087 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2220      	movs	r2, #32
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d136      	bne.n	8002904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0216 	bic.w	r2, r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x1da>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	223f      	movs	r2, #63	@ 0x3f
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07e      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
        }
        return;
 8002902:	e079      	b.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01d      	beq.n	800294e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	2b00      	cmp	r3, #0
 8002926:	d031      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e02c      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
 8002932:	bf00      	nop
 8002934:	20000008 	.word	0x20000008
 8002938:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e01e      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0210 	bic.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d032      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2205      	movs	r2, #5
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d307      	bcc.n	80029d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f2      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x2cc>
 80029d2:	e000      	b.n	80029d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e000      	b.n	80029fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80029f8:	bf00      	nop
    }
  }
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b40      	cmp	r3, #64	@ 0x40
 8002a2c:	d108      	bne.n	8002a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3e:	e007      	b.n	8002a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	60da      	str	r2, [r3, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	3b10      	subs	r3, #16
 8002a6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a76:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d909      	bls.n	8002a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	1d1a      	adds	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a9c:	e007      	b.n	8002aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	aaaaaaab 	.word	0xaaaaaaab
 8002ac4:	080045bc 	.word	0x080045bc

08002ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11f      	bne.n	8002b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d856      	bhi.n	8002b96 <DMA_CheckFifoParam+0xce>
 8002ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8002af0 <DMA_CheckFifoParam+0x28>)
 8002aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aee:	bf00      	nop
 8002af0:	08002b01 	.word	0x08002b01
 8002af4:	08002b13 	.word	0x08002b13
 8002af8:	08002b01 	.word	0x08002b01
 8002afc:	08002b97 	.word	0x08002b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d046      	beq.n	8002b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b10:	e043      	b.n	8002b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b1a:	d140      	bne.n	8002b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b20:	e03d      	b.n	8002b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b2a:	d121      	bne.n	8002b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d837      	bhi.n	8002ba2 <DMA_CheckFifoParam+0xda>
 8002b32:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <DMA_CheckFifoParam+0x70>)
 8002b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b4f 	.word	0x08002b4f
 8002b40:	08002b49 	.word	0x08002b49
 8002b44:	08002b61 	.word	0x08002b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4c:	e030      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d025      	beq.n	8002ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5e:	e022      	b.n	8002ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b68:	d11f      	bne.n	8002baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6e:	e01c      	b.n	8002baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d903      	bls.n	8002b7e <DMA_CheckFifoParam+0xb6>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d003      	beq.n	8002b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b7c:	e018      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
      break;
 8002b82:	e015      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      break;
 8002b94:	e00b      	b.n	8002bae <DMA_CheckFifoParam+0xe6>
      break;
 8002b96:	bf00      	nop
 8002b98:	e00a      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e008      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e006      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e004      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e002      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002baa:	bf00      	nop
 8002bac:	e000      	b.n	8002bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bae:	bf00      	nop
    }
  } 
  
  return status; 
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	@ 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	e16b      	b.n	8002eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	f040 815a 	bne.w	8002eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d005      	beq.n	8002c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d017      	beq.n	8002cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d123      	bne.n	8002d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	08da      	lsrs	r2, r3, #3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3208      	adds	r2, #8
 8002cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	08da      	lsrs	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3208      	adds	r2, #8
 8002cfe:	69b9      	ldr	r1, [r7, #24]
 8002d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	2203      	movs	r2, #3
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0203 	and.w	r2, r3, #3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 80b4 	beq.w	8002eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d56:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_GPIO_Init+0x30c>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d62:	4a5b      	ldr	r2, [pc, #364]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	089b      	lsrs	r3, r3, #2
 8002d68:	3302      	adds	r3, #2
 8002d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	220f      	movs	r2, #15
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_GPIO_Init+0x314>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_GPIO_Init+0x226>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a51      	ldr	r2, [pc, #324]	@ (8002ed8 <HAL_GPIO_Init+0x318>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d025      	beq.n	8002de2 <HAL_GPIO_Init+0x222>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a50      	ldr	r2, [pc, #320]	@ (8002edc <HAL_GPIO_Init+0x31c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d01f      	beq.n	8002dde <HAL_GPIO_Init+0x21e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_GPIO_Init+0x320>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d019      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <HAL_GPIO_Init+0x324>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_GPIO_Init+0x216>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee8 <HAL_GPIO_Init+0x328>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00d      	beq.n	8002dd2 <HAL_GPIO_Init+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	@ (8002eec <HAL_GPIO_Init+0x32c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d007      	beq.n	8002dce <HAL_GPIO_Init+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_GPIO_Init+0x330>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_GPIO_Init+0x20a>
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	e00e      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x228>
 8002de6:	2300      	movs	r3, #0
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002df8:	4935      	ldr	r1, [pc, #212]	@ (8002ed0 <HAL_GPIO_Init+0x310>)
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4013      	ands	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e2a:	4a32      	ldr	r2, [pc, #200]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e30:	4b30      	ldr	r3, [pc, #192]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e54:	4a27      	ldr	r2, [pc, #156]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4013      	ands	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea8:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <HAL_GPIO_Init+0x334>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	f67f ae90 	bls.w	8002bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3724      	adds	r7, #36	@ 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	40013800 	.word	0x40013800
 8002ed4:	40020000 	.word	0x40020000
 8002ed8:	40020400 	.word	0x40020400
 8002edc:	40020800 	.word	0x40020800
 8002ee0:	40020c00 	.word	0x40020c00
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800
 8002ef0:	40021c00 	.word	0x40021c00
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e267      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d075      	beq.n	8003066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f7a:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d00c      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b85      	ldr	r3, [pc, #532]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d112      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f92:	4b82      	ldr	r3, [pc, #520]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	4b7e      	ldr	r3, [pc, #504]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d05b      	beq.n	8003064 <HAL_RCC_OscConfig+0x108>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d157      	bne.n	8003064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e242      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x74>
 8002fc2:	4b76      	ldr	r3, [pc, #472]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a75      	ldr	r2, [pc, #468]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e01d      	b.n	800300c <HAL_RCC_OscConfig+0xb0>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x98>
 8002fda:	4b70      	ldr	r3, [pc, #448]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6f      	ldr	r2, [pc, #444]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6c      	ldr	r2, [pc, #432]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0xb0>
 8002ff4:	4b69      	ldr	r3, [pc, #420]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a68      	ldr	r2, [pc, #416]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b66      	ldr	r3, [pc, #408]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a65      	ldr	r2, [pc, #404]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe fd20 	bl	8001a58 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fd1c 	bl	8001a58 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	@ 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e207      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b5b      	ldr	r3, [pc, #364]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0xc0>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fd0c 	bl	8001a58 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fd08 	bl	8001a58 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1f3      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	4b51      	ldr	r3, [pc, #324]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0xe8>
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d063      	beq.n	800313a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003072:	4b4a      	ldr	r3, [pc, #296]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b47      	ldr	r3, [pc, #284]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003086:	2b08      	cmp	r3, #8
 8003088:	d11c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b44      	ldr	r3, [pc, #272]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d116      	bne.n	80030c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	4b41      	ldr	r3, [pc, #260]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_RCC_OscConfig+0x152>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e1c7      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b3b      	ldr	r3, [pc, #236]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4937      	ldr	r1, [pc, #220]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	e03a      	b.n	800313a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030cc:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <HAL_RCC_OscConfig+0x244>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fcc1 	bl	8001a58 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe fcbd 	bl	8001a58 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1a8      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b28      	ldr	r3, [pc, #160]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4925      	ldr	r1, [pc, #148]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	e015      	b.n	800313a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310e:	4b24      	ldr	r3, [pc, #144]	@ (80031a0 <HAL_RCC_OscConfig+0x244>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe fca0 	bl	8001a58 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fe fc9c 	bl	8001a58 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e187      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d036      	beq.n	80031b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d016      	beq.n	800317c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_RCC_OscConfig+0x248>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe fc80 	bl	8001a58 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fe fc7c 	bl	8001a58 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e167      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_RCC_OscConfig+0x240>)
 8003170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x200>
 800317a:	e01b      	b.n	80031b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <HAL_RCC_OscConfig+0x248>)
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003182:	f7fe fc69 	bl	8001a58 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003188:	e00e      	b.n	80031a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318a:	f7fe fc65 	bl	8001a58 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d907      	bls.n	80031a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e150      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	42470000 	.word	0x42470000
 80031a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a8:	4b88      	ldr	r3, [pc, #544]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1ea      	bne.n	800318a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8097 	beq.w	80032f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c2:	2300      	movs	r3, #0
 80031c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031c6:	4b81      	ldr	r3, [pc, #516]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10f      	bne.n	80031f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b7d      	ldr	r3, [pc, #500]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	4a7c      	ldr	r2, [pc, #496]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031e2:	4b7a      	ldr	r3, [pc, #488]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ee:	2301      	movs	r3, #1
 80031f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b77      	ldr	r3, [pc, #476]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d118      	bne.n	8003230 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031fe:	4b74      	ldr	r3, [pc, #464]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a73      	ldr	r2, [pc, #460]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320a:	f7fe fc25 	bl	8001a58 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003212:	f7fe fc21 	bl	8001a58 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e10c      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003224:	4b6a      	ldr	r3, [pc, #424]	@ (80033d0 <HAL_RCC_OscConfig+0x474>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x2ea>
 8003238:	4b64      	ldr	r3, [pc, #400]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800323a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800323c:	4a63      	ldr	r2, [pc, #396]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	6713      	str	r3, [r2, #112]	@ 0x70
 8003244:	e01c      	b.n	8003280 <HAL_RCC_OscConfig+0x324>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b05      	cmp	r3, #5
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x30c>
 800324e:	4b5f      	ldr	r3, [pc, #380]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003252:	4a5e      	ldr	r2, [pc, #376]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	@ 0x70
 800325a:	4b5c      	ldr	r3, [pc, #368]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	4a5b      	ldr	r2, [pc, #364]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6713      	str	r3, [r2, #112]	@ 0x70
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0x324>
 8003268:	4b58      	ldr	r3, [pc, #352]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326c:	4a57      	ldr	r2, [pc, #348]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 0301 	bic.w	r3, r3, #1
 8003272:	6713      	str	r3, [r2, #112]	@ 0x70
 8003274:	4b55      	ldr	r3, [pc, #340]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	4a54      	ldr	r2, [pc, #336]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 800327a:	f023 0304 	bic.w	r3, r3, #4
 800327e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d015      	beq.n	80032b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe fbe6 	bl	8001a58 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe fbe2 	bl	8001a58 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e0cb      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a6:	4b49      	ldr	r3, [pc, #292]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ee      	beq.n	8003290 <HAL_RCC_OscConfig+0x334>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7fe fbd0 	bl	8001a58 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe fbcc 	bl	8001a58 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e0b5      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d2:	4b3e      	ldr	r3, [pc, #248]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ee      	bne.n	80032bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	7dfb      	ldrb	r3, [r7, #23]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b39      	ldr	r3, [pc, #228]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	4a38      	ldr	r2, [pc, #224]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a1 	beq.w	800343c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fa:	4b34      	ldr	r3, [pc, #208]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b08      	cmp	r3, #8
 8003304:	d05c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d141      	bne.n	8003392 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800330e:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7fe fba0 	bl	8001a58 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe fb9c 	bl	8001a58 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e087      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	4b27      	ldr	r3, [pc, #156]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69da      	ldr	r2, [r3, #28]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	3b01      	subs	r3, #1
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	491b      	ldr	r1, [pc, #108]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336a:	f7fe fb75 	bl	8001a58 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003372:	f7fe fb71 	bl	8001a58 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e05c      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003384:	4b11      	ldr	r3, [pc, #68]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x416>
 8003390:	e054      	b.n	800343c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_RCC_OscConfig+0x478>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fb5e 	bl	8001a58 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fb5a 	bl	8001a58 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e045      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_OscConfig+0x470>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x444>
 80033be:	e03d      	b.n	800343c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e038      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000
 80033d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003448 <HAL_RCC_OscConfig+0x4ec>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d028      	beq.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d121      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	429a      	cmp	r2, r3
 8003400:	d11a      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003408:	4013      	ands	r3, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800340e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003410:	4293      	cmp	r3, r2
 8003412:	d111      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	3b01      	subs	r3, #1
 8003422:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003432:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800

0800344c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0cc      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b68      	ldr	r3, [pc, #416]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0307 	and.w	r3, r3, #7
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d90c      	bls.n	8003488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b65      	ldr	r3, [pc, #404]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b63      	ldr	r3, [pc, #396]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d001      	beq.n	8003488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0b8      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d020      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034a0:	4b59      	ldr	r3, [pc, #356]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	4a58      	ldr	r2, [pc, #352]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b8:	4b53      	ldr	r3, [pc, #332]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	4a52      	ldr	r2, [pc, #328]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c4:	4b50      	ldr	r3, [pc, #320]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	494d      	ldr	r1, [pc, #308]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d044      	beq.n	800356c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d107      	bne.n	80034fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b47      	ldr	r3, [pc, #284]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d119      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e07f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d003      	beq.n	800350a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003506:	2b03      	cmp	r3, #3
 8003508:	d107      	bne.n	800351a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800350a:	4b3f      	ldr	r3, [pc, #252]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e06f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351a:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e067      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800352a:	4b37      	ldr	r3, [pc, #220]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f023 0203 	bic.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4934      	ldr	r1, [pc, #208]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	4313      	orrs	r3, r2
 800353a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800353c:	f7fe fa8c 	bl	8001a58 <HAL_GetTick>
 8003540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003542:	e00a      	b.n	800355a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003544:	f7fe fa88 	bl	8001a58 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003552:	4293      	cmp	r3, r2
 8003554:	d901      	bls.n	800355a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e04f      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800355a:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 020c 	and.w	r2, r3, #12
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	d1eb      	bne.n	8003544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800356c:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d20c      	bcs.n	8003594 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b22      	ldr	r3, [pc, #136]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b20      	ldr	r3, [pc, #128]	@ (8003604 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e032      	b.n	80035fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d008      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a0:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4916      	ldr	r1, [pc, #88]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035be:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	490e      	ldr	r1, [pc, #56]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035d2:	f000 f821 	bl	8003618 <HAL_RCC_GetSysClockFreq>
 80035d6:	4602      	mov	r2, r0
 80035d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	490a      	ldr	r1, [pc, #40]	@ (800360c <HAL_RCC_ClockConfig+0x1c0>)
 80035e4:	5ccb      	ldrb	r3, [r1, r3]
 80035e6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ea:	4a09      	ldr	r2, [pc, #36]	@ (8003610 <HAL_RCC_ClockConfig+0x1c4>)
 80035ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <HAL_RCC_ClockConfig+0x1c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe f9ec 	bl	80019d0 <HAL_InitTick>

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40023c00 	.word	0x40023c00
 8003608:	40023800 	.word	0x40023800
 800360c:	080045ac 	.word	0x080045ac
 8003610:	20000008 	.word	0x20000008
 8003614:	2000000c 	.word	0x2000000c

08003618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b094      	sub	sp, #80	@ 0x50
 800361e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003630:	4b79      	ldr	r3, [pc, #484]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 030c 	and.w	r3, r3, #12
 8003638:	2b08      	cmp	r3, #8
 800363a:	d00d      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x40>
 800363c:	2b08      	cmp	r3, #8
 800363e:	f200 80e1 	bhi.w	8003804 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x34>
 8003646:	2b04      	cmp	r3, #4
 8003648:	d003      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0x3a>
 800364a:	e0db      	b.n	8003804 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b73      	ldr	r3, [pc, #460]	@ (800381c <HAL_RCC_GetSysClockFreq+0x204>)
 800364e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003650:	e0db      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003652:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x208>)
 8003654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003656:	e0d8      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003658:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003662:	4b6d      	ldr	r3, [pc, #436]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366e:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2200      	movs	r2, #0
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003678:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
 8003686:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800368a:	4622      	mov	r2, r4
 800368c:	462b      	mov	r3, r5
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4621      	mov	r1, r4
 80036a4:	1a51      	subs	r1, r2, r1
 80036a6:	6139      	str	r1, [r7, #16]
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036bc:	4659      	mov	r1, fp
 80036be:	018b      	lsls	r3, r1, #6
 80036c0:	4651      	mov	r1, sl
 80036c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c6:	4651      	mov	r1, sl
 80036c8:	018a      	lsls	r2, r1, #6
 80036ca:	4651      	mov	r1, sl
 80036cc:	ebb2 0801 	subs.w	r8, r2, r1
 80036d0:	4659      	mov	r1, fp
 80036d2:	eb63 0901 	sbc.w	r9, r3, r1
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ea:	4690      	mov	r8, r2
 80036ec:	4699      	mov	r9, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	eb18 0303 	adds.w	r3, r8, r3
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	462b      	mov	r3, r5
 80036f8:	eb49 0303 	adc.w	r3, r9, r3
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800370a:	4629      	mov	r1, r5
 800370c:	024b      	lsls	r3, r1, #9
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003714:	4621      	mov	r1, r4
 8003716:	024a      	lsls	r2, r1, #9
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800371e:	2200      	movs	r2, #0
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003724:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003728:	f7fc fd4e 	bl	80001c8 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003734:	e058      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003736:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	2200      	movs	r2, #0
 800373e:	4618      	mov	r0, r3
 8003740:	4611      	mov	r1, r2
 8003742:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003746:	623b      	str	r3, [r7, #32]
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	@ 0x24
 800374c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003750:	4642      	mov	r2, r8
 8003752:	464b      	mov	r3, r9
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f04f 0100 	mov.w	r1, #0
 800375c:	0159      	lsls	r1, r3, #5
 800375e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003762:	0150      	lsls	r0, r2, #5
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4641      	mov	r1, r8
 800376a:	ebb2 0a01 	subs.w	sl, r2, r1
 800376e:	4649      	mov	r1, r9
 8003770:	eb63 0b01 	sbc.w	fp, r3, r1
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003780:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003784:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003788:	ebb2 040a 	subs.w	r4, r2, sl
 800378c:	eb63 050b 	sbc.w	r5, r3, fp
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	00eb      	lsls	r3, r5, #3
 800379a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800379e:	00e2      	lsls	r2, r4, #3
 80037a0:	4614      	mov	r4, r2
 80037a2:	461d      	mov	r5, r3
 80037a4:	4643      	mov	r3, r8
 80037a6:	18e3      	adds	r3, r4, r3
 80037a8:	603b      	str	r3, [r7, #0]
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb45 0303 	adc.w	r3, r5, r3
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037be:	4629      	mov	r1, r5
 80037c0:	028b      	lsls	r3, r1, #10
 80037c2:	4621      	mov	r1, r4
 80037c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037c8:	4621      	mov	r1, r4
 80037ca:	028a      	lsls	r2, r1, #10
 80037cc:	4610      	mov	r0, r2
 80037ce:	4619      	mov	r1, r3
 80037d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d2:	2200      	movs	r2, #0
 80037d4:	61bb      	str	r3, [r7, #24]
 80037d6:	61fa      	str	r2, [r7, #28]
 80037d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037dc:	f7fc fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4613      	mov	r3, r2
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	0c1b      	lsrs	r3, r3, #16
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	3301      	adds	r3, #1
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003802:	e002      	b.n	800380a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003804:	4b05      	ldr	r3, [pc, #20]	@ (800381c <HAL_RCC_GetSysClockFreq+0x204>)
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003808:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800380c:	4618      	mov	r0, r3
 800380e:	3750      	adds	r7, #80	@ 0x50
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	00f42400 	.word	0x00f42400
 8003820:	007a1200 	.word	0x007a1200

08003824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e041      	b.n	80038ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd ffcc 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f000 fad8 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e041      	b.n	8003958 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d106      	bne.n	80038ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f839 	bl	8003960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 fa89 	bl	8003e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_TIM_PWM_Start+0x24>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e022      	b.n	80039de <HAL_TIM_PWM_Start+0x6a>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d109      	bne.n	80039b2 <HAL_TIM_PWM_Start+0x3e>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	bf14      	ite	ne
 80039aa:	2301      	movne	r3, #1
 80039ac:	2300      	moveq	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	e015      	b.n	80039de <HAL_TIM_PWM_Start+0x6a>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d109      	bne.n	80039cc <HAL_TIM_PWM_Start+0x58>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	bf14      	ite	ne
 80039c4:	2301      	movne	r3, #1
 80039c6:	2300      	moveq	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e008      	b.n	80039de <HAL_TIM_PWM_Start+0x6a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07c      	b.n	8003ae0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x82>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039f4:	e013      	b.n	8003a1e <HAL_TIM_PWM_Start+0xaa>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d104      	bne.n	8003a06 <HAL_TIM_PWM_Start+0x92>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a04:	e00b      	b.n	8003a1e <HAL_TIM_PWM_Start+0xaa>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d104      	bne.n	8003a16 <HAL_TIM_PWM_Start+0xa2>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a14:	e003      	b.n	8003a1e <HAL_TIM_PWM_Start+0xaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2201      	movs	r2, #1
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fce6 	bl	80043f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae8 <HAL_TIM_PWM_Start+0x174>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d004      	beq.n	8003a40 <HAL_TIM_PWM_Start+0xcc>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8003aec <HAL_TIM_PWM_Start+0x178>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_TIM_PWM_Start+0xd0>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <HAL_TIM_PWM_Start+0xd2>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d007      	beq.n	8003a5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	@ (8003ae8 <HAL_TIM_PWM_Start+0x174>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d022      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a6c:	d01d      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a1f      	ldr	r2, [pc, #124]	@ (8003af0 <HAL_TIM_PWM_Start+0x17c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d018      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003af4 <HAL_TIM_PWM_Start+0x180>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1c      	ldr	r2, [pc, #112]	@ (8003af8 <HAL_TIM_PWM_Start+0x184>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00e      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a16      	ldr	r2, [pc, #88]	@ (8003aec <HAL_TIM_PWM_Start+0x178>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d009      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_TIM_PWM_Start+0x188>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_TIM_PWM_Start+0x136>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a16      	ldr	r2, [pc, #88]	@ (8003b00 <HAL_TIM_PWM_Start+0x18c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d111      	bne.n	8003ace <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d010      	beq.n	8003ade <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	e007      	b.n	8003ade <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40010000 	.word	0x40010000
 8003aec:	40010400 	.word	0x40010400
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800
 8003af8:	40000c00 	.word	0x40000c00
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40001800 	.word	0x40001800

08003b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ae      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	f200 809f 	bhi.w	8003c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b32:	a201      	add	r2, pc, #4	@ (adr r2, 8003b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003c71 	.word	0x08003c71
 8003b40:	08003c71 	.word	0x08003c71
 8003b44:	08003c71 	.word	0x08003c71
 8003b48:	08003bad 	.word	0x08003bad
 8003b4c:	08003c71 	.word	0x08003c71
 8003b50:	08003c71 	.word	0x08003c71
 8003b54:	08003c71 	.word	0x08003c71
 8003b58:	08003bef 	.word	0x08003bef
 8003b5c:	08003c71 	.word	0x08003c71
 8003b60:	08003c71 	.word	0x08003c71
 8003b64:	08003c71 	.word	0x08003c71
 8003b68:	08003c2f 	.word	0x08003c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f9f6 	bl	8003f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
      break;
 8003baa:	e064      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa46 	bl	8004044 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e043      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fa9b 	bl	8004130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0208 	orr.w	r2, r2, #8
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	61da      	str	r2, [r3, #28]
      break;
 8003c2c:	e023      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 faef 	bl	8004218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0b4      	b.n	8003e0e <HAL_TIM_ConfigClockSource+0x186>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cdc:	d03e      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xd4>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce2:	f200 8087 	bhi.w	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_TIM_ConfigClockSource+0x172>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf2:	d87f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b70      	cmp	r3, #112	@ 0x70
 8003cf6:	d01a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xa6>
 8003cf8:	2b70      	cmp	r3, #112	@ 0x70
 8003cfa:	d87b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b60      	cmp	r3, #96	@ 0x60
 8003cfe:	d050      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d00:	2b60      	cmp	r3, #96	@ 0x60
 8003d02:	d877      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b50      	cmp	r3, #80	@ 0x50
 8003d06:	d03c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xfa>
 8003d08:	2b50      	cmp	r3, #80	@ 0x50
 8003d0a:	d873      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d058      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d10:	2b40      	cmp	r3, #64	@ 0x40
 8003d12:	d86f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b30      	cmp	r3, #48	@ 0x30
 8003d16:	d064      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b30      	cmp	r3, #48	@ 0x30
 8003d1a:	d86b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d060      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d867      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d05a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	e062      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d3e:	f000 fb3b 	bl	80043b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04f      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d6c:	f000 fb24 	bl	80043b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e03c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fa98 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	@ 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 faf1 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003da0:	e02c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fab7 	bl	8004322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	@ 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fae1 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 fa78 	bl	80042c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	@ 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fad1 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e00c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 fac8 	bl	8004382 <TIM_ITRx_SetConfig>
      break;
 8003df2:	e003      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e000      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a43      	ldr	r2, [pc, #268]	@ (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e36:	d00f      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a40      	ldr	r2, [pc, #256]	@ (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00b      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3f      	ldr	r2, [pc, #252]	@ (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d007      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d003      	beq.n	8003e58 <TIM_Base_SetConfig+0x40>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3d      	ldr	r2, [pc, #244]	@ (8003f48 <TIM_Base_SetConfig+0x130>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d108      	bne.n	8003e6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a32      	ldr	r2, [pc, #200]	@ (8003f38 <TIM_Base_SetConfig+0x120>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d02b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d027      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8003f3c <TIM_Base_SetConfig+0x124>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d023      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <TIM_Base_SetConfig+0x128>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f44 <TIM_Base_SetConfig+0x12c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a2c      	ldr	r2, [pc, #176]	@ (8003f48 <TIM_Base_SetConfig+0x130>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d017      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003f4c <TIM_Base_SetConfig+0x134>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f50 <TIM_Base_SetConfig+0x138>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00f      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a29      	ldr	r2, [pc, #164]	@ (8003f54 <TIM_Base_SetConfig+0x13c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00b      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a28      	ldr	r2, [pc, #160]	@ (8003f58 <TIM_Base_SetConfig+0x140>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a27      	ldr	r2, [pc, #156]	@ (8003f5c <TIM_Base_SetConfig+0x144>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_Base_SetConfig+0xb2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	@ (8003f60 <TIM_Base_SetConfig+0x148>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d108      	bne.n	8003edc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0e      	ldr	r2, [pc, #56]	@ (8003f38 <TIM_Base_SetConfig+0x120>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0xf2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a10      	ldr	r2, [pc, #64]	@ (8003f48 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d103      	bne.n	8003f12 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f043 0204 	orr.w	r2, r3, #4
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	601a      	str	r2, [r3, #0]
}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	40000800 	.word	0x40000800
 8003f44:	40000c00 	.word	0x40000c00
 8003f48:	40010400 	.word	0x40010400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800
 8003f58:	40001800 	.word	0x40001800
 8003f5c:	40001c00 	.word	0x40001c00
 8003f60:	40002000 	.word	0x40002000

08003f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 0201 	bic.w	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0303 	bic.w	r3, r3, #3
 8003f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f023 0302 	bic.w	r3, r3, #2
 8003fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a20      	ldr	r2, [pc, #128]	@ (800403c <TIM_OC1_SetConfig+0xd8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_OC1_SetConfig+0x64>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <TIM_OC1_SetConfig+0xdc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10c      	bne.n	8003fe2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0308 	bic.w	r3, r3, #8
 8003fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f023 0304 	bic.w	r3, r3, #4
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC1_SetConfig+0xd8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC1_SetConfig+0x8e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC1_SetConfig+0xdc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d111      	bne.n	8004016 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	40010000 	.word	0x40010000
 8004040:	40010400 	.word	0x40010400

08004044 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f023 0210 	bic.w	r2, r3, #16
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f023 0320 	bic.w	r3, r3, #32
 800408e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <TIM_OC2_SetConfig+0xe4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_OC2_SetConfig+0x68>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a21      	ldr	r2, [pc, #132]	@ (800412c <TIM_OC2_SetConfig+0xe8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10d      	bne.n	80040c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a17      	ldr	r2, [pc, #92]	@ (8004128 <TIM_OC2_SetConfig+0xe4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_OC2_SetConfig+0x94>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a16      	ldr	r2, [pc, #88]	@ (800412c <TIM_OC2_SetConfig+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d113      	bne.n	8004100 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40010400 	.word	0x40010400

08004130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0303 	bic.w	r3, r3, #3
 8004166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a21      	ldr	r2, [pc, #132]	@ (8004210 <TIM_OC3_SetConfig+0xe0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d003      	beq.n	8004196 <TIM_OC3_SetConfig+0x66>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a20      	ldr	r2, [pc, #128]	@ (8004214 <TIM_OC3_SetConfig+0xe4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10d      	bne.n	80041b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800419c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a16      	ldr	r2, [pc, #88]	@ (8004210 <TIM_OC3_SetConfig+0xe0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <TIM_OC3_SetConfig+0x92>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a15      	ldr	r2, [pc, #84]	@ (8004214 <TIM_OC3_SetConfig+0xe4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d113      	bne.n	80041ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	40010000 	.word	0x40010000
 8004214:	40010400 	.word	0x40010400

08004218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	021b      	lsls	r3, r3, #8
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	031b      	lsls	r3, r3, #12
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <TIM_OC4_SetConfig+0xa4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC4_SetConfig+0x68>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <TIM_OC4_SetConfig+0xa8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40010400 	.word	0x40010400

080042c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f023 0201 	bic.w	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f023 030a 	bic.w	r3, r3, #10
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004322:	b480      	push	{r7}
 8004324:	b087      	sub	sp, #28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 0210 	bic.w	r2, r3, #16
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800434c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	f043 0307 	orr.w	r3, r3, #7
 80043a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	609a      	str	r2, [r3, #8]
}
 80043ac:	bf00      	nop
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	431a      	orrs	r2, r3
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	609a      	str	r2, [r3, #8]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	2201      	movs	r2, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a1a      	ldr	r2, [r3, #32]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	43db      	mvns	r3, r3
 800441a:	401a      	ands	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	fa01 f303 	lsl.w	r3, r1, r3
 8004430:	431a      	orrs	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e05a      	b.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	@ (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a8:	d01d      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1a      	ldr	r2, [pc, #104]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a17      	ldr	r2, [pc, #92]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a15      	ldr	r2, [pc, #84]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10c      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40010400 	.word	0x40010400
 8004534:	40014000 	.word	0x40014000
 8004538:	40001800 	.word	0x40001800

0800453c <memset>:
 800453c:	4402      	add	r2, r0
 800453e:	4603      	mov	r3, r0
 8004540:	4293      	cmp	r3, r2
 8004542:	d100      	bne.n	8004546 <memset+0xa>
 8004544:	4770      	bx	lr
 8004546:	f803 1b01 	strb.w	r1, [r3], #1
 800454a:	e7f9      	b.n	8004540 <memset+0x4>

0800454c <__libc_init_array>:
 800454c:	b570      	push	{r4, r5, r6, lr}
 800454e:	4d0d      	ldr	r5, [pc, #52]	@ (8004584 <__libc_init_array+0x38>)
 8004550:	4c0d      	ldr	r4, [pc, #52]	@ (8004588 <__libc_init_array+0x3c>)
 8004552:	1b64      	subs	r4, r4, r5
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	2600      	movs	r6, #0
 8004558:	42a6      	cmp	r6, r4
 800455a:	d109      	bne.n	8004570 <__libc_init_array+0x24>
 800455c:	4d0b      	ldr	r5, [pc, #44]	@ (800458c <__libc_init_array+0x40>)
 800455e:	4c0c      	ldr	r4, [pc, #48]	@ (8004590 <__libc_init_array+0x44>)
 8004560:	f000 f818 	bl	8004594 <_init>
 8004564:	1b64      	subs	r4, r4, r5
 8004566:	10a4      	asrs	r4, r4, #2
 8004568:	2600      	movs	r6, #0
 800456a:	42a6      	cmp	r6, r4
 800456c:	d105      	bne.n	800457a <__libc_init_array+0x2e>
 800456e:	bd70      	pop	{r4, r5, r6, pc}
 8004570:	f855 3b04 	ldr.w	r3, [r5], #4
 8004574:	4798      	blx	r3
 8004576:	3601      	adds	r6, #1
 8004578:	e7ee      	b.n	8004558 <__libc_init_array+0xc>
 800457a:	f855 3b04 	ldr.w	r3, [r5], #4
 800457e:	4798      	blx	r3
 8004580:	3601      	adds	r6, #1
 8004582:	e7f2      	b.n	800456a <__libc_init_array+0x1e>
 8004584:	080045cc 	.word	0x080045cc
 8004588:	080045cc 	.word	0x080045cc
 800458c:	080045cc 	.word	0x080045cc
 8004590:	080045d0 	.word	0x080045d0

08004594 <_init>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <_fini>:
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	bf00      	nop
 80045a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a6:	bc08      	pop	{r3}
 80045a8:	469e      	mov	lr, r3
 80045aa:	4770      	bx	lr
