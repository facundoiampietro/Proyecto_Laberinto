
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d0  080071d0  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080071d0  080071d0  000081d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d8  080071d8  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d8  080071d8  000081d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071dc  080071dc  000081dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080071e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          000003b4  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e99b  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f72  00000000  00000000  00017a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000199a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  0001a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226f6  00000000  00000000  0001b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103b8  00000000  00000000  0003da27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d87f5  00000000  00000000  0004dddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001265d4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b8  00000000  00000000  00126618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012a8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007120 	.word	0x08007120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007120 	.word	0x08007120

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bbc:	f001 ff42 	bl	8002a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc0:	f000 f956 	bl	8000e70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc4:	f000 faea 	bl	800119c <MX_GPIO_Init>
	MX_DMA_Init();
 8000bc8:	f000 fac8 	bl	800115c <MX_DMA_Init>
	MX_ADC1_Init();
 8000bcc:	f000 f9ba 	bl	8000f44 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000bd0:	f000 fa18 	bl	8001004 <MX_TIM3_Init>
	MX_UART5_Init();
 8000bd4:	f000 fa98 	bl	8001108 <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	4995      	ldr	r1, [pc, #596]	@ (8000e30 <main+0x278>)
 8000bdc:	4895      	ldr	r0, [pc, #596]	@ (8000e34 <main+0x27c>)
 8000bde:	f002 f80b 	bl	8002bf8 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000be2:	4b95      	ldr	r3, [pc, #596]	@ (8000e38 <main+0x280>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000be8:	4b93      	ldr	r3, [pc, #588]	@ (8000e38 <main+0x280>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	739a      	strb	r2, [r3, #14]
 8000bee:	4b92      	ldr	r3, [pc, #584]	@ (8000e38 <main+0x280>)
 8000bf0:	7b9a      	ldrb	r2, [r3, #14]
 8000bf2:	4b91      	ldr	r3, [pc, #580]	@ (8000e38 <main+0x280>)
 8000bf4:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000bf6:	4b90      	ldr	r3, [pc, #576]	@ (8000e38 <main+0x280>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8000e38 <main+0x280>)
 8000bfe:	7b5a      	ldrb	r2, [r3, #13]
 8000c00:	4b8d      	ldr	r3, [pc, #564]	@ (8000e38 <main+0x280>)
 8000c02:	729a      	strb	r2, [r3, #10]
 8000c04:	4b8c      	ldr	r3, [pc, #560]	@ (8000e38 <main+0x280>)
 8000c06:	7a9a      	ldrb	r2, [r3, #10]
 8000c08:	4b8b      	ldr	r3, [pc, #556]	@ (8000e38 <main+0x280>)
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000c0c:	4b8a      	ldr	r3, [pc, #552]	@ (8000e38 <main+0x280>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	731a      	strb	r2, [r3, #12]
 8000c12:	4b89      	ldr	r3, [pc, #548]	@ (8000e38 <main+0x280>)
 8000c14:	7b1a      	ldrb	r2, [r3, #12]
 8000c16:	4b88      	ldr	r3, [pc, #544]	@ (8000e38 <main+0x280>)
 8000c18:	725a      	strb	r2, [r3, #9]
 8000c1a:	4b87      	ldr	r3, [pc, #540]	@ (8000e38 <main+0x280>)
 8000c1c:	7a5a      	ldrb	r2, [r3, #9]
 8000c1e:	4b86      	ldr	r3, [pc, #536]	@ (8000e38 <main+0x280>)
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	4b85      	ldr	r3, [pc, #532]	@ (8000e38 <main+0x280>)
 8000c24:	799a      	ldrb	r2, [r3, #6]
 8000c26:	4b84      	ldr	r3, [pc, #528]	@ (8000e38 <main+0x280>)
 8000c28:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000c2a:	4b83      	ldr	r3, [pc, #524]	@ (8000e38 <main+0x280>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	721a      	strb	r2, [r3, #8]
 8000c30:	4b81      	ldr	r3, [pc, #516]	@ (8000e38 <main+0x280>)
 8000c32:	7a1a      	ldrb	r2, [r3, #8]
 8000c34:	4b80      	ldr	r3, [pc, #512]	@ (8000e38 <main+0x280>)
 8000c36:	715a      	strb	r2, [r3, #5]
 8000c38:	4b7f      	ldr	r3, [pc, #508]	@ (8000e38 <main+0x280>)
 8000c3a:	795a      	ldrb	r2, [r3, #5]
 8000c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8000e38 <main+0x280>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000c40:	4b7d      	ldr	r3, [pc, #500]	@ (8000e38 <main+0x280>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	711a      	strb	r2, [r3, #4]
 8000c46:	4b7c      	ldr	r3, [pc, #496]	@ (8000e38 <main+0x280>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e38 <main+0x280>)
 8000c4c:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8000e38 <main+0x280>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000c54:	4b79      	ldr	r3, [pc, #484]	@ (8000e3c <main+0x284>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000c5a:	4b78      	ldr	r3, [pc, #480]	@ (8000e3c <main+0x284>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b76      	ldr	r3, [pc, #472]	@ (8000e3c <main+0x284>)
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b75      	ldr	r3, [pc, #468]	@ (8000e3c <main+0x284>)
 8000c66:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000c68:	4b74      	ldr	r3, [pc, #464]	@ (8000e3c <main+0x284>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000c6e:	4b73      	ldr	r3, [pc, #460]	@ (8000e3c <main+0x284>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	72da      	strb	r2, [r3, #11]
 8000c74:	4b71      	ldr	r3, [pc, #452]	@ (8000e3c <main+0x284>)
 8000c76:	7ada      	ldrb	r2, [r3, #11]
 8000c78:	4b70      	ldr	r3, [pc, #448]	@ (8000e3c <main+0x284>)
 8000c7a:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	@ (8000e3c <main+0x284>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000c82:	4b6e      	ldr	r3, [pc, #440]	@ (8000e3c <main+0x284>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	735a      	strb	r2, [r3, #13]
 8000c88:	4b6c      	ldr	r3, [pc, #432]	@ (8000e3c <main+0x284>)
 8000c8a:	7b5a      	ldrb	r2, [r3, #13]
 8000c8c:	4b6b      	ldr	r3, [pc, #428]	@ (8000e3c <main+0x284>)
 8000c8e:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000c90:	4b6a      	ldr	r3, [pc, #424]	@ (8000e3c <main+0x284>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000c96:	4b69      	ldr	r3, [pc, #420]	@ (8000e3c <main+0x284>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	721a      	strb	r2, [r3, #8]
 8000c9c:	4b67      	ldr	r3, [pc, #412]	@ (8000e3c <main+0x284>)
 8000c9e:	7a1a      	ldrb	r2, [r3, #8]
 8000ca0:	4b66      	ldr	r3, [pc, #408]	@ (8000e3c <main+0x284>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000ca4:	4b65      	ldr	r3, [pc, #404]	@ (8000e3c <main+0x284>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
 8000caa:	4b64      	ldr	r3, [pc, #400]	@ (8000e3c <main+0x284>)
 8000cac:	7a9a      	ldrb	r2, [r3, #10]
 8000cae:	4b63      	ldr	r3, [pc, #396]	@ (8000e3c <main+0x284>)
 8000cb0:	725a      	strb	r2, [r3, #9]
 8000cb2:	4b62      	ldr	r3, [pc, #392]	@ (8000e3c <main+0x284>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b61      	ldr	r3, [pc, #388]	@ (8000e3c <main+0x284>)
 8000cb8:	719a      	strb	r2, [r3, #6]
 8000cba:	4b60      	ldr	r3, [pc, #384]	@ (8000e3c <main+0x284>)
 8000cbc:	799a      	ldrb	r2, [r3, #6]
 8000cbe:	4b5f      	ldr	r3, [pc, #380]	@ (8000e3c <main+0x284>)
 8000cc0:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc8:	485d      	ldr	r0, [pc, #372]	@ (8000e40 <main+0x288>)
 8000cca:	f003 fa1b 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd4:	485a      	ldr	r0, [pc, #360]	@ (8000e40 <main+0x288>)
 8000cd6:	f003 fa15 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce0:	4857      	ldr	r0, [pc, #348]	@ (8000e40 <main+0x288>)
 8000ce2:	f003 fa0f 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cec:	4854      	ldr	r0, [pc, #336]	@ (8000e40 <main+0x288>)
 8000cee:	f003 fa09 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4853      	ldr	r0, [pc, #332]	@ (8000e44 <main+0x28c>)
 8000cf6:	f003 ff77 	bl	8004be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000cfa:	210c      	movs	r1, #12
 8000cfc:	4851      	ldr	r0, [pc, #324]	@ (8000e44 <main+0x28c>)
 8000cfe:	f003 ff73 	bl	8004be8 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8000d02:	4b51      	ldr	r3, [pc, #324]	@ (8000e48 <main+0x290>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8000d08:	4b4f      	ldr	r3, [pc, #316]	@ (8000e48 <main+0x290>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d14:	484d      	ldr	r0, [pc, #308]	@ (8000e4c <main+0x294>)
 8000d16:	f003 f9f5 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d20:	484a      	ldr	r0, [pc, #296]	@ (8000e4c <main+0x294>)
 8000d22:	f003 f9ef 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d2c:	4847      	ldr	r0, [pc, #284]	@ (8000e4c <main+0x294>)
 8000d2e:	f003 f9e9 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d38:	4844      	ldr	r0, [pc, #272]	@ (8000e4c <main+0x294>)
 8000d3a:	f003 f9e3 	bl	8004104 <HAL_GPIO_WritePin>

	prueba = 6; //Aca se elige que programa queremos que se realice
 8000d3e:	4b44      	ldr	r3, [pc, #272]	@ (8000e50 <main+0x298>)
 8000d40:	2206      	movs	r2, #6
 8000d42:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (prueba) {
 8000d44:	4b42      	ldr	r3, [pc, #264]	@ (8000e50 <main+0x298>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b0c      	cmp	r3, #12
 8000d4a:	d8fb      	bhi.n	8000d44 <main+0x18c>
 8000d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d54 <main+0x19c>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d89 	.word	0x08000d89
 8000d58:	08000d45 	.word	0x08000d45
 8000d5c:	08000d45 	.word	0x08000d45
 8000d60:	08000d45 	.word	0x08000d45
 8000d64:	08000d8f 	.word	0x08000d8f
 8000d68:	08000d95 	.word	0x08000d95
 8000d6c:	08000d9b 	.word	0x08000d9b
 8000d70:	08000d45 	.word	0x08000d45
 8000d74:	08000d45 	.word	0x08000d45
 8000d78:	08000d45 	.word	0x08000d45
 8000d7c:	08000dc5 	.word	0x08000dc5
 8000d80:	08000e07 	.word	0x08000e07
 8000d84:	08000e27 	.word	0x08000e27

		case 0:
			prueba_avanzar();
 8000d88:	f000 fc6a 	bl	8001660 <prueba_avanzar>
			break;
 8000d8c:	e04f      	b.n	8000e2e <main+0x276>
		case 1:

			break;

		case 4:
			programa_principal();
 8000d8e:	f000 fc71 	bl	8001674 <programa_principal>
			break;
 8000d92:	e04c      	b.n	8000e2e <main+0x276>

		case 5:
			ajuste_automatico();
 8000d94:	f000 fba0 	bl	80014d8 <ajuste_automatico>
			break;
 8000d98:	e049      	b.n	8000e2e <main+0x276>

		case 6:
			girando = 0;
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e54 <main+0x29c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
			sensor_izq_min = 32700;
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <main+0x2a0>)
 8000da2:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000da6:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000da8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e5c <main+0x2a4>)
 8000daa:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000dae:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e60 <main+0x2a8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <main+0x2ac>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <main+0x298>)
 8000dbe:	2205      	movs	r2, #5
 8000dc0:	701a      	strb	r2, [r3, #0]
			break;
 8000dc2:	e034      	b.n	8000e2e <main+0x276>
		case 10:
			TIM3->CCR3 = 0;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <main+0x290>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <main+0x290>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd6:	481d      	ldr	r0, [pc, #116]	@ (8000e4c <main+0x294>)
 8000dd8:	f003 f994 	bl	8004104 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de2:	481a      	ldr	r0, [pc, #104]	@ (8000e4c <main+0x294>)
 8000de4:	f003 f98e 	bl	8004104 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dee:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <main+0x294>)
 8000df0:	f003 f988 	bl	8004104 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfa:	4814      	ldr	r0, [pc, #80]	@ (8000e4c <main+0x294>)
 8000dfc:	f003 f982 	bl	8004104 <HAL_GPIO_WritePin>
			envio_llegada();
 8000e00:	f001 fb9c 	bl	800253c <envio_llegada>

			break;
 8000e04:	e013      	b.n	8000e2e <main+0x276>
		case 11:
			eliminar_repetidos(camino_solucion, contador_casillas);
 8000e06:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <main+0x2b0>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <main+0x2b4>)
 8000e0e:	f000 faa3 	bl	8001358 <eliminar_repetidos>
			contador_casillas = contador_casillas - 1;
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <main+0x2b0>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b13      	ldr	r3, [pc, #76]	@ (8000e68 <main+0x2b0>)
 8000e1c:	701a      	strb	r2, [r3, #0]
			prueba = 12;
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <main+0x298>)
 8000e20:	220c      	movs	r2, #12
 8000e22:	701a      	strb	r2, [r3, #0]
			break;
 8000e24:	e003      	b.n	8000e2e <main+0x276>
		case 12:
			de_reversa_mami();
 8000e26:	f000 fae7 	bl	80013f8 <de_reversa_mami>
			break;
 8000e2a:	bf00      	nop
 8000e2c:	e78a      	b.n	8000d44 <main+0x18c>
		switch (prueba) {
 8000e2e:	e789      	b.n	8000d44 <main+0x18c>
 8000e30:	20000244 	.word	0x20000244
 8000e34:	20000080 	.word	0x20000080
 8000e38:	200001dc 	.word	0x200001dc
 8000e3c:	200001ec 	.word	0x200001ec
 8000e40:	40020400 	.word	0x40020400
 8000e44:	20000128 	.word	0x20000128
 8000e48:	40000400 	.word	0x40000400
 8000e4c:	40020c00 	.word	0x40020c00
 8000e50:	200001fd 	.word	0x200001fd
 8000e54:	20000228 	.word	0x20000228
 8000e58:	20000002 	.word	0x20000002
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	20000200 	.word	0x20000200
 8000e64:	20000202 	.word	0x20000202
 8000e68:	200001fc 	.word	0x200001fc
 8000e6c:	20000208 	.word	0x20000208

08000e70 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	@ 0x50
 8000e74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e76:	f107 0320 	add.w	r3, r7, #32
 8000e7a:	2230      	movs	r2, #48	@ 0x30
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f005 fcd0 	bl	8006824 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b28      	ldr	r3, [pc, #160]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	4a27      	ldr	r2, [pc, #156]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea4:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <SystemClock_Config+0xcc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebe:	6013      	str	r3, [r2, #0]
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <SystemClock_Config+0xd0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed4:	2310      	movs	r3, #16
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000edc:	2300      	movs	r3, #0
 8000ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000ee4:	2332      	movs	r3, #50	@ 0x32
 8000ee6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eec:	2307      	movs	r3, #7
 8000eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ef0:	f107 0320 	add.w	r3, r7, #32
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 f937 	bl	8004168 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x94>
		Error_Handler();
 8000f00:	f001 fb6e 	bl	80025e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f04:	230f      	movs	r3, #15
 8000f06:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f10:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f14:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fb98 	bl	8004658 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0xc2>
		Error_Handler();
 8000f2e:	f001 fb57 	bl	80025e0 <Error_Handler>
	}
}
 8000f32:	bf00      	nop
 8000f34:	3750      	adds	r7, #80	@ 0x50
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800
 8000f40:	40007000 	.word	0x40007000

08000f44 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f56:	4b28      	ldr	r3, [pc, #160]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f58:	4a28      	ldr	r2, [pc, #160]	@ (8000ffc <MX_ADC1_Init+0xb8>)
 8000f5a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f5e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f62:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f86:	4a1e      	ldr	r2, [pc, #120]	@ (8001000 <MX_ADC1_Init+0xbc>)
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f92:	2202      	movs	r2, #2
 8000f94:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fa6:	f001 fde3 	bl	8002b70 <HAL_ADC_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000fb0:	f001 fb16 	bl	80025e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000fb4:	2309      	movs	r3, #9
 8000fb6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fc6:	f001 ff35 	bl	8002e34 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000fd0:	f001 fb06 	bl	80025e0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_ADC1_Init+0xb4>)
 8000fe2:	f001 ff27 	bl	8002e34 <HAL_ADC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000fec:	f001 faf8 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000080 	.word	0x20000080
 8000ffc:	40012000 	.word	0x40012000
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b08e      	sub	sp, #56	@ 0x38
 8001008:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800100a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
 8001030:	615a      	str	r2, [r3, #20]
 8001032:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001034:	4b32      	ldr	r3, [pc, #200]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001036:	4a33      	ldr	r2, [pc, #204]	@ (8001104 <MX_TIM3_Init+0x100>)
 8001038:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800103a:	4b31      	ldr	r3, [pc, #196]	@ (8001100 <MX_TIM3_Init+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b2f      	ldr	r3, [pc, #188]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8001046:	4b2e      	ldr	r3, [pc, #184]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001048:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800104c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b2c      	ldr	r3, [pc, #176]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800105a:	4829      	ldr	r0, [pc, #164]	@ (8001100 <MX_TIM3_Init+0xfc>)
 800105c:	f003 fd1c 	bl	8004a98 <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM3_Init+0x66>
		Error_Handler();
 8001066:	f001 fabb 	bl	80025e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001070:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001074:	4619      	mov	r1, r3
 8001076:	4822      	ldr	r0, [pc, #136]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001078:	f003 ff40 	bl	8004efc <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM3_Init+0x82>
		Error_Handler();
 8001082:	f001 faad 	bl	80025e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001086:	481e      	ldr	r0, [pc, #120]	@ (8001100 <MX_TIM3_Init+0xfc>)
 8001088:	f003 fd55 	bl	8004b36 <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM3_Init+0x92>
		Error_Handler();
 8001092:	f001 faa5 	bl	80025e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800109e:	f107 0320 	add.w	r3, r7, #32
 80010a2:	4619      	mov	r1, r3
 80010a4:	4816      	ldr	r0, [pc, #88]	@ (8001100 <MX_TIM3_Init+0xfc>)
 80010a6:	f004 fb07 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM3_Init+0xb0>
		Error_Handler();
 80010b0:	f001 fa96 	bl	80025e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	@ 0x60
 80010b6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2208      	movs	r2, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <MX_TIM3_Init+0xfc>)
 80010cc:	f003 fe54 	bl	8004d78 <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM3_Init+0xd6>
		Error_Handler();
 80010d6:	f001 fa83 	bl	80025e0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	220c      	movs	r2, #12
 80010de:	4619      	mov	r1, r3
 80010e0:	4807      	ldr	r0, [pc, #28]	@ (8001100 <MX_TIM3_Init+0xfc>)
 80010e2:	f003 fe49 	bl	8004d78 <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM3_Init+0xec>
		Error_Handler();
 80010ec:	f001 fa78 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80010f0:	4803      	ldr	r0, [pc, #12]	@ (8001100 <MX_TIM3_Init+0xfc>)
 80010f2:	f001 fb3d 	bl	8002770 <HAL_TIM_MspPostInit>

}
 80010f6:	bf00      	nop
 80010f8:	3738      	adds	r7, #56	@ 0x38
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000128 	.word	0x20000128
 8001104:	40000400 	.word	0x40000400

08001108 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_UART5_Init+0x4c>)
 800110e:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_UART5_Init+0x50>)
 8001110:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <MX_UART5_Init+0x4c>)
 8001114:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001118:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_UART5_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_UART5_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_UART5_Init+0x4c>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_UART5_Init+0x4c>)
 800112e:	220c      	movs	r2, #12
 8001130:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_UART5_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_UART5_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_UART5_Init+0x4c>)
 8001140:	f004 fb36 	bl	80057b0 <HAL_UART_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_UART5_Init+0x46>
		Error_Handler();
 800114a:	f001 fa49 	bl	80025e0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000170 	.word	0x20000170
 8001158:	40005000 	.word	0x40005000

0800115c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <MX_DMA_Init+0x3c>)
 800116c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_DMA_Init+0x3c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2038      	movs	r0, #56	@ 0x38
 8001184:	f002 f9d1 	bl	800352a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001188:	2038      	movs	r0, #56	@ 0x38
 800118a:	f002 f9ea 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	4b53      	ldr	r3, [pc, #332]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a52      	ldr	r2, [pc, #328]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011bc:	f043 0310 	orr.w	r3, r3, #16
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b50      	ldr	r3, [pc, #320]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0310 	and.w	r3, r3, #16
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b49      	ldr	r3, [pc, #292]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	4b45      	ldr	r3, [pc, #276]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b42      	ldr	r3, [pc, #264]	@ (8001304 <MX_GPIO_Init+0x168>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b3e      	ldr	r3, [pc, #248]	@ (8001304 <MX_GPIO_Init+0x168>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a3d      	ldr	r2, [pc, #244]	@ (8001304 <MX_GPIO_Init+0x168>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <MX_GPIO_Init+0x168>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <MX_GPIO_Init+0x168>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a36      	ldr	r2, [pc, #216]	@ (8001304 <MX_GPIO_Init+0x168>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b34      	ldr	r3, [pc, #208]	@ (8001304 <MX_GPIO_Init+0x168>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2108      	movs	r1, #8
 8001242:	4831      	ldr	r0, [pc, #196]	@ (8001308 <MX_GPIO_Init+0x16c>)
 8001244:	f002 ff5e 	bl	8004104 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 800124e:	482f      	ldr	r0, [pc, #188]	@ (800130c <MX_GPIO_Init+0x170>)
 8001250:	f002 ff58 	bl	8004104 <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800125a:	482d      	ldr	r0, [pc, #180]	@ (8001310 <MX_GPIO_Init+0x174>)
 800125c:	f002 ff52 	bl	8004104 <HAL_GPIO_WritePin>
	led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001260:	2308      	movs	r3, #8
 8001262:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	4824      	ldr	r0, [pc, #144]	@ (8001308 <MX_GPIO_Init+0x16c>)
 8001278:	f002 fd90 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	4619      	mov	r1, r3
 800128e:	4821      	ldr	r0, [pc, #132]	@ (8001314 <MX_GPIO_Init+0x178>)
 8001290:	f002 fd84 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin;
 8001294:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001298:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4817      	ldr	r0, [pc, #92]	@ (800130c <MX_GPIO_Init+0x170>)
 80012ae:	f002 fd75 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
	GPIO_InitStruct.Pin = led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin;
 80012b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80012b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4619      	mov	r1, r3
 80012ca:	4811      	ldr	r0, [pc, #68]	@ (8001310 <MX_GPIO_Init+0x174>)
 80012cc:	f002 fd66 	bl	8003d9c <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 80012d0:	23c0      	movs	r3, #192	@ 0xc0
 80012d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	480c      	ldr	r0, [pc, #48]	@ (8001318 <MX_GPIO_Init+0x17c>)
 80012e6:	f002 fd59 	bl	8003d9c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2017      	movs	r0, #23
 80012f0:	f002 f91b 	bl	800352a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f4:	2017      	movs	r0, #23
 80012f6:	f002 f934 	bl	8003562 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	@ 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40021000 	.word	0x40021000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020000 	.word	0x40020000
 8001318:	40020800 	.word	0x40020800

0800131c <detecte_pared_por_tiempo>:

/* USER CODE BEGIN 4 */

void detecte_pared_por_tiempo(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual_3 = HAL_GetTick();
 8001322:	f001 fbf5 	bl	8002b10 <HAL_GetTick>
 8001326:	6078      	str	r0, [r7, #4]
	if (tiempo_sin_encontrar_pared_o_linea <= (tiempo_actual_3 - tiempo_inicio_3)) {
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <detecte_pared_por_tiempo+0x30>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001334:	4293      	cmp	r3, r2
 8001336:	d905      	bls.n	8001344 <detecte_pared_por_tiempo+0x28>
		solicitud_pared = 1;
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <detecte_pared_por_tiempo+0x34>)
 800133a:	2201      	movs	r2, #1
 800133c:	701a      	strb	r2, [r3, #0]
		flag_pared_2 = 0;
 800133e:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <detecte_pared_por_tiempo+0x38>)
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]
	}
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000023c 	.word	0x2000023c
 8001350:	20000230 	.word	0x20000230
 8001354:	20000241 	.word	0x20000241

08001358 <eliminar_repetidos>:

void eliminar_repetidos(uint8_t *camino_solucion, uint8_t contador_casillas) {
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < contador_casillas - 1; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e039      	b.n	80013de <eliminar_repetidos+0x86>
		for (int j = i + 1; j < contador_casillas; j++) {
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	e02e      	b.n	80013d0 <eliminar_repetidos+0x78>
			if (camino_solucion[i] == camino_solucion[j]) {
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	440b      	add	r3, r1
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d121      	bne.n	80013ca <eliminar_repetidos+0x72>
				// Se encontró repetido: eliminar todo entre i+1 y j inclusive
				int cantidad_a_eliminar = j - i;
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	60bb      	str	r3, [r7, #8]

				for (int k = j; k < contador_casillas; k++) {
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	e00d      	b.n	80013b0 <eliminar_repetidos+0x58>
					camino_solucion[k - cantidad_a_eliminar] = camino_solucion[k];
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	441a      	add	r2, r3
 800139a:	68f9      	ldr	r1, [r7, #12]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1acb      	subs	r3, r1, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	440b      	add	r3, r1
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
				for (int k = j; k < contador_casillas; k++) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3301      	adds	r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbed      	blt.n	8001394 <eliminar_repetidos+0x3c>
				}

				contador_casillas = contador_casillas - cantidad_a_eliminar;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	70fb      	strb	r3, [r7, #3]
				i = -1;  // Reiniciar para volver a analizar todo desde el inicio
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	617b      	str	r3, [r7, #20]
				break;
 80013c8:	e006      	b.n	80013d8 <eliminar_repetidos+0x80>
		for (int j = i + 1; j < contador_casillas; j++) {
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	3301      	adds	r3, #1
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbcc      	blt.n	8001372 <eliminar_repetidos+0x1a>
	for (int i = 0; i < contador_casillas - 1; i++) {
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbc0      	blt.n	800136a <eliminar_repetidos+0x12>
			}
		}
	}

}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	371c      	adds	r7, #28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <de_reversa_mami>:

void de_reversa_mami(void) { //codigo para ir de la casilla 15 a la 0... muy chiche
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0

	if (solicitud_linea == 1) { //cambio de casilla
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <de_reversa_mami+0xb0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d13f      	bne.n	8001486 <de_reversa_mami+0x8e>
		contador_giros = 0;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <de_reversa_mami+0xb4>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800140c:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <de_reversa_mami+0xb8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	@ (80014b4 <de_reversa_mami+0xbc>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f000 faa6 	bl	8001968 <act_ubicacion>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <de_reversa_mami+0xb8>)
 8001422:	701a      	strb	r2, [r3, #0]
		casilla_n = camino_solucion[contador_casillas]; //calcula la casilla a la que hay q ir
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <de_reversa_mami+0xc0>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <de_reversa_mami+0xc4>)
 800142c:	5c9a      	ldrb	r2, [r3, r2]
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <de_reversa_mami+0xc8>)
 8001430:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <de_reversa_mami+0xb8>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <de_reversa_mami+0xc8>)
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fa35 	bl	80018ac <obtener_orientacion_futura>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <de_reversa_mami+0xcc>)
 8001448:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <de_reversa_mami+0xbc>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <de_reversa_mami+0xcc>)
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fa55 	bl	8001904 <obtenerGiro>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <de_reversa_mami+0xd0>)
 8001460:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <de_reversa_mami+0xcc>)
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <de_reversa_mami+0xbc>)
 8001468:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 800146a:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <de_reversa_mami+0xd0>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fb3c 	bl	8001aec <ejecutarGiro>
		contador_casillas = contador_casillas - 1;
 8001474:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <de_reversa_mami+0xc0>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <de_reversa_mami+0xc0>)
 800147e:	701a      	strb	r2, [r3, #0]
		solicitud_linea = 0;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <de_reversa_mami+0xb0>)
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
	}
	if (filtrado_linea == 1) {
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <de_reversa_mami+0xd4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <de_reversa_mami+0x9c>
		filtrado_linea_funcion();
 8001490:	f000 ffa4 	bl	80023dc <filtrado_linea_funcion>
	}
	if (ubicacion == 0)
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <de_reversa_mami+0xb8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <de_reversa_mami+0xaa>
		prueba = 10;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <de_reversa_mami+0xd8>)
 800149e:	220a      	movs	r2, #10
 80014a0:	701a      	strb	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000238 	.word	0x20000238
 80014ac:	200001fe 	.word	0x200001fe
 80014b0:	200001d8 	.word	0x200001d8
 80014b4:	200001d9 	.word	0x200001d9
 80014b8:	200001fc 	.word	0x200001fc
 80014bc:	20000208 	.word	0x20000208
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200001da 	.word	0x200001da
 80014c8:	200001db 	.word	0x200001db
 80014cc:	20000239 	.word	0x20000239
 80014d0:	200001fd 	.word	0x200001fd
 80014d4:	00000000 	.word	0x00000000

080014d8 <ajuste_automatico>:
void ajuste_automatico(void) {
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80014dc:	4b56      	ldr	r3, [pc, #344]	@ (8001638 <ajuste_automatico+0x160>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <ajuste_automatico+0x14>
 80014e4:	4b55      	ldr	r3, [pc, #340]	@ (800163c <ajuste_automatico+0x164>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80014ec:	4b52      	ldr	r3, [pc, #328]	@ (8001638 <ajuste_automatico+0x160>)
 80014ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014f2:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80014f4:	4b51      	ldr	r3, [pc, #324]	@ (800163c <ajuste_automatico+0x164>)
 80014f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014fa:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80014fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001638 <ajuste_automatico+0x160>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <ajuste_automatico+0x168>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	429a      	cmp	r2, r3
 8001508:	d904      	bls.n	8001514 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <ajuste_automatico+0x168>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b49      	ldr	r3, [pc, #292]	@ (8001638 <ajuste_automatico+0x160>)
 8001512:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8001514:	4b49      	ldr	r3, [pc, #292]	@ (800163c <ajuste_automatico+0x164>)
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <ajuste_automatico+0x16c>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	429a      	cmp	r2, r3
 8001520:	d904      	bls.n	800152c <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8001522:	4b48      	ldr	r3, [pc, #288]	@ (8001644 <ajuste_automatico+0x16c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <ajuste_automatico+0x164>)
 800152a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 800152c:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <ajuste_automatico+0x170>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <ajuste_automatico+0x168>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	429a      	cmp	r2, r3
 8001538:	d204      	bcs.n	8001544 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <ajuste_automatico+0x168>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <ajuste_automatico+0x170>)
 8001542:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <ajuste_automatico+0x174>)
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <ajuste_automatico+0x16c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	429a      	cmp	r2, r3
 8001550:	d204      	bcs.n	800155c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001552:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <ajuste_automatico+0x16c>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <ajuste_automatico+0x174>)
 800155a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 800155c:	2101      	movs	r1, #1
 800155e:	483c      	ldr	r0, [pc, #240]	@ (8001650 <ajuste_automatico+0x178>)
 8001560:	f002 fdb8 	bl	80040d4 <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d15c      	bne.n	8001624 <ajuste_automatico+0x14c>
		HAL_Delay(40);
 800156a:	2028      	movs	r0, #40	@ 0x28
 800156c:	f001 fadc 	bl	8002b28 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001570:	2101      	movs	r1, #1
 8001572:	4837      	ldr	r0, [pc, #220]	@ (8001650 <ajuste_automatico+0x178>)
 8001574:	f002 fdae 	bl	80040d4 <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d152      	bne.n	8001624 <ajuste_automatico+0x14c>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <ajuste_automatico+0x170>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f8f8 	bl	8000778 <__aeabi_i2d>
 8001588:	a327      	add	r3, pc, #156	@ (adr r3, 8001628 <ajuste_automatico+0x150>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe fe77 	bl	8000280 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4614      	mov	r4, r2
 8001598:	461d      	mov	r5, r3
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <ajuste_automatico+0x160>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f8ea 	bl	8000778 <__aeabi_i2d>
 80015a4:	a322      	add	r3, pc, #136	@ (adr r3, 8001630 <ajuste_automatico+0x158>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe69 	bl	8000280 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ff93 	bl	80004e0 <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f943 	bl	800084c <__aeabi_d2uiz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <ajuste_automatico+0x17c>)
 80015cc:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <ajuste_automatico+0x174>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f8d0 	bl	8000778 <__aeabi_i2d>
 80015d8:	a313      	add	r3, pc, #76	@ (adr r3, 8001628 <ajuste_automatico+0x150>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe fe4f 	bl	8000280 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4614      	mov	r4, r2
 80015e8:	461d      	mov	r5, r3
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <ajuste_automatico+0x164>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f8c2 	bl	8000778 <__aeabi_i2d>
 80015f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001630 <ajuste_automatico+0x158>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe41 	bl	8000280 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe ff6b 	bl	80004e0 <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff f91b 	bl	800084c <__aeabi_d2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <ajuste_automatico+0x180>)
 800161c:	801a      	strh	r2, [r3, #0]
			prueba = 4;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <ajuste_automatico+0x184>)
 8001620:	2204      	movs	r2, #4
 8001622:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001624:	bf00      	nop
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fd99999 	.word	0x3fd99999
 8001630:	33333333 	.word	0x33333333
 8001634:	3fe33333 	.word	0x3fe33333
 8001638:	20000004 	.word	0x20000004
 800163c:	20000002 	.word	0x20000002
 8001640:	200002c6 	.word	0x200002c6
 8001644:	200002c4 	.word	0x200002c4
 8001648:	20000202 	.word	0x20000202
 800164c:	20000200 	.word	0x20000200
 8001650:	40020000 	.word	0x40020000
 8001654:	20000206 	.word	0x20000206
 8001658:	20000204 	.word	0x20000204
 800165c:	200001fd 	.word	0x200001fd

08001660 <prueba_avanzar>:

void prueba_avanzar(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
//	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
	ejecutarGiro(izquierda);
 8001664:	2001      	movs	r0, #1
 8001666:	f000 fa41 	bl	8001aec <ejecutarGiro>
	ejecutarGiro(adelante);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 fa3e 	bl	8001aec <ejecutarGiro>

	while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <prueba_avanzar+0x10>

08001674 <programa_principal>:
		;
}

void programa_principal(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	//correccion_avanzar();
	avanzar();
 8001678:	f000 f9f6 	bl	8001a68 <avanzar>
	girando = 0;
 800167c:	4b78      	ldr	r3, [pc, #480]	@ (8001860 <programa_principal+0x1ec>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
	flag_pared = 0; // en realidad es flag pared o linea
 8001682:	4b78      	ldr	r3, [pc, #480]	@ (8001864 <programa_principal+0x1f0>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	if (solicitud_linea == 1) { //cambio de casilla
 8001688:	4b77      	ldr	r3, [pc, #476]	@ (8001868 <programa_principal+0x1f4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d15e      	bne.n	8001750 <programa_principal+0xdc>
		flag_pared = 1;
 8001692:	4b74      	ldr	r3, [pc, #464]	@ (8001864 <programa_principal+0x1f0>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
		contador_giros = 0;
 8001698:	4b74      	ldr	r3, [pc, #464]	@ (800186c <programa_principal+0x1f8>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 800169e:	4b74      	ldr	r3, [pc, #464]	@ (8001870 <programa_principal+0x1fc>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b72      	ldr	r3, [pc, #456]	@ (8001870 <programa_principal+0x1fc>)
 80016a8:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80016aa:	4b72      	ldr	r3, [pc, #456]	@ (8001874 <programa_principal+0x200>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4a72      	ldr	r2, [pc, #456]	@ (8001878 <programa_principal+0x204>)
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f957 	bl	8001968 <act_ubicacion>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b6d      	ldr	r3, [pc, #436]	@ (8001874 <programa_principal+0x200>)
 80016c0:	701a      	strb	r2, [r3, #0]
		envio_ubicacion(ubicacion, casilla_n);
 80016c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001874 <programa_principal+0x200>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4a6d      	ldr	r2, [pc, #436]	@ (800187c <programa_principal+0x208>)
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fee5 	bl	800249c <envio_ubicacion>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <programa_principal+0x200>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <programa_principal+0x204>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4969      	ldr	r1, [pc, #420]	@ (8001880 <programa_principal+0x20c>)
 80016dc:	4869      	ldr	r0, [pc, #420]	@ (8001884 <programa_principal+0x210>)
 80016de:	f000 fbef 	bl	8001ec0 <calculo_minimo_peso>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b65      	ldr	r3, [pc, #404]	@ (800187c <programa_principal+0x208>)
 80016e8:	701a      	strb	r2, [r3, #0]
		envio_casilla_n(casilla_n);
 80016ea:	4b64      	ldr	r3, [pc, #400]	@ (800187c <programa_principal+0x208>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 ff46 	bl	8002580 <envio_casilla_n>
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80016f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <programa_principal+0x200>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4a60      	ldr	r2, [pc, #384]	@ (800187c <programa_principal+0x208>)
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f8d4 	bl	80018ac <obtener_orientacion_futura>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <programa_principal+0x214>)
 800170a:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800170c:	4b5a      	ldr	r3, [pc, #360]	@ (8001878 <programa_principal+0x204>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4a5d      	ldr	r2, [pc, #372]	@ (8001888 <programa_principal+0x214>)
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f8f4 	bl	8001904 <obtenerGiro>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b5a      	ldr	r3, [pc, #360]	@ (800188c <programa_principal+0x218>)
 8001722:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001724:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <programa_principal+0x214>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <programa_principal+0x204>)
 800172a:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 800172c:	4b57      	ldr	r3, [pc, #348]	@ (800188c <programa_principal+0x218>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f9db 	bl	8001aec <ejecutarGiro>
		girando = 0;
 8001736:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <programa_principal+0x1ec>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
		camino_solucion[contador_casillas] = ubicacion;
 800173c:	4b4c      	ldr	r3, [pc, #304]	@ (8001870 <programa_principal+0x1fc>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <programa_principal+0x200>)
 8001744:	7819      	ldrb	r1, [r3, #0]
 8001746:	4b52      	ldr	r3, [pc, #328]	@ (8001890 <programa_principal+0x21c>)
 8001748:	5499      	strb	r1, [r3, r2]
		solicitud_linea = 0;
 800174a:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <programa_principal+0x1f4>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
	}
	if (solicitud_pared == 1) {
 8001750:	4b50      	ldr	r3, [pc, #320]	@ (8001894 <programa_principal+0x220>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d151      	bne.n	80017fe <programa_principal+0x18a>
		flag_pared = 1; // en realidad es flag pared o linea
 800175a:	4b42      	ldr	r3, [pc, #264]	@ (8001864 <programa_principal+0x1f0>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		girando = 1;
 8001760:	4b3f      	ldr	r3, [pc, #252]	@ (8001860 <programa_principal+0x1ec>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
		mini_avance();
 8001766:	f000 f9b4 	bl	8001ad2 <mini_avance>
		mini_avance();
 800176a:	f000 f9b2 	bl	8001ad2 <mini_avance>
		mini_avance();
 800176e:	f000 f9b0 	bl	8001ad2 <mini_avance>
		envio_pared();
 8001772:	f000 fec3 	bl	80024fc <envio_pared>
		act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <programa_principal+0x200>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4a3f      	ldr	r2, [pc, #252]	@ (8001878 <programa_principal+0x204>)
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4619      	mov	r1, r3
 8001780:	483f      	ldr	r0, [pc, #252]	@ (8001880 <programa_principal+0x20c>)
 8001782:	f000 faab 	bl	8001cdc <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 8001786:	493f      	ldr	r1, [pc, #252]	@ (8001884 <programa_principal+0x210>)
 8001788:	483d      	ldr	r0, [pc, #244]	@ (8001880 <programa_principal+0x20c>)
 800178a:	f000 faf9 	bl	8001d80 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 800178e:	4b39      	ldr	r3, [pc, #228]	@ (8001874 <programa_principal+0x200>)
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <programa_principal+0x204>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	493a      	ldr	r1, [pc, #232]	@ (8001880 <programa_principal+0x20c>)
 8001798:	483a      	ldr	r0, [pc, #232]	@ (8001884 <programa_principal+0x210>)
 800179a:	f000 fb91 	bl	8001ec0 <calculo_minimo_peso>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b36      	ldr	r3, [pc, #216]	@ (800187c <programa_principal+0x208>)
 80017a4:	701a      	strb	r2, [r3, #0]
		envio_casilla_n(casilla_n);
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <programa_principal+0x208>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fee8 	bl	8002580 <envio_casilla_n>
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80017b0:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <programa_principal+0x200>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4a31      	ldr	r2, [pc, #196]	@ (800187c <programa_principal+0x208>)
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f876 	bl	80018ac <obtener_orientacion_futura>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <programa_principal+0x214>)
 80017c6:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <programa_principal+0x204>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4a2e      	ldr	r2, [pc, #184]	@ (8001888 <programa_principal+0x214>)
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4611      	mov	r1, r2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f896 	bl	8001904 <obtenerGiro>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <programa_principal+0x218>)
 80017de:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <programa_principal+0x214>)
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <programa_principal+0x204>)
 80017e6:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 80017e8:	4b28      	ldr	r3, [pc, #160]	@ (800188c <programa_principal+0x218>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 f97d 	bl	8001aec <ejecutarGiro>
		girando = 0;
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <programa_principal+0x1ec>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
		solicitud_pared = 0;
 80017f8:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <programa_principal+0x220>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
	}
	if ((flag_pared == 0) && (flag_pared_2 == 0)) {
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <programa_principal+0x1f0>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10c      	bne.n	8001822 <programa_principal+0x1ae>
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <programa_principal+0x224>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d107      	bne.n	8001822 <programa_principal+0x1ae>
		tiempo_inicio_3 = HAL_GetTick();
 8001812:	f001 f97d 	bl	8002b10 <HAL_GetTick>
 8001816:	4603      	mov	r3, r0
 8001818:	4a20      	ldr	r2, [pc, #128]	@ (800189c <programa_principal+0x228>)
 800181a:	6013      	str	r3, [r2, #0]
		flag_pared_2 = 1;
 800181c:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <programa_principal+0x224>)
 800181e:	2201      	movs	r2, #1
 8001820:	701a      	strb	r2, [r3, #0]
	}
	if (flag_pared_2 == 1) {
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <programa_principal+0x224>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <programa_principal+0x1bc>
		detecte_pared_por_tiempo();
 800182c:	f7ff fd76 	bl	800131c <detecte_pared_por_tiempo>
	}
	if (filtrado_pared == 1) {
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <programa_principal+0x22c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <programa_principal+0x1ca>
		filtrado_pared_funcion();
 800183a:	f000 fda7 	bl	800238c <filtrado_pared_funcion>
	}
	if (filtrado_linea == 1) {
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <programa_principal+0x230>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <programa_principal+0x1d8>
		filtrado_linea_funcion();
 8001848:	f000 fdc8 	bl	80023dc <filtrado_linea_funcion>
	}
	if (ubicacion == 15) {
 800184c:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <programa_principal+0x200>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d102      	bne.n	800185a <programa_principal+0x1e6>
		prueba = 10;
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <programa_principal+0x234>)
 8001856:	220a      	movs	r2, #10
 8001858:	701a      	strb	r2, [r3, #0]
	}
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000228 	.word	0x20000228
 8001864:	20000240 	.word	0x20000240
 8001868:	20000238 	.word	0x20000238
 800186c:	200001fe 	.word	0x200001fe
 8001870:	200001fc 	.word	0x200001fc
 8001874:	200001d8 	.word	0x200001d8
 8001878:	200001d9 	.word	0x200001d9
 800187c:	20000000 	.word	0x20000000
 8001880:	200001ec 	.word	0x200001ec
 8001884:	200001dc 	.word	0x200001dc
 8001888:	200001da 	.word	0x200001da
 800188c:	200001db 	.word	0x200001db
 8001890:	20000208 	.word	0x20000208
 8001894:	20000230 	.word	0x20000230
 8001898:	20000241 	.word	0x20000241
 800189c:	2000023c 	.word	0x2000023c
 80018a0:	20000231 	.word	0x20000231
 80018a4:	20000239 	.word	0x20000239
 80018a8:	200001fd 	.word	0x200001fd

080018ac <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	460a      	mov	r2, r1
 80018b6:	71fb      	strb	r3, [r7, #7]
 80018b8:	4613      	mov	r3, r2
 80018ba:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 80018bc:	79ba      	ldrb	r2, [r7, #6]
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	3301      	adds	r3, #1
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d101      	bne.n	80018ca <obtener_orientacion_futura+0x1e>
		return oeste;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e015      	b.n	80018f6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 80018ca:	79ba      	ldrb	r2, [r7, #6]
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d101      	bne.n	80018d8 <obtener_orientacion_futura+0x2c>
		return este;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e00e      	b.n	80018f6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 80018d8:	79ba      	ldrb	r2, [r7, #6]
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	3304      	adds	r3, #4
 80018de:	429a      	cmp	r2, r3
 80018e0:	d101      	bne.n	80018e6 <obtener_orientacion_futura+0x3a>
		return norte;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e007      	b.n	80018f6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 80018e6:	79ba      	ldrb	r2, [r7, #6]
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	3b04      	subs	r3, #4
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d101      	bne.n	80018f4 <obtener_orientacion_futura+0x48>
		return sur;
 80018f0:	2302      	movs	r3, #2
 80018f2:	e000      	b.n	80018f6 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 80018f4:	2364      	movs	r3, #100	@ 0x64
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8001914:	79ba      	ldrb	r2, [r7, #6]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	3304      	adds	r3, #4
 800191c:	425a      	negs	r2, r3
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	f002 0203 	and.w	r2, r2, #3
 8001926:	bf58      	it	pl
 8001928:	4253      	negpl	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d812      	bhi.n	8001958 <obtenerGiro+0x54>
 8001932:	a201      	add	r2, pc, #4	@ (adr r2, 8001938 <obtenerGiro+0x34>)
 8001934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001938:	08001949 	.word	0x08001949
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001951 	.word	0x08001951
 8001944:	08001955 	.word	0x08001955
	case 0:
		return adelante;
 8001948:	2300      	movs	r3, #0
 800194a:	e006      	b.n	800195a <obtenerGiro+0x56>
	case 1:
		return derecha;
 800194c:	2302      	movs	r3, #2
 800194e:	e004      	b.n	800195a <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8001950:	2303      	movs	r3, #3
 8001952:	e002      	b.n	800195a <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <obtenerGiro+0x56>
	default:
		return 100; // Error
 8001958:	2364      	movs	r3, #100	@ 0x64
	}
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	4613      	mov	r3, r2
 8001976:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d81a      	bhi.n	80019b4 <act_ubicacion+0x4c>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <act_ubicacion+0x1c>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	08001995 	.word	0x08001995
 8001988:	0800199d 	.word	0x0800199d
 800198c:	080019a5 	.word	0x080019a5
 8001990:	080019ad 	.word	0x080019ad
	case 0:
		return ubicacion + 4;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3304      	adds	r3, #4
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e00c      	b.n	80019b6 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3b01      	subs	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e008      	b.n	80019b6 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	3b04      	subs	r3, #4
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e004      	b.n	80019b6 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	e000      	b.n	80019b6 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 80019b4:	2364      	movs	r3, #100	@ 0x64
	}
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop

080019c4 <promediar>:

void promediar(uint16_t *buffer) {
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019d4:	2300      	movs	r3, #0
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e012      	b.n	8001a00 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4413      	add	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3302      	adds	r3, #2
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4413      	add	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3301      	adds	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	dde9      	ble.n	80019da <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <promediar+0x64>)
 8001a0e:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <promediar+0x68>)
 8001a18:	801a      	strh	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	371c      	adds	r7, #28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	200002c4 	.word	0x200002c4
 8001a2c:	200002c6 	.word	0x200002c6

08001a30 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001a38:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001a3a:	f7ff ffc3 	bl	80019c4 <promediar>
}
 8001a3e:	bf00      	nop
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000244 	.word	0x20000244

08001a4c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8001a54:	4803      	ldr	r0, [pc, #12]	@ (8001a64 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a56:	f7ff ffb5 	bl	80019c4 <promediar>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000284 	.word	0x20000284

08001a68 <avanzar>:
		apagar_derecha();
	} else {
		avanzar();
	}
}
void avanzar(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a72:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <avanzar+0x48>)
 8001a74:	f002 fb46 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <avanzar+0x48>)
 8001a80:	f002 fb40 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a8a:	4809      	ldr	r0, [pc, #36]	@ (8001ab0 <avanzar+0x48>)
 8001a8c:	f002 fb3a 	bl	8004104 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a96:	4806      	ldr	r0, [pc, #24]	@ (8001ab0 <avanzar+0x48>)
 8001a98:	f002 fb34 	bl	8004104 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <avanzar+0x4c>)
 8001a9e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001aa4:	4b03      	ldr	r3, [pc, #12]	@ (8001ab4 <avanzar+0x4c>)
 8001aa6:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 8001aaa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40000400 	.word	0x40000400

08001ab8 <mini_retroceso>:
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
}

void mini_retroceso(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001abc:	2002      	movs	r0, #2
 8001abe:	f000 f8a9 	bl	8001c14 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f000 f8d8 	bl	8001c78 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001ac8:	2064      	movs	r0, #100	@ 0x64
 8001aca:	f001 f82d 	bl	8002b28 <HAL_Delay>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <mini_avance>:
void mini_avance(void) {
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 f89c 	bl	8001c14 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f000 f8cb 	bl	8001c78 <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001ae2:	2096      	movs	r0, #150	@ 0x96
 8001ae4:	f001 f820 	bl	8002b28 <HAL_Delay>
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}

08001aec <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	f200 8084 	bhi.w	8001c06 <ejecutarGiro+0x11a>
 8001afe:	a201      	add	r2, pc, #4	@ (adr r2, 8001b04 <ejecutarGiro+0x18>)
 8001b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b7d 	.word	0x08001b7d
 8001b0c:	08001b1b 	.word	0x08001b1b
 8001b10:	08001be1 	.word	0x08001be1
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001b14:	f7ff ffdd 	bl	8001ad2 <mini_avance>
		break;
 8001b18:	e075      	b.n	8001c06 <ejecutarGiro+0x11a>
	case derecha:
		if (contador_giros == 0) {
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d119      	bne.n	8001b56 <ejecutarGiro+0x6a>
			contador_giros = contador_giros + 1;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	4b39      	ldr	r3, [pc, #228]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b2c:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 f870 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f000 f89f 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001b3a:	200a      	movs	r0, #10
 8001b3c:	f000 fff4 	bl	8002b28 <HAL_Delay>
			;
			setMotorIzquierdo(avance);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f000 f867 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001b46:	2002      	movs	r0, #2
 8001b48:	f000 f896 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_der);
 8001b4c:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001b50:	f000 ffea 	bl	8002b28 <HAL_Delay>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
//			mini_avance();
		}
		break;
 8001b54:	e057      	b.n	8001c06 <ejecutarGiro+0x11a>
			contador_giros = contador_giros + 1;
 8001b56:	4b2e      	ldr	r3, [pc, #184]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b60:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001b62:	f7ff ffa9 	bl	8001ab8 <mini_retroceso>
			setMotorIzquierdo(avance);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f854 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f000 f883 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001b72:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001b76:	f000 ffd7 	bl	8002b28 <HAL_Delay>
		break;
 8001b7a:	e044      	b.n	8001c06 <ejecutarGiro+0x11a>
	case izquierda:
		if (contador_giros == 0) {
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <ejecutarGiro+0xcc>
			contador_giros = contador_giros + 1;
 8001b84:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <ejecutarGiro+0x124>)
 8001b8e:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f000 f83f 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001b96:	2001      	movs	r0, #1
 8001b98:	f000 f86e 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f000 ffc3 	bl	8002b28 <HAL_Delay>

			setMotorIzquierdo(retroceso);
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f000 f836 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f000 f865 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_izq);
 8001bae:	f240 209e 	movw	r0, #670	@ 0x29e
 8001bb2:	f000 ffb9 	bl	8002b28 <HAL_Delay>
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			/*			mini_avance();
			 */
		}
		break;
 8001bb6:	e026      	b.n	8001c06 <ejecutarGiro+0x11a>
			contador_giros = contador_giros + 1;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <ejecutarGiro+0x124>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <ejecutarGiro+0x124>)
 8001bc2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001bc4:	200a      	movs	r0, #10
 8001bc6:	f000 ffaf 	bl	8002b28 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f000 f822 	bl	8001c14 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 f851 	bl	8001c78 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001bd6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001bda:	f000 ffa5 	bl	8002b28 <HAL_Delay>
		break;
 8001bde:	e012      	b.n	8001c06 <ejecutarGiro+0x11a>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <ejecutarGiro+0x124>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <ejecutarGiro+0x124>)
 8001bea:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 f811 	bl	8001c14 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f000 f840 	bl	8001c78 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001bf8:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001bfc:	f000 ff94 	bl	8002b28 <HAL_Delay>
		mini_avance();
 8001c00:	f7ff ff67 	bl	8001ad2 <mini_avance>
		break;
 8001c04:	bf00      	nop

	}
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001fe 	.word	0x200001fe

08001c14 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <setMotorIzquierdo+0x5c>)
 8001c20:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c24:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d002      	beq.n	8001c32 <setMotorIzquierdo+0x1e>
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d00d      	beq.n	8001c4c <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001c30:	e019      	b.n	8001c66 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c38:	480e      	ldr	r0, [pc, #56]	@ (8001c74 <setMotorIzquierdo+0x60>)
 8001c3a:	f002 fa63 	bl	8004104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c44:	480b      	ldr	r0, [pc, #44]	@ (8001c74 <setMotorIzquierdo+0x60>)
 8001c46:	f002 fa5d 	bl	8004104 <HAL_GPIO_WritePin>
		break;
 8001c4a:	e00c      	b.n	8001c66 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c52:	4808      	ldr	r0, [pc, #32]	@ (8001c74 <setMotorIzquierdo+0x60>)
 8001c54:	f002 fa56 	bl	8004104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <setMotorIzquierdo+0x60>)
 8001c60:	f002 fa50 	bl	8004104 <HAL_GPIO_WritePin>
		break;
 8001c64:	bf00      	nop
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40020400 	.word	0x40020400

08001c78 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <setMotorDerecho+0x5c>)
 8001c84:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d002      	beq.n	8001c96 <setMotorDerecho+0x1e>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d00d      	beq.n	8001cb0 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001c94:	e019      	b.n	8001cca <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c9c:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <setMotorDerecho+0x60>)
 8001c9e:	f002 fa31 	bl	8004104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <setMotorDerecho+0x60>)
 8001caa:	f002 fa2b 	bl	8004104 <HAL_GPIO_WritePin>
		break;
 8001cae:	e00c      	b.n	8001cca <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cb6:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <setMotorDerecho+0x60>)
 8001cb8:	f002 fa24 	bl	8004104 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <setMotorDerecho+0x60>)
 8001cc4:	f002 fa1e 	bl	8004104 <HAL_GPIO_WritePin>
		break;
 8001cc8:	bf00      	nop
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40020400 	.word	0x40020400

08001cdc <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001cec:	78bb      	ldrb	r3, [r7, #2]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d83a      	bhi.n	8001d68 <act_pared+0x8c>
 8001cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf8 <act_pared+0x1c>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d21 	.word	0x08001d21
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d51 	.word	0x08001d51
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	440b      	add	r3, r1
 8001d16:	f042 0208 	orr.w	r2, r2, #8
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]
		break;
 8001d1e:	e025      	b.n	8001d6c <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f042 0204 	orr.w	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	701a      	strb	r2, [r3, #0]
		break;
 8001d36:	e019      	b.n	8001d6c <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	781a      	ldrb	r2, [r3, #0]
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	440b      	add	r3, r1
 8001d46:	f042 0202 	orr.w	r2, r2, #2
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	701a      	strb	r2, [r3, #0]
		break;
 8001d4e:	e00d      	b.n	8001d6c <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
		break;
 8001d66:	e001      	b.n	8001d6c <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001d68:	2300      	movs	r3, #0
 8001d6a:	e003      	b.n	8001d74 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	781b      	ldrb	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e08b      	b.n	8001ea8 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e081      	b.n	8001e9a <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001d96:	2364      	movs	r3, #100	@ 0x64
 8001d98:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	dc15      	bgt.n	8001dcc <act_pesos+0x4c>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3304      	adds	r3, #4
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	7dfa      	ldrb	r2, [r7, #23]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d905      	bls.n	8001dcc <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d01e      	beq.n	8001e10 <act_pesos+0x90>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d01b      	beq.n	8001e10 <act_pesos+0x90>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b0b      	cmp	r3, #11
 8001ddc:	d018      	beq.n	8001e10 <act_pesos+0x90>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d015      	beq.n	8001e10 <act_pesos+0x90>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10d      	bne.n	8001e10 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3301      	adds	r3, #1
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	7dfa      	ldrb	r2, [r7, #23]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d905      	bls.n	8001e10 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	dd15      	ble.n	8001e42 <act_pesos+0xc2>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3b04      	subs	r3, #4
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	7dfa      	ldrb	r2, [r7, #23]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d905      	bls.n	8001e42 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3b04      	subs	r3, #4
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d119      	bne.n	8001e86 <act_pesos+0x106>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d016      	beq.n	8001e86 <act_pesos+0x106>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d013      	beq.n	8001e86 <act_pesos+0x106>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d010      	beq.n	8001e86 <act_pesos+0x106>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d00d      	beq.n	8001e86 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	7dfa      	ldrb	r2, [r7, #23]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d905      	bls.n	8001e86 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	7dfa      	ldrb	r2, [r7, #23]
 8001e8e:	3201      	adds	r2, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b0e      	cmp	r3, #14
 8001e9e:	f77f af7a 	ble.w	8001d96 <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0e      	cmp	r3, #14
 8001eac:	f77f af70 	ble.w	8001d90 <act_pesos+0x10>
		}
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 8001ed6:	230f      	movs	r3, #15
 8001ed8:	75fb      	strb	r3, [r7, #23]
	if (ubicacion == 15) {
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d105      	bne.n	8001eec <calculo_minimo_peso+0x2c>
		casilla_n = 15;
 8001ee0:	4b97      	ldr	r3, [pc, #604]	@ (8002140 <calculo_minimo_peso+0x280>)
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	701a      	strb	r2, [r3, #0]
		return casilla_n;
 8001ee6:	4b96      	ldr	r3, [pc, #600]	@ (8002140 <calculo_minimo_peso+0x280>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	e246      	b.n	800237a <calculo_minimo_peso+0x4ba>
	} else
		switch (orientacion_actual) {
 8001eec:	79bb      	ldrb	r3, [r7, #6]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	f200 8242 	bhi.w	8002378 <calculo_minimo_peso+0x4b8>
 8001ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8001efc <calculo_minimo_peso+0x3c>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	0800225f 	.word	0x0800225f
 8001f04:	08002027 	.word	0x08002027
 8001f08:	08002145 	.word	0x08002145
		case norte:
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	7dfa      	ldrb	r2, [r7, #23]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d915      	bls.n	8001f48 <calculo_minimo_peso+0x88>
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	4413      	add	r3, r2
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10d      	bne.n	8001f48 <calculo_minimo_peso+0x88>
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b0b      	cmp	r3, #11
 8001f30:	d80a      	bhi.n	8001f48 <calculo_minimo_peso+0x88>
				minimo_peso = peso[ubicacion + 4];
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	3304      	adds	r3, #4
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	3304      	adds	r3, #4
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <calculo_minimo_peso+0x280>)
 8001f46:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	7dfa      	ldrb	r2, [r7, #23]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d91e      	bls.n	8001f96 <calculo_minimo_peso+0xd6>
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d116      	bne.n	8001f96 <calculo_minimo_peso+0xd6>
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d013      	beq.n	8001f96 <calculo_minimo_peso+0xd6>
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d010      	beq.n	8001f96 <calculo_minimo_peso+0xd6>
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b0b      	cmp	r3, #11
 8001f78:	d00d      	beq.n	8001f96 <calculo_minimo_peso+0xd6>
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b0f      	cmp	r3, #15
 8001f7e:	d00a      	beq.n	8001f96 <calculo_minimo_peso+0xd6>
				minimo_peso = peso[ubicacion + 1];
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	3301      	adds	r3, #1
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b6b      	ldr	r3, [pc, #428]	@ (8002140 <calculo_minimo_peso+0x280>)
 8001f94:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	7dfa      	ldrb	r2, [r7, #23]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d91e      	bls.n	8001fe4 <calculo_minimo_peso+0x124>
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <calculo_minimo_peso+0x124>
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d013      	beq.n	8001fe4 <calculo_minimo_peso+0x124>
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b07      	cmp	r3, #7
 8001fc0:	d010      	beq.n	8001fe4 <calculo_minimo_peso+0x124>
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b0b      	cmp	r3, #11
 8001fc6:	d00d      	beq.n	8001fe4 <calculo_minimo_peso+0x124>
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b0f      	cmp	r3, #15
 8001fcc:	d00a      	beq.n	8001fe4 <calculo_minimo_peso+0x124>
				minimo_peso = peso[ubicacion - 1];
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <calculo_minimo_peso+0x280>)
 8001fe2:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	7dfa      	ldrb	r2, [r7, #23]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d915      	bls.n	8002020 <calculo_minimo_peso+0x160>
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <calculo_minimo_peso+0x160>
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d90a      	bls.n	8002020 <calculo_minimo_peso+0x160>
				minimo_peso = peso[ubicacion - 4];
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	3b04      	subs	r3, #4
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	3b04      	subs	r3, #4
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b48      	ldr	r3, [pc, #288]	@ (8002140 <calculo_minimo_peso+0x280>)
 800201e:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002020:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <calculo_minimo_peso+0x280>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	e1a9      	b.n	800237a <calculo_minimo_peso+0x4ba>
			break;
		case sur:
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	3b04      	subs	r3, #4
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4413      	add	r3, r2
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	7dfa      	ldrb	r2, [r7, #23]
 8002032:	429a      	cmp	r2, r3
 8002034:	d915      	bls.n	8002062 <calculo_minimo_peso+0x1a2>
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <calculo_minimo_peso+0x1a2>
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d90a      	bls.n	8002062 <calculo_minimo_peso+0x1a2>
				minimo_peso = peso[ubicacion - 4];
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	3b04      	subs	r3, #4
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	3b04      	subs	r3, #4
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <calculo_minimo_peso+0x280>)
 8002060:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	3301      	adds	r3, #1
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	7dfa      	ldrb	r2, [r7, #23]
 800206e:	429a      	cmp	r2, r3
 8002070:	d91e      	bls.n	80020b0 <calculo_minimo_peso+0x1f0>
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4413      	add	r3, r2
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d116      	bne.n	80020b0 <calculo_minimo_peso+0x1f0>
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d013      	beq.n	80020b0 <calculo_minimo_peso+0x1f0>
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b07      	cmp	r3, #7
 800208c:	d010      	beq.n	80020b0 <calculo_minimo_peso+0x1f0>
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b0b      	cmp	r3, #11
 8002092:	d00d      	beq.n	80020b0 <calculo_minimo_peso+0x1f0>
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b0f      	cmp	r3, #15
 8002098:	d00a      	beq.n	80020b0 <calculo_minimo_peso+0x1f0>
				minimo_peso = peso[ubicacion + 1];
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	3301      	adds	r3, #1
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4413      	add	r3, r2
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	3301      	adds	r3, #1
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <calculo_minimo_peso+0x280>)
 80020ae:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	7dfa      	ldrb	r2, [r7, #23]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d91e      	bls.n	80020fe <calculo_minimo_peso+0x23e>
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d116      	bne.n	80020fe <calculo_minimo_peso+0x23e>
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d013      	beq.n	80020fe <calculo_minimo_peso+0x23e>
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	2b07      	cmp	r3, #7
 80020da:	d010      	beq.n	80020fe <calculo_minimo_peso+0x23e>
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b0b      	cmp	r3, #11
 80020e0:	d00d      	beq.n	80020fe <calculo_minimo_peso+0x23e>
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	2b0f      	cmp	r3, #15
 80020e6:	d00a      	beq.n	80020fe <calculo_minimo_peso+0x23e>
				minimo_peso = peso[ubicacion - 1];
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <calculo_minimo_peso+0x280>)
 80020fc:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	3304      	adds	r3, #4
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	7dfa      	ldrb	r2, [r7, #23]
 800210a:	429a      	cmp	r2, r3
 800210c:	d915      	bls.n	800213a <calculo_minimo_peso+0x27a>
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4413      	add	r3, r2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <calculo_minimo_peso+0x27a>
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b0b      	cmp	r3, #11
 8002122:	d80a      	bhi.n	800213a <calculo_minimo_peso+0x27a>
				minimo_peso = peso[ubicacion + 4];
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	3304      	adds	r3, #4
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	3304      	adds	r3, #4
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b02      	ldr	r3, [pc, #8]	@ (8002140 <calculo_minimo_peso+0x280>)
 8002138:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 800213a:	4b01      	ldr	r3, [pc, #4]	@ (8002140 <calculo_minimo_peso+0x280>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	e11c      	b.n	800237a <calculo_minimo_peso+0x4ba>
 8002140:	20000000 	.word	0x20000000
			break;
		case oeste:
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	3301      	adds	r3, #1
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	7dfa      	ldrb	r2, [r7, #23]
 8002150:	429a      	cmp	r2, r3
 8002152:	d91e      	bls.n	8002192 <calculo_minimo_peso+0x2d2>
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <calculo_minimo_peso+0x2d2>
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d013      	beq.n	8002192 <calculo_minimo_peso+0x2d2>
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	2b07      	cmp	r3, #7
 800216e:	d010      	beq.n	8002192 <calculo_minimo_peso+0x2d2>
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b0b      	cmp	r3, #11
 8002174:	d00d      	beq.n	8002192 <calculo_minimo_peso+0x2d2>
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b0f      	cmp	r3, #15
 800217a:	d00a      	beq.n	8002192 <calculo_minimo_peso+0x2d2>
				minimo_peso = peso[ubicacion + 1];
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	3301      	adds	r3, #1
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3301      	adds	r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b7e      	ldr	r3, [pc, #504]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002190:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	3304      	adds	r3, #4
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	7dfa      	ldrb	r2, [r7, #23]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d915      	bls.n	80021ce <calculo_minimo_peso+0x30e>
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <calculo_minimo_peso+0x30e>
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b0b      	cmp	r3, #11
 80021b6:	d80a      	bhi.n	80021ce <calculo_minimo_peso+0x30e>
				minimo_peso = peso[ubicacion + 4];
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	3304      	adds	r3, #4
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	3304      	adds	r3, #4
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 80021cc:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	3b04      	subs	r3, #4
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	7dfa      	ldrb	r2, [r7, #23]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d915      	bls.n	800220a <calculo_minimo_peso+0x34a>
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10d      	bne.n	800220a <calculo_minimo_peso+0x34a>
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d90a      	bls.n	800220a <calculo_minimo_peso+0x34a>
				minimo_peso = peso[ubicacion - 4];
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	3b04      	subs	r3, #4
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	3b04      	subs	r3, #4
 8002204:	b2da      	uxtb	r2, r3
 8002206:	4b60      	ldr	r3, [pc, #384]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002208:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	3b01      	subs	r3, #1
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	7dfa      	ldrb	r2, [r7, #23]
 8002216:	429a      	cmp	r2, r3
 8002218:	d91e      	bls.n	8002258 <calculo_minimo_peso+0x398>
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d116      	bne.n	8002258 <calculo_minimo_peso+0x398>
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b03      	cmp	r3, #3
 800222e:	d013      	beq.n	8002258 <calculo_minimo_peso+0x398>
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	2b07      	cmp	r3, #7
 8002234:	d010      	beq.n	8002258 <calculo_minimo_peso+0x398>
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b0b      	cmp	r3, #11
 800223a:	d00d      	beq.n	8002258 <calculo_minimo_peso+0x398>
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b0f      	cmp	r3, #15
 8002240:	d00a      	beq.n	8002258 <calculo_minimo_peso+0x398>
				minimo_peso = peso[ubicacion - 1];
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	3b01      	subs	r3, #1
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3b01      	subs	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002256:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002258:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	e08d      	b.n	800237a <calculo_minimo_peso+0x4ba>
			break;
		case este:
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	3b01      	subs	r3, #1
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	7dfa      	ldrb	r2, [r7, #23]
 800226a:	429a      	cmp	r2, r3
 800226c:	d91e      	bls.n	80022ac <calculo_minimo_peso+0x3ec>
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <calculo_minimo_peso+0x3ec>
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d013      	beq.n	80022ac <calculo_minimo_peso+0x3ec>
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	2b07      	cmp	r3, #7
 8002288:	d010      	beq.n	80022ac <calculo_minimo_peso+0x3ec>
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	2b0b      	cmp	r3, #11
 800228e:	d00d      	beq.n	80022ac <calculo_minimo_peso+0x3ec>
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d00a      	beq.n	80022ac <calculo_minimo_peso+0x3ec>
				minimo_peso = peso[ubicacion - 1];
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	3b01      	subs	r3, #1
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4413      	add	r3, r2
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 80022aa:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	3304      	adds	r3, #4
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	7dfa      	ldrb	r2, [r7, #23]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d915      	bls.n	80022e8 <calculo_minimo_peso+0x428>
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <calculo_minimo_peso+0x428>
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	2b0b      	cmp	r3, #11
 80022d0:	d80a      	bhi.n	80022e8 <calculo_minimo_peso+0x428>
				minimo_peso = peso[ubicacion + 4];
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	3304      	adds	r3, #4
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4413      	add	r3, r2
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	3304      	adds	r3, #4
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b28      	ldr	r3, [pc, #160]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 80022e6:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	3b04      	subs	r3, #4
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	7dfa      	ldrb	r2, [r7, #23]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d915      	bls.n	8002324 <calculo_minimo_peso+0x464>
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <calculo_minimo_peso+0x464>
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d90a      	bls.n	8002324 <calculo_minimo_peso+0x464>
				minimo_peso = peso[ubicacion - 4];
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	3b04      	subs	r3, #4
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4413      	add	r3, r2
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	3b04      	subs	r3, #4
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002322:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	3301      	adds	r3, #1
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4413      	add	r3, r2
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	7dfa      	ldrb	r2, [r7, #23]
 8002330:	429a      	cmp	r2, r3
 8002332:	d91e      	bls.n	8002372 <calculo_minimo_peso+0x4b2>
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	4413      	add	r3, r2
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d116      	bne.n	8002372 <calculo_minimo_peso+0x4b2>
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d013      	beq.n	8002372 <calculo_minimo_peso+0x4b2>
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b07      	cmp	r3, #7
 800234e:	d010      	beq.n	8002372 <calculo_minimo_peso+0x4b2>
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b0b      	cmp	r3, #11
 8002354:	d00d      	beq.n	8002372 <calculo_minimo_peso+0x4b2>
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	2b0f      	cmp	r3, #15
 800235a:	d00a      	beq.n	8002372 <calculo_minimo_peso+0x4b2>
				minimo_peso = peso[ubicacion + 1];
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	3301      	adds	r3, #1
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002370:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002372:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <calculo_minimo_peso+0x4c8>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	e000      	b.n	800237a <calculo_minimo_peso+0x4ba>
			break;
		default:
			return 100;
 8002378:	2364      	movs	r3, #100	@ 0x64
		}
}
 800237a:	4618      	mov	r0, r3
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000000 	.word	0x20000000

0800238c <filtrado_pared_funcion>:
void filtrado_pared_funcion(void) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 8002392:	f000 fbbd 	bl	8002b10 <HAL_GetTick>
 8002396:	6078      	str	r0, [r7, #4]
	if (200 <= (tiempo_actual - tiempo_inicio) /*&& (girando == 0)*/) {
 8002398:	4b0c      	ldr	r3, [pc, #48]	@ (80023cc <filtrado_pared_funcion+0x40>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80023a2:	d90e      	bls.n	80023c2 <filtrado_pared_funcion+0x36>
		GPIO_PinState estado_sensor = HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port,
 80023a4:	2140      	movs	r1, #64	@ 0x40
 80023a6:	480a      	ldr	r0, [pc, #40]	@ (80023d0 <filtrado_pared_funcion+0x44>)
 80023a8:	f001 fe94 	bl	80040d4 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	70fb      	strb	r3, [r7, #3]
		sensor_frontal_Pin);
		if (GPIO_PIN_RESET == estado_sensor) {
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <filtrado_pared_funcion+0x30>
			solicitud_pared = 1;
 80023b6:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <filtrado_pared_funcion+0x48>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
		filtrado_pared = 0;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <filtrado_pared_funcion+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
	}
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000022c 	.word	0x2000022c
 80023d0:	40020800 	.word	0x40020800
 80023d4:	20000230 	.word	0x20000230
 80023d8:	20000231 	.word	0x20000231

080023dc <filtrado_linea_funcion>:
void filtrado_linea_funcion(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual_2 = HAL_GetTick();
 80023e2:	f000 fb95 	bl	8002b10 <HAL_GetTick>
 80023e6:	6078      	str	r0, [r7, #4]
	if (tiempo_rebotes <= (tiempo_actual_2 - tiempo_inicio_2)) {
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <filtrado_linea_funcion+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b1d      	cmp	r3, #29
 80023f2:	d90e      	bls.n	8002412 <filtrado_linea_funcion+0x36>
		GPIO_PinState estado_sensor_2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port,
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	480a      	ldr	r0, [pc, #40]	@ (8002420 <filtrado_linea_funcion+0x44>)
 80023f8:	f001 fe6c 	bl	80040d4 <HAL_GPIO_ReadPin>
 80023fc:	4603      	mov	r3, r0
 80023fe:	70fb      	strb	r3, [r7, #3]
		sensor_linea_Pin);
		if (GPIO_PIN_RESET == estado_sensor_2) {
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <filtrado_linea_funcion+0x30>
			solicitud_linea = 1;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <filtrado_linea_funcion+0x48>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
		}
		filtrado_linea = 0;
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <filtrado_linea_funcion+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	}
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000234 	.word	0x20000234
 8002420:	40020800 	.word	0x40020800
 8002424:	20000238 	.word	0x20000238
 8002428:	20000239 	.word	0x20000239

0800242c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == sensor_frontal_Pin) && (filtrado_pared == 0) && (girando == 0)) {
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d110      	bne.n	800245e <HAL_GPIO_EXTI_Callback+0x32>
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_GPIO_EXTI_Callback+0x5c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_GPIO_EXTI_Callback+0x32>
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_GPIO_EXTI_Callback+0x60>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d107      	bne.n	800245e <HAL_GPIO_EXTI_Callback+0x32>
		tiempo_inicio = HAL_GetTick();
 800244e:	f000 fb5f 	bl	8002b10 <HAL_GetTick>
 8002452:	4603      	mov	r3, r0
 8002454:	4a0e      	ldr	r2, [pc, #56]	@ (8002490 <HAL_GPIO_EXTI_Callback+0x64>)
 8002456:	6013      	str	r3, [r2, #0]
		filtrado_pared = 1;
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_GPIO_EXTI_Callback+0x5c>)
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
	}
	if ((GPIO_Pin == sensor_linea_Pin) && (filtrado_linea == 0)) {
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	2b80      	cmp	r3, #128	@ 0x80
 8002462:	d10c      	bne.n	800247e <HAL_GPIO_EXTI_Callback+0x52>
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x68>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d107      	bne.n	800247e <HAL_GPIO_EXTI_Callback+0x52>
		tiempo_inicio_2 = HAL_GetTick();
 800246e:	f000 fb4f 	bl	8002b10 <HAL_GetTick>
 8002472:	4603      	mov	r3, r0
 8002474:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002476:	6013      	str	r3, [r2, #0]
		filtrado_linea = 1;
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <HAL_GPIO_EXTI_Callback+0x68>)
 800247a:	2201      	movs	r2, #1
 800247c:	701a      	strb	r2, [r3, #0]
	}
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000231 	.word	0x20000231
 800248c:	20000228 	.word	0x20000228
 8002490:	2000022c 	.word	0x2000022c
 8002494:	20000239 	.word	0x20000239
 8002498:	20000234 	.word	0x20000234

0800249c <envio_ubicacion>:

void envio_ubicacion(uint8_t ubicacion, uint8_t casilla_n) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	460a      	mov	r2, r1
 80024a6:	71fb      	strb	r3, [r7, #7]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion) {
 80024ac:	79ba      	ldrb	r2, [r7, #6]
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d117      	bne.n	80024e4 <envio_ubicacion+0x48>
		sprintf(mensaje, "%d", ubicacion);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	461a      	mov	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <envio_ubicacion+0x50>)
 80024ba:	480d      	ldr	r0, [pc, #52]	@ (80024f0 <envio_ubicacion+0x54>)
 80024bc:	f004 f990 	bl	80067e0 <siprintf>
		strcat(mensaje, "\r\n");
 80024c0:	480b      	ldr	r0, [pc, #44]	@ (80024f0 <envio_ubicacion+0x54>)
 80024c2:	f7fd fe85 	bl	80001d0 <strlen>
 80024c6:	4603      	mov	r3, r0
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <envio_ubicacion+0x54>)
 80024cc:	4413      	add	r3, r2
 80024ce:	4a09      	ldr	r2, [pc, #36]	@ (80024f4 <envio_ubicacion+0x58>)
 80024d0:	8811      	ldrh	r1, [r2, #0]
 80024d2:	7892      	ldrb	r2, [r2, #2]
 80024d4:	8019      	strh	r1, [r3, #0]
 80024d6:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80024d8:	2332      	movs	r3, #50	@ 0x32
 80024da:	2220      	movs	r2, #32
 80024dc:	4904      	ldr	r1, [pc, #16]	@ (80024f0 <envio_ubicacion+0x54>)
 80024de:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <envio_ubicacion+0x5c>)
 80024e0:	f003 f9b6 	bl	8005850 <HAL_UART_Transmit>
	}

}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	08007138 	.word	0x08007138
 80024f0:	200001b8 	.word	0x200001b8
 80024f4:	0800713c 	.word	0x0800713c
 80024f8:	20000170 	.word	0x20000170

080024fc <envio_pared>:

void envio_pared(void) {
 80024fc:	b5b0      	push	{r4, r5, r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	strcat(mensaje, "Choque pared \r\n");
 8002500:	480b      	ldr	r0, [pc, #44]	@ (8002530 <envio_pared+0x34>)
 8002502:	f7fd fe65 	bl	80001d0 <strlen>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <envio_pared+0x34>)
 800250c:	4413      	add	r3, r2
 800250e:	4a09      	ldr	r2, [pc, #36]	@ (8002534 <envio_pared+0x38>)
 8002510:	461c      	mov	r4, r3
 8002512:	4615      	mov	r5, r2
 8002514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002516:	6020      	str	r0, [r4, #0]
 8002518:	6061      	str	r1, [r4, #4]
 800251a:	60a2      	str	r2, [r4, #8]
 800251c:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800251e:	2332      	movs	r3, #50	@ 0x32
 8002520:	2220      	movs	r2, #32
 8002522:	4903      	ldr	r1, [pc, #12]	@ (8002530 <envio_pared+0x34>)
 8002524:	4804      	ldr	r0, [pc, #16]	@ (8002538 <envio_pared+0x3c>)
 8002526:	f003 f993 	bl	8005850 <HAL_UART_Transmit>
}
 800252a:	bf00      	nop
 800252c:	bdb0      	pop	{r4, r5, r7, pc}
 800252e:	bf00      	nop
 8002530:	200001b8 	.word	0x200001b8
 8002534:	08007140 	.word	0x08007140
 8002538:	20000170 	.word	0x20000170

0800253c <envio_llegada>:

void envio_llegada(void) {
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	af00      	add	r7, sp, #0
	strcat(mensaje, "Llegue a la meta \r\n");
 8002540:	480c      	ldr	r0, [pc, #48]	@ (8002574 <envio_llegada+0x38>)
 8002542:	f7fd fe45 	bl	80001d0 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <envio_llegada+0x38>)
 800254c:	4413      	add	r3, r2
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <envio_llegada+0x3c>)
 8002550:	461d      	mov	r5, r3
 8002552:	4614      	mov	r4, r2
 8002554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002556:	6028      	str	r0, [r5, #0]
 8002558:	6069      	str	r1, [r5, #4]
 800255a:	60aa      	str	r2, [r5, #8]
 800255c:	60eb      	str	r3, [r5, #12]
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 8002562:	2332      	movs	r3, #50	@ 0x32
 8002564:	2220      	movs	r2, #32
 8002566:	4903      	ldr	r1, [pc, #12]	@ (8002574 <envio_llegada+0x38>)
 8002568:	4804      	ldr	r0, [pc, #16]	@ (800257c <envio_llegada+0x40>)
 800256a:	f003 f971 	bl	8005850 <HAL_UART_Transmit>
}
 800256e:	bf00      	nop
 8002570:	bdb0      	pop	{r4, r5, r7, pc}
 8002572:	bf00      	nop
 8002574:	200001b8 	.word	0x200001b8
 8002578:	08007150 	.word	0x08007150
 800257c:	20000170 	.word	0x20000170

08002580 <envio_casilla_n>:
void envio_casilla_n(uint8_t casilla_n) {
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	sprintf(mensaje, "%d", casilla_n);
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	461a      	mov	r2, r3
 800258e:	4910      	ldr	r1, [pc, #64]	@ (80025d0 <envio_casilla_n+0x50>)
 8002590:	4810      	ldr	r0, [pc, #64]	@ (80025d4 <envio_casilla_n+0x54>)
 8002592:	f004 f925 	bl	80067e0 <siprintf>
	strcat(mensaje, "Siguiente casilla: \r\n");
 8002596:	480f      	ldr	r0, [pc, #60]	@ (80025d4 <envio_casilla_n+0x54>)
 8002598:	f7fd fe1a 	bl	80001d0 <strlen>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <envio_casilla_n+0x54>)
 80025a2:	4413      	add	r3, r2
 80025a4:	4a0c      	ldr	r2, [pc, #48]	@ (80025d8 <envio_casilla_n+0x58>)
 80025a6:	461d      	mov	r5, r3
 80025a8:	4614      	mov	r4, r2
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	6028      	str	r0, [r5, #0]
 80025ae:	6069      	str	r1, [r5, #4]
 80025b0:	60aa      	str	r2, [r5, #8]
 80025b2:	60eb      	str	r3, [r5, #12]
 80025b4:	6820      	ldr	r0, [r4, #0]
 80025b6:	6128      	str	r0, [r5, #16]
 80025b8:	88a3      	ldrh	r3, [r4, #4]
 80025ba:	82ab      	strh	r3, [r5, #20]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80025bc:	2332      	movs	r3, #50	@ 0x32
 80025be:	2220      	movs	r2, #32
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <envio_casilla_n+0x54>)
 80025c2:	4806      	ldr	r0, [pc, #24]	@ (80025dc <envio_casilla_n+0x5c>)
 80025c4:	f003 f944 	bl	8005850 <HAL_UART_Transmit>
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	08007138 	.word	0x08007138
 80025d4:	200001b8 	.word	0x200001b8
 80025d8:	08007164 	.word	0x08007164
 80025dc:	20000170 	.word	0x20000170

080025e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e4:	b672      	cpsid	i
}
 80025e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <Error_Handler+0x8>

080025ec <HAL_MspInit>:
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_MspInit+0x4c>)
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002638 <HAL_MspInit+0x4c>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002600:	6453      	str	r3, [r2, #68]	@ 0x44
 8002602:	4b0d      	ldr	r3, [pc, #52]	@ (8002638 <HAL_MspInit+0x4c>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_MspInit+0x4c>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	4a08      	ldr	r2, [pc, #32]	@ (8002638 <HAL_MspInit+0x4c>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	@ 0x40
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_MspInit+0x4c>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2007      	movs	r0, #7
 800262c:	f000 ff72 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800

0800263c <HAL_ADC_MspInit>:
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	@ 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_ADC_MspInit+0xdc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d158      	bne.n	8002710 <HAL_ADC_MspInit+0xd4>
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b2e      	ldr	r3, [pc, #184]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002666:	4a2d      	ldr	r2, [pc, #180]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266c:	6453      	str	r3, [r2, #68]	@ 0x44
 800266e:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b27      	ldr	r3, [pc, #156]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	4a26      	ldr	r2, [pc, #152]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	6313      	str	r3, [r2, #48]	@ 0x30
 800268a:	4b24      	ldr	r3, [pc, #144]	@ (800271c <HAL_ADC_MspInit+0xe0>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2303      	movs	r3, #3
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	2303      	movs	r3, #3
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	481d      	ldr	r0, [pc, #116]	@ (8002720 <HAL_ADC_MspInit+0xe4>)
 80026aa:	f001 fb77 	bl	8003d9c <HAL_GPIO_Init>
 80026ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002728 <HAL_ADC_MspInit+0xec>)
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026cc:	611a      	str	r2, [r3, #16]
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80026d4:	615a      	str	r2, [r3, #20]
 80026d6:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026dc:	619a      	str	r2, [r3, #24]
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026e4:	61da      	str	r2, [r3, #28]
 80026e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026e8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026ec:	621a      	str	r2, [r3, #32]
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80026f4:	480b      	ldr	r0, [pc, #44]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 80026f6:	f000 ff4f 	bl	8003598 <HAL_DMA_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_ADC_MspInit+0xc8>
 8002700:	f7ff ff6e 	bl	80025e0 <Error_Handler>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38
 800270a:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <HAL_ADC_MspInit+0xe8>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	@ 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40012000 	.word	0x40012000
 800271c:	40023800 	.word	0x40023800
 8002720:	40020400 	.word	0x40020400
 8002724:	200000c8 	.word	0x200000c8
 8002728:	40026410 	.word	0x40026410

0800272c <HAL_TIM_Base_MspInit>:
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0b      	ldr	r2, [pc, #44]	@ (8002768 <HAL_TIM_Base_MspInit+0x3c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10d      	bne.n	800275a <HAL_TIM_Base_MspInit+0x2e>
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <HAL_TIM_Base_MspInit+0x40>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <HAL_TIM_Base_MspInit+0x40>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	6413      	str	r3, [r2, #64]	@ 0x40
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <HAL_TIM_Base_MspInit+0x40>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	40000400 	.word	0x40000400
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_TIM_MspPostInit>:
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	@ (80027d8 <HAL_TIM_MspPostInit+0x68>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11e      	bne.n	80027d0 <HAL_TIM_MspPostInit+0x60>
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_TIM_MspPostInit+0x6c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_TIM_MspPostInit+0x6c>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b0e      	ldr	r3, [pc, #56]	@ (80027dc <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	2302      	movs	r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	2300      	movs	r3, #0
 80027be:	61bb      	str	r3, [r7, #24]
 80027c0:	2302      	movs	r3, #2
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	4619      	mov	r1, r3
 80027ca:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <HAL_TIM_MspPostInit+0x70>)
 80027cc:	f001 fae6 	bl	8003d9c <HAL_GPIO_Init>
 80027d0:	bf00      	nop
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020800 	.word	0x40020800

080027e4 <HAL_UART_MspInit>:
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	@ 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a2c      	ldr	r2, [pc, #176]	@ (80028b4 <HAL_UART_MspInit+0xd0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d152      	bne.n	80028ac <HAL_UART_MspInit+0xc8>
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b2b      	ldr	r3, [pc, #172]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002810:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	4b28      	ldr	r3, [pc, #160]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	4a23      	ldr	r2, [pc, #140]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 800282c:	f043 0304 	orr.w	r3, r3, #4
 8002830:	6313      	str	r3, [r2, #48]	@ 0x30
 8002832:	4b21      	ldr	r3, [pc, #132]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b1d      	ldr	r3, [pc, #116]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	4a1c      	ldr	r2, [pc, #112]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002848:	f043 0308 	orr.w	r3, r3, #8
 800284c:	6313      	str	r3, [r2, #48]	@ 0x30
 800284e:	4b1a      	ldr	r3, [pc, #104]	@ (80028b8 <HAL_UART_MspInit+0xd4>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	2302      	movs	r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	2303      	movs	r3, #3
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	2308      	movs	r3, #8
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	4619      	mov	r1, r3
 8002876:	4811      	ldr	r0, [pc, #68]	@ (80028bc <HAL_UART_MspInit+0xd8>)
 8002878:	f001 fa90 	bl	8003d9c <HAL_GPIO_Init>
 800287c:	2304      	movs	r3, #4
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	2303      	movs	r3, #3
 800288a:	623b      	str	r3, [r7, #32]
 800288c:	2308      	movs	r3, #8
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	480a      	ldr	r0, [pc, #40]	@ (80028c0 <HAL_UART_MspInit+0xdc>)
 8002898:	f001 fa80 	bl	8003d9c <HAL_GPIO_Init>
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	2035      	movs	r0, #53	@ 0x35
 80028a2:	f000 fe42 	bl	800352a <HAL_NVIC_SetPriority>
 80028a6:	2035      	movs	r0, #53	@ 0x35
 80028a8:	f000 fe5b 	bl	8003562 <HAL_NVIC_EnableIRQ>
 80028ac:	bf00      	nop
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40005000 	.word	0x40005000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020800 	.word	0x40020800
 80028c0:	40020c00 	.word	0x40020c00

080028c4 <NMI_Handler>:
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	bf00      	nop
 80028ca:	e7fd      	b.n	80028c8 <NMI_Handler+0x4>

080028cc <HardFault_Handler>:
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <MemManage_Handler+0x4>

080028dc <BusFault_Handler>:
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <BusFault_Handler+0x4>

080028e4 <UsageFault_Handler>:
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <UsageFault_Handler+0x4>

080028ec <SVC_Handler>:
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DebugMon_Handler>:
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <PendSV_Handler>:
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <SysTick_Handler>:
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
 800291a:	f000 f8e5 	bl	8002ae8 <HAL_IncTick>
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}

08002922 <EXTI9_5_IRQHandler>:
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
 8002926:	2040      	movs	r0, #64	@ 0x40
 8002928:	f001 fc06 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
 800292c:	2080      	movs	r0, #128	@ 0x80
 800292e:	f001 fc03 	bl	8004138 <HAL_GPIO_EXTI_IRQHandler>
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <UART5_IRQHandler>:
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <UART5_IRQHandler+0x10>)
 800293e:	f003 f813 	bl	8005968 <HAL_UART_IRQHandler>
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000170 	.word	0x20000170

0800294c <DMA2_Stream0_IRQHandler>:
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <DMA2_Stream0_IRQHandler+0x10>)
 8002952:	f000 ffb9 	bl	80038c8 <HAL_DMA_IRQHandler>
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200000c8 	.word	0x200000c8

08002960 <_sbrk>:
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	4a14      	ldr	r2, [pc, #80]	@ (80029bc <_sbrk+0x5c>)
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <_sbrk+0x60>)
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	4b13      	ldr	r3, [pc, #76]	@ (80029c4 <_sbrk+0x64>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d102      	bne.n	8002982 <_sbrk+0x22>
 800297c:	4b11      	ldr	r3, [pc, #68]	@ (80029c4 <_sbrk+0x64>)
 800297e:	4a12      	ldr	r2, [pc, #72]	@ (80029c8 <_sbrk+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	429a      	cmp	r2, r3
 800298e:	d207      	bcs.n	80029a0 <_sbrk+0x40>
 8002990:	f003 ff50 	bl	8006834 <__errno>
 8002994:	4603      	mov	r3, r0
 8002996:	220c      	movs	r2, #12
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	e009      	b.n	80029b4 <_sbrk+0x54>
 80029a0:	4b08      	ldr	r3, [pc, #32]	@ (80029c4 <_sbrk+0x64>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <_sbrk+0x64>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4413      	add	r3, r2
 80029ae:	4a05      	ldr	r2, [pc, #20]	@ (80029c4 <_sbrk+0x64>)
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4618      	mov	r0, r3
 80029b6:	3718      	adds	r7, #24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20020000 	.word	0x20020000
 80029c0:	00000400 	.word	0x00000400
 80029c4:	200002c8 	.word	0x200002c8
 80029c8:	20000418 	.word	0x20000418

080029cc <SystemInit>:
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <SystemInit+0x20>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	4a05      	ldr	r2, [pc, #20]	@ (80029ec <SystemInit+0x20>)
 80029d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <Reset_Handler>:
 80029f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a28 <LoopFillZerobss+0xe>
 80029f4:	f7ff ffea 	bl	80029cc <SystemInit>
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <LoopFillZerobss+0x12>)
 80029fa:	490d      	ldr	r1, [pc, #52]	@ (8002a30 <LoopFillZerobss+0x16>)
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <LoopFillZerobss+0x1a>)
 80029fe:	2300      	movs	r3, #0
 8002a00:	e002      	b.n	8002a08 <LoopCopyDataInit>

08002a02 <CopyDataInit>:
 8002a02:	58d4      	ldr	r4, [r2, r3]
 8002a04:	50c4      	str	r4, [r0, r3]
 8002a06:	3304      	adds	r3, #4

08002a08 <LoopCopyDataInit>:
 8002a08:	18c4      	adds	r4, r0, r3
 8002a0a:	428c      	cmp	r4, r1
 8002a0c:	d3f9      	bcc.n	8002a02 <CopyDataInit>
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <LoopFillZerobss+0x1e>)
 8002a10:	4c0a      	ldr	r4, [pc, #40]	@ (8002a3c <LoopFillZerobss+0x22>)
 8002a12:	2300      	movs	r3, #0
 8002a14:	e001      	b.n	8002a1a <LoopFillZerobss>

08002a16 <FillZerobss>:
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	3204      	adds	r2, #4

08002a1a <LoopFillZerobss>:
 8002a1a:	42a2      	cmp	r2, r4
 8002a1c:	d3fb      	bcc.n	8002a16 <FillZerobss>
 8002a1e:	f003 ff0f 	bl	8006840 <__libc_init_array>
 8002a22:	f7fe f8c9 	bl	8000bb8 <main>
 8002a26:	4770      	bx	lr
 8002a28:	20020000 	.word	0x20020000
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000064 	.word	0x20000064
 8002a34:	080071e0 	.word	0x080071e0
 8002a38:	20000064 	.word	0x20000064
 8002a3c:	20000418 	.word	0x20000418

08002a40 <ADC_IRQHandler>:
 8002a40:	e7fe      	b.n	8002a40 <ADC_IRQHandler>
	...

08002a44 <HAL_Init>:
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <HAL_Init+0x40>)
 8002a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_Init+0x40>)
 8002a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_Init+0x40>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a07      	ldr	r2, [pc, #28]	@ (8002a84 <HAL_Init+0x40>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	f000 fd51 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f808 	bl	8002a88 <HAL_InitTick>
 8002a78:	f7ff fdb8 	bl	80025ec <HAL_MspInit>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023c00 	.word	0x40023c00

08002a88 <HAL_InitTick>:
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	4b12      	ldr	r3, [pc, #72]	@ (8002adc <HAL_InitTick+0x54>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_InitTick+0x58>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fd69 	bl	800357e <HAL_SYSTICK_Config>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_InitTick+0x2e>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00e      	b.n	8002ad4 <HAL_InitTick+0x4c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0f      	cmp	r3, #15
 8002aba:	d80a      	bhi.n	8002ad2 <HAL_InitTick+0x4a>
 8002abc:	2200      	movs	r2, #0
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f000 fd31 	bl	800352a <HAL_NVIC_SetPriority>
 8002ac8:	4a06      	ldr	r2, [pc, #24]	@ (8002ae4 <HAL_InitTick+0x5c>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_InitTick+0x4c>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000008 	.word	0x20000008
 8002ae0:	20000010 	.word	0x20000010
 8002ae4:	2000000c 	.word	0x2000000c

08002ae8 <HAL_IncTick>:
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <HAL_IncTick+0x20>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b06      	ldr	r3, [pc, #24]	@ (8002b0c <HAL_IncTick+0x24>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <HAL_IncTick+0x24>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000010 	.word	0x20000010
 8002b0c:	200002cc 	.word	0x200002cc

08002b10 <HAL_GetTick>:
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_GetTick+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	200002cc 	.word	0x200002cc

08002b28 <HAL_Delay>:
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	f7ff ffee 	bl	8002b10 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d005      	beq.n	8002b4e <HAL_Delay+0x26>
 8002b42:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_Delay+0x44>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	bf00      	nop
 8002b50:	f7ff ffde 	bl	8002b10 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d8f7      	bhi.n	8002b50 <HAL_Delay+0x28>
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000010 	.word	0x20000010

08002b70 <HAL_ADC_Init>:
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x16>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e033      	b.n	8002bee <HAL_ADC_Init+0x7e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_ADC_Init+0x32>
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fd54 	bl	800263c <HAL_ADC_MspInit>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d118      	bne.n	8002be0 <HAL_ADC_Init+0x70>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bb6:	f023 0302 	bic.w	r3, r3, #2
 8002bba:	f043 0202 	orr.w	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa58 	bl	8003078 <ADC_Init>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f023 0303 	bic.w	r3, r3, #3
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bde:	e001      	b.n	8002be4 <HAL_ADC_Init+0x74>
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_ADC_Start_DMA>:
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_ADC_Start_DMA+0x22>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0eb      	b.n	8002df2 <HAL_ADC_Start_DMA+0x1fa>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d018      	beq.n	8002c62 <HAL_ADC_Start_DMA+0x6a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	4b6e      	ldr	r3, [pc, #440]	@ (8002dfc <HAL_ADC_Start_DMA+0x204>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6e      	ldr	r2, [pc, #440]	@ (8002e00 <HAL_ADC_Start_DMA+0x208>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	0c9a      	lsrs	r2, r3, #18
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e002      	b.n	8002c5c <HAL_ADC_Start_DMA+0x64>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f9      	bne.n	8002c56 <HAL_ADC_Start_DMA+0x5e>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c70:	d107      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x8a>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 80a3 	bne.w	8002dd8 <HAL_ADC_Start_DMA+0x1e0>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d007      	beq.n	8002cc4 <HAL_ADC_Start_DMA+0xcc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002cbc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd0:	d106      	bne.n	8002ce0 <HAL_ADC_Start_DMA+0xe8>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f023 0206 	bic.w	r2, r3, #6
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002cde:	e002      	b.n	8002ce6 <HAL_ADC_Start_DMA+0xee>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002cee:	4b45      	ldr	r3, [pc, #276]	@ (8002e04 <HAL_ADC_Start_DMA+0x20c>)
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf6:	4a44      	ldr	r2, [pc, #272]	@ (8002e08 <HAL_ADC_Start_DMA+0x210>)
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfe:	4a43      	ldr	r2, [pc, #268]	@ (8002e0c <HAL_ADC_Start_DMA+0x214>)
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d06:	4a42      	ldr	r2, [pc, #264]	@ (8002e10 <HAL_ADC_Start_DMA+0x218>)
 8002d08:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	334c      	adds	r3, #76	@ 0x4c
 8002d3e:	4619      	mov	r1, r3
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f000 fcd6 	bl	80036f4 <HAL_DMA_Start_IT>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d12a      	bne.n	8002dae <HAL_ADC_Start_DMA+0x1b6>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e14 <HAL_ADC_Start_DMA+0x21c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d015      	beq.n	8002d8e <HAL_ADC_Start_DMA+0x196>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2c      	ldr	r2, [pc, #176]	@ (8002e18 <HAL_ADC_Start_DMA+0x220>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d105      	bne.n	8002d78 <HAL_ADC_Start_DMA+0x180>
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HAL_ADC_Start_DMA+0x20c>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_ADC_Start_DMA+0x196>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	@ (8002e1c <HAL_ADC_Start_DMA+0x224>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d136      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002d82:	4b20      	ldr	r3, [pc, #128]	@ (8002e04 <HAL_ADC_Start_DMA+0x20c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d130      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d129      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	e020      	b.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a18      	ldr	r2, [pc, #96]	@ (8002e14 <HAL_ADC_Start_DMA+0x21c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d11b      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d114      	bne.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	e00b      	b.n	8002df0 <HAL_ADC_Start_DMA+0x1f8>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ddc:	f043 0210 	orr.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000008 	.word	0x20000008
 8002e00:	431bde83 	.word	0x431bde83
 8002e04:	40012300 	.word	0x40012300
 8002e08:	08003271 	.word	0x08003271
 8002e0c:	0800332b 	.word	0x0800332b
 8002e10:	08003347 	.word	0x08003347
 8002e14:	40012000 	.word	0x40012000
 8002e18:	40012100 	.word	0x40012100
 8002e1c:	40012200 	.word	0x40012200

08002e20 <HAL_ADC_ErrorCallback>:
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADC_ConfigChannel>:
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x1c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e105      	b.n	800305c <HAL_ADC_ConfigChannel+0x228>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d925      	bls.n	8002eac <HAL_ADC_ConfigChannel+0x78>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	2207      	movs	r2, #7
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43da      	mvns	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	400a      	ands	r2, r1
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68d9      	ldr	r1, [r3, #12]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	4603      	mov	r3, r0
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4403      	add	r3, r0
 8002e9e:	3b1e      	subs	r3, #30
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e022      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0xbe>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6919      	ldr	r1, [r3, #16]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4613      	mov	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	4413      	add	r3, r2
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	400a      	ands	r2, r1
 8002ece:	611a      	str	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4403      	add	r3, r0
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d824      	bhi.n	8002f44 <HAL_ADC_ConfigChannel+0x110>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b05      	subs	r3, #5
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43da      	mvns	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	400a      	ands	r2, r1
 8002f1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b05      	subs	r3, #5
 8002f36:	fa00 f203 	lsl.w	r2, r0, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f42:	e04c      	b.n	8002fde <HAL_ADC_ConfigChannel+0x1aa>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d824      	bhi.n	8002f96 <HAL_ADC_ConfigChannel+0x162>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b23      	subs	r3, #35	@ 0x23
 8002f5e:	221f      	movs	r2, #31
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43da      	mvns	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b23      	subs	r3, #35	@ 0x23
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f94:	e023      	b.n	8002fde <HAL_ADC_ConfigChannel+0x1aa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3b41      	subs	r3, #65	@ 0x41
 8002fa8:	221f      	movs	r2, #31
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	3b41      	subs	r3, #65	@ 0x41
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fde:	4b22      	ldr	r3, [pc, #136]	@ (8003068 <HAL_ADC_ConfigChannel+0x234>)
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	@ (800306c <HAL_ADC_ConfigChannel+0x238>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d109      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1cc>
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b12      	cmp	r3, #18
 8002ff2:	d105      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x1cc>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a19      	ldr	r2, [pc, #100]	@ (800306c <HAL_ADC_ConfigChannel+0x238>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d123      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x21e>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d003      	beq.n	800301a <HAL_ADC_ConfigChannel+0x1e6>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b11      	cmp	r3, #17
 8003018:	d11b      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x21e>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b10      	cmp	r3, #16
 800302c:	d111      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x21e>
 800302e:	4b10      	ldr	r3, [pc, #64]	@ (8003070 <HAL_ADC_ConfigChannel+0x23c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <HAL_ADC_ConfigChannel+0x240>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	0c9a      	lsrs	r2, r3, #18
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	e002      	b.n	800304c <HAL_ADC_ConfigChannel+0x218>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3b01      	subs	r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1f9      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x212>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800305a:	2300      	movs	r3, #0
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40012300 	.word	0x40012300
 800306c:	40012000 	.word	0x40012000
 8003070:	20000008 	.word	0x20000008
 8003074:	431bde83 	.word	0x431bde83

08003078 <ADC_Init>:
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	4b79      	ldr	r3, [pc, #484]	@ (8003268 <ADC_Init+0x1f0>)
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	4a58      	ldr	r2, [pc, #352]	@ (800326c <ADC_Init+0x1f4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d022      	beq.n	8003156 <ADC_Init+0xde>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6899      	ldr	r1, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003140:	609a      	str	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	e00f      	b.n	8003176 <ADC_Init+0xfe>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0202 	bic.w	r2, r2, #2
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7e1b      	ldrb	r3, [r3, #24]
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <ADC_Init+0x164>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	035a      	lsls	r2, r3, #13
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	e007      	b.n	80031ec <ADC_Init+0x174>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	3b01      	subs	r3, #1
 8003208:	051a      	lsls	r2, r3, #20
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6899      	ldr	r1, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800322e:	025a      	lsls	r2, r3, #9
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6899      	ldr	r1, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	029a      	lsls	r2, r3, #10
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40012300 	.word	0x40012300
 800326c:	0f000001 	.word	0x0f000001

08003270 <ADC_DMAConvCplt>:
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003282:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003286:	2b00      	cmp	r3, #0
 8003288:	d13c      	bne.n	8003304 <ADC_DMAConvCplt+0x94>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	@ 0x40
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d12b      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	7e1b      	ldrb	r3, [r3, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d127      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d006      	beq.n	80032c8 <ADC_DMAConvCplt+0x58>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d119      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0220 	bic.w	r2, r2, #32
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <ADC_DMAConvCplt+0x8c>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f043 0201 	orr.w	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7fe fba5 	bl	8001a4c <HAL_ADC_ConvCpltCallback>
 8003302:	e00e      	b.n	8003322 <ADC_DMAConvCplt+0xb2>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <ADC_DMAConvCplt+0xa8>
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fd85 	bl	8002e20 <HAL_ADC_ErrorCallback>
 8003316:	e004      	b.n	8003322 <ADC_DMAConvCplt+0xb2>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
 8003322:	bf00      	nop
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <ADC_DMAHalfConvCplt>:
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7fe fb79 	bl	8001a30 <HAL_ADC_ConvHalfCpltCallback>
 800333e:	bf00      	nop
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <ADC_DMAError>:
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2240      	movs	r2, #64	@ 0x40
 8003358:	641a      	str	r2, [r3, #64]	@ 0x40
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	f043 0204 	orr.w	r2, r3, #4
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff fd5a 	bl	8002e20 <HAL_ADC_ErrorCallback>
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <__NVIC_SetPriorityGrouping>:
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	@ (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	@ (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	f04f 32ff 	mov.w	r2, #4294967295
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_Init>:
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	f7ff fab4 	bl	8002b10 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Init+0x1c>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e099      	b.n	80036e8 <HAL_DMA_Init+0x150>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e00f      	b.n	80035f6 <HAL_DMA_Init+0x5e>
 80035d6:	f7ff fa9b 	bl	8002b10 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d908      	bls.n	80035f6 <HAL_DMA_Init+0x5e>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035f2:	2303      	movs	r3, #3
 80035f4:	e078      	b.n	80036e8 <HAL_DMA_Init+0x150>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e8      	bne.n	80035d6 <HAL_DMA_Init+0x3e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_DMA_Init+0x158>)
 8003610:	4013      	ands	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4313      	orrs	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	2b04      	cmp	r3, #4
 800364e:	d107      	bne.n	8003660 <HAL_DMA_Init+0xc8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2b04      	cmp	r3, #4
 8003688:	d117      	bne.n	80036ba <HAL_DMA_Init+0x122>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Init+0x122>
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fb01 	bl	8003ca4 <DMA_CheckFifoParam>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_DMA_Init+0x122>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2240      	movs	r2, #64	@ 0x40
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036b6:	2301      	movs	r3, #1
 80036b8:	e016      	b.n	80036e8 <HAL_DMA_Init+0x150>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fab8 	bl	8003c38 <DMA_CalcBaseAndBitshift>
 80036c8:	4603      	mov	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	223f      	movs	r2, #63	@ 0x3f
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80036e6:	2300      	movs	r3, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	f010803f 	.word	0xf010803f

080036f4 <HAL_DMA_Start_IT>:
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	2300      	movs	r3, #0
 8003704:	75fb      	strb	r3, [r7, #23]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_DMA_Start_IT+0x26>
 8003716:	2302      	movs	r3, #2
 8003718:	e040      	b.n	800379c <HAL_DMA_Start_IT+0xa8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d12f      	bne.n	800378e <HAL_DMA_Start_IT+0x9a>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa4a 	bl	8003bdc <DMA_SetConfig>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	223f      	movs	r2, #63	@ 0x3f
 800374e:	409a      	lsls	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0216 	orr.w	r2, r2, #22
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_DMA_Start_IT+0x88>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e005      	b.n	800379a <HAL_DMA_Start_IT+0xa6>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003796:	2302      	movs	r3, #2
 8003798:	75fb      	strb	r3, [r7, #23]
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_Abort>:
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	f7ff f9ad 	bl	8002b10 <HAL_GetTick>
 80037b6:	60b8      	str	r0, [r7, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d008      	beq.n	80037d6 <HAL_DMA_Abort+0x32>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	655a      	str	r2, [r3, #84]	@ 0x54
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80037d2:	2301      	movs	r3, #1
 80037d4:	e052      	b.n	800387c <HAL_DMA_Abort+0xd8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0216 	bic.w	r2, r2, #22
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037f4:	615a      	str	r2, [r3, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_DMA_Abort+0x62>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d007      	beq.n	8003816 <HAL_DMA_Abort+0x72>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0208 	bic.w	r2, r2, #8
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e013      	b.n	8003850 <HAL_DMA_Abort+0xac>
 8003828:	f7ff f972 	bl	8002b10 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b05      	cmp	r3, #5
 8003834:	d90c      	bls.n	8003850 <HAL_DMA_Abort+0xac>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	655a      	str	r2, [r3, #84]	@ 0x54
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800384c:	2303      	movs	r3, #3
 800384e:	e015      	b.n	800387c <HAL_DMA_Abort+0xd8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e4      	bne.n	8003828 <HAL_DMA_Abort+0x84>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003862:	223f      	movs	r2, #63	@ 0x3f
 8003864:	409a      	lsls	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800387a:	2300      	movs	r3, #0
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA_Abort_IT>:
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d004      	beq.n	80038a2 <HAL_DMA_Abort_IT+0x1e>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2280      	movs	r2, #128	@ 0x80
 800389c:	655a      	str	r2, [r3, #84]	@ 0x54
 800389e:	2301      	movs	r3, #1
 80038a0:	e00c      	b.n	80038bc <HAL_DMA_Abort_IT+0x38>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2205      	movs	r2, #5
 80038a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0201 	bic.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_DMA_IRQHandler>:
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b10 <HAL_DMA_IRQHandler+0x248>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a8e      	ldr	r2, [pc, #568]	@ (8003b14 <HAL_DMA_IRQHandler+0x24c>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f2:	2208      	movs	r2, #8
 80038f4:	409a      	lsls	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01a      	beq.n	8003934 <HAL_DMA_IRQHandler+0x6c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d013      	beq.n	8003934 <HAL_DMA_IRQHandler+0x6c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0204 	bic.w	r2, r2, #4
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	2208      	movs	r2, #8
 8003922:	409a      	lsls	r2, r3
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d012      	beq.n	800396a <HAL_DMA_IRQHandler+0xa2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_DMA_IRQHandler+0xa2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003956:	2201      	movs	r2, #1
 8003958:	409a      	lsls	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	f043 0202 	orr.w	r2, r3, #2
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800396e:	2204      	movs	r2, #4
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d012      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xd8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xd8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800398c:	2204      	movs	r2, #4
 800398e:	409a      	lsls	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	2210      	movs	r2, #16
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d043      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03c      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c2:	2210      	movs	r2, #16
 80039c4:	409a      	lsls	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	609a      	str	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d018      	beq.n	8003a0a <HAL_DMA_IRQHandler+0x142>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x130>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d024      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
 80039f6:	e01f      	b.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01b      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
 8003a08:	e016      	b.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_DMA_IRQHandler+0x160>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0208 	bic.w	r2, r2, #8
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x170>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	409a      	lsls	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 808f 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8087 	beq.w	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	2220      	movs	r2, #32
 8003a60:	409a      	lsls	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b05      	cmp	r3, #5
 8003a70:	d136      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x218>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0216 	bic.w	r2, r2, #22
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a90:	615a      	str	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <HAL_DMA_IRQHandler+0x1da>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x1ea>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0208 	bic.w	r2, r2, #8
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab6:	223f      	movs	r2, #63	@ 0x3f
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d07e      	beq.n	8003bd4 <HAL_DMA_IRQHandler+0x30c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	e079      	b.n	8003bd4 <HAL_DMA_IRQHandler+0x30c>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <HAL_DMA_IRQHandler+0x262>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_DMA_IRQHandler+0x250>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d031      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
 8003b0c:	e02c      	b.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b0e:	bf00      	nop
 8003b10:	20000008 	.word	0x20000008
 8003b14:	1b4e81b5 	.word	0x1b4e81b5
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	4798      	blx	r3
 8003b28:	e01e      	b.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10f      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x290>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0210 	bic.w	r2, r2, #16
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_IRQHandler+0x2a0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x2fa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2205      	movs	r2, #5
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d307      	bcc.n	8003bb0 <HAL_DMA_IRQHandler+0x2e8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f2      	bne.n	8003b94 <HAL_DMA_IRQHandler+0x2cc>
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x2ea>
 8003bb0:	bf00      	nop
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
 8003bd2:	e000      	b.n	8003bd6 <HAL_DMA_IRQHandler+0x30e>
 8003bd4:	bf00      	nop
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <DMA_SetConfig>:
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b40      	cmp	r3, #64	@ 0x40
 8003c08:	d108      	bne.n	8003c1c <DMA_SetConfig+0x40>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	e007      	b.n	8003c2c <DMA_SetConfig+0x50>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <DMA_CalcBaseAndBitshift>:
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	3b10      	subs	r3, #16
 8003c48:	4a14      	ldr	r2, [pc, #80]	@ (8003c9c <DMA_CalcBaseAndBitshift+0x64>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	60fb      	str	r3, [r7, #12]
 8003c52:	4a13      	ldr	r2, [pc, #76]	@ (8003ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d909      	bls.n	8003c7a <DMA_CalcBaseAndBitshift+0x42>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c78:	e007      	b.n	8003c8a <DMA_CalcBaseAndBitshift+0x52>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ca0:	08007194 	.word	0x08007194

08003ca4 <DMA_CheckFifoParam>:
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11f      	bne.n	8003cfe <DMA_CheckFifoParam+0x5a>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d856      	bhi.n	8003d72 <DMA_CheckFifoParam+0xce>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <DMA_CheckFifoParam+0x28>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003cdd 	.word	0x08003cdd
 8003cd8:	08003d73 	.word	0x08003d73
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d046      	beq.n	8003d76 <DMA_CheckFifoParam+0xd2>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
 8003cec:	e043      	b.n	8003d76 <DMA_CheckFifoParam+0xd2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cf6:	d140      	bne.n	8003d7a <DMA_CheckFifoParam+0xd6>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
 8003cfc:	e03d      	b.n	8003d7a <DMA_CheckFifoParam+0xd6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d06:	d121      	bne.n	8003d4c <DMA_CheckFifoParam+0xa8>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d837      	bhi.n	8003d7e <DMA_CheckFifoParam+0xda>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <DMA_CheckFifoParam+0x70>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d2b 	.word	0x08003d2b
 8003d1c:	08003d25 	.word	0x08003d25
 8003d20:	08003d3d 	.word	0x08003d3d
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e030      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d025      	beq.n	8003d82 <DMA_CheckFifoParam+0xde>
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e022      	b.n	8003d82 <DMA_CheckFifoParam+0xde>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d44:	d11f      	bne.n	8003d86 <DMA_CheckFifoParam+0xe2>
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e01c      	b.n	8003d86 <DMA_CheckFifoParam+0xe2>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d903      	bls.n	8003d5a <DMA_CheckFifoParam+0xb6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <DMA_CheckFifoParam+0xbc>
 8003d58:	e018      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	e015      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00e      	beq.n	8003d8a <DMA_CheckFifoParam+0xe6>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	e00b      	b.n	8003d8a <DMA_CheckFifoParam+0xe6>
 8003d72:	bf00      	nop
 8003d74:	e00a      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d76:	bf00      	nop
 8003d78:	e008      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d7a:	bf00      	nop
 8003d7c:	e006      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <DMA_CheckFifoParam+0xe8>
 8003d8a:	bf00      	nop
 8003d8c:	7bfb      	ldrb	r3, [r7, #15]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	@ 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e16b      	b.n	8004090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f040 815a 	bne.w	800408a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d130      	bne.n	8003e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0201 	and.w	r2, r3, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d017      	beq.n	8003e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d123      	bne.n	8003ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3208      	adds	r2, #8
 8003ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b4 	beq.w	800408a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b60      	ldr	r3, [pc, #384]	@ (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	4a5f      	ldr	r2, [pc, #380]	@ (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f32:	4b5d      	ldr	r3, [pc, #372]	@ (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f3e:	4a5b      	ldr	r2, [pc, #364]	@ (80040ac <HAL_GPIO_Init+0x310>)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a52      	ldr	r2, [pc, #328]	@ (80040b0 <HAL_GPIO_Init+0x314>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <HAL_GPIO_Init+0x226>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	@ (80040b4 <HAL_GPIO_Init+0x318>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x222>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a50      	ldr	r2, [pc, #320]	@ (80040b8 <HAL_GPIO_Init+0x31c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x21e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4f      	ldr	r2, [pc, #316]	@ (80040bc <HAL_GPIO_Init+0x320>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x21a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4e      	ldr	r2, [pc, #312]	@ (80040c0 <HAL_GPIO_Init+0x324>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x216>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	@ (80040c4 <HAL_GPIO_Init+0x328>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x212>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4c      	ldr	r2, [pc, #304]	@ (80040c8 <HAL_GPIO_Init+0x32c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x20e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	@ (80040cc <HAL_GPIO_Init+0x330>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x20a>
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e00e      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd4:	4935      	ldr	r1, [pc, #212]	@ (80040ac <HAL_GPIO_Init+0x310>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004006:	4a32      	ldr	r2, [pc, #200]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400c:	4b30      	ldr	r3, [pc, #192]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004030:	4a27      	ldr	r2, [pc, #156]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004036:	4b26      	ldr	r3, [pc, #152]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800405a:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004084:	4a12      	ldr	r2, [pc, #72]	@ (80040d0 <HAL_GPIO_Init+0x334>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	f67f ae90 	bls.w	8003db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020400 	.word	0x40020400
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020c00 	.word	0x40020c00
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40021400 	.word	0x40021400
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40021c00 	.word	0x40021c00
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	887b      	ldrh	r3, [r7, #2]
 80040e6:	4013      	ands	r3, r2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e001      	b.n	80040f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	807b      	strh	r3, [r7, #2]
 8004110:	4613      	mov	r3, r2
 8004112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004114:	787b      	ldrb	r3, [r7, #1]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004120:	e003      	b.n	800412a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004122:	887b      	ldrh	r3, [r7, #2]
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	619a      	str	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004142:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	88fb      	ldrh	r3, [r7, #6]
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	4618      	mov	r0, r3
 8004158:	f7fe f968 	bl	800242c <HAL_GPIO_EXTI_Callback>
  }
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40013c00 	.word	0x40013c00

08004168 <HAL_RCC_OscConfig>:
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_OscConfig+0x12>
 8004176:	2301      	movs	r3, #1
 8004178:	e267      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d075      	beq.n	8004272 <HAL_RCC_OscConfig+0x10a>
 8004186:	4b88      	ldr	r3, [pc, #544]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00c      	beq.n	80041ac <HAL_RCC_OscConfig+0x44>
 8004192:	4b85      	ldr	r3, [pc, #532]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b08      	cmp	r3, #8
 800419c:	d112      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
 800419e:	4b82      	ldr	r3, [pc, #520]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5c>
 80041ac:	4b7e      	ldr	r3, [pc, #504]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d05b      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d157      	bne.n	8004270 <HAL_RCC_OscConfig+0x108>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e242      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041cc:	d106      	bne.n	80041dc <HAL_RCC_OscConfig+0x74>
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a75      	ldr	r2, [pc, #468]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e01d      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e4:	d10c      	bne.n	8004200 <HAL_RCC_OscConfig+0x98>
 80041e6:	4b70      	ldr	r3, [pc, #448]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6f      	ldr	r2, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b6d      	ldr	r3, [pc, #436]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a6c      	ldr	r2, [pc, #432]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80041f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	e00b      	b.n	8004218 <HAL_RCC_OscConfig+0xb0>
 8004200:	4b69      	ldr	r3, [pc, #420]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a68      	ldr	r2, [pc, #416]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	4b66      	ldr	r3, [pc, #408]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a65      	ldr	r2, [pc, #404]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d013      	beq.n	8004248 <HAL_RCC_OscConfig+0xe0>
 8004220:	f7fe fc76 	bl	8002b10 <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0xd2>
 8004228:	f7fe fc72 	bl	8002b10 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	@ 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0xd2>
 8004236:	2303      	movs	r3, #3
 8004238:	e207      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0xc0>
 8004246:	e014      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
 8004248:	f7fe fc62 	bl	8002b10 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
 8004250:	f7fe fc5e 	bl	8002b10 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	@ 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
 800425e:	2303      	movs	r3, #3
 8004260:	e1f3      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 8004262:	4b51      	ldr	r3, [pc, #324]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e000      	b.n	8004272 <HAL_RCC_OscConfig+0x10a>
 8004270:	bf00      	nop
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_OscConfig+0x1de>
 800427e:	4b4a      	ldr	r3, [pc, #296]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00b      	beq.n	80042a2 <HAL_RCC_OscConfig+0x13a>
 800428a:	4b47      	ldr	r3, [pc, #284]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b08      	cmp	r3, #8
 8004294:	d11c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
 8004296:	4b44      	ldr	r3, [pc, #272]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d116      	bne.n	80042d0 <HAL_RCC_OscConfig+0x168>
 80042a2:	4b41      	ldr	r3, [pc, #260]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x152>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e1c7      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80042ba:	4b3b      	ldr	r3, [pc, #236]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4937      	ldr	r1, [pc, #220]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]
 80042ce:	e03a      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_OscConfig+0x1b2>
 80042d8:	4b34      	ldr	r3, [pc, #208]	@ (80043ac <HAL_RCC_OscConfig+0x244>)
 80042da:	2201      	movs	r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	f7fe fc17 	bl	8002b10 <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]
 80042e4:	e008      	b.n	80042f8 <HAL_RCC_OscConfig+0x190>
 80042e6:	f7fe fc13 	bl	8002b10 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x190>
 80042f4:	2303      	movs	r3, #3
 80042f6:	e1a8      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80042f8:	4b2b      	ldr	r3, [pc, #172]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0f0      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
 8004304:	4b28      	ldr	r3, [pc, #160]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4925      	ldr	r1, [pc, #148]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x1de>
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCC_OscConfig+0x244>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	f7fe fbf6 	bl	8002b10 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x1d2>
 8004328:	f7fe fbf2 	bl	8002b10 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x1d2>
 8004336:	2303      	movs	r3, #3
 8004338:	e187      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 800433a:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x1c0>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d036      	beq.n	80043c0 <HAL_RCC_OscConfig+0x258>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCC_OscConfig+0x220>
 800435a:	4b15      	ldr	r3, [pc, #84]	@ (80043b0 <HAL_RCC_OscConfig+0x248>)
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	f7fe fbd6 	bl	8002b10 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x212>
 8004368:	f7fe fbd2 	bl	8002b10 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x212>
 8004376:	2303      	movs	r3, #3
 8004378:	e167      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <HAL_RCC_OscConfig+0x240>)
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0x200>
 8004386:	e01b      	b.n	80043c0 <HAL_RCC_OscConfig+0x258>
 8004388:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <HAL_RCC_OscConfig+0x248>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f7fe fbbf 	bl	8002b10 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]
 8004394:	e00e      	b.n	80043b4 <HAL_RCC_OscConfig+0x24c>
 8004396:	f7fe fbbb 	bl	8002b10 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d907      	bls.n	80043b4 <HAL_RCC_OscConfig+0x24c>
 80043a4:	2303      	movs	r3, #3
 80043a6:	e150      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80043a8:	40023800 	.word	0x40023800
 80043ac:	42470000 	.word	0x42470000
 80043b0:	42470e80 	.word	0x42470e80
 80043b4:	4b88      	ldr	r3, [pc, #544]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ea      	bne.n	8004396 <HAL_RCC_OscConfig+0x22e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8097 	beq.w	80044fc <HAL_RCC_OscConfig+0x394>
 80043ce:	2300      	movs	r3, #0
 80043d0:	75fb      	strb	r3, [r7, #23]
 80043d2:	4b81      	ldr	r3, [pc, #516]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <HAL_RCC_OscConfig+0x296>
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	4b7d      	ldr	r3, [pc, #500]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e6:	4a7c      	ldr	r2, [pc, #496]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ee:	4b7a      	ldr	r3, [pc, #488]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
 80043fe:	4b77      	ldr	r3, [pc, #476]	@ (80045dc <HAL_RCC_OscConfig+0x474>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2d4>
 800440a:	4b74      	ldr	r3, [pc, #464]	@ (80045dc <HAL_RCC_OscConfig+0x474>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a73      	ldr	r2, [pc, #460]	@ (80045dc <HAL_RCC_OscConfig+0x474>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	f7fe fb7b 	bl	8002b10 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2c8>
 800441e:	f7fe fb77 	bl	8002b10 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2c8>
 800442c:	2303      	movs	r3, #3
 800442e:	e10c      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 8004430:	4b6a      	ldr	r3, [pc, #424]	@ (80045dc <HAL_RCC_OscConfig+0x474>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2b6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x2ea>
 8004444:	4b64      	ldr	r3, [pc, #400]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004448:	4a63      	ldr	r2, [pc, #396]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004450:	e01c      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x30c>
 800445a:	4b5f      	ldr	r3, [pc, #380]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800445e:	4a5e      	ldr	r2, [pc, #376]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004460:	f043 0304 	orr.w	r3, r3, #4
 8004464:	6713      	str	r3, [r2, #112]	@ 0x70
 8004466:	4b5c      	ldr	r3, [pc, #368]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	4a5b      	ldr	r2, [pc, #364]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6713      	str	r3, [r2, #112]	@ 0x70
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0x324>
 8004474:	4b58      	ldr	r3, [pc, #352]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004478:	4a57      	ldr	r2, [pc, #348]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004480:	4b55      	ldr	r3, [pc, #340]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004484:	4a54      	ldr	r2, [pc, #336]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004486:	f023 0304 	bic.w	r3, r3, #4
 800448a:	6713      	str	r3, [r2, #112]	@ 0x70
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d015      	beq.n	80044c0 <HAL_RCC_OscConfig+0x358>
 8004494:	f7fe fb3c 	bl	8002b10 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x34a>
 800449c:	f7fe fb38 	bl	8002b10 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x34a>
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0cb      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80044b2:	4b49      	ldr	r3, [pc, #292]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ee      	beq.n	800449c <HAL_RCC_OscConfig+0x334>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x382>
 80044c0:	f7fe fb26 	bl	8002b10 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]
 80044c6:	e00a      	b.n	80044de <HAL_RCC_OscConfig+0x376>
 80044c8:	f7fe fb22 	bl	8002b10 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x376>
 80044da:	2303      	movs	r3, #3
 80044dc:	e0b5      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80044de:	4b3e      	ldr	r3, [pc, #248]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ee      	bne.n	80044c8 <HAL_RCC_OscConfig+0x360>
 80044ea:	7dfb      	ldrb	r3, [r7, #23]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d105      	bne.n	80044fc <HAL_RCC_OscConfig+0x394>
 80044f0:	4b39      	ldr	r3, [pc, #228]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f4:	4a38      	ldr	r2, [pc, #224]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80a1 	beq.w	8004648 <HAL_RCC_OscConfig+0x4e0>
 8004506:	4b34      	ldr	r3, [pc, #208]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d05c      	beq.n	80045cc <HAL_RCC_OscConfig+0x464>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d141      	bne.n	800459e <HAL_RCC_OscConfig+0x436>
 800451a:	4b31      	ldr	r3, [pc, #196]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	f7fe faf6 	bl	8002b10 <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3d2>
 8004528:	f7fe faf2 	bl	8002b10 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3d2>
 8004536:	2303      	movs	r3, #3
 8004538:	e087      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 800453a:	4b27      	ldr	r3, [pc, #156]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x3c0>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	019b      	lsls	r3, r3, #6
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	061b      	lsls	r3, r3, #24
 800456a:	491b      	ldr	r1, [pc, #108]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 800456c:	4313      	orrs	r3, r2
 800456e:	604b      	str	r3, [r1, #4]
 8004570:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	f7fe facb 	bl	8002b10 <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x428>
 800457e:	f7fe fac7 	bl	8002b10 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x428>
 800458c:	2303      	movs	r3, #3
 800458e:	e05c      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x416>
 800459c:	e054      	b.n	8004648 <HAL_RCC_OscConfig+0x4e0>
 800459e:	4b10      	ldr	r3, [pc, #64]	@ (80045e0 <HAL_RCC_OscConfig+0x478>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	f7fe fab4 	bl	8002b10 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x456>
 80045ac:	f7fe fab0 	bl	8002b10 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x456>
 80045ba:	2303      	movs	r3, #3
 80045bc:	e045      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80045be:	4b06      	ldr	r3, [pc, #24]	@ (80045d8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x444>
 80045ca:	e03d      	b.n	8004648 <HAL_RCC_OscConfig+0x4e0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d107      	bne.n	80045e4 <HAL_RCC_OscConfig+0x47c>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e038      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 80045d8:	40023800 	.word	0x40023800
 80045dc:	40007000 	.word	0x40007000
 80045e0:	42470060 	.word	0x42470060
 80045e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004654 <HAL_RCC_OscConfig+0x4ec>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d028      	beq.n	8004644 <HAL_RCC_OscConfig+0x4dc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d121      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	429a      	cmp	r2, r3
 800460c:	d11a      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800461a:	0192      	lsls	r2, r2, #6
 800461c:	4293      	cmp	r3, r2
 800461e:	d111      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	429a      	cmp	r2, r3
 8004632:	d107      	bne.n	8004644 <HAL_RCC_OscConfig+0x4dc>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	061b      	lsls	r3, r3, #24
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_OscConfig+0x4e0>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x4e2>
 8004648:	2300      	movs	r3, #0
 800464a:	4618      	mov	r0, r3
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800

08004658 <HAL_RCC_ClockConfig>:
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_RCC_ClockConfig+0x14>
 8004668:	2301      	movs	r3, #1
 800466a:	e0cc      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 800466c:	4b68      	ldr	r3, [pc, #416]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90c      	bls.n	8004694 <HAL_RCC_ClockConfig+0x3c>
 800467a:	4b65      	ldr	r3, [pc, #404]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	4b63      	ldr	r3, [pc, #396]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x3c>
 8004690:	2301      	movs	r3, #1
 8004692:	e0b8      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_RCC_ClockConfig+0x8a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d005      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x60>
 80046ac:	4b59      	ldr	r3, [pc, #356]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a58      	ldr	r2, [pc, #352]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80046b6:	6093      	str	r3, [r2, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x78>
 80046c4:	4b53      	ldr	r3, [pc, #332]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	4a52      	ldr	r2, [pc, #328]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046ce:	6093      	str	r3, [r2, #8]
 80046d0:	4b50      	ldr	r3, [pc, #320]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	494d      	ldr	r1, [pc, #308]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	608b      	str	r3, [r1, #8]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d044      	beq.n	8004778 <HAL_RCC_ClockConfig+0x120>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_ClockConfig+0xae>
 80046f6:	4b47      	ldr	r3, [pc, #284]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d119      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
 8004702:	2301      	movs	r3, #1
 8004704:	e07f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d003      	beq.n	8004716 <HAL_RCC_ClockConfig+0xbe>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0xce>
 8004716:	4b3f      	ldr	r3, [pc, #252]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d109      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
 8004722:	2301      	movs	r3, #1
 8004724:	e06f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 8004726:	4b3b      	ldr	r3, [pc, #236]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCC_ClockConfig+0xde>
 8004732:	2301      	movs	r3, #1
 8004734:	e067      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 8004736:	4b37      	ldr	r3, [pc, #220]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 0203 	bic.w	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4934      	ldr	r1, [pc, #208]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004744:	4313      	orrs	r3, r2
 8004746:	608b      	str	r3, [r1, #8]
 8004748:	f7fe f9e2 	bl	8002b10 <HAL_GetTick>
 800474c:	60f8      	str	r0, [r7, #12]
 800474e:	e00a      	b.n	8004766 <HAL_RCC_ClockConfig+0x10e>
 8004750:	f7fe f9de 	bl	8002b10 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x10e>
 8004762:	2303      	movs	r3, #3
 8004764:	e04f      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 8004766:	4b2b      	ldr	r3, [pc, #172]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f003 020c 	and.w	r2, r3, #12
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	429a      	cmp	r2, r3
 8004776:	d1eb      	bne.n	8004750 <HAL_RCC_ClockConfig+0xf8>
 8004778:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d20c      	bcs.n	80047a0 <HAL_RCC_ClockConfig+0x148>
 8004786:	4b22      	ldr	r3, [pc, #136]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
 800478e:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x148>
 800479c:	2301      	movs	r3, #1
 800479e:	e032      	b.n	8004806 <HAL_RCC_ClockConfig+0x1ae>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_RCC_ClockConfig+0x166>
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4916      	ldr	r1, [pc, #88]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x186>
 80047ca:	4b12      	ldr	r3, [pc, #72]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	490e      	ldr	r1, [pc, #56]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	608b      	str	r3, [r1, #8]
 80047de:	f000 f821 	bl	8004824 <HAL_RCC_GetSysClockFreq>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	490a      	ldr	r1, [pc, #40]	@ (8004818 <HAL_RCC_ClockConfig+0x1c0>)
 80047f0:	5ccb      	ldrb	r3, [r1, r3]
 80047f2:	fa22 f303 	lsr.w	r3, r2, r3
 80047f6:	4a09      	ldr	r2, [pc, #36]	@ (800481c <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_RCC_ClockConfig+0x1c8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fe f942 	bl	8002a88 <HAL_InitTick>
 8004804:	2300      	movs	r3, #0
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023c00 	.word	0x40023c00
 8004814:	40023800 	.word	0x40023800
 8004818:	0800717c 	.word	0x0800717c
 800481c:	20000008 	.word	0x20000008
 8004820:	2000000c 	.word	0x2000000c

08004824 <HAL_RCC_GetSysClockFreq>:
 8004824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004828:	b094      	sub	sp, #80	@ 0x50
 800482a:	af00      	add	r7, sp, #0
 800482c:	2300      	movs	r3, #0
 800482e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004830:	2300      	movs	r3, #0
 8004832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004834:	2300      	movs	r3, #0
 8004836:	643b      	str	r3, [r7, #64]	@ 0x40
 8004838:	2300      	movs	r3, #0
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483c:	4b79      	ldr	r3, [pc, #484]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030c 	and.w	r3, r3, #12
 8004844:	2b08      	cmp	r3, #8
 8004846:	d00d      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x40>
 8004848:	2b08      	cmp	r3, #8
 800484a:	f200 80e1 	bhi.w	8004a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x34>
 8004852:	2b04      	cmp	r3, #4
 8004854:	d003      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x3a>
 8004856:	e0db      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004858:	4b73      	ldr	r3, [pc, #460]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x204>)
 800485a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800485c:	e0db      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
 800485e:	4b73      	ldr	r3, [pc, #460]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004862:	e0d8      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
 8004864:	4b6f      	ldr	r3, [pc, #444]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800486c:	647b      	str	r3, [r7, #68]	@ 0x44
 800486e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d063      	beq.n	8004942 <HAL_RCC_GetSysClockFreq+0x11e>
 800487a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	099b      	lsrs	r3, r3, #6
 8004880:	2200      	movs	r2, #0
 8004882:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
 800488e:	2300      	movs	r3, #0
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
 8004892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004896:	4622      	mov	r2, r4
 8004898:	462b      	mov	r3, r5
 800489a:	f04f 0000 	mov.w	r0, #0
 800489e:	f04f 0100 	mov.w	r1, #0
 80048a2:	0159      	lsls	r1, r3, #5
 80048a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a8:	0150      	lsls	r0, r2, #5
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4621      	mov	r1, r4
 80048b0:	1a51      	subs	r1, r2, r1
 80048b2:	6139      	str	r1, [r7, #16]
 80048b4:	4629      	mov	r1, r5
 80048b6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048c8:	4659      	mov	r1, fp
 80048ca:	018b      	lsls	r3, r1, #6
 80048cc:	4651      	mov	r1, sl
 80048ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048d2:	4651      	mov	r1, sl
 80048d4:	018a      	lsls	r2, r1, #6
 80048d6:	4651      	mov	r1, sl
 80048d8:	ebb2 0801 	subs.w	r8, r2, r1
 80048dc:	4659      	mov	r1, fp
 80048de:	eb63 0901 	sbc.w	r9, r3, r1
 80048e2:	f04f 0200 	mov.w	r2, #0
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f6:	4690      	mov	r8, r2
 80048f8:	4699      	mov	r9, r3
 80048fa:	4623      	mov	r3, r4
 80048fc:	eb18 0303 	adds.w	r3, r8, r3
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	462b      	mov	r3, r5
 8004904:	eb49 0303 	adc.w	r3, r9, r3
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	f04f 0300 	mov.w	r3, #0
 8004912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004916:	4629      	mov	r1, r5
 8004918:	024b      	lsls	r3, r1, #9
 800491a:	4621      	mov	r1, r4
 800491c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004920:	4621      	mov	r1, r4
 8004922:	024a      	lsls	r2, r1, #9
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492a:	2200      	movs	r2, #0
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800492e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004934:	f7fb ffaa 	bl	800088c <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4613      	mov	r3, r2
 800493e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004940:	e058      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004942:	4b38      	ldr	r3, [pc, #224]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	4611      	mov	r1, r2
 800494e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	2300      	movs	r3, #0
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
 8004958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800495c:	4642      	mov	r2, r8
 800495e:	464b      	mov	r3, r9
 8004960:	f04f 0000 	mov.w	r0, #0
 8004964:	f04f 0100 	mov.w	r1, #0
 8004968:	0159      	lsls	r1, r3, #5
 800496a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800496e:	0150      	lsls	r0, r2, #5
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	4641      	mov	r1, r8
 8004976:	ebb2 0a01 	subs.w	sl, r2, r1
 800497a:	4649      	mov	r1, r9
 800497c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800498c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004994:	ebb2 040a 	subs.w	r4, r2, sl
 8004998:	eb63 050b 	sbc.w	r5, r3, fp
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	00eb      	lsls	r3, r5, #3
 80049a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	4614      	mov	r4, r2
 80049ae:	461d      	mov	r5, r3
 80049b0:	4643      	mov	r3, r8
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	603b      	str	r3, [r7, #0]
 80049b6:	464b      	mov	r3, r9
 80049b8:	eb45 0303 	adc.w	r3, r5, r3
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ca:	4629      	mov	r1, r5
 80049cc:	028b      	lsls	r3, r1, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d4:	4621      	mov	r1, r4
 80049d6:	028a      	lsls	r2, r1, #10
 80049d8:	4610      	mov	r0, r2
 80049da:	4619      	mov	r1, r3
 80049dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049de:	2200      	movs	r2, #0
 80049e0:	61bb      	str	r3, [r7, #24]
 80049e2:	61fa      	str	r2, [r7, #28]
 80049e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049e8:	f7fb ff50 	bl	800088c <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCC_GetSysClockFreq+0x200>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x1f2>
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a14:	bf00      	nop
 8004a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3750      	adds	r7, #80	@ 0x50
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800
 8004a28:	00f42400 	.word	0x00f42400
 8004a2c:	007a1200 	.word	0x007a1200

08004a30 <HAL_RCC_GetHCLKFreq>:
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	20000008 	.word	0x20000008

08004a48 <HAL_RCC_GetPCLK1Freq>:
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	@ (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	@ (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	0800718c 	.word	0x0800718c

08004a70 <HAL_RCC_GetPCLK2Freq>:
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	f7ff ffdc 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0b5b      	lsrs	r3, r3, #13
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4903      	ldr	r1, [pc, #12]	@ (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40023800 	.word	0x40023800
 8004a94:	0800718c 	.word	0x0800718c

08004a98 <HAL_TIM_Base_Init>:
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_TIM_Base_Init+0x12>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e041      	b.n	8004b2e <HAL_TIM_Base_Init+0x96>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <HAL_TIM_Base_Init+0x2c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fd fe34 	bl	800272c <HAL_TIM_Base_MspInit>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fad8 	bl	800508c <TIM_Base_SetConfig>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <HAL_TIM_PWM_Init>:
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b082      	sub	sp, #8
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_TIM_PWM_Init+0x12>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e041      	b.n	8004bcc <HAL_TIM_PWM_Init+0x96>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <HAL_TIM_PWM_Init+0x2c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f839 	bl	8004bd4 <HAL_TIM_PWM_MspInit>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2202      	movs	r2, #2
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f000 fa89 	bl	800508c <TIM_Base_SetConfig>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004bca:	2300      	movs	r3, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <HAL_TIM_PWM_MspInit>:
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_TIM_PWM_Start>:
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_TIM_PWM_Start+0x24>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e022      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d109      	bne.n	8004c26 <HAL_TIM_PWM_Start+0x3e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e015      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start+0x58>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e008      	b.n	8004c52 <HAL_TIM_PWM_Start+0x6a>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_PWM_Start+0x72>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07c      	b.n	8004d54 <HAL_TIM_PWM_Start+0x16c>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x82>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c68:	e013      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x92>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c78:	e00b      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c88:	e003      	b.n	8004c92 <HAL_TIM_PWM_Start+0xaa>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fce6 	bl	800566c <TIM_CCxChannelCmd>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d5c <HAL_TIM_PWM_Start+0x174>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIM_PWM_Start+0xcc>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2c      	ldr	r2, [pc, #176]	@ (8004d60 <HAL_TIM_PWM_Start+0x178>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_PWM_Start+0xd0>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <HAL_TIM_PWM_Start+0xd2>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_TIM_PWM_Start+0xe6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <HAL_TIM_PWM_Start+0x174>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce0:	d01d      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d64 <HAL_TIM_PWM_Start+0x17c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d68 <HAL_TIM_PWM_Start+0x180>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_TIM_PWM_Start+0x184>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <HAL_TIM_PWM_Start+0x178>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a18      	ldr	r2, [pc, #96]	@ (8004d70 <HAL_TIM_PWM_Start+0x188>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_TIM_PWM_Start+0x136>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a16      	ldr	r2, [pc, #88]	@ (8004d74 <HAL_TIM_PWM_Start+0x18c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d111      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x15a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b06      	cmp	r3, #6
 8004d2e:	d010      	beq.n	8004d52 <HAL_TIM_PWM_Start+0x16a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e007      	b.n	8004d52 <HAL_TIM_PWM_Start+0x16a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f042 0201 	orr.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	2300      	movs	r3, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800

08004d78 <HAL_TIM_PWM_ConfigChannel>:
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	2300      	movs	r3, #0
 8004d86:	75fb      	strb	r3, [r7, #23]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e0ae      	b.n	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	f200 809f 	bhi.w	8004ee4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004da6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004ee5 	.word	0x08004ee5
 8004db4:	08004ee5 	.word	0x08004ee5
 8004db8:	08004ee5 	.word	0x08004ee5
 8004dbc:	08004e21 	.word	0x08004e21
 8004dc0:	08004ee5 	.word	0x08004ee5
 8004dc4:	08004ee5 	.word	0x08004ee5
 8004dc8:	08004ee5 	.word	0x08004ee5
 8004dcc:	08004e63 	.word	0x08004e63
 8004dd0:	08004ee5 	.word	0x08004ee5
 8004dd4:	08004ee5 	.word	0x08004ee5
 8004dd8:	08004ee5 	.word	0x08004ee5
 8004ddc:	08004ea3 	.word	0x08004ea3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68b9      	ldr	r1, [r7, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f9f6 	bl	80051d8 <TIM_OC1_SetConfig>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	619a      	str	r2, [r3, #24]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0204 	bic.w	r2, r2, #4
 8004e0a:	619a      	str	r2, [r3, #24]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
 8004e1e:	e064      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 fa46 	bl	80052b8 <TIM_OC2_SetConfig>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e3a:	619a      	str	r2, [r3, #24]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4a:	619a      	str	r2, [r3, #24]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6999      	ldr	r1, [r3, #24]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	021a      	lsls	r2, r3, #8
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	619a      	str	r2, [r3, #24]
 8004e60:	e043      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fa9b 	bl	80053a4 <TIM_OC3_SetConfig>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 0208 	orr.w	r2, r2, #8
 8004e7c:	61da      	str	r2, [r3, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0204 	bic.w	r2, r2, #4
 8004e8c:	61da      	str	r2, [r3, #28]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69d9      	ldr	r1, [r3, #28]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	61da      	str	r2, [r3, #28]
 8004ea0:	e023      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 faef 	bl	800548c <TIM_OC4_SetConfig>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ebc:	61da      	str	r2, [r3, #28]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ecc:	61da      	str	r2, [r3, #28]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69d9      	ldr	r1, [r3, #28]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	021a      	lsls	r2, r3, #8
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	61da      	str	r2, [r3, #28]
 8004ee2:	e002      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x172>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	75fb      	strb	r3, [r7, #23]
 8004ee8:	bf00      	nop
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_ConfigClockSource>:
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_TIM_ConfigClockSource+0x1c>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e0b4      	b.n	8005082 <HAL_TIM_ConfigClockSource+0x186>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f3e:	60bb      	str	r3, [r7, #8]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f50:	d03e      	beq.n	8004fd0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f56:	f200 8087 	bhi.w	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5e:	f000 8086 	beq.w	800506e <HAL_TIM_ConfigClockSource+0x172>
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f66:	d87f      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b70      	cmp	r3, #112	@ 0x70
 8004f6a:	d01a      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0xa6>
 8004f6c:	2b70      	cmp	r3, #112	@ 0x70
 8004f6e:	d87b      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b60      	cmp	r3, #96	@ 0x60
 8004f72:	d050      	beq.n	8005016 <HAL_TIM_ConfigClockSource+0x11a>
 8004f74:	2b60      	cmp	r3, #96	@ 0x60
 8004f76:	d877      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b50      	cmp	r3, #80	@ 0x50
 8004f7a:	d03c      	beq.n	8004ff6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f7c:	2b50      	cmp	r3, #80	@ 0x50
 8004f7e:	d873      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b40      	cmp	r3, #64	@ 0x40
 8004f82:	d058      	beq.n	8005036 <HAL_TIM_ConfigClockSource+0x13a>
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d86f      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b30      	cmp	r3, #48	@ 0x30
 8004f8a:	d064      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b30      	cmp	r3, #48	@ 0x30
 8004f8e:	d86b      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d060      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b20      	cmp	r3, #32
 8004f96:	d867      	bhi.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d05c      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x15a>
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d05a      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0x15a>
 8004fa0:	e062      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6899      	ldr	r1, [r3, #8]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f000 fb3b 	bl	800562c <TIM_ETR_SetConfig>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	609a      	str	r2, [r3, #8]
 8004fce:	e04f      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6818      	ldr	r0, [r3, #0]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	6899      	ldr	r1, [r3, #8]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f000 fb24 	bl	800562c <TIM_ETR_SetConfig>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ff2:	609a      	str	r2, [r3, #8]
 8004ff4:	e03c      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	461a      	mov	r2, r3
 8005004:	f000 fa98 	bl	8005538 <TIM_TI1_ConfigInputStage>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2150      	movs	r1, #80	@ 0x50
 800500e:	4618      	mov	r0, r3
 8005010:	f000 faf1 	bl	80055f6 <TIM_ITRx_SetConfig>
 8005014:	e02c      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6859      	ldr	r1, [r3, #4]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	461a      	mov	r2, r3
 8005024:	f000 fab7 	bl	8005596 <TIM_TI2_ConfigInputStage>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2160      	movs	r1, #96	@ 0x60
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fae1 	bl	80055f6 <TIM_ITRx_SetConfig>
 8005034:	e01c      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	461a      	mov	r2, r3
 8005044:	f000 fa78 	bl	8005538 <TIM_TI1_ConfigInputStage>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2140      	movs	r1, #64	@ 0x40
 800504e:	4618      	mov	r0, r3
 8005050:	f000 fad1 	bl	80055f6 <TIM_ITRx_SetConfig>
 8005054:	e00c      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f000 fac8 	bl	80055f6 <TIM_ITRx_SetConfig>
 8005066:	e003      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e000      	b.n	8005070 <HAL_TIM_ConfigClockSource+0x174>
 800506e:	bf00      	nop
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <TIM_Base_SetConfig>:
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a43      	ldr	r2, [pc, #268]	@ (80051ac <TIM_Base_SetConfig+0x120>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050aa:	d00f      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a40      	ldr	r2, [pc, #256]	@ (80051b0 <TIM_Base_SetConfig+0x124>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00b      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3f      	ldr	r2, [pc, #252]	@ (80051b4 <TIM_Base_SetConfig+0x128>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3e      	ldr	r2, [pc, #248]	@ (80051b8 <TIM_Base_SetConfig+0x12c>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3d      	ldr	r2, [pc, #244]	@ (80051bc <TIM_Base_SetConfig+0x130>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d108      	bne.n	80050de <TIM_Base_SetConfig+0x52>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a32      	ldr	r2, [pc, #200]	@ (80051ac <TIM_Base_SetConfig+0x120>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ec:	d027      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <TIM_Base_SetConfig+0x124>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d023      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2e      	ldr	r2, [pc, #184]	@ (80051b4 <TIM_Base_SetConfig+0x128>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01f      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <TIM_Base_SetConfig+0x12c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d01b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2c      	ldr	r2, [pc, #176]	@ (80051bc <TIM_Base_SetConfig+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d017      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2b      	ldr	r2, [pc, #172]	@ (80051c0 <TIM_Base_SetConfig+0x134>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d013      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a2a      	ldr	r2, [pc, #168]	@ (80051c4 <TIM_Base_SetConfig+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00f      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <TIM_Base_SetConfig+0x13c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00b      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a28      	ldr	r2, [pc, #160]	@ (80051cc <TIM_Base_SetConfig+0x140>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a27      	ldr	r2, [pc, #156]	@ (80051d0 <TIM_Base_SetConfig+0x144>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <TIM_Base_SetConfig+0x148>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d108      	bne.n	8005150 <TIM_Base_SetConfig+0xc4>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	4313      	orrs	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	629a      	str	r2, [r3, #40]	@ 0x28
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a0e      	ldr	r2, [pc, #56]	@ (80051ac <TIM_Base_SetConfig+0x120>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_Base_SetConfig+0xf2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a10      	ldr	r2, [pc, #64]	@ (80051bc <TIM_Base_SetConfig+0x130>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d103      	bne.n	8005186 <TIM_Base_SetConfig+0xfa>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	631a      	str	r2, [r3, #48]	@ 0x30
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	615a      	str	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400
 80051c8:	40014800 	.word	0x40014800
 80051cc:	40001800 	.word	0x40001800
 80051d0:	40001c00 	.word	0x40001c00
 80051d4:	40002000 	.word	0x40002000

080051d8 <TIM_OC1_SetConfig>:
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 0201 	bic.w	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	621a      	str	r2, [r3, #32]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 0303 	bic.w	r3, r3, #3
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f023 0302 	bic.w	r3, r3, #2
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a20      	ldr	r2, [pc, #128]	@ (80052b0 <TIM_OC1_SetConfig+0xd8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_OC1_SetConfig+0x64>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1f      	ldr	r2, [pc, #124]	@ (80052b4 <TIM_OC1_SetConfig+0xdc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d10c      	bne.n	8005256 <TIM_OC1_SetConfig+0x7e>
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0308 	bic.w	r3, r3, #8
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <TIM_OC1_SetConfig+0xd8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d003      	beq.n	8005266 <TIM_OC1_SetConfig+0x8e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <TIM_OC1_SetConfig+0xdc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d111      	bne.n	800528a <TIM_OC1_SetConfig+0xb2>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	605a      	str	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	619a      	str	r2, [r3, #24]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400

080052b8 <TIM_OC2_SetConfig>:
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f023 0210 	bic.w	r2, r3, #16
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f023 0320 	bic.w	r3, r3, #32
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	011b      	lsls	r3, r3, #4
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a22      	ldr	r2, [pc, #136]	@ (800539c <TIM_OC2_SetConfig+0xe4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_OC2_SetConfig+0x68>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a21      	ldr	r2, [pc, #132]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d10d      	bne.n	800533c <TIM_OC2_SetConfig+0x84>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a17      	ldr	r2, [pc, #92]	@ (800539c <TIM_OC2_SetConfig+0xe4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d003      	beq.n	800534c <TIM_OC2_SetConfig+0x94>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a16      	ldr	r2, [pc, #88]	@ (80053a0 <TIM_OC2_SetConfig+0xe8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d113      	bne.n	8005374 <TIM_OC2_SetConfig+0xbc>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	619a      	str	r2, [r3, #24]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685a      	ldr	r2, [r3, #4]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	639a      	str	r2, [r3, #56]	@ 0x38
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40010400 	.word	0x40010400

080053a4 <TIM_OC3_SetConfig>:
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	621a      	str	r2, [r3, #32]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0303 	bic.w	r3, r3, #3
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	@ (8005484 <TIM_OC3_SetConfig+0xe0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d003      	beq.n	800540a <TIM_OC3_SetConfig+0x66>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a20      	ldr	r2, [pc, #128]	@ (8005488 <TIM_OC3_SetConfig+0xe4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d10d      	bne.n	8005426 <TIM_OC3_SetConfig+0x82>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a16      	ldr	r2, [pc, #88]	@ (8005484 <TIM_OC3_SetConfig+0xe0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d003      	beq.n	8005436 <TIM_OC3_SetConfig+0x92>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a15      	ldr	r2, [pc, #84]	@ (8005488 <TIM_OC3_SetConfig+0xe4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d113      	bne.n	800545e <TIM_OC3_SetConfig+0xba>
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	61da      	str	r2, [r3, #28]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	621a      	str	r2, [r3, #32]
 8005478:	bf00      	nop
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	40010000 	.word	0x40010000
 8005488:	40010400 	.word	0x40010400

0800548c <TIM_OC4_SetConfig>:
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	621a      	str	r2, [r3, #32]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	021b      	lsls	r3, r3, #8
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054d6:	613b      	str	r3, [r7, #16]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	031b      	lsls	r3, r3, #12
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a12      	ldr	r2, [pc, #72]	@ (8005530 <TIM_OC4_SetConfig+0xa4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC4_SetConfig+0x68>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a11      	ldr	r2, [pc, #68]	@ (8005534 <TIM_OC4_SetConfig+0xa8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d109      	bne.n	8005508 <TIM_OC4_SetConfig+0x7c>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	61da      	str	r2, [r3, #28]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	@ 0x40
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	621a      	str	r2, [r3, #32]
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_TI1_ConfigInputStage>:
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	f023 0201 	bic.w	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	621a      	str	r2, [r3, #32]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f023 030a 	bic.w	r3, r3, #10
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	619a      	str	r2, [r3, #24]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	621a      	str	r2, [r3, #32]
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <TIM_TI2_ConfigInputStage>:
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	617b      	str	r3, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f023 0210 	bic.w	r2, r3, #16
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	621a      	str	r2, [r3, #32]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	613b      	str	r3, [r7, #16]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055c0:	613b      	str	r3, [r7, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	619a      	str	r2, [r3, #24]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	697a      	ldr	r2, [r7, #20]
 80055e8:	621a      	str	r2, [r3, #32]
 80055ea:	bf00      	nop
 80055ec:	371c      	adds	r7, #28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <TIM_ITRx_SetConfig>:
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	6039      	str	r1, [r7, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	f043 0307 	orr.w	r3, r3, #7
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <TIM_ETR_SetConfig>:
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	021a      	lsls	r2, r3, #8
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	431a      	orrs	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4313      	orrs	r3, r2
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <TIM_CCxChannelCmd>:
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	2201      	movs	r2, #1
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1a      	ldr	r2, [r3, #32]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	43db      	mvns	r3, r3
 800568e:	401a      	ands	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	621a      	str	r2, [r3, #32]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6a1a      	ldr	r2, [r3, #32]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 031f 	and.w	r3, r3, #31
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	621a      	str	r2, [r3, #32]
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e05a      	b.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	@ (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800571c:	d01d      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1d      	ldr	r2, [pc, #116]	@ (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1b      	ldr	r2, [pc, #108]	@ (800579c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1a      	ldr	r2, [pc, #104]	@ (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a17      	ldr	r2, [pc, #92]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d10c      	bne.n	8005774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	4313      	orrs	r3, r2
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005784:	2300      	movs	r3, #0
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40001800 	.word	0x40001800

080057b0 <HAL_UART_Init>:
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x12>
 80057be:	2301      	movs	r3, #1
 80057c0:	e042      	b.n	8005848 <HAL_UART_Init+0x98>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <HAL_UART_Init+0x2c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fd f804 	bl	80027e4 <HAL_UART_MspInit>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2224      	movs	r2, #36	@ 0x24
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057f2:	60da      	str	r2, [r3, #12]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fd7f 	bl	80062f8 <UART_SetConfig>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005808:	611a      	str	r2, [r3, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005818:	615a      	str	r2, [r3, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005828:	60da      	str	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	635a      	str	r2, [r3, #52]	@ 0x34
 8005846:	2300      	movs	r3, #0
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_UART_Transmit>:
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	@ 0x28
 8005854:	af02      	add	r7, sp, #8
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	4613      	mov	r3, r2
 800585e:	80fb      	strh	r3, [r7, #6]
 8005860:	2300      	movs	r3, #0
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b20      	cmp	r3, #32
 800586e:	d175      	bne.n	800595c <HAL_UART_Transmit+0x10c>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_UART_Transmit+0x2c>
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_UART_Transmit+0x30>
 800587c:	2301      	movs	r3, #1
 800587e:	e06e      	b.n	800595e <HAL_UART_Transmit+0x10e>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2221      	movs	r2, #33	@ 0x21
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800588e:	f7fd f93f 	bl	8002b10 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	@ 0x24
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	@ 0x26
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a8:	d108      	bne.n	80058bc <HAL_UART_Transmit+0x6c>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <HAL_UART_Transmit+0x6c>
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e003      	b.n	80058c4 <HAL_UART_Transmit+0x74>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e02e      	b.n	8005924 <HAL_UART_Transmit+0xd4>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2200      	movs	r2, #0
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fb1d 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_UART_Transmit+0x98>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058e4:	2303      	movs	r3, #3
 80058e6:	e03a      	b.n	800595e <HAL_UART_Transmit+0x10e>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xb6>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xc6>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	84da      	strh	r2, [r3, #38]	@ 0x26
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cb      	bne.n	80058c6 <HAL_UART_Transmit+0x76>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2140      	movs	r1, #64	@ 0x40
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fae9 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_UART_Transmit+0x100>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800594c:	2303      	movs	r3, #3
 800594e:	e006      	b.n	800595e <HAL_UART_Transmit+0x10e>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_UART_Transmit+0x10e>
 800595c:	2302      	movs	r3, #2
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_UART_IRQHandler>:
 8005968:	b580      	push	{r7, lr}
 800596a:	b0ba      	sub	sp, #232	@ 0xe8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005994:	2300      	movs	r3, #0
 8005996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_UART_IRQHandler+0x66>
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059be:	f003 0320 	and.w	r3, r3, #32
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_IRQHandler+0x66>
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fbd7 	bl	800617a <UART_Receive_IT>
 80059cc:	e273      	b.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 80059ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 80de 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
 80059d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d106      	bne.n	80059f2 <HAL_UART_IRQHandler+0x8a>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	f000 80d1 	beq.w	8005b94 <HAL_UART_IRQHandler+0x22c>
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00b      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d005      	beq.n	8005a16 <HAL_UART_IRQHandler+0xae>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0e:	f043 0201 	orr.w	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
 8005a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_UART_IRQHandler+0xd2>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	f043 0202 	orr.w	r2, r3, #2
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00b      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
 8005a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d005      	beq.n	8005a5e <HAL_UART_IRQHandler+0xf6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a56:	f043 0204 	orr.w	r2, r3, #4
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d011      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
 8005a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d105      	bne.n	8005a82 <HAL_UART_IRQHandler+0x11a>
 8005a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <HAL_UART_IRQHandler+0x126>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a86:	f043 0208 	orr.w	r2, r3, #8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 820a 	beq.w	8005eac <HAL_UART_IRQHandler+0x544>
 8005a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
 8005aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x14e>
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fb62 	bl	800617a <UART_Receive_IT>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x17a>
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04f      	beq.n	8005b82 <HAL_UART_IRQHandler+0x21a>
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fa6d 	bl	8005fc2 <UART_EndRxTransfer>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d141      	bne.n	8005b7a <HAL_UART_IRQHandler+0x212>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b04:	e853 3f00 	ldrex	r3, [r3]
 8005b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3314      	adds	r3, #20
 8005b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1d9      	bne.n	8005af6 <HAL_UART_IRQHandler+0x18e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d013      	beq.n	8005b72 <HAL_UART_IRQHandler+0x20a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4e:	4a8a      	ldr	r2, [pc, #552]	@ (8005d78 <HAL_UART_IRQHandler+0x410>)
 8005b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd fe94 	bl	8003884 <HAL_DMA_Abort_IT>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <HAL_UART_IRQHandler+0x228>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	4798      	blx	r3
 8005b70:	e00e      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f9b6 	bl	8005ee4 <HAL_UART_ErrorCallback>
 8005b78:	e00a      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f9b2 	bl	8005ee4 <HAL_UART_ErrorCallback>
 8005b80:	e006      	b.n	8005b90 <HAL_UART_IRQHandler+0x228>
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f9ae 	bl	8005ee4 <HAL_UART_ErrorCallback>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005b8e:	e18d      	b.n	8005eac <HAL_UART_IRQHandler+0x544>
 8005b90:	bf00      	nop
 8005b92:	e18b      	b.n	8005eac <HAL_UART_IRQHandler+0x544>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	f040 8167 	bne.w	8005e6c <HAL_UART_IRQHandler+0x504>
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8160 	beq.w	8005e6c <HAL_UART_IRQHandler+0x504>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8159 	beq.w	8005e6c <HAL_UART_IRQHandler+0x504>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60bb      	str	r3, [r7, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bda:	2b40      	cmp	r3, #64	@ 0x40
 8005bdc:	f040 80ce 	bne.w	8005d7c <HAL_UART_IRQHandler+0x414>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 8005bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a9 	beq.w	8005d48 <HAL_UART_IRQHandler+0x3e0>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	f080 80a2 	bcs.w	8005d48 <HAL_UART_IRQHandler+0x3e0>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c16:	f000 8088 	beq.w	8005d2a <HAL_UART_IRQHandler+0x3c2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	330c      	adds	r3, #12
 8005c20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c56:	e841 2300 	strex	r3, r2, [r1]
 8005c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1d9      	bne.n	8005c1a <HAL_UART_IRQHandler+0x2b2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c96:	e841 2300 	strex	r3, r2, [r1]
 8005c9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1e1      	bne.n	8005c66 <HAL_UART_IRQHandler+0x2fe>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005cc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005cca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005ccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e3      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x33a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cfa:	f023 0310 	bic.w	r3, r3, #16
 8005cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	330c      	adds	r3, #12
 8005d08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005d0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e3      	bne.n	8005ce8 <HAL_UART_IRQHandler+0x380>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fd fd3d 	bl	80037a4 <HAL_DMA_Abort>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8d9 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
 8005d46:	e0b3      	b.n	8005eb0 <HAL_UART_IRQHandler+0x548>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d50:	429a      	cmp	r2, r3
 8005d52:	f040 80ad 	bne.w	8005eb0 <HAL_UART_IRQHandler+0x548>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d60:	f040 80a6 	bne.w	8005eb0 <HAL_UART_IRQHandler+0x548>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8c1 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
 8005d76:	e09b      	b.n	8005eb0 <HAL_UART_IRQHandler+0x548>
 8005d78:	08006089 	.word	0x08006089
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 808e 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x54c>
 8005d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8089 	beq.w	8005eb4 <HAL_UART_IRQHandler+0x54c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005db8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005dc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005dc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005dcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e3      	bne.n	8005da2 <HAL_UART_IRQHandler+0x43a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de4:	e853 3f00 	ldrex	r3, [r3]
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3314      	adds	r3, #20
 8005dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005dfe:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e3      	bne.n	8005dda <HAL_UART_IRQHandler+0x472>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	330c      	adds	r3, #12
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0310 	bic.w	r3, r3, #16
 8005e36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	330c      	adds	r3, #12
 8005e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005e44:	61fa      	str	r2, [r7, #28]
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e3      	bne.n	8005e20 <HAL_UART_IRQHandler+0x4b8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f847 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
 8005e6a:	e023      	b.n	8005eb4 <HAL_UART_IRQHandler+0x54c>
 8005e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d009      	beq.n	8005e8c <HAL_UART_IRQHandler+0x524>
 8005e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_UART_IRQHandler+0x524>
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f910 	bl	80060aa <UART_Transmit_IT>
 8005e8a:	e014      	b.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d008      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f950 	bl	800614a <UART_EndTransmit_IT>
 8005eaa:	e004      	b.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_UART_IRQHandler+0x54e>
 8005eb4:	bf00      	nop
 8005eb6:	37e8      	adds	r7, #232	@ 0xe8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_UART_TxCpltCallback>:
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_UART_RxCpltCallback>:
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_UART_ErrorCallback>:
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_UARTEx_RxEventCallback>:
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	807b      	strh	r3, [r7, #2]
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <UART_WaitOnFlagUntilTimeout>:
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71fb      	strb	r3, [r7, #7]
 8005f20:	e03b      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d037      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f2a:	f7fc fdf1 	bl	8002b10 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	6a3a      	ldr	r2, [r7, #32]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x34>
 8005f40:	2303      	movs	r3, #3
 8005f42:	e03a      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xaa>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d023      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b80      	cmp	r3, #128	@ 0x80
 8005f56:	d020      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b40      	cmp	r3, #64	@ 0x40
 8005f5c:	d01d      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d116      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f81d 	bl	8005fc2 <UART_EndRxTransfer>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00f      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xaa>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	bf0c      	ite	eq
 8005faa:	2301      	moveq	r3, #1
 8005fac:	2300      	movne	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d0b4      	beq.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x12>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3718      	adds	r7, #24
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}

08005fc2 <UART_EndRxTransfer>:
 8005fc2:	b480      	push	{r7}
 8005fc4:	b095      	sub	sp, #84	@ 0x54
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005fea:	643a      	str	r2, [r7, #64]	@ 0x40
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ff0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_EndRxTransfer+0x8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3314      	adds	r3, #20
 8006004:	623b      	str	r3, [r7, #32]
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	f023 0301 	bic.w	r3, r3, #1
 8006014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800601e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_EndRxTransfer+0x3c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	2b01      	cmp	r3, #1
 8006038:	d119      	bne.n	800606e <UART_EndRxTransfer+0xac>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f023 0310 	bic.w	r3, r3, #16
 8006050:	647b      	str	r3, [r7, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800605a:	61ba      	str	r2, [r7, #24]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	6979      	ldr	r1, [r7, #20]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	e841 2300 	strex	r3, r2, [r1]
 8006066:	613b      	str	r3, [r7, #16]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e5      	bne.n	800603a <UART_EndRxTransfer+0x78>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30
 800607c:	bf00      	nop
 800607e:	3754      	adds	r7, #84	@ 0x54
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <UART_DMAAbortOnError>:
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	85da      	strh	r2, [r3, #46]	@ 0x2e
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff ff21 	bl	8005ee4 <HAL_UART_ErrorCallback>
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Transmit_IT>:
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b21      	cmp	r3, #33	@ 0x21
 80060bc:	d13e      	bne.n	800613c <UART_Transmit_IT+0x92>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060c6:	d114      	bne.n	80060f2 <UART_Transmit_IT+0x48>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d110      	bne.n	80060f2 <UART_Transmit_IT+0x48>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	1c9a      	adds	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]
 80060f0:	e008      	b.n	8006104 <UART_Transmit_IT+0x5a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	1c59      	adds	r1, r3, #1
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6211      	str	r1, [r2, #32]
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	605a      	str	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006108:	b29b      	uxth	r3, r3
 800610a:	3b01      	subs	r3, #1
 800610c:	b29b      	uxth	r3, r3
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4619      	mov	r1, r3
 8006112:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <UART_Transmit_IT+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	2300      	movs	r3, #0
 800613a:	e000      	b.n	800613e <UART_Transmit_IT+0x94>
 800613c:	2302      	movs	r3, #2
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <UART_EndTransmit_IT>:
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006160:	60da      	str	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fea6 	bl	8005ebc <HAL_UART_TxCpltCallback>
 8006170:	2300      	movs	r3, #0
 8006172:	4618      	mov	r0, r3
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <UART_Receive_IT>:
 800617a:	b580      	push	{r7, lr}
 800617c:	b08c      	sub	sp, #48	@ 0x30
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	2300      	movs	r3, #0
 8006184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006186:	2300      	movs	r3, #0
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b22      	cmp	r3, #34	@ 0x22
 8006194:	f040 80aa 	bne.w	80062ec <UART_Receive_IT+0x172>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061a0:	d115      	bne.n	80061ce <UART_Receive_IT+0x54>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d111      	bne.n	80061ce <UART_Receive_IT+0x54>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c6:	1c9a      	adds	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80061cc:	e024      	b.n	8006218 <UART_Receive_IT+0x9e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061dc:	d007      	beq.n	80061ee <UART_Receive_IT+0x74>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <UART_Receive_IT+0x82>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <UART_Receive_IT+0x82>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e008      	b.n	800620e <UART_Receive_IT+0x94>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	629a      	str	r2, [r3, #40]	@ 0x28
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	b29b      	uxth	r3, r3
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4619      	mov	r1, r3
 8006226:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006228:	2b00      	cmp	r3, #0
 800622a:	d15d      	bne.n	80062e8 <UART_Receive_IT+0x16e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68da      	ldr	r2, [r3, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0220 	bic.w	r2, r2, #32
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0201 	bic.w	r2, r2, #1
 800625a:	615a      	str	r2, [r3, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	635a      	str	r2, [r3, #52]	@ 0x34
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800626e:	2b01      	cmp	r3, #1
 8006270:	d135      	bne.n	80062de <UART_Receive_IT+0x164>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	330c      	adds	r3, #12
 800627e:	617b      	str	r3, [r7, #20]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 0310 	bic.w	r3, r3, #16
 800628e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006298:	623a      	str	r2, [r7, #32]
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	69f9      	ldr	r1, [r7, #28]
 800629e:	6a3a      	ldr	r2, [r7, #32]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_Receive_IT+0xfe>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d10a      	bne.n	80062d0 <UART_Receive_IT+0x156>
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f7ff fe0e 	bl	8005ef8 <HAL_UARTEx_RxEventCallback>
 80062dc:	e002      	b.n	80062e4 <UART_Receive_IT+0x16a>
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fdf6 	bl	8005ed0 <HAL_UART_RxCpltCallback>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e002      	b.n	80062ee <UART_Receive_IT+0x174>
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <UART_Receive_IT+0x174>
 80062ec:	2302      	movs	r3, #2
 80062ee:	4618      	mov	r0, r3
 80062f0:	3730      	adds	r7, #48	@ 0x30
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <UART_SetConfig>:
 80062f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062fc:	b0c0      	sub	sp, #256	@ 0x100
 80062fe:	af00      	add	r7, sp, #0
 8006300:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006314:	68d9      	ldr	r1, [r3, #12]
 8006316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	ea40 0301 	orr.w	r3, r0, r1
 8006320:	6113      	str	r3, [r2, #16]
 8006322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	431a      	orrs	r2, r3
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	431a      	orrs	r2, r3
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006350:	f021 010c 	bic.w	r1, r1, #12
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800635e:	430b      	orrs	r3, r1
 8006360:	60d3      	str	r3, [r2, #12]
 8006362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	6999      	ldr	r1, [r3, #24]
 8006374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	ea40 0301 	orr.w	r3, r0, r1
 800637e:	6153      	str	r3, [r2, #20]
 8006380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b8f      	ldr	r3, [pc, #572]	@ (80065c4 <UART_SetConfig+0x2cc>)
 8006388:	429a      	cmp	r2, r3
 800638a:	d005      	beq.n	8006398 <UART_SetConfig+0xa0>
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b8d      	ldr	r3, [pc, #564]	@ (80065c8 <UART_SetConfig+0x2d0>)
 8006394:	429a      	cmp	r2, r3
 8006396:	d104      	bne.n	80063a2 <UART_SetConfig+0xaa>
 8006398:	f7fe fb6a 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 800639c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063a0:	e003      	b.n	80063aa <UART_SetConfig+0xb2>
 80063a2:	f7fe fb51 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80063a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b4:	f040 810c 	bne.w	80065d0 <UART_SetConfig+0x2d8>
 80063b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063ca:	4622      	mov	r2, r4
 80063cc:	462b      	mov	r3, r5
 80063ce:	1891      	adds	r1, r2, r2
 80063d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063d2:	415b      	adcs	r3, r3
 80063d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063da:	4621      	mov	r1, r4
 80063dc:	eb12 0801 	adds.w	r8, r2, r1
 80063e0:	4629      	mov	r1, r5
 80063e2:	eb43 0901 	adc.w	r9, r3, r1
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063fa:	4690      	mov	r8, r2
 80063fc:	4699      	mov	r9, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	eb18 0303 	adds.w	r3, r8, r3
 8006404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006408:	462b      	mov	r3, r5
 800640a:	eb49 0303 	adc.w	r3, r9, r3
 800640e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800641e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006426:	460b      	mov	r3, r1
 8006428:	18db      	adds	r3, r3, r3
 800642a:	653b      	str	r3, [r7, #80]	@ 0x50
 800642c:	4613      	mov	r3, r2
 800642e:	eb42 0303 	adc.w	r3, r2, r3
 8006432:	657b      	str	r3, [r7, #84]	@ 0x54
 8006434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800643c:	f7fa fa26 	bl	800088c <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4b61      	ldr	r3, [pc, #388]	@ (80065cc <UART_SetConfig+0x2d4>)
 8006446:	fba3 2302 	umull	r2, r3, r3, r2
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	011c      	lsls	r4, r3, #4
 800644e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006458:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800645c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	1891      	adds	r1, r2, r2
 8006466:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006468:	415b      	adcs	r3, r3
 800646a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800646c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006470:	4641      	mov	r1, r8
 8006472:	eb12 0a01 	adds.w	sl, r2, r1
 8006476:	4649      	mov	r1, r9
 8006478:	eb43 0b01 	adc.w	fp, r3, r1
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800648c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006490:	4692      	mov	sl, r2
 8006492:	469b      	mov	fp, r3
 8006494:	4643      	mov	r3, r8
 8006496:	eb1a 0303 	adds.w	r3, sl, r3
 800649a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800649e:	464b      	mov	r3, r9
 80064a0:	eb4b 0303 	adc.w	r3, fp, r3
 80064a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064bc:	460b      	mov	r3, r1
 80064be:	18db      	adds	r3, r3, r3
 80064c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c2:	4613      	mov	r3, r2
 80064c4:	eb42 0303 	adc.w	r3, r2, r3
 80064c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064d2:	f7fa f9db 	bl	800088c <__aeabi_uldivmod>
 80064d6:	4602      	mov	r2, r0
 80064d8:	460b      	mov	r3, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	4b3b      	ldr	r3, [pc, #236]	@ (80065cc <UART_SetConfig+0x2d4>)
 80064de:	fba3 2301 	umull	r2, r3, r3, r1
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2264      	movs	r2, #100	@ 0x64
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	1acb      	subs	r3, r1, r3
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064f2:	4b36      	ldr	r3, [pc, #216]	@ (80065cc <UART_SetConfig+0x2d4>)
 80064f4:	fba3 2302 	umull	r2, r3, r3, r2
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006500:	441c      	add	r4, r3
 8006502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006506:	2200      	movs	r2, #0
 8006508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800650c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006514:	4642      	mov	r2, r8
 8006516:	464b      	mov	r3, r9
 8006518:	1891      	adds	r1, r2, r2
 800651a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800651c:	415b      	adcs	r3, r3
 800651e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006524:	4641      	mov	r1, r8
 8006526:	1851      	adds	r1, r2, r1
 8006528:	6339      	str	r1, [r7, #48]	@ 0x30
 800652a:	4649      	mov	r1, r9
 800652c:	414b      	adcs	r3, r1
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800653c:	4659      	mov	r1, fp
 800653e:	00cb      	lsls	r3, r1, #3
 8006540:	4651      	mov	r1, sl
 8006542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006546:	4651      	mov	r1, sl
 8006548:	00ca      	lsls	r2, r1, #3
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	4603      	mov	r3, r0
 8006550:	4642      	mov	r2, r8
 8006552:	189b      	adds	r3, r3, r2
 8006554:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006558:	464b      	mov	r3, r9
 800655a:	460a      	mov	r2, r1
 800655c:	eb42 0303 	adc.w	r3, r2, r3
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006570:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006578:	460b      	mov	r3, r1
 800657a:	18db      	adds	r3, r3, r3
 800657c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800657e:	4613      	mov	r3, r2
 8006580:	eb42 0303 	adc.w	r3, r2, r3
 8006584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800658a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800658e:	f7fa f97d 	bl	800088c <__aeabi_uldivmod>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4b0d      	ldr	r3, [pc, #52]	@ (80065cc <UART_SetConfig+0x2d4>)
 8006598:	fba3 1302 	umull	r1, r3, r3, r2
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	2164      	movs	r1, #100	@ 0x64
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	3332      	adds	r3, #50	@ 0x32
 80065aa:	4a08      	ldr	r2, [pc, #32]	@ (80065cc <UART_SetConfig+0x2d4>)
 80065ac:	fba2 2303 	umull	r2, r3, r2, r3
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	f003 0207 	and.w	r2, r3, #7
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4422      	add	r2, r4
 80065be:	609a      	str	r2, [r3, #8]
 80065c0:	e106      	b.n	80067d0 <UART_SetConfig+0x4d8>
 80065c2:	bf00      	nop
 80065c4:	40011000 	.word	0x40011000
 80065c8:	40011400 	.word	0x40011400
 80065cc:	51eb851f 	.word	0x51eb851f
 80065d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065e2:	4642      	mov	r2, r8
 80065e4:	464b      	mov	r3, r9
 80065e6:	1891      	adds	r1, r2, r2
 80065e8:	6239      	str	r1, [r7, #32]
 80065ea:	415b      	adcs	r3, r3
 80065ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065f2:	4641      	mov	r1, r8
 80065f4:	1854      	adds	r4, r2, r1
 80065f6:	4649      	mov	r1, r9
 80065f8:	eb43 0501 	adc.w	r5, r3, r1
 80065fc:	f04f 0200 	mov.w	r2, #0
 8006600:	f04f 0300 	mov.w	r3, #0
 8006604:	00eb      	lsls	r3, r5, #3
 8006606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800660a:	00e2      	lsls	r2, r4, #3
 800660c:	4614      	mov	r4, r2
 800660e:	461d      	mov	r5, r3
 8006610:	4643      	mov	r3, r8
 8006612:	18e3      	adds	r3, r4, r3
 8006614:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006618:	464b      	mov	r3, r9
 800661a:	eb45 0303 	adc.w	r3, r5, r3
 800661e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800662e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800663e:	4629      	mov	r1, r5
 8006640:	008b      	lsls	r3, r1, #2
 8006642:	4621      	mov	r1, r4
 8006644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006648:	4621      	mov	r1, r4
 800664a:	008a      	lsls	r2, r1, #2
 800664c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006650:	f7fa f91c 	bl	800088c <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4b60      	ldr	r3, [pc, #384]	@ (80067dc <UART_SetConfig+0x4e4>)
 800665a:	fba3 2302 	umull	r2, r3, r3, r2
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	011c      	lsls	r4, r3, #4
 8006662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006666:	2200      	movs	r2, #0
 8006668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800666c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	1891      	adds	r1, r2, r2
 800667a:	61b9      	str	r1, [r7, #24]
 800667c:	415b      	adcs	r3, r3
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006684:	4641      	mov	r1, r8
 8006686:	1851      	adds	r1, r2, r1
 8006688:	6139      	str	r1, [r7, #16]
 800668a:	4649      	mov	r1, r9
 800668c:	414b      	adcs	r3, r1
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800669c:	4659      	mov	r1, fp
 800669e:	00cb      	lsls	r3, r1, #3
 80066a0:	4651      	mov	r1, sl
 80066a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066a6:	4651      	mov	r1, sl
 80066a8:	00ca      	lsls	r2, r1, #3
 80066aa:	4610      	mov	r0, r2
 80066ac:	4619      	mov	r1, r3
 80066ae:	4603      	mov	r3, r0
 80066b0:	4642      	mov	r2, r8
 80066b2:	189b      	adds	r3, r3, r2
 80066b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066b8:	464b      	mov	r3, r9
 80066ba:	460a      	mov	r2, r1
 80066bc:	eb42 0303 	adc.w	r3, r2, r3
 80066c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066dc:	4649      	mov	r1, r9
 80066de:	008b      	lsls	r3, r1, #2
 80066e0:	4641      	mov	r1, r8
 80066e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e6:	4641      	mov	r1, r8
 80066e8:	008a      	lsls	r2, r1, #2
 80066ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80066ee:	f7fa f8cd 	bl	800088c <__aeabi_uldivmod>
 80066f2:	4602      	mov	r2, r0
 80066f4:	460b      	mov	r3, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	4b38      	ldr	r3, [pc, #224]	@ (80067dc <UART_SetConfig+0x4e4>)
 80066fa:	fba3 2301 	umull	r2, r3, r3, r1
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2264      	movs	r2, #100	@ 0x64
 8006702:	fb02 f303 	mul.w	r3, r2, r3
 8006706:	1acb      	subs	r3, r1, r3
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	3332      	adds	r3, #50	@ 0x32
 800670c:	4a33      	ldr	r2, [pc, #204]	@ (80067dc <UART_SetConfig+0x4e4>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006718:	441c      	add	r4, r3
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671e:	2200      	movs	r2, #0
 8006720:	673b      	str	r3, [r7, #112]	@ 0x70
 8006722:	677a      	str	r2, [r7, #116]	@ 0x74
 8006724:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	1891      	adds	r1, r2, r2
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	415b      	adcs	r3, r3
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006738:	4641      	mov	r1, r8
 800673a:	1851      	adds	r1, r2, r1
 800673c:	6039      	str	r1, [r7, #0]
 800673e:	4649      	mov	r1, r9
 8006740:	414b      	adcs	r3, r1
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006750:	4659      	mov	r1, fp
 8006752:	00cb      	lsls	r3, r1, #3
 8006754:	4651      	mov	r1, sl
 8006756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800675a:	4651      	mov	r1, sl
 800675c:	00ca      	lsls	r2, r1, #3
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	4603      	mov	r3, r0
 8006764:	4642      	mov	r2, r8
 8006766:	189b      	adds	r3, r3, r2
 8006768:	66bb      	str	r3, [r7, #104]	@ 0x68
 800676a:	464b      	mov	r3, r9
 800676c:	460a      	mov	r2, r1
 800676e:	eb42 0303 	adc.w	r3, r2, r3
 8006772:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	663b      	str	r3, [r7, #96]	@ 0x60
 800677e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	f04f 0300 	mov.w	r3, #0
 8006788:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800678c:	4649      	mov	r1, r9
 800678e:	008b      	lsls	r3, r1, #2
 8006790:	4641      	mov	r1, r8
 8006792:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006796:	4641      	mov	r1, r8
 8006798:	008a      	lsls	r2, r1, #2
 800679a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800679e:	f7fa f875 	bl	800088c <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <UART_SetConfig+0x4e4>)
 80067a8:	fba3 1302 	umull	r1, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	2164      	movs	r1, #100	@ 0x64
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	3332      	adds	r3, #50	@ 0x32
 80067ba:	4a08      	ldr	r2, [pc, #32]	@ (80067dc <UART_SetConfig+0x4e4>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f003 020f 	and.w	r2, r3, #15
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4422      	add	r2, r4
 80067ce:	609a      	str	r2, [r3, #8]
 80067d0:	bf00      	nop
 80067d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067d6:	46bd      	mov	sp, r7
 80067d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067dc:	51eb851f 	.word	0x51eb851f

080067e0 <siprintf>:
 80067e0:	b40e      	push	{r1, r2, r3}
 80067e2:	b510      	push	{r4, lr}
 80067e4:	b09d      	sub	sp, #116	@ 0x74
 80067e6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80067e8:	9002      	str	r0, [sp, #8]
 80067ea:	9006      	str	r0, [sp, #24]
 80067ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80067f0:	480a      	ldr	r0, [pc, #40]	@ (800681c <siprintf+0x3c>)
 80067f2:	9107      	str	r1, [sp, #28]
 80067f4:	9104      	str	r1, [sp, #16]
 80067f6:	490a      	ldr	r1, [pc, #40]	@ (8006820 <siprintf+0x40>)
 80067f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fc:	9105      	str	r1, [sp, #20]
 80067fe:	2400      	movs	r4, #0
 8006800:	a902      	add	r1, sp, #8
 8006802:	6800      	ldr	r0, [r0, #0]
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006808:	f000 f994 	bl	8006b34 <_svfiprintf_r>
 800680c:	9b02      	ldr	r3, [sp, #8]
 800680e:	701c      	strb	r4, [r3, #0]
 8006810:	b01d      	add	sp, #116	@ 0x74
 8006812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006816:	b003      	add	sp, #12
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	20000014 	.word	0x20000014
 8006820:	ffff0208 	.word	0xffff0208

08006824 <memset>:
 8006824:	4402      	add	r2, r0
 8006826:	4603      	mov	r3, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <__errno>:
 8006834:	4b01      	ldr	r3, [pc, #4]	@ (800683c <__errno+0x8>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20000014 	.word	0x20000014

08006840 <__libc_init_array>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4d0d      	ldr	r5, [pc, #52]	@ (8006878 <__libc_init_array+0x38>)
 8006844:	4c0d      	ldr	r4, [pc, #52]	@ (800687c <__libc_init_array+0x3c>)
 8006846:	1b64      	subs	r4, r4, r5
 8006848:	10a4      	asrs	r4, r4, #2
 800684a:	2600      	movs	r6, #0
 800684c:	42a6      	cmp	r6, r4
 800684e:	d109      	bne.n	8006864 <__libc_init_array+0x24>
 8006850:	4d0b      	ldr	r5, [pc, #44]	@ (8006880 <__libc_init_array+0x40>)
 8006852:	4c0c      	ldr	r4, [pc, #48]	@ (8006884 <__libc_init_array+0x44>)
 8006854:	f000 fc64 	bl	8007120 <_init>
 8006858:	1b64      	subs	r4, r4, r5
 800685a:	10a4      	asrs	r4, r4, #2
 800685c:	2600      	movs	r6, #0
 800685e:	42a6      	cmp	r6, r4
 8006860:	d105      	bne.n	800686e <__libc_init_array+0x2e>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	f855 3b04 	ldr.w	r3, [r5], #4
 8006868:	4798      	blx	r3
 800686a:	3601      	adds	r6, #1
 800686c:	e7ee      	b.n	800684c <__libc_init_array+0xc>
 800686e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006872:	4798      	blx	r3
 8006874:	3601      	adds	r6, #1
 8006876:	e7f2      	b.n	800685e <__libc_init_array+0x1e>
 8006878:	080071d8 	.word	0x080071d8
 800687c:	080071d8 	.word	0x080071d8
 8006880:	080071d8 	.word	0x080071d8
 8006884:	080071dc 	.word	0x080071dc

08006888 <__retarget_lock_acquire_recursive>:
 8006888:	4770      	bx	lr

0800688a <__retarget_lock_release_recursive>:
 800688a:	4770      	bx	lr

0800688c <_free_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4605      	mov	r5, r0
 8006890:	2900      	cmp	r1, #0
 8006892:	d041      	beq.n	8006918 <_free_r+0x8c>
 8006894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006898:	1f0c      	subs	r4, r1, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bfb8      	it	lt
 800689e:	18e4      	addlt	r4, r4, r3
 80068a0:	f000 f8e0 	bl	8006a64 <__malloc_lock>
 80068a4:	4a1d      	ldr	r2, [pc, #116]	@ (800691c <_free_r+0x90>)
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	b933      	cbnz	r3, 80068b8 <_free_r+0x2c>
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	6014      	str	r4, [r2, #0]
 80068ae:	4628      	mov	r0, r5
 80068b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b4:	f000 b8dc 	b.w	8006a70 <__malloc_unlock>
 80068b8:	42a3      	cmp	r3, r4
 80068ba:	d908      	bls.n	80068ce <_free_r+0x42>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	1821      	adds	r1, r4, r0
 80068c0:	428b      	cmp	r3, r1
 80068c2:	bf01      	itttt	eq
 80068c4:	6819      	ldreq	r1, [r3, #0]
 80068c6:	685b      	ldreq	r3, [r3, #4]
 80068c8:	1809      	addeq	r1, r1, r0
 80068ca:	6021      	streq	r1, [r4, #0]
 80068cc:	e7ed      	b.n	80068aa <_free_r+0x1e>
 80068ce:	461a      	mov	r2, r3
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	b10b      	cbz	r3, 80068d8 <_free_r+0x4c>
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	d9fa      	bls.n	80068ce <_free_r+0x42>
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	1850      	adds	r0, r2, r1
 80068dc:	42a0      	cmp	r0, r4
 80068de:	d10b      	bne.n	80068f8 <_free_r+0x6c>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	4401      	add	r1, r0
 80068e4:	1850      	adds	r0, r2, r1
 80068e6:	4283      	cmp	r3, r0
 80068e8:	6011      	str	r1, [r2, #0]
 80068ea:	d1e0      	bne.n	80068ae <_free_r+0x22>
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	4408      	add	r0, r1
 80068f4:	6010      	str	r0, [r2, #0]
 80068f6:	e7da      	b.n	80068ae <_free_r+0x22>
 80068f8:	d902      	bls.n	8006900 <_free_r+0x74>
 80068fa:	230c      	movs	r3, #12
 80068fc:	602b      	str	r3, [r5, #0]
 80068fe:	e7d6      	b.n	80068ae <_free_r+0x22>
 8006900:	6820      	ldr	r0, [r4, #0]
 8006902:	1821      	adds	r1, r4, r0
 8006904:	428b      	cmp	r3, r1
 8006906:	bf04      	itt	eq
 8006908:	6819      	ldreq	r1, [r3, #0]
 800690a:	685b      	ldreq	r3, [r3, #4]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	bf04      	itt	eq
 8006910:	1809      	addeq	r1, r1, r0
 8006912:	6021      	streq	r1, [r4, #0]
 8006914:	6054      	str	r4, [r2, #4]
 8006916:	e7ca      	b.n	80068ae <_free_r+0x22>
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	20000414 	.word	0x20000414

08006920 <sbrk_aligned>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	4e0f      	ldr	r6, [pc, #60]	@ (8006960 <sbrk_aligned+0x40>)
 8006924:	460c      	mov	r4, r1
 8006926:	6831      	ldr	r1, [r6, #0]
 8006928:	4605      	mov	r5, r0
 800692a:	b911      	cbnz	r1, 8006932 <sbrk_aligned+0x12>
 800692c:	f000 fba4 	bl	8007078 <_sbrk_r>
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fb9f 	bl	8007078 <_sbrk_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	d103      	bne.n	8006946 <sbrk_aligned+0x26>
 800693e:	f04f 34ff 	mov.w	r4, #4294967295
 8006942:	4620      	mov	r0, r4
 8006944:	bd70      	pop	{r4, r5, r6, pc}
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d0f8      	beq.n	8006942 <sbrk_aligned+0x22>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fb90 	bl	8007078 <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d1f2      	bne.n	8006942 <sbrk_aligned+0x22>
 800695c:	e7ef      	b.n	800693e <sbrk_aligned+0x1e>
 800695e:	bf00      	nop
 8006960:	20000410 	.word	0x20000410

08006964 <_malloc_r>:
 8006964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006968:	1ccd      	adds	r5, r1, #3
 800696a:	f025 0503 	bic.w	r5, r5, #3
 800696e:	3508      	adds	r5, #8
 8006970:	2d0c      	cmp	r5, #12
 8006972:	bf38      	it	cc
 8006974:	250c      	movcc	r5, #12
 8006976:	2d00      	cmp	r5, #0
 8006978:	4606      	mov	r6, r0
 800697a:	db01      	blt.n	8006980 <_malloc_r+0x1c>
 800697c:	42a9      	cmp	r1, r5
 800697e:	d904      	bls.n	800698a <_malloc_r+0x26>
 8006980:	230c      	movs	r3, #12
 8006982:	6033      	str	r3, [r6, #0]
 8006984:	2000      	movs	r0, #0
 8006986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800698a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a60 <_malloc_r+0xfc>
 800698e:	f000 f869 	bl	8006a64 <__malloc_lock>
 8006992:	f8d8 3000 	ldr.w	r3, [r8]
 8006996:	461c      	mov	r4, r3
 8006998:	bb44      	cbnz	r4, 80069ec <_malloc_r+0x88>
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff ffbf 	bl	8006920 <sbrk_aligned>
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	4604      	mov	r4, r0
 80069a6:	d158      	bne.n	8006a5a <_malloc_r+0xf6>
 80069a8:	f8d8 4000 	ldr.w	r4, [r8]
 80069ac:	4627      	mov	r7, r4
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	d143      	bne.n	8006a3a <_malloc_r+0xd6>
 80069b2:	2c00      	cmp	r4, #0
 80069b4:	d04b      	beq.n	8006a4e <_malloc_r+0xea>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	eb04 0903 	add.w	r9, r4, r3
 80069c0:	f000 fb5a 	bl	8007078 <_sbrk_r>
 80069c4:	4581      	cmp	r9, r0
 80069c6:	d142      	bne.n	8006a4e <_malloc_r+0xea>
 80069c8:	6821      	ldr	r1, [r4, #0]
 80069ca:	1a6d      	subs	r5, r5, r1
 80069cc:	4629      	mov	r1, r5
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffa6 	bl	8006920 <sbrk_aligned>
 80069d4:	3001      	adds	r0, #1
 80069d6:	d03a      	beq.n	8006a4e <_malloc_r+0xea>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	442b      	add	r3, r5
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	bb62      	cbnz	r2, 8006a40 <_malloc_r+0xdc>
 80069e6:	f8c8 7000 	str.w	r7, [r8]
 80069ea:	e00f      	b.n	8006a0c <_malloc_r+0xa8>
 80069ec:	6822      	ldr	r2, [r4, #0]
 80069ee:	1b52      	subs	r2, r2, r5
 80069f0:	d420      	bmi.n	8006a34 <_malloc_r+0xd0>
 80069f2:	2a0b      	cmp	r2, #11
 80069f4:	d917      	bls.n	8006a26 <_malloc_r+0xc2>
 80069f6:	1961      	adds	r1, r4, r5
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	6025      	str	r5, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	6059      	strne	r1, [r3, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	bf08      	it	eq
 8006a04:	f8c8 1000 	streq.w	r1, [r8]
 8006a08:	5162      	str	r2, [r4, r5]
 8006a0a:	604b      	str	r3, [r1, #4]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f82f 	bl	8006a70 <__malloc_unlock>
 8006a12:	f104 000b 	add.w	r0, r4, #11
 8006a16:	1d23      	adds	r3, r4, #4
 8006a18:	f020 0007 	bic.w	r0, r0, #7
 8006a1c:	1ac2      	subs	r2, r0, r3
 8006a1e:	bf1c      	itt	ne
 8006a20:	1a1b      	subne	r3, r3, r0
 8006a22:	50a3      	strne	r3, [r4, r2]
 8006a24:	e7af      	b.n	8006986 <_malloc_r+0x22>
 8006a26:	6862      	ldr	r2, [r4, #4]
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	bf0c      	ite	eq
 8006a2c:	f8c8 2000 	streq.w	r2, [r8]
 8006a30:	605a      	strne	r2, [r3, #4]
 8006a32:	e7eb      	b.n	8006a0c <_malloc_r+0xa8>
 8006a34:	4623      	mov	r3, r4
 8006a36:	6864      	ldr	r4, [r4, #4]
 8006a38:	e7ae      	b.n	8006998 <_malloc_r+0x34>
 8006a3a:	463c      	mov	r4, r7
 8006a3c:	687f      	ldr	r7, [r7, #4]
 8006a3e:	e7b6      	b.n	80069ae <_malloc_r+0x4a>
 8006a40:	461a      	mov	r2, r3
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	d1fb      	bne.n	8006a40 <_malloc_r+0xdc>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6053      	str	r3, [r2, #4]
 8006a4c:	e7de      	b.n	8006a0c <_malloc_r+0xa8>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 f80c 	bl	8006a70 <__malloc_unlock>
 8006a58:	e794      	b.n	8006984 <_malloc_r+0x20>
 8006a5a:	6005      	str	r5, [r0, #0]
 8006a5c:	e7d6      	b.n	8006a0c <_malloc_r+0xa8>
 8006a5e:	bf00      	nop
 8006a60:	20000414 	.word	0x20000414

08006a64 <__malloc_lock>:
 8006a64:	4801      	ldr	r0, [pc, #4]	@ (8006a6c <__malloc_lock+0x8>)
 8006a66:	f7ff bf0f 	b.w	8006888 <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	2000040c 	.word	0x2000040c

08006a70 <__malloc_unlock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	@ (8006a78 <__malloc_unlock+0x8>)
 8006a72:	f7ff bf0a 	b.w	800688a <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	2000040c 	.word	0x2000040c

08006a7c <__ssputs_r>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	688e      	ldr	r6, [r1, #8]
 8006a82:	461f      	mov	r7, r3
 8006a84:	42be      	cmp	r6, r7
 8006a86:	680b      	ldr	r3, [r1, #0]
 8006a88:	4682      	mov	sl, r0
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	4690      	mov	r8, r2
 8006a8e:	d82d      	bhi.n	8006aec <__ssputs_r+0x70>
 8006a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a98:	d026      	beq.n	8006ae8 <__ssputs_r+0x6c>
 8006a9a:	6965      	ldr	r5, [r4, #20]
 8006a9c:	6909      	ldr	r1, [r1, #16]
 8006a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aa2:	eba3 0901 	sub.w	r9, r3, r1
 8006aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006aaa:	1c7b      	adds	r3, r7, #1
 8006aac:	444b      	add	r3, r9
 8006aae:	106d      	asrs	r5, r5, #1
 8006ab0:	429d      	cmp	r5, r3
 8006ab2:	bf38      	it	cc
 8006ab4:	461d      	movcc	r5, r3
 8006ab6:	0553      	lsls	r3, r2, #21
 8006ab8:	d527      	bpl.n	8006b0a <__ssputs_r+0x8e>
 8006aba:	4629      	mov	r1, r5
 8006abc:	f7ff ff52 	bl	8006964 <_malloc_r>
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	b360      	cbz	r0, 8006b1e <__ssputs_r+0xa2>
 8006ac4:	6921      	ldr	r1, [r4, #16]
 8006ac6:	464a      	mov	r2, r9
 8006ac8:	f000 fae6 	bl	8007098 <memcpy>
 8006acc:	89a3      	ldrh	r3, [r4, #12]
 8006ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad6:	81a3      	strh	r3, [r4, #12]
 8006ad8:	6126      	str	r6, [r4, #16]
 8006ada:	6165      	str	r5, [r4, #20]
 8006adc:	444e      	add	r6, r9
 8006ade:	eba5 0509 	sub.w	r5, r5, r9
 8006ae2:	6026      	str	r6, [r4, #0]
 8006ae4:	60a5      	str	r5, [r4, #8]
 8006ae6:	463e      	mov	r6, r7
 8006ae8:	42be      	cmp	r6, r7
 8006aea:	d900      	bls.n	8006aee <__ssputs_r+0x72>
 8006aec:	463e      	mov	r6, r7
 8006aee:	6820      	ldr	r0, [r4, #0]
 8006af0:	4632      	mov	r2, r6
 8006af2:	4641      	mov	r1, r8
 8006af4:	f000 faa6 	bl	8007044 <memmove>
 8006af8:	68a3      	ldr	r3, [r4, #8]
 8006afa:	1b9b      	subs	r3, r3, r6
 8006afc:	60a3      	str	r3, [r4, #8]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	4433      	add	r3, r6
 8006b02:	6023      	str	r3, [r4, #0]
 8006b04:	2000      	movs	r0, #0
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0a:	462a      	mov	r2, r5
 8006b0c:	f000 fad2 	bl	80070b4 <_realloc_r>
 8006b10:	4606      	mov	r6, r0
 8006b12:	2800      	cmp	r0, #0
 8006b14:	d1e0      	bne.n	8006ad8 <__ssputs_r+0x5c>
 8006b16:	6921      	ldr	r1, [r4, #16]
 8006b18:	4650      	mov	r0, sl
 8006b1a:	f7ff feb7 	bl	800688c <_free_r>
 8006b1e:	230c      	movs	r3, #12
 8006b20:	f8ca 3000 	str.w	r3, [sl]
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b30:	e7e9      	b.n	8006b06 <__ssputs_r+0x8a>
	...

08006b34 <_svfiprintf_r>:
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b38:	4698      	mov	r8, r3
 8006b3a:	898b      	ldrh	r3, [r1, #12]
 8006b3c:	061b      	lsls	r3, r3, #24
 8006b3e:	b09d      	sub	sp, #116	@ 0x74
 8006b40:	4607      	mov	r7, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	4614      	mov	r4, r2
 8006b46:	d510      	bpl.n	8006b6a <_svfiprintf_r+0x36>
 8006b48:	690b      	ldr	r3, [r1, #16]
 8006b4a:	b973      	cbnz	r3, 8006b6a <_svfiprintf_r+0x36>
 8006b4c:	2140      	movs	r1, #64	@ 0x40
 8006b4e:	f7ff ff09 	bl	8006964 <_malloc_r>
 8006b52:	6028      	str	r0, [r5, #0]
 8006b54:	6128      	str	r0, [r5, #16]
 8006b56:	b930      	cbnz	r0, 8006b66 <_svfiprintf_r+0x32>
 8006b58:	230c      	movs	r3, #12
 8006b5a:	603b      	str	r3, [r7, #0]
 8006b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b60:	b01d      	add	sp, #116	@ 0x74
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b66:	2340      	movs	r3, #64	@ 0x40
 8006b68:	616b      	str	r3, [r5, #20]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b6e:	2320      	movs	r3, #32
 8006b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b78:	2330      	movs	r3, #48	@ 0x30
 8006b7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006d18 <_svfiprintf_r+0x1e4>
 8006b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b82:	f04f 0901 	mov.w	r9, #1
 8006b86:	4623      	mov	r3, r4
 8006b88:	469a      	mov	sl, r3
 8006b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b8e:	b10a      	cbz	r2, 8006b94 <_svfiprintf_r+0x60>
 8006b90:	2a25      	cmp	r2, #37	@ 0x25
 8006b92:	d1f9      	bne.n	8006b88 <_svfiprintf_r+0x54>
 8006b94:	ebba 0b04 	subs.w	fp, sl, r4
 8006b98:	d00b      	beq.n	8006bb2 <_svfiprintf_r+0x7e>
 8006b9a:	465b      	mov	r3, fp
 8006b9c:	4622      	mov	r2, r4
 8006b9e:	4629      	mov	r1, r5
 8006ba0:	4638      	mov	r0, r7
 8006ba2:	f7ff ff6b 	bl	8006a7c <__ssputs_r>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	f000 80a7 	beq.w	8006cfa <_svfiprintf_r+0x1c6>
 8006bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bae:	445a      	add	r2, fp
 8006bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f000 809f 	beq.w	8006cfa <_svfiprintf_r+0x1c6>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bc6:	f10a 0a01 	add.w	sl, sl, #1
 8006bca:	9304      	str	r3, [sp, #16]
 8006bcc:	9307      	str	r3, [sp, #28]
 8006bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bd4:	4654      	mov	r4, sl
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bdc:	484e      	ldr	r0, [pc, #312]	@ (8006d18 <_svfiprintf_r+0x1e4>)
 8006bde:	f7f9 faff 	bl	80001e0 <memchr>
 8006be2:	9a04      	ldr	r2, [sp, #16]
 8006be4:	b9d8      	cbnz	r0, 8006c1e <_svfiprintf_r+0xea>
 8006be6:	06d0      	lsls	r0, r2, #27
 8006be8:	bf44      	itt	mi
 8006bea:	2320      	movmi	r3, #32
 8006bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bf0:	0711      	lsls	r1, r2, #28
 8006bf2:	bf44      	itt	mi
 8006bf4:	232b      	movmi	r3, #43	@ 0x2b
 8006bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c00:	d015      	beq.n	8006c2e <_svfiprintf_r+0xfa>
 8006c02:	9a07      	ldr	r2, [sp, #28]
 8006c04:	4654      	mov	r4, sl
 8006c06:	2000      	movs	r0, #0
 8006c08:	f04f 0c0a 	mov.w	ip, #10
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c12:	3b30      	subs	r3, #48	@ 0x30
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	d94b      	bls.n	8006cb0 <_svfiprintf_r+0x17c>
 8006c18:	b1b0      	cbz	r0, 8006c48 <_svfiprintf_r+0x114>
 8006c1a:	9207      	str	r2, [sp, #28]
 8006c1c:	e014      	b.n	8006c48 <_svfiprintf_r+0x114>
 8006c1e:	eba0 0308 	sub.w	r3, r0, r8
 8006c22:	fa09 f303 	lsl.w	r3, r9, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	46a2      	mov	sl, r4
 8006c2c:	e7d2      	b.n	8006bd4 <_svfiprintf_r+0xa0>
 8006c2e:	9b03      	ldr	r3, [sp, #12]
 8006c30:	1d19      	adds	r1, r3, #4
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	9103      	str	r1, [sp, #12]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfbb      	ittet	lt
 8006c3a:	425b      	neglt	r3, r3
 8006c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c40:	9307      	strge	r3, [sp, #28]
 8006c42:	9307      	strlt	r3, [sp, #28]
 8006c44:	bfb8      	it	lt
 8006c46:	9204      	strlt	r2, [sp, #16]
 8006c48:	7823      	ldrb	r3, [r4, #0]
 8006c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c4c:	d10a      	bne.n	8006c64 <_svfiprintf_r+0x130>
 8006c4e:	7863      	ldrb	r3, [r4, #1]
 8006c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c52:	d132      	bne.n	8006cba <_svfiprintf_r+0x186>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	1d1a      	adds	r2, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	9203      	str	r2, [sp, #12]
 8006c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c60:	3402      	adds	r4, #2
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006d28 <_svfiprintf_r+0x1f4>
 8006c68:	7821      	ldrb	r1, [r4, #0]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	4650      	mov	r0, sl
 8006c6e:	f7f9 fab7 	bl	80001e0 <memchr>
 8006c72:	b138      	cbz	r0, 8006c84 <_svfiprintf_r+0x150>
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	eba0 000a 	sub.w	r0, r0, sl
 8006c7a:	2240      	movs	r2, #64	@ 0x40
 8006c7c:	4082      	lsls	r2, r0
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	3401      	adds	r4, #1
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c88:	4824      	ldr	r0, [pc, #144]	@ (8006d1c <_svfiprintf_r+0x1e8>)
 8006c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c8e:	2206      	movs	r2, #6
 8006c90:	f7f9 faa6 	bl	80001e0 <memchr>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d036      	beq.n	8006d06 <_svfiprintf_r+0x1d2>
 8006c98:	4b21      	ldr	r3, [pc, #132]	@ (8006d20 <_svfiprintf_r+0x1ec>)
 8006c9a:	bb1b      	cbnz	r3, 8006ce4 <_svfiprintf_r+0x1b0>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	3307      	adds	r3, #7
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	9303      	str	r3, [sp, #12]
 8006ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006caa:	4433      	add	r3, r6
 8006cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cae:	e76a      	b.n	8006b86 <_svfiprintf_r+0x52>
 8006cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	2001      	movs	r0, #1
 8006cb8:	e7a8      	b.n	8006c0c <_svfiprintf_r+0xd8>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	3401      	adds	r4, #1
 8006cbe:	9305      	str	r3, [sp, #20]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ccc:	3a30      	subs	r2, #48	@ 0x30
 8006cce:	2a09      	cmp	r2, #9
 8006cd0:	d903      	bls.n	8006cda <_svfiprintf_r+0x1a6>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d0c6      	beq.n	8006c64 <_svfiprintf_r+0x130>
 8006cd6:	9105      	str	r1, [sp, #20]
 8006cd8:	e7c4      	b.n	8006c64 <_svfiprintf_r+0x130>
 8006cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cde:	4604      	mov	r4, r0
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e7f0      	b.n	8006cc6 <_svfiprintf_r+0x192>
 8006ce4:	ab03      	add	r3, sp, #12
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4b0e      	ldr	r3, [pc, #56]	@ (8006d24 <_svfiprintf_r+0x1f0>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f3af 8000 	nop.w
 8006cf4:	1c42      	adds	r2, r0, #1
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	d1d6      	bne.n	8006ca8 <_svfiprintf_r+0x174>
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	065b      	lsls	r3, r3, #25
 8006cfe:	f53f af2d 	bmi.w	8006b5c <_svfiprintf_r+0x28>
 8006d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d04:	e72c      	b.n	8006b60 <_svfiprintf_r+0x2c>
 8006d06:	ab03      	add	r3, sp, #12
 8006d08:	9300      	str	r3, [sp, #0]
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <_svfiprintf_r+0x1f0>)
 8006d0e:	a904      	add	r1, sp, #16
 8006d10:	4638      	mov	r0, r7
 8006d12:	f000 f879 	bl	8006e08 <_printf_i>
 8006d16:	e7ed      	b.n	8006cf4 <_svfiprintf_r+0x1c0>
 8006d18:	0800719c 	.word	0x0800719c
 8006d1c:	080071a6 	.word	0x080071a6
 8006d20:	00000000 	.word	0x00000000
 8006d24:	08006a7d 	.word	0x08006a7d
 8006d28:	080071a2 	.word	0x080071a2

08006d2c <_printf_common>:
 8006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d30:	4616      	mov	r6, r2
 8006d32:	4698      	mov	r8, r3
 8006d34:	688a      	ldr	r2, [r1, #8]
 8006d36:	690b      	ldr	r3, [r1, #16]
 8006d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	bfb8      	it	lt
 8006d40:	4613      	movlt	r3, r2
 8006d42:	6033      	str	r3, [r6, #0]
 8006d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d48:	4607      	mov	r7, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	b10a      	cbz	r2, 8006d52 <_printf_common+0x26>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	6033      	str	r3, [r6, #0]
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	0699      	lsls	r1, r3, #26
 8006d56:	bf42      	ittt	mi
 8006d58:	6833      	ldrmi	r3, [r6, #0]
 8006d5a:	3302      	addmi	r3, #2
 8006d5c:	6033      	strmi	r3, [r6, #0]
 8006d5e:	6825      	ldr	r5, [r4, #0]
 8006d60:	f015 0506 	ands.w	r5, r5, #6
 8006d64:	d106      	bne.n	8006d74 <_printf_common+0x48>
 8006d66:	f104 0a19 	add.w	sl, r4, #25
 8006d6a:	68e3      	ldr	r3, [r4, #12]
 8006d6c:	6832      	ldr	r2, [r6, #0]
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc26      	bgt.n	8006dc2 <_printf_common+0x96>
 8006d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d78:	6822      	ldr	r2, [r4, #0]
 8006d7a:	3b00      	subs	r3, #0
 8006d7c:	bf18      	it	ne
 8006d7e:	2301      	movne	r3, #1
 8006d80:	0692      	lsls	r2, r2, #26
 8006d82:	d42b      	bmi.n	8006ddc <_printf_common+0xb0>
 8006d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d88:	4641      	mov	r1, r8
 8006d8a:	4638      	mov	r0, r7
 8006d8c:	47c8      	blx	r9
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d01e      	beq.n	8006dd0 <_printf_common+0xa4>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	6922      	ldr	r2, [r4, #16]
 8006d96:	f003 0306 	and.w	r3, r3, #6
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf02      	ittt	eq
 8006d9e:	68e5      	ldreq	r5, [r4, #12]
 8006da0:	6833      	ldreq	r3, [r6, #0]
 8006da2:	1aed      	subeq	r5, r5, r3
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	bf0c      	ite	eq
 8006da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006dac:	2500      	movne	r5, #0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bfc4      	itt	gt
 8006db2:	1a9b      	subgt	r3, r3, r2
 8006db4:	18ed      	addgt	r5, r5, r3
 8006db6:	2600      	movs	r6, #0
 8006db8:	341a      	adds	r4, #26
 8006dba:	42b5      	cmp	r5, r6
 8006dbc:	d11a      	bne.n	8006df4 <_printf_common+0xc8>
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e008      	b.n	8006dd4 <_printf_common+0xa8>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4652      	mov	r2, sl
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4638      	mov	r0, r7
 8006dca:	47c8      	blx	r9
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_printf_common+0xac>
 8006dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd8:	3501      	adds	r5, #1
 8006dda:	e7c6      	b.n	8006d6a <_printf_common+0x3e>
 8006ddc:	18e1      	adds	r1, r4, r3
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	2030      	movs	r0, #48	@ 0x30
 8006de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006de6:	4422      	add	r2, r4
 8006de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006df0:	3302      	adds	r3, #2
 8006df2:	e7c7      	b.n	8006d84 <_printf_common+0x58>
 8006df4:	2301      	movs	r3, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4641      	mov	r1, r8
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	47c8      	blx	r9
 8006dfe:	3001      	adds	r0, #1
 8006e00:	d0e6      	beq.n	8006dd0 <_printf_common+0xa4>
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7d9      	b.n	8006dba <_printf_common+0x8e>
	...

08006e08 <_printf_i>:
 8006e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	7e0f      	ldrb	r7, [r1, #24]
 8006e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e10:	2f78      	cmp	r7, #120	@ 0x78
 8006e12:	4691      	mov	r9, r2
 8006e14:	4680      	mov	r8, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	469a      	mov	sl, r3
 8006e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e1e:	d807      	bhi.n	8006e30 <_printf_i+0x28>
 8006e20:	2f62      	cmp	r7, #98	@ 0x62
 8006e22:	d80a      	bhi.n	8006e3a <_printf_i+0x32>
 8006e24:	2f00      	cmp	r7, #0
 8006e26:	f000 80d1 	beq.w	8006fcc <_printf_i+0x1c4>
 8006e2a:	2f58      	cmp	r7, #88	@ 0x58
 8006e2c:	f000 80b8 	beq.w	8006fa0 <_printf_i+0x198>
 8006e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e38:	e03a      	b.n	8006eb0 <_printf_i+0xa8>
 8006e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e3e:	2b15      	cmp	r3, #21
 8006e40:	d8f6      	bhi.n	8006e30 <_printf_i+0x28>
 8006e42:	a101      	add	r1, pc, #4	@ (adr r1, 8006e48 <_printf_i+0x40>)
 8006e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006eb5 	.word	0x08006eb5
 8006e50:	08006e31 	.word	0x08006e31
 8006e54:	08006e31 	.word	0x08006e31
 8006e58:	08006e31 	.word	0x08006e31
 8006e5c:	08006e31 	.word	0x08006e31
 8006e60:	08006eb5 	.word	0x08006eb5
 8006e64:	08006e31 	.word	0x08006e31
 8006e68:	08006e31 	.word	0x08006e31
 8006e6c:	08006e31 	.word	0x08006e31
 8006e70:	08006e31 	.word	0x08006e31
 8006e74:	08006fb3 	.word	0x08006fb3
 8006e78:	08006edf 	.word	0x08006edf
 8006e7c:	08006f6d 	.word	0x08006f6d
 8006e80:	08006e31 	.word	0x08006e31
 8006e84:	08006e31 	.word	0x08006e31
 8006e88:	08006fd5 	.word	0x08006fd5
 8006e8c:	08006e31 	.word	0x08006e31
 8006e90:	08006edf 	.word	0x08006edf
 8006e94:	08006e31 	.word	0x08006e31
 8006e98:	08006e31 	.word	0x08006e31
 8006e9c:	08006f75 	.word	0x08006f75
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	1d1a      	adds	r2, r3, #4
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	6032      	str	r2, [r6, #0]
 8006ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e09c      	b.n	8006fee <_printf_i+0x1e6>
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	6820      	ldr	r0, [r4, #0]
 8006eb8:	1d19      	adds	r1, r3, #4
 8006eba:	6031      	str	r1, [r6, #0]
 8006ebc:	0606      	lsls	r6, r0, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xbc>
 8006ec0:	681d      	ldr	r5, [r3, #0]
 8006ec2:	e003      	b.n	8006ecc <_printf_i+0xc4>
 8006ec4:	0645      	lsls	r5, r0, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xb8>
 8006ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ecc:	2d00      	cmp	r5, #0
 8006ece:	da03      	bge.n	8006ed8 <_printf_i+0xd0>
 8006ed0:	232d      	movs	r3, #45	@ 0x2d
 8006ed2:	426d      	negs	r5, r5
 8006ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ed8:	4858      	ldr	r0, [pc, #352]	@ (800703c <_printf_i+0x234>)
 8006eda:	230a      	movs	r3, #10
 8006edc:	e011      	b.n	8006f02 <_printf_i+0xfa>
 8006ede:	6821      	ldr	r1, [r4, #0]
 8006ee0:	6833      	ldr	r3, [r6, #0]
 8006ee2:	0608      	lsls	r0, r1, #24
 8006ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ee8:	d402      	bmi.n	8006ef0 <_printf_i+0xe8>
 8006eea:	0649      	lsls	r1, r1, #25
 8006eec:	bf48      	it	mi
 8006eee:	b2ad      	uxthmi	r5, r5
 8006ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ef2:	4852      	ldr	r0, [pc, #328]	@ (800703c <_printf_i+0x234>)
 8006ef4:	6033      	str	r3, [r6, #0]
 8006ef6:	bf14      	ite	ne
 8006ef8:	230a      	movne	r3, #10
 8006efa:	2308      	moveq	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f02:	6866      	ldr	r6, [r4, #4]
 8006f04:	60a6      	str	r6, [r4, #8]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	db05      	blt.n	8006f16 <_printf_i+0x10e>
 8006f0a:	6821      	ldr	r1, [r4, #0]
 8006f0c:	432e      	orrs	r6, r5
 8006f0e:	f021 0104 	bic.w	r1, r1, #4
 8006f12:	6021      	str	r1, [r4, #0]
 8006f14:	d04b      	beq.n	8006fae <_printf_i+0x1a6>
 8006f16:	4616      	mov	r6, r2
 8006f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f20:	5dc7      	ldrb	r7, [r0, r7]
 8006f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f26:	462f      	mov	r7, r5
 8006f28:	42bb      	cmp	r3, r7
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	d9f4      	bls.n	8006f18 <_printf_i+0x110>
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d10b      	bne.n	8006f4a <_printf_i+0x142>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	07df      	lsls	r7, r3, #31
 8006f36:	d508      	bpl.n	8006f4a <_printf_i+0x142>
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	6861      	ldr	r1, [r4, #4]
 8006f3c:	4299      	cmp	r1, r3
 8006f3e:	bfde      	ittt	le
 8006f40:	2330      	movle	r3, #48	@ 0x30
 8006f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f4a:	1b92      	subs	r2, r2, r6
 8006f4c:	6122      	str	r2, [r4, #16]
 8006f4e:	f8cd a000 	str.w	sl, [sp]
 8006f52:	464b      	mov	r3, r9
 8006f54:	aa03      	add	r2, sp, #12
 8006f56:	4621      	mov	r1, r4
 8006f58:	4640      	mov	r0, r8
 8006f5a:	f7ff fee7 	bl	8006d2c <_printf_common>
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d14a      	bne.n	8006ff8 <_printf_i+0x1f0>
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	b004      	add	sp, #16
 8006f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	f043 0320 	orr.w	r3, r3, #32
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	4832      	ldr	r0, [pc, #200]	@ (8007040 <_printf_i+0x238>)
 8006f76:	2778      	movs	r7, #120	@ 0x78
 8006f78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	6831      	ldr	r1, [r6, #0]
 8006f80:	061f      	lsls	r7, r3, #24
 8006f82:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f86:	d402      	bmi.n	8006f8e <_printf_i+0x186>
 8006f88:	065f      	lsls	r7, r3, #25
 8006f8a:	bf48      	it	mi
 8006f8c:	b2ad      	uxthmi	r5, r5
 8006f8e:	6031      	str	r1, [r6, #0]
 8006f90:	07d9      	lsls	r1, r3, #31
 8006f92:	bf44      	itt	mi
 8006f94:	f043 0320 	orrmi.w	r3, r3, #32
 8006f98:	6023      	strmi	r3, [r4, #0]
 8006f9a:	b11d      	cbz	r5, 8006fa4 <_printf_i+0x19c>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	e7ad      	b.n	8006efc <_printf_i+0xf4>
 8006fa0:	4826      	ldr	r0, [pc, #152]	@ (800703c <_printf_i+0x234>)
 8006fa2:	e7e9      	b.n	8006f78 <_printf_i+0x170>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	f023 0320 	bic.w	r3, r3, #32
 8006faa:	6023      	str	r3, [r4, #0]
 8006fac:	e7f6      	b.n	8006f9c <_printf_i+0x194>
 8006fae:	4616      	mov	r6, r2
 8006fb0:	e7bd      	b.n	8006f2e <_printf_i+0x126>
 8006fb2:	6833      	ldr	r3, [r6, #0]
 8006fb4:	6825      	ldr	r5, [r4, #0]
 8006fb6:	6961      	ldr	r1, [r4, #20]
 8006fb8:	1d18      	adds	r0, r3, #4
 8006fba:	6030      	str	r0, [r6, #0]
 8006fbc:	062e      	lsls	r6, r5, #24
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	d501      	bpl.n	8006fc6 <_printf_i+0x1be>
 8006fc2:	6019      	str	r1, [r3, #0]
 8006fc4:	e002      	b.n	8006fcc <_printf_i+0x1c4>
 8006fc6:	0668      	lsls	r0, r5, #25
 8006fc8:	d5fb      	bpl.n	8006fc2 <_printf_i+0x1ba>
 8006fca:	8019      	strh	r1, [r3, #0]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6123      	str	r3, [r4, #16]
 8006fd0:	4616      	mov	r6, r2
 8006fd2:	e7bc      	b.n	8006f4e <_printf_i+0x146>
 8006fd4:	6833      	ldr	r3, [r6, #0]
 8006fd6:	1d1a      	adds	r2, r3, #4
 8006fd8:	6032      	str	r2, [r6, #0]
 8006fda:	681e      	ldr	r6, [r3, #0]
 8006fdc:	6862      	ldr	r2, [r4, #4]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f7f9 f8fd 	bl	80001e0 <memchr>
 8006fe6:	b108      	cbz	r0, 8006fec <_printf_i+0x1e4>
 8006fe8:	1b80      	subs	r0, r0, r6
 8006fea:	6060      	str	r0, [r4, #4]
 8006fec:	6863      	ldr	r3, [r4, #4]
 8006fee:	6123      	str	r3, [r4, #16]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff6:	e7aa      	b.n	8006f4e <_printf_i+0x146>
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	4632      	mov	r2, r6
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	4640      	mov	r0, r8
 8007000:	47d0      	blx	sl
 8007002:	3001      	adds	r0, #1
 8007004:	d0ad      	beq.n	8006f62 <_printf_i+0x15a>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	079b      	lsls	r3, r3, #30
 800700a:	d413      	bmi.n	8007034 <_printf_i+0x22c>
 800700c:	68e0      	ldr	r0, [r4, #12]
 800700e:	9b03      	ldr	r3, [sp, #12]
 8007010:	4298      	cmp	r0, r3
 8007012:	bfb8      	it	lt
 8007014:	4618      	movlt	r0, r3
 8007016:	e7a6      	b.n	8006f66 <_printf_i+0x15e>
 8007018:	2301      	movs	r3, #1
 800701a:	4632      	mov	r2, r6
 800701c:	4649      	mov	r1, r9
 800701e:	4640      	mov	r0, r8
 8007020:	47d0      	blx	sl
 8007022:	3001      	adds	r0, #1
 8007024:	d09d      	beq.n	8006f62 <_printf_i+0x15a>
 8007026:	3501      	adds	r5, #1
 8007028:	68e3      	ldr	r3, [r4, #12]
 800702a:	9903      	ldr	r1, [sp, #12]
 800702c:	1a5b      	subs	r3, r3, r1
 800702e:	42ab      	cmp	r3, r5
 8007030:	dcf2      	bgt.n	8007018 <_printf_i+0x210>
 8007032:	e7eb      	b.n	800700c <_printf_i+0x204>
 8007034:	2500      	movs	r5, #0
 8007036:	f104 0619 	add.w	r6, r4, #25
 800703a:	e7f5      	b.n	8007028 <_printf_i+0x220>
 800703c:	080071ad 	.word	0x080071ad
 8007040:	080071be 	.word	0x080071be

08007044 <memmove>:
 8007044:	4288      	cmp	r0, r1
 8007046:	b510      	push	{r4, lr}
 8007048:	eb01 0402 	add.w	r4, r1, r2
 800704c:	d902      	bls.n	8007054 <memmove+0x10>
 800704e:	4284      	cmp	r4, r0
 8007050:	4623      	mov	r3, r4
 8007052:	d807      	bhi.n	8007064 <memmove+0x20>
 8007054:	1e43      	subs	r3, r0, #1
 8007056:	42a1      	cmp	r1, r4
 8007058:	d008      	beq.n	800706c <memmove+0x28>
 800705a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800705e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007062:	e7f8      	b.n	8007056 <memmove+0x12>
 8007064:	4402      	add	r2, r0
 8007066:	4601      	mov	r1, r0
 8007068:	428a      	cmp	r2, r1
 800706a:	d100      	bne.n	800706e <memmove+0x2a>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007076:	e7f7      	b.n	8007068 <memmove+0x24>

08007078 <_sbrk_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	@ (8007094 <_sbrk_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fb fc6c 	bl	8002960 <_sbrk>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_sbrk_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_sbrk_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000408 	.word	0x20000408

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <_realloc_r>:
 80070b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b8:	4607      	mov	r7, r0
 80070ba:	4614      	mov	r4, r2
 80070bc:	460d      	mov	r5, r1
 80070be:	b921      	cbnz	r1, 80070ca <_realloc_r+0x16>
 80070c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c4:	4611      	mov	r1, r2
 80070c6:	f7ff bc4d 	b.w	8006964 <_malloc_r>
 80070ca:	b92a      	cbnz	r2, 80070d8 <_realloc_r+0x24>
 80070cc:	f7ff fbde 	bl	800688c <_free_r>
 80070d0:	4625      	mov	r5, r4
 80070d2:	4628      	mov	r0, r5
 80070d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d8:	f000 f81a 	bl	8007110 <_malloc_usable_size_r>
 80070dc:	4284      	cmp	r4, r0
 80070de:	4606      	mov	r6, r0
 80070e0:	d802      	bhi.n	80070e8 <_realloc_r+0x34>
 80070e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070e6:	d8f4      	bhi.n	80070d2 <_realloc_r+0x1e>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4638      	mov	r0, r7
 80070ec:	f7ff fc3a 	bl	8006964 <_malloc_r>
 80070f0:	4680      	mov	r8, r0
 80070f2:	b908      	cbnz	r0, 80070f8 <_realloc_r+0x44>
 80070f4:	4645      	mov	r5, r8
 80070f6:	e7ec      	b.n	80070d2 <_realloc_r+0x1e>
 80070f8:	42b4      	cmp	r4, r6
 80070fa:	4622      	mov	r2, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	bf28      	it	cs
 8007100:	4632      	movcs	r2, r6
 8007102:	f7ff ffc9 	bl	8007098 <memcpy>
 8007106:	4629      	mov	r1, r5
 8007108:	4638      	mov	r0, r7
 800710a:	f7ff fbbf 	bl	800688c <_free_r>
 800710e:	e7f1      	b.n	80070f4 <_realloc_r+0x40>

08007110 <_malloc_usable_size_r>:
 8007110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007114:	1f18      	subs	r0, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfbc      	itt	lt
 800711a:	580b      	ldrlt	r3, [r1, r0]
 800711c:	18c0      	addlt	r0, r0, r3
 800711e:	4770      	bx	lr

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
