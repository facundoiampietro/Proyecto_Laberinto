
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800446c  0800446c  0000546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004484  08004484  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004484  08004484  00005484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800448c  0800448c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0000548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004490  08004490  00005490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004494  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001bc  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa70  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  00010ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00012618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000919  00000000  00000000  000131d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021368  00000000  00000000  00013af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf79  00000000  00000000  00034e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20ab  00000000  00000000  00041dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003130  00000000  00000000  00113ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00116ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004454 	.word	0x08004454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004454 	.word	0x08004454

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f8:	f001 f9a8 	bl	800184c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fc:	f000 f8da 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000500:	f000 fa44 	bl	800098c <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa22 	bl	800094c <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f93e 	bl	8000788 <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f99c 	bl	8000848 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	4960      	ldr	r1, [pc, #384]	@ (8000694 <main+0x1a0>)
 8000514:	4860      	ldr	r0, [pc, #384]	@ (8000698 <main+0x1a4>)
 8000516:	f001 fa73 	bl	8001a00 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b60      	ldr	r3, [pc, #384]	@ (800069c <main+0x1a8>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b5e      	ldr	r3, [pc, #376]	@ (800069c <main+0x1a8>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <main+0x1a8>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <main+0x1a8>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b5b      	ldr	r3, [pc, #364]	@ (800069c <main+0x1a8>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <main+0x1a8>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b58      	ldr	r3, [pc, #352]	@ (800069c <main+0x1a8>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b57      	ldr	r3, [pc, #348]	@ (800069c <main+0x1a8>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b56      	ldr	r3, [pc, #344]	@ (800069c <main+0x1a8>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b55      	ldr	r3, [pc, #340]	@ (800069c <main+0x1a8>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b54      	ldr	r3, [pc, #336]	@ (800069c <main+0x1a8>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <main+0x1a8>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b52      	ldr	r3, [pc, #328]	@ (800069c <main+0x1a8>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b51      	ldr	r3, [pc, #324]	@ (800069c <main+0x1a8>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b50      	ldr	r3, [pc, #320]	@ (800069c <main+0x1a8>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <main+0x1a8>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b4e      	ldr	r3, [pc, #312]	@ (800069c <main+0x1a8>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <main+0x1a8>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b4b      	ldr	r3, [pc, #300]	@ (800069c <main+0x1a8>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b4a      	ldr	r3, [pc, #296]	@ (800069c <main+0x1a8>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b49      	ldr	r3, [pc, #292]	@ (800069c <main+0x1a8>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b48      	ldr	r3, [pc, #288]	@ (800069c <main+0x1a8>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b47      	ldr	r3, [pc, #284]	@ (800069c <main+0x1a8>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b46      	ldr	r3, [pc, #280]	@ (800069c <main+0x1a8>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b45      	ldr	r3, [pc, #276]	@ (800069c <main+0x1a8>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 800058c:	4b44      	ldr	r3, [pc, #272]	@ (80006a0 <main+0x1ac>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b43      	ldr	r3, [pc, #268]	@ (80006a0 <main+0x1ac>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b41      	ldr	r3, [pc, #260]	@ (80006a0 <main+0x1ac>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b40      	ldr	r3, [pc, #256]	@ (80006a0 <main+0x1ac>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <main+0x1ac>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b3e      	ldr	r3, [pc, #248]	@ (80006a0 <main+0x1ac>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b3c      	ldr	r3, [pc, #240]	@ (80006a0 <main+0x1ac>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b3b      	ldr	r3, [pc, #236]	@ (80006a0 <main+0x1ac>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b3a      	ldr	r3, [pc, #232]	@ (80006a0 <main+0x1ac>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b39      	ldr	r3, [pc, #228]	@ (80006a0 <main+0x1ac>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <main+0x1ac>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <main+0x1ac>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <main+0x1ac>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <main+0x1ac>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <main+0x1ac>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <main+0x1ac>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <main+0x1ac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <main+0x1ac>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <main+0x1ac>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <main+0x1ac>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <main+0x1ac>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <main+0x1ac>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <main+0x1ac>)
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	4828      	ldr	r0, [pc, #160]	@ (80006a4 <main+0x1b0>)
 8000602:	f002 fbf1 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	4825      	ldr	r0, [pc, #148]	@ (80006a4 <main+0x1b0>)
 800060e:	f002 fbeb 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4822      	ldr	r0, [pc, #136]	@ (80006a4 <main+0x1b0>)
 800061a:	f002 fbe5 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481f      	ldr	r0, [pc, #124]	@ (80006a4 <main+0x1b0>)
 8000626:	f002 fbdf 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <main+0x1b4>)
 800062e:	f003 f901 	bl	8003834 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	481c      	ldr	r0, [pc, #112]	@ (80006a8 <main+0x1b4>)
 8000636:	f003 f8fd 	bl	8003834 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0x1b8>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <main+0x1b8>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba=0; //Aca se elige que programa queremos que se realice
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <main+0x1bc>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		switch (prueba) {
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <main+0x1bc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d81b      	bhi.n	8000690 <main+0x19c>
 8000658:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <main+0x16c>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	0800067b 	.word	0x0800067b
 8000668:	08000681 	.word	0x08000681
 800066c:	08000687 	.word	0x08000687
 8000670:	0800068d 	.word	0x0800068d
		    case 0:
		        prueba_avanzar();
 8000674:	f000 fa00 	bl	8000a78 <prueba_avanzar>
		        break;
 8000678:	e00b      	b.n	8000692 <main+0x19e>
		    case 1:
		        prueba_giros_y_sensores();
 800067a:	f000 fa03 	bl	8000a84 <prueba_giros_y_sensores>
		        break;
 800067e:	e008      	b.n	8000692 <main+0x19e>
		    case 2:
		        prueba_casilla_n();
 8000680:	f000 fa7c 	bl	8000b7c <prueba_casilla_n>
		        break;
 8000684:	e005      	b.n	8000692 <main+0x19e>
		    case 3:
		    	prueba_post_relleno();
 8000686:	f000 fabd 	bl	8000c04 <prueba_post_relleno>
		        break;
 800068a:	e002      	b.n	8000692 <main+0x19e>
			case 4:	
				programa_principal();
 800068c:	f000 faee 	bl	8000c6c <programa_principal>
		    default:
		        
		        break;
 8000690:	bf00      	nop
		switch (prueba) {
 8000692:	e7dd      	b.n	8000650 <main+0x15c>
 8000694:	20000144 	.word	0x20000144
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000120 	.word	0x20000120
 80006a0:	20000130 	.word	0x20000130
 80006a4:	40020400 	.word	0x40020400
 80006a8:	200000d4 	.word	0x200000d4
 80006ac:	40000400 	.word	0x40000400
 80006b0:	20000140 	.word	0x20000140

080006b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fe9a 	bl	80043fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000728:	2332      	movs	r3, #50	@ 0x32
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fb6f 	bl	8002e1c <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
		Error_Handler();
 8000744:	f000 ff0a 	bl	800155c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fdd0 	bl	800330c <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
		Error_Handler();
 8000772:	f000 fef3 	bl	800155c <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_ADC1_Init+0xb4>)
 800079c:	4a28      	ldr	r2, [pc, #160]	@ (8000840 <MX_ADC1_Init+0xb8>)
 800079e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <MX_ADC1_Init+0xbc>)
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007e8:	4814      	ldr	r0, [pc, #80]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007ea:	f001 f8c5 	bl	8001978 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80007f4:	f000 feb2 	bl	800155c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80007f8:	2309      	movs	r3, #9
 80007fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_ADC1_Init+0xb4>)
 800080a:	f001 fa17 	bl	8001c3c <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000814:	f000 fea2 	bl	800155c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000818:	2308      	movs	r3, #8
 800081a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_ADC1_Init+0xb4>)
 8000826:	f001 fa09 	bl	8001c3c <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000830:	f000 fe94 	bl	800155c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000002c 	.word	0x2000002c
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	@ 0x38
 800084c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000878:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800087a:	4a33      	ldr	r2, [pc, #204]	@ (8000948 <MX_TIM3_Init+0x100>)
 800087c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 800088a:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800088c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000890:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800089e:	4829      	ldr	r0, [pc, #164]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008a0:	f002 ff20 	bl	80036e4 <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x66>
		Error_Handler();
 80008aa:	f000 fe57 	bl	800155c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4822      	ldr	r0, [pc, #136]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008bc:	f003 f944 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x82>
		Error_Handler();
 80008c6:	f000 fe49 	bl	800155c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008cc:	f002 ff59 	bl	8003782 <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x92>
		Error_Handler();
 80008d6:	f000 fe41 	bl	800155c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008ea:	f003 fd0b 	bl	8004304 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80008f4:	f000 fe32 	bl	800155c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2208      	movs	r2, #8
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000910:	f003 f858 	bl	80039c4 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800091a:	f000 fe1f 	bl	800155c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	220c      	movs	r2, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000926:	f003 f84d 	bl	80039c4 <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000930:	f000 fe14 	bl	800155c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000936:	f000 fed9 	bl	80016ec <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3738      	adds	r7, #56	@ 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000d4 	.word	0x200000d4
 8000948:	40000400 	.word	0x40000400

0800094c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <MX_DMA_Init+0x3c>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2038      	movs	r0, #56	@ 0x38
 8000974:	f001 fcdd 	bl	8002332 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000978:	2038      	movs	r0, #56	@ 0x38
 800097a:	f001 fcf6 	bl	800236a <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0xe0>)
 80009fc:	f002 f9f4 	bl	8002de8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000a06:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <MX_GPIO_Init+0xe4>)
 8000a08:	f002 f9ee 	bl	8002de8 <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_GPIO_Init+0xe0>)
 8000a24:	f002 f82c 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000a28:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a2c:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0xe4>)
 8000a42:	f002 f81d 	bl	8002a80 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8000a46:	23c0      	movs	r3, #192	@ 0xc0
 8000a48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_GPIO_Init+0xe8>)
 8000a5a:	f002 f811 	bl	8002a80 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800

08000a78 <prueba_avanzar>:

/* USER CODE BEGIN 4 */
void prueba_avanzar (void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000a7c:	f000 fa6a 	bl	8000f54 <correccion_avanzar>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <prueba_giros_y_sensores>:

void prueba_giros_y_sensores (void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000a88:	f000 fa64 	bl	8000f54 <correccion_avanzar>
	if (verificar_sensor()) {
 8000a8c:	f000 fbb0 	bl	80011f0 <verificar_sensor>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <prueba_giros_y_sensores+0x2a>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000a96:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4a36      	ldr	r2, [pc, #216]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f9d7 	bl	8000e54 <act_ubicacion>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000aac:	701a      	strb	r2, [r3, #0]
			}
	if (ubicacion == 8) {
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d121      	bne.n	8000afa <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000ab6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000aba:	f000 ff39 	bl	8001930 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 faee 	bl	80010a0 <ejecutarGiro>
		orientacion_actual = oeste;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000aca:	e012      	b.n	8000af2 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000acc:	f000 fa42 	bl	8000f54 <correccion_avanzar>
			if (verificar_sensor()) {
 8000ad0:	f000 fb8e 	bl	80011f0 <verificar_sensor>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4a25      	ldr	r2, [pc, #148]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f9b5 	bl	8000e54 <act_ubicacion>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000af0:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d0e8      	beq.n	8000acc <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b09      	cmp	r3, #9
 8000b00:	d121      	bne.n	8000b46 <prueba_giros_y_sensores+0xc2>
			HAL_Delay(600);
 8000b02:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b06:	f000 ff13 	bl	8001930 <HAL_Delay>
			ejecutarGiro(derecha);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 fac8 	bl	80010a0 <ejecutarGiro>
			orientacion_actual = norte;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
			while ((ubicacion == 9)) {
 8000b16:	e012      	b.n	8000b3e <prueba_giros_y_sensores+0xba>
				correccion_avanzar();
 8000b18:	f000 fa1c 	bl	8000f54 <correccion_avanzar>
				if (verificar_sensor()) {
 8000b1c:	f000 fb68 	bl	80011f0 <verificar_sensor>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00b      	beq.n	8000b3e <prueba_giros_y_sensores+0xba>
					ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f98f 	bl	8000e54 <act_ubicacion>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b3c:	701a      	strb	r2, [r3, #0]
			while ((ubicacion == 9)) {
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	d0e8      	beq.n	8000b18 <prueba_giros_y_sensores+0x94>
				}
			}
		}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)){
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b0d      	cmp	r3, #13
 8000b4c:	d10e      	bne.n	8000b6c <prueba_giros_y_sensores+0xe8>
 8000b4e:	2140      	movs	r1, #64	@ 0x40
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <prueba_giros_y_sensores+0xf4>)
 8000b52:	f002 f931 	bl	8002db8 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 fa9f 	bl	80010a0 <ejecutarGiro>
		orientacion_actual = sur;
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000b68:	f000 f9f4 	bl	8000f54 <correccion_avanzar>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000001 	.word	0x20000001
 8000b78:	40020800 	.word	0x40020800

08000b7c <prueba_casilla_n>:


void prueba_casilla_n(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    ubicacion= 5 ; //elegir ubicacion
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000b82:	2205      	movs	r2, #5
 8000b84:	701a      	strb	r2, [r3, #0]
    pared[5]= 13  ; //tiene parede en frente, izq y der
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000b88:	220d      	movs	r2, #13
 8000b8a:	715a      	strb	r2, [r3, #5]
    peso[9] = 3 ;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	725a      	strb	r2, [r3, #9]
    peso[6] =3  ;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	719a      	strb	r2, [r3, #6]
    peso[4] =5  ;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	711a      	strb	r2, [r3, #4]
    peso[1] = 5 ;   //asignarles pesos arbitrarios para ver si cumple con que vaya al menor 
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	705a      	strb	r2, [r3, #1]
    casilla_n= calculo_minimo_peso(peso, pared , ubicacion); //deberia dar que tiene que ir a 1
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4913      	ldr	r1, [pc, #76]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bae:	f000 fc37 	bl	8001420 <calculo_minimo_peso>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <prueba_casilla_n+0x84>)
 8000bb8:	701a      	strb	r2, [r3, #0]
       
    //comentar el de arriba o el de abajo
    ubicacion= 7 ; //elegir ubicacion
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
    pared[7]= 1  ; //tiene parede en frente, izq y der
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	71da      	strb	r2, [r3, #7]
    peso[11] = 1 ;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	72da      	strb	r2, [r3, #11]
    peso[6] =3  ;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	719a      	strb	r2, [r3, #6]
    peso[3] =3  ; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor 
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	70da      	strb	r2, [r3, #3]
    casilla_n= calculo_minimo_peso(peso, pared , ubicacion); //deberia dar que tiene que ir a 11
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4906      	ldr	r1, [pc, #24]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000be0:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000be2:	f000 fc1d 	bl	8001420 <calculo_minimo_peso>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <prueba_casilla_n+0x84>)
 8000bec:	701a      	strb	r2, [r3, #0]

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000130 	.word	0x20000130
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	20000002 	.word	0x20000002

08000c04 <prueba_post_relleno>:

void prueba_post_relleno (void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    ubicacion= 5 ;
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <prueba_post_relleno+0x54>)
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	701a      	strb	r2, [r3, #0]
    casilla_n = 1 ;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <prueba_post_relleno+0x58>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
    orientacion_futura =obtener_orientacion_futura(ubicacion,casilla_n); //deberia dar SUR
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <prueba_post_relleno+0x54>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <prueba_post_relleno+0x58>)
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f8ba 	bl	8000d98 <obtener_orientacion_futura>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <prueba_post_relleno+0x5c>)
 8000c2a:	701a      	strb	r2, [r3, #0]
    orientacion_actual= norte;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <prueba_post_relleno+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    giro= obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <prueba_post_relleno+0x60>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <prueba_post_relleno+0x5c>)
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8d7 	bl	8000df0 <obtenerGiro>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <prueba_post_relleno+0x64>)
 8000c48:	701a      	strb	r2, [r3, #0]
    ejecutarGiro(giro); //tendria que girar 180 xD
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <prueba_post_relleno+0x64>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa26 	bl	80010a0 <ejecutarGiro>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000002 	.word	0x20000002
 8000c60:	2000011c 	.word	0x2000011c
 8000c64:	20000001 	.word	0x20000001
 8000c68:	2000011d 	.word	0x2000011d

08000c6c <programa_principal>:


void programa_principal (void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000c70:	f000 f970 	bl	8000f54 <correccion_avanzar>

	if ((HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)){
 8000c74:	2140      	movs	r1, #64	@ 0x40
 8000c76:	4840      	ldr	r0, [pc, #256]	@ (8000d78 <programa_principal+0x10c>)
 8000c78:	f002 f89e 	bl	8002db8 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d137      	bne.n	8000cf2 <programa_principal+0x86>
		act_pared(pared, ubicacion, orientacion_actual);  //primero actualiza la pared encontrada
 8000c82:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <programa_principal+0x110>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4a3e      	ldr	r2, [pc, #248]	@ (8000d80 <programa_principal+0x114>)
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	483d      	ldr	r0, [pc, #244]	@ (8000d84 <programa_principal+0x118>)
 8000c8e:	f000 fadf 	bl	8001250 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 8000c92:	493d      	ldr	r1, [pc, #244]	@ (8000d88 <programa_principal+0x11c>)
 8000c94:	483b      	ldr	r0, [pc, #236]	@ (8000d84 <programa_principal+0x118>)
 8000c96:	f000 fb2d 	bl	80012f4 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000c9a:	4b38      	ldr	r3, [pc, #224]	@ (8000d7c <programa_principal+0x110>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4938      	ldr	r1, [pc, #224]	@ (8000d84 <programa_principal+0x118>)
 8000ca2:	4839      	ldr	r0, [pc, #228]	@ (8000d88 <programa_principal+0x11c>)
 8000ca4:	f000 fbbc 	bl	8001420 <calculo_minimo_peso>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b37      	ldr	r3, [pc, #220]	@ (8000d8c <programa_principal+0x120>)
 8000cae:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000cb0:	4b32      	ldr	r3, [pc, #200]	@ (8000d7c <programa_principal+0x110>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4a35      	ldr	r2, [pc, #212]	@ (8000d8c <programa_principal+0x120>)
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f86c 	bl	8000d98 <obtener_orientacion_futura>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <programa_principal+0x124>)
 8000cc6:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <programa_principal+0x114>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a30      	ldr	r2, [pc, #192]	@ (8000d90 <programa_principal+0x124>)
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f88c 	bl	8000df0 <obtenerGiro>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <programa_principal+0x128>)
 8000cde:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d90 <programa_principal+0x124>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <programa_principal+0x114>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <programa_principal+0x128>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f9d7 	bl	80010a0 <ejecutarGiro>
		}
	if (!verificar_sensor()) { //cambio de casilla
 8000cf2:	f000 fa7d 	bl	80011f0 <verificar_sensor>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f083 0301 	eor.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d037      	beq.n	8000d72 <programa_principal+0x106>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000d02:	4b1e      	ldr	r3, [pc, #120]	@ (8000d7c <programa_principal+0x110>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4a1e      	ldr	r2, [pc, #120]	@ (8000d80 <programa_principal+0x114>)
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8a1 	bl	8000e54 <act_ubicacion>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <programa_principal+0x110>)
 8000d18:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <programa_principal+0x110>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4918      	ldr	r1, [pc, #96]	@ (8000d84 <programa_principal+0x118>)
 8000d22:	4819      	ldr	r0, [pc, #100]	@ (8000d88 <programa_principal+0x11c>)
 8000d24:	f000 fb7c 	bl	8001420 <calculo_minimo_peso>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <programa_principal+0x120>)
 8000d2e:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <programa_principal+0x110>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4a15      	ldr	r2, [pc, #84]	@ (8000d8c <programa_principal+0x120>)
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f82c 	bl	8000d98 <obtener_orientacion_futura>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <programa_principal+0x124>)
 8000d46:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000d48:	4b0d      	ldr	r3, [pc, #52]	@ (8000d80 <programa_principal+0x114>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <programa_principal+0x124>)
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f84c 	bl	8000df0 <obtenerGiro>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <programa_principal+0x128>)
 8000d5e:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <programa_principal+0x124>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <programa_principal+0x114>)
 8000d66:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <programa_principal+0x128>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f997 	bl	80010a0 <ejecutarGiro>
	}
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40020800 	.word	0x40020800
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000001 	.word	0x20000001
 8000d84:	20000130 	.word	0x20000130
 8000d88:	20000120 	.word	0x20000120
 8000d8c:	20000002 	.word	0x20000002
 8000d90:	2000011c 	.word	0x2000011c
 8000d94:	2000011d 	.word	0x2000011d

08000d98 <obtener_orientacion_futura>:
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
	while (1);
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460a      	mov	r2, r1
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	4613      	mov	r3, r2
 8000da6:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion + 1)
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	3301      	adds	r3, #1
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d101      	bne.n	8000db6 <obtener_orientacion_futura+0x1e>
		return oeste;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e015      	b.n	8000de2 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000db6:	79ba      	ldrb	r2, [r7, #6]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d101      	bne.n	8000dc4 <obtener_orientacion_futura+0x2c>
		return este;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e00e      	b.n	8000de2 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d101      	bne.n	8000dd2 <obtener_orientacion_futura+0x3a>
		return norte;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e007      	b.n	8000de2 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000dd2:	79ba      	ldrb	r2, [r7, #6]
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d101      	bne.n	8000de0 <obtener_orientacion_futura+0x48>
		return sur;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	e000      	b.n	8000de2 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000de0:	2364      	movs	r3, #100	@ 0x64
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	460a      	mov	r2, r1
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000e00:	79ba      	ldrb	r2, [r7, #6]
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	3304      	adds	r3, #4
 8000e08:	425a      	negs	r2, r3
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	f002 0203 	and.w	r2, r2, #3
 8000e12:	bf58      	it	pl
 8000e14:	4253      	negpl	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d812      	bhi.n	8000e44 <obtenerGiro+0x54>
 8000e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e24 <obtenerGiro+0x34>)
 8000e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e41 	.word	0x08000e41
	case 0:
		return adelante;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e006      	b.n	8000e46 <obtenerGiro+0x56>
	case 1:
		return derecha;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e004      	b.n	8000e46 <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e002      	b.n	8000e46 <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <obtenerGiro+0x56>
	default:
		return 100; // Error
 8000e44:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8000e64:	79bb      	ldrb	r3, [r7, #6]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d81a      	bhi.n	8000ea0 <act_ubicacion+0x4c>
 8000e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e70 <act_ubicacion+0x1c>)
 8000e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e70:	08000e81 	.word	0x08000e81
 8000e74:	08000e89 	.word	0x08000e89
 8000e78:	08000e91 	.word	0x08000e91
 8000e7c:	08000e99 	.word	0x08000e99
	case 0:
		return ubicacion + 4;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3304      	adds	r3, #4
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	e00c      	b.n	8000ea2 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	e008      	b.n	8000ea2 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3b04      	subs	r3, #4
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	e004      	b.n	8000ea2 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e000      	b.n	8000ea2 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8000ea0:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <promediar>:

void promediar(uint16_t *buffer) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e012      	b.n	8000eec <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	4413      	add	r3, r2
 8000ed0:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4413      	add	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b0f      	cmp	r3, #15
 8000ef0:	dde9      	ble.n	8000ec6 <promediar+0x16>
	}
// Dividimos las sumas para obtener el promedio
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <promediar+0x64>)
 8000efa:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <promediar+0x68>)
 8000f04:	801a      	strh	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	371c      	adds	r7, #28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001c6 	.word	0x200001c6

08000f1c <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8000f24:	4803      	ldr	r0, [pc, #12]	@ (8000f34 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000f26:	f7ff ffc3 	bl	8000eb0 <promediar>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000144 	.word	0x20000144

08000f38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f42:	f7ff ffb5 	bl	8000eb0 <promediar>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000184 	.word	0x20000184

08000f54 <correccion_avanzar>:
void correccion_avanzar(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <correccion_avanzar+0x54>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	f240 2225 	movw	r2, #549	@ 0x225
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d809      	bhi.n	8000f7a <correccion_avanzar+0x26>
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <correccion_avanzar+0x58>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	f240 2226 	movw	r2, #550	@ 0x226
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d902      	bls.n	8000f7a <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8000f74:	f000 f86c 	bl	8001050 <apagar_derecha>
 8000f78:	e013      	b.n	8000fa2 <correccion_avanzar+0x4e>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <correccion_avanzar+0x54>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	f240 2226 	movw	r2, #550	@ 0x226
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d909      	bls.n	8000f9c <correccion_avanzar+0x48>
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <correccion_avanzar+0x58>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	f240 2225 	movw	r2, #549	@ 0x225
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d802      	bhi.n	8000f9c <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8000f96:	f000 f833 	bl	8001000 <apagar_izquierda>
 8000f9a:	e002      	b.n	8000fa2 <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8000f9c:	f000 f808 	bl	8000fb0 <avanzar>
	}

}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001c4 	.word	0x200001c4
 8000fac:	200001c6 	.word	0x200001c6

08000fb0 <avanzar>:
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
	HAL_Delay(tiempo_mini);
}
void avanzar(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fba:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <avanzar+0x48>)
 8000fbc:	f001 ff14 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fc6:	480c      	ldr	r0, [pc, #48]	@ (8000ff8 <avanzar+0x48>)
 8000fc8:	f001 ff0e 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd2:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <avanzar+0x48>)
 8000fd4:	f001 ff08 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <avanzar+0x48>)
 8000fe0:	f001 ff02 	bl	8002de8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8000fe4:	4b05      	ldr	r3, [pc, #20]	@ (8000ffc <avanzar+0x4c>)
 8000fe6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <avanzar+0x4c>)
 8000fee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ff2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	40000400 	.word	0x40000400

08001000 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100a:	480f      	ldr	r0, [pc, #60]	@ (8001048 <apagar_izquierda+0x48>)
 800100c:	f001 feec 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001016:	480c      	ldr	r0, [pc, #48]	@ (8001048 <apagar_izquierda+0x48>)
 8001018:	f001 fee6 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001022:	4809      	ldr	r0, [pc, #36]	@ (8001048 <apagar_izquierda+0x48>)
 8001024:	f001 fee0 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <apagar_izquierda+0x48>)
 8001030:	f001 feda 	bl	8002de8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001034:	4b05      	ldr	r3, [pc, #20]	@ (800104c <apagar_izquierda+0x4c>)
 8001036:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 800103c:	4b03      	ldr	r3, [pc, #12]	@ (800104c <apagar_izquierda+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40020400 	.word	0x40020400
 800104c:	40000400 	.word	0x40000400

08001050 <apagar_derecha>:

void apagar_derecha(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105a:	480f      	ldr	r0, [pc, #60]	@ (8001098 <apagar_derecha+0x48>)
 800105c:	f001 fec4 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <apagar_derecha+0x48>)
 8001068:	f001 febe 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <apagar_derecha+0x48>)
 8001074:	f001 feb8 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <apagar_derecha+0x48>)
 8001080:	f001 feb2 	bl	8002de8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001084:	4b05      	ldr	r3, [pc, #20]	@ (800109c <apagar_derecha+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <apagar_derecha+0x4c>)
 800108c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001090:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020400 	.word	0x40020400
 800109c:	40000400 	.word	0x40000400

080010a0 <ejecutarGiro>:
void ejecutarGiro(uint8_t giro) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d837      	bhi.n	8001120 <ejecutarGiro+0x80>
 80010b0:	a201      	add	r2, pc, #4	@ (adr r2, 80010b8 <ejecutarGiro+0x18>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	080010c9 	.word	0x080010c9
 80010bc:	080010f5 	.word	0x080010f5
 80010c0:	080010df 	.word	0x080010df
 80010c4:	0800110b 	.word	0x0800110b
	case adelante:
		setMotorIzquierdo(avance);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 f82d 	bl	8001128 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f000 f85c 	bl	800118c <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 80010d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010d8:	f000 fc2a 	bl	8001930 <HAL_Delay>
		break;
 80010dc:	e020      	b.n	8001120 <ejecutarGiro+0x80>

	case derecha:
		setMotorIzquierdo(avance);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 f822 	bl	8001128 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 80010e4:	2002      	movs	r0, #2
 80010e6:	f000 f851 	bl	800118c <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 80010ea:	f240 2067 	movw	r0, #615	@ 0x267
 80010ee:	f000 fc1f 	bl	8001930 <HAL_Delay>
		break;
 80010f2:	e015      	b.n	8001120 <ejecutarGiro+0x80>

	case izquierda:
		setMotorIzquierdo(retroceso);
 80010f4:	2002      	movs	r0, #2
 80010f6:	f000 f817 	bl	8001128 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f000 f846 	bl	800118c <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 8001100:	f240 2067 	movw	r0, #615	@ 0x267
 8001104:	f000 fc14 	bl	8001930 <HAL_Delay>
		break;
 8001108:	e00a      	b.n	8001120 <ejecutarGiro+0x80>

	case giro_180:
		setMotorIzquierdo(avance);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f80c 	bl	8001128 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001110:	2002      	movs	r0, #2
 8001112:	f000 f83b 	bl	800118c <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001116:	f240 404c 	movw	r0, #1100	@ 0x44c
 800111a:	f000 fc09 	bl	8001930 <HAL_Delay>
		break;
 800111e:	bf00      	nop

	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <setMotorIzquierdo+0x5c>)
 8001134:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001138:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d002      	beq.n	8001146 <setMotorIzquierdo+0x1e>
 8001140:	2b02      	cmp	r3, #2
 8001142:	d00d      	beq.n	8001160 <setMotorIzquierdo+0x38>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
				GPIO_PIN_RESET);
		break;
	}
}
 8001144:	e019      	b.n	800117a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800114c:	480e      	ldr	r0, [pc, #56]	@ (8001188 <setMotorIzquierdo+0x60>)
 800114e:	f001 fe4b 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001158:	480b      	ldr	r0, [pc, #44]	@ (8001188 <setMotorIzquierdo+0x60>)
 800115a:	f001 fe45 	bl	8002de8 <HAL_GPIO_WritePin>
		break;
 800115e:	e00c      	b.n	800117a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001160:	2201      	movs	r2, #1
 8001162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001166:	4808      	ldr	r0, [pc, #32]	@ (8001188 <setMotorIzquierdo+0x60>)
 8001168:	f001 fe3e 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <setMotorIzquierdo+0x60>)
 8001174:	f001 fe38 	bl	8002de8 <HAL_GPIO_WritePin>
		break;
 8001178:	bf00      	nop
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40000400 	.word	0x40000400
 8001188:	40020400 	.word	0x40020400

0800118c <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001196:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <setMotorDerecho+0x5c>)
 8001198:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800119c:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d002      	beq.n	80011aa <setMotorDerecho+0x1e>
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d00d      	beq.n	80011c4 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 80011a8:	e019      	b.n	80011de <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b0:	480e      	ldr	r0, [pc, #56]	@ (80011ec <setMotorDerecho+0x60>)
 80011b2:	f001 fe19 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011bc:	480b      	ldr	r0, [pc, #44]	@ (80011ec <setMotorDerecho+0x60>)
 80011be:	f001 fe13 	bl	8002de8 <HAL_GPIO_WritePin>
		break;
 80011c2:	e00c      	b.n	80011de <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ca:	4808      	ldr	r0, [pc, #32]	@ (80011ec <setMotorDerecho+0x60>)
 80011cc:	f001 fe0c 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011d6:	4805      	ldr	r0, [pc, #20]	@ (80011ec <setMotorDerecho+0x60>)
 80011d8:	f001 fe06 	bl	8002de8 <HAL_GPIO_WritePin>
		break;
 80011dc:	bf00      	nop
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40000400 	.word	0x40000400
 80011ec:	40020400 	.word	0x40020400

080011f0 <verificar_sensor>:

bool verificar_sensor(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 80011fa:	2180      	movs	r1, #128	@ 0x80
 80011fc:	4812      	ldr	r0, [pc, #72]	@ (8001248 <verificar_sensor+0x58>)
 80011fe:	f001 fddb 	bl	8002db8 <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 8001206:	4b11      	ldr	r3, [pc, #68]	@ (800124c <verificar_sensor+0x5c>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	429a      	cmp	r2, r3
 800120e:	d015      	beq.n	800123c <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001210:	2014      	movs	r0, #20
 8001212:	f000 fb8d 	bl	8001930 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001216:	2180      	movs	r1, #128	@ 0x80
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <verificar_sensor+0x58>)
 800121a:	f001 fdcd 	bl	8002db8 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 8001222:	797a      	ldrb	r2, [r7, #5]
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	429a      	cmp	r2, r3
 8001228:	d102      	bne.n	8001230 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 800122a:	4a08      	ldr	r2, [pc, #32]	@ (800124c <verificar_sensor+0x5c>)
 800122c:	797b      	ldrb	r3, [r7, #5]
 800122e:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <verificar_sensor+0x5c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <verificar_sensor+0x4c>
			pedido = true;
 8001238:	2301      	movs	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 800123c:	79fb      	ldrb	r3, [r7, #7]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020800 	.word	0x40020800
 800124c:	20000003 	.word	0x20000003

08001250 <act_pared>:

uint8_t act_pared(uint8_t * pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
 800125c:	4613      	mov	r3, r2
 800125e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d83a      	bhi.n	80012dc <act_pared+0x8c>
 8001266:	a201      	add	r2, pc, #4	@ (adr r2, 800126c <act_pared+0x1c>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001295 	.word	0x08001295
 8001274:	080012ad 	.word	0x080012ad
 8001278:	080012c5 	.word	0x080012c5
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	440b      	add	r3, r1
 800128a:	f042 0208 	orr.w	r2, r2, #8
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
		break;
 8001292:	e025      	b.n	80012e0 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	440b      	add	r3, r1
 80012a2:	f042 0204 	orr.w	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	701a      	strb	r2, [r3, #0]
		break;
 80012aa:	e019      	b.n	80012e0 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	440b      	add	r3, r1
 80012ba:	f042 0202 	orr.w	r2, r2, #2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	701a      	strb	r2, [r3, #0]
		break;
 80012c2:	e00d      	b.n	80012e0 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	440b      	add	r3, r1
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]
		break;
 80012da:	e001      	b.n	80012e0 <act_pared+0x90>
	default:
		return 100; // Orientación no válida
 80012dc:	2364      	movs	r3, #100	@ 0x64
 80012de:	e003      	b.n	80012e8 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <act_pesos>:

void act_pesos(uint8_t * pared , uint8_t * peso) {
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
//	for (int j = 0; j < 2; j++) {
		for (int i = 0; i < cant_casilleros; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	e081      	b.n	8001408 <act_pesos+0x114>
			minimo_peso_vecino = 100;
 8001304:	2364      	movs	r3, #100	@ 0x64
 8001306:	73fb      	strb	r3, [r7, #15]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	2b0b      	cmp	r3, #11
 800130c:	dc15      	bgt.n	800133a <act_pesos+0x46>
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10d      	bne.n	800133a <act_pesos+0x46>
				if (peso[i + 4] < minimo_peso_vecino)
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	3304      	adds	r3, #4
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	4413      	add	r3, r2
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	7bfa      	ldrb	r2, [r7, #15]
 800132a:	429a      	cmp	r2, r3
 800132c:	d905      	bls.n	800133a <act_pesos+0x46>
					minimo_peso_vecino = peso[i + 4];
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3304      	adds	r3, #4
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	73fb      	strb	r3, [r7, #15]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d01e      	beq.n	800137e <act_pesos+0x8a>
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b07      	cmp	r3, #7
 8001344:	d01b      	beq.n	800137e <act_pesos+0x8a>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b0b      	cmp	r3, #11
 800134a:	d018      	beq.n	800137e <act_pesos+0x8a>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d015      	beq.n	800137e <act_pesos+0x8a>
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10d      	bne.n	800137e <act_pesos+0x8a>
				if (peso[i + 1] < minimo_peso_vecino)
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	3301      	adds	r3, #1
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	4413      	add	r3, r2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	429a      	cmp	r2, r3
 8001370:	d905      	bls.n	800137e <act_pesos+0x8a>
					minimo_peso_vecino = peso[i + 1];
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	3301      	adds	r3, #1
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	73fb      	strb	r3, [r7, #15]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b03      	cmp	r3, #3
 8001382:	dd15      	ble.n	80013b0 <act_pesos+0xbc>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10d      	bne.n	80013b0 <act_pesos+0xbc>
				if (peso[i - 4] < minimo_peso_vecino)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	3b04      	subs	r3, #4
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d905      	bls.n	80013b0 <act_pesos+0xbc>
					minimo_peso_vecino = peso[i - 4];
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	3b04      	subs	r3, #4
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	73fb      	strb	r3, [r7, #15]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d119      	bne.n	80013f4 <act_pesos+0x100>
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <act_pesos+0x100>
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d013      	beq.n	80013f4 <act_pesos+0x100>
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d010      	beq.n	80013f4 <act_pesos+0x100>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b0c      	cmp	r3, #12
 80013d6:	d00d      	beq.n	80013f4 <act_pesos+0x100>
				if (peso[i - 1] < minimo_peso_vecino)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	3b01      	subs	r3, #1
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d905      	bls.n	80013f4 <act_pesos+0x100>
					minimo_peso_vecino = peso[i - 1];
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	73fb      	strb	r3, [r7, #15]
			}

			peso[i] = minimo_peso_vecino + 1;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	3201      	adds	r2, #1
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros; i++) {
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	3301      	adds	r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f77f af7a 	ble.w	8001304 <act_pesos+0x10>
				}
	}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <calculo_minimo_peso>:
//}

uint8_t calculo_minimo_peso(uint8_t * peso, uint8_t * pared, uint8_t ubicacion) {
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	4613      	mov	r3, r2
 800142c:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 800142e:	230f      	movs	r3, #15
 8001430:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3304      	adds	r3, #4
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	7dfa      	ldrb	r2, [r7, #23]
 800143e:	429a      	cmp	r2, r3
 8001440:	d915      	bls.n	800146e <calculo_minimo_peso+0x4e>
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <calculo_minimo_peso+0x4e>
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b0b      	cmp	r3, #11
 8001456:	d80a      	bhi.n	800146e <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	3304      	adds	r3, #4
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	3304      	adds	r3, #4
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b3b      	ldr	r3, [pc, #236]	@ (8001558 <calculo_minimo_peso+0x138>)
 800146c:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0)&& (!(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15)))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	3301      	adds	r3, #1
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	7dfa      	ldrb	r2, [r7, #23]
 800147a:	429a      	cmp	r2, r3
 800147c:	d91e      	bls.n	80014bc <calculo_minimo_peso+0x9c>
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d116      	bne.n	80014bc <calculo_minimo_peso+0x9c>
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b03      	cmp	r3, #3
 8001492:	d013      	beq.n	80014bc <calculo_minimo_peso+0x9c>
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	2b07      	cmp	r3, #7
 8001498:	d010      	beq.n	80014bc <calculo_minimo_peso+0x9c>
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b0b      	cmp	r3, #11
 800149e:	d00d      	beq.n	80014bc <calculo_minimo_peso+0x9c>
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	2b0f      	cmp	r3, #15
 80014a4:	d00a      	beq.n	80014bc <calculo_minimo_peso+0x9c>
		minimo_peso = peso[ubicacion + 1];
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b27      	ldr	r3, [pc, #156]	@ (8001558 <calculo_minimo_peso+0x138>)
 80014ba:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0)
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	3b04      	subs	r3, #4
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	7dfa      	ldrb	r2, [r7, #23]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d915      	bls.n	80014f8 <calculo_minimo_peso+0xd8>
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10d      	bne.n	80014f8 <calculo_minimo_peso+0xd8>
			&& (4 <= ubicacion))) {
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d90a      	bls.n	80014f8 <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	3b04      	subs	r3, #4
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3b04      	subs	r3, #4
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b18      	ldr	r3, [pc, #96]	@ (8001558 <calculo_minimo_peso+0x138>)
 80014f6:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && (!(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12)))) {
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	7dfa      	ldrb	r2, [r7, #23]
 8001504:	429a      	cmp	r2, r3
 8001506:	d91e      	bls.n	8001546 <calculo_minimo_peso+0x126>
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	d116      	bne.n	8001546 <calculo_minimo_peso+0x126>
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <calculo_minimo_peso+0x126>
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d010      	beq.n	8001546 <calculo_minimo_peso+0x126>
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b08      	cmp	r3, #8
 8001528:	d00d      	beq.n	8001546 <calculo_minimo_peso+0x126>
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d00a      	beq.n	8001546 <calculo_minimo_peso+0x126>
		minimo_peso = peso[ubicacion - 1];
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	3b01      	subs	r3, #1
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4413      	add	r3, r2
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	3b01      	subs	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <calculo_minimo_peso+0x138>)
 8001544:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <calculo_minimo_peso+0x138>)
 8001548:	781b      	ldrb	r3, [r3, #0]
}
 800154a:	4618      	mov	r0, r3
 800154c:	371c      	adds	r7, #28
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000002 	.word	0x20000002

0800155c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	@ (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	@ 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a6:	2007      	movs	r0, #7
 80015a8:	f000 feb8 	bl	800231c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <HAL_ADC_MspInit+0xdc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d158      	bne.n	800168c <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b2e      	ldr	r3, [pc, #184]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b27      	ldr	r3, [pc, #156]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a26      	ldr	r2, [pc, #152]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <HAL_ADC_MspInit+0xe0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 8001612:	2303      	movs	r3, #3
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001616:	2303      	movs	r3, #3
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	481d      	ldr	r0, [pc, #116]	@ (800169c <HAL_ADC_MspInit+0xe4>)
 8001626:	f001 fa2b 	bl	8002a80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800162c:	4a1d      	ldr	r2, [pc, #116]	@ (80016a4 <HAL_ADC_MspInit+0xec>)
 800162e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800163c:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001642:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001644:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001648:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800164c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001650:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001654:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001658:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800165a:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800165c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001660:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001664:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001668:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001670:	480b      	ldr	r0, [pc, #44]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001672:	f000 fe95 	bl	80023a0 <HAL_DMA_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800167c:	f7ff ff6e 	bl	800155c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a07      	ldr	r2, [pc, #28]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001684:	639a      	str	r2, [r3, #56]	@ 0x38
 8001686:	4a06      	ldr	r2, [pc, #24]	@ (80016a0 <HAL_ADC_MspInit+0xe8>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	@ 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40012000 	.word	0x40012000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400
 80016a0:	20000074 	.word	0x20000074
 80016a4:	40026410 	.word	0x40026410

080016a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <HAL_TIM_Base_MspInit+0x3c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d10d      	bne.n	80016d6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0a      	ldr	r3, [pc, #40]	@ (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <HAL_TIM_Base_MspInit+0x40>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016d6:	bf00      	nop
 80016d8:	3714      	adds	r7, #20
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40000400 	.word	0x40000400
 80016e8:	40023800 	.word	0x40023800

080016ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <HAL_TIM_MspPostInit+0x68>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d11e      	bne.n	800174c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a10      	ldr	r2, [pc, #64]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001718:	f043 0304 	orr.w	r3, r3, #4
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_TIM_MspPostInit+0x6c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 800172a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800172e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800173c:	2302      	movs	r3, #2
 800173e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <HAL_TIM_MspPostInit+0x70>)
 8001748:	f001 f99a 	bl	8002a80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40000400 	.word	0x40000400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020800 	.word	0x40020800

08001760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <NMI_Handler+0x4>

08001768 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <HardFault_Handler+0x4>

08001770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <MemManage_Handler+0x4>

08001778 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <UsageFault_Handler+0x4>

08001788 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f89b 	bl	80018f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <DMA2_Stream0_IRQHandler+0x10>)
 80017c6:	f000 fef1 	bl	80025ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000074 	.word	0x20000074

080017d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017fc:	f7ff ffea 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	@ (8001844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f002 fdf1 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182a:	f7fe fe63 	bl	80004f4 <main>
  bx  lr    
 800182e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001830:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800183c:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8001840:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001844:	200001cc 	.word	0x200001cc

08001848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <HAL_Init+0x40>)
 8001856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <HAL_Init+0x40>)
 8001862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a07      	ldr	r2, [pc, #28]	@ (800188c <HAL_Init+0x40>)
 800186e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001874:	2003      	movs	r0, #3
 8001876:	f000 fd51 	bl	800231c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f808 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001880:	f7ff fe72 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40023c00 	.word	0x40023c00

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <HAL_InitTick+0x54>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd69 	bl	8002386 <HAL_SYSTICK_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00e      	b.n	80018dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d80a      	bhi.n	80018da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c4:	2200      	movs	r2, #0
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f000 fd31 	bl	8002332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d0:	4a06      	ldr	r2, [pc, #24]	@ (80018ec <HAL_InitTick+0x5c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e000      	b.n	80018dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000004 	.word	0x20000004
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	20000008 	.word	0x20000008

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000000c 	.word	0x2000000c
 8001914:	200001c8 	.word	0x200001c8

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200001c8 	.word	0x200001c8

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff ffee 	bl	8001918 <HAL_GetTick>
 800193c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	bf00      	nop
 8001958:	f7ff ffde 	bl	8001918 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000000c 	.word	0x2000000c

08001978 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e033      	b.n	80019f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fe0e 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019be:	f023 0302 	bic.w	r3, r3, #2
 80019c2:	f043 0202 	orr.w	r2, r3, #2
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fa58 	bl	8001e80 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f023 0303 	bic.w	r3, r3, #3
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e6:	e001      	b.n	80019ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Start_DMA+0x22>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e0eb      	b.n	8001bfa <HAL_ADC_Start_DMA+0x1fa>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d018      	beq.n	8001a6a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a48:	4b6e      	ldr	r3, [pc, #440]	@ (8001c04 <HAL_ADC_Start_DMA+0x204>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c08 <HAL_ADC_Start_DMA+0x208>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0c9a      	lsrs	r2, r3, #18
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a5c:	e002      	b.n	8001a64 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f9      	bne.n	8001a5e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a78:	d107      	bne.n	8001a8a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	f040 80a3 	bne.w	8001be0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ac4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f023 0206 	bic.w	r2, r3, #6
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ae6:	e002      	b.n	8001aee <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af6:	4b45      	ldr	r3, [pc, #276]	@ (8001c0c <HAL_ADC_Start_DMA+0x20c>)
 8001af8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	4a44      	ldr	r2, [pc, #272]	@ (8001c10 <HAL_ADC_Start_DMA+0x210>)
 8001b00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b06:	4a43      	ldr	r2, [pc, #268]	@ (8001c14 <HAL_ADC_Start_DMA+0x214>)
 8001b08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0e:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <HAL_ADC_Start_DMA+0x218>)
 8001b10:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b2a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b3a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	334c      	adds	r3, #76	@ 0x4c
 8001b46:	4619      	mov	r1, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f000 fcd6 	bl	80024fc <HAL_DMA_Start_IT>
 8001b50:	4603      	mov	r3, r0
 8001b52:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d12a      	bne.n	8001bb6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a2d      	ldr	r2, [pc, #180]	@ (8001c1c <HAL_ADC_Start_DMA+0x21c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d015      	beq.n	8001b96 <HAL_ADC_Start_DMA+0x196>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a2c      	ldr	r2, [pc, #176]	@ (8001c20 <HAL_ADC_Start_DMA+0x220>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_Start_DMA+0x180>
 8001b74:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <HAL_ADC_Start_DMA+0x20c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 031f 	and.w	r3, r3, #31
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00a      	beq.n	8001b96 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a27      	ldr	r2, [pc, #156]	@ (8001c24 <HAL_ADC_Start_DMA+0x224>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d136      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
 8001b8a:	4b20      	ldr	r3, [pc, #128]	@ (8001c0c <HAL_ADC_Start_DMA+0x20c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d130      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d129      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e020      	b.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a18      	ldr	r2, [pc, #96]	@ (8001c1c <HAL_ADC_Start_DMA+0x21c>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d11b      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d114      	bne.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	e00b      	b.n	8001bf8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f043 0210 	orr.w	r2, r3, #16
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f043 0201 	orr.w	r2, r3, #1
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001bf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000004 	.word	0x20000004
 8001c08:	431bde83 	.word	0x431bde83
 8001c0c:	40012300 	.word	0x40012300
 8001c10:	08002079 	.word	0x08002079
 8001c14:	08002133 	.word	0x08002133
 8001c18:	0800214f 	.word	0x0800214f
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	40012100 	.word	0x40012100
 8001c24:	40012200 	.word	0x40012200

08001c28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1c>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e105      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x228>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d925      	bls.n	8001cb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68d9      	ldr	r1, [r3, #12]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3b1e      	subs	r3, #30
 8001c7e:	2207      	movs	r2, #7
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43da      	mvns	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68d9      	ldr	r1, [r3, #12]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4403      	add	r3, r0
 8001ca6:	3b1e      	subs	r3, #30
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	e022      	b.n	8001cfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6919      	ldr	r1, [r3, #16]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	2207      	movs	r2, #7
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43da      	mvns	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4403      	add	r3, r0
 8001cf0:	409a      	lsls	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	d824      	bhi.n	8001d4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	3b05      	subs	r3, #5
 8001d14:	221f      	movs	r2, #31
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	400a      	ands	r2, r1
 8001d22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	4618      	mov	r0, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b05      	subs	r3, #5
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d4a:	e04c      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d824      	bhi.n	8001d9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3b23      	subs	r3, #35	@ 0x23
 8001d66:	221f      	movs	r2, #31
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	400a      	ands	r2, r1
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b23      	subs	r3, #35	@ 0x23
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d9c:	e023      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b41      	subs	r3, #65	@ 0x41
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b41      	subs	r3, #65	@ 0x41
 8001dda:	fa00 f203 	lsl.w	r2, r0, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_ADC_ConfigChannel+0x234>)
 8001de8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <HAL_ADC_ConfigChannel+0x238>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d109      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1cc>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d105      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	@ (8001e74 <HAL_ADC_ConfigChannel+0x238>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d123      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x21e>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	d003      	beq.n	8001e22 <HAL_ADC_ConfigChannel+0x1e6>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b11      	cmp	r3, #17
 8001e20:	d11b      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b10      	cmp	r3, #16
 8001e34:	d111      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_ADC_ConfigChannel+0x23c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a10      	ldr	r2, [pc, #64]	@ (8001e7c <HAL_ADC_ConfigChannel+0x240>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9a      	lsrs	r2, r3, #18
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40012300 	.word	0x40012300
 8001e74:	40012000 	.word	0x40012000
 8001e78:	20000004 	.word	0x20000004
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e88:	4b79      	ldr	r3, [pc, #484]	@ (8002070 <ADC_Init+0x1f0>)
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f12:	4a58      	ldr	r2, [pc, #352]	@ (8002074 <ADC_Init+0x1f4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d022      	beq.n	8001f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e00f      	b.n	8001f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0202 	bic.w	r2, r2, #2
 8001f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	005a      	lsls	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fba:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	035a      	lsls	r2, r3, #13
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	e007      	b.n	8001ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	3b01      	subs	r3, #1
 8002010:	051a      	lsls	r2, r3, #20
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002036:	025a      	lsls	r2, r3, #9
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800204e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6899      	ldr	r1, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	029a      	lsls	r2, r3, #10
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	609a      	str	r2, [r3, #8]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40012300 	.word	0x40012300
 8002074:	0f000001 	.word	0x0f000001

08002078 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13c      	bne.n	800210c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d12b      	bne.n	8002104 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d127      	bne.n	8002104 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d119      	bne.n	8002104 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0220 	bic.w	r2, r2, #32
 80020de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f043 0201 	orr.w	r2, r3, #1
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7fe ff17 	bl	8000f38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800210a:	e00e      	b.n	800212a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fd85 	bl	8001c28 <HAL_ADC_ErrorCallback>
}
 800211e:	e004      	b.n	800212a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	4798      	blx	r3
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7fe feeb 	bl	8000f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800215a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2240      	movs	r2, #64	@ 0x40
 8002160:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	f043 0204 	orr.w	r2, r3, #4
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7ff fd5a 	bl	8001c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4907      	ldr	r1, [pc, #28]	@ (8002218 <__NVIC_EnableIRQ+0x38>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000e100 	.word	0xe000e100

0800221c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	6039      	str	r1, [r7, #0]
 8002226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222c:	2b00      	cmp	r3, #0
 800222e:	db0a      	blt.n	8002246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2da      	uxtb	r2, r3
 8002234:	490c      	ldr	r1, [pc, #48]	@ (8002268 <__NVIC_SetPriority+0x4c>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	0112      	lsls	r2, r2, #4
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	440b      	add	r3, r1
 8002240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002244:	e00a      	b.n	800225c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4908      	ldr	r1, [pc, #32]	@ (800226c <__NVIC_SetPriority+0x50>)
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	3b04      	subs	r3, #4
 8002254:	0112      	lsls	r2, r2, #4
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	440b      	add	r3, r1
 800225a:	761a      	strb	r2, [r3, #24]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	@ 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f1c3 0307 	rsb	r3, r3, #7
 800228a:	2b04      	cmp	r3, #4
 800228c:	bf28      	it	cs
 800228e:	2304      	movcs	r3, #4
 8002290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3304      	adds	r3, #4
 8002296:	2b06      	cmp	r3, #6
 8002298:	d902      	bls.n	80022a0 <NVIC_EncodePriority+0x30>
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3b03      	subs	r3, #3
 800229e:	e000      	b.n	80022a2 <NVIC_EncodePriority+0x32>
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	f04f 32ff 	mov.w	r2, #4294967295
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43da      	mvns	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	401a      	ands	r2, r3
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43d9      	mvns	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	4313      	orrs	r3, r2
         );
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3724      	adds	r7, #36	@ 0x24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e8:	d301      	bcc.n	80022ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00f      	b.n	800230e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <SysTick_Config+0x40>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f6:	210f      	movs	r1, #15
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f7ff ff8e 	bl	800221c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <SysTick_Config+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <SysTick_Config+0x40>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7ff ff29 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	4603      	mov	r3, r0
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff3e 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff8e 	bl	8002270 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5d 	bl	800221c <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff31 	bl	80021e0 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa2 	bl	80022d8 <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fab4 	bl	8001918 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e099      	b.n	80024f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023dc:	e00f      	b.n	80023fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023de:	f7ff fa9b 	bl	8001918 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d908      	bls.n	80023fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e078      	b.n	80024f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e8      	bne.n	80023de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4b38      	ldr	r3, [pc, #224]	@ (80024f8 <HAL_DMA_Init+0x158>)
 8002418:	4013      	ands	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800242a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	4313      	orrs	r3, r2
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f023 0307 	bic.w	r3, r3, #7
 800247e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b04      	cmp	r3, #4
 8002490:	d117      	bne.n	80024c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00e      	beq.n	80024c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa6f 	bl	8002988 <DMA_CheckFifoParam>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024be:	2301      	movs	r3, #1
 80024c0:	e016      	b.n	80024f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa26 	bl	800291c <DMA_CalcBaseAndBitshift>
 80024d0:	4603      	mov	r3, r0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d8:	223f      	movs	r2, #63	@ 0x3f
 80024da:	409a      	lsls	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	f010803f 	.word	0xf010803f

080024fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_DMA_Start_IT+0x26>
 800251e:	2302      	movs	r3, #2
 8002520:	e040      	b.n	80025a4 <HAL_DMA_Start_IT+0xa8>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d12f      	bne.n	8002596 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f9b8 	bl	80028c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002554:	223f      	movs	r2, #63	@ 0x3f
 8002556:	409a      	lsls	r2, r3
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0216 	orr.w	r2, r2, #22
 800256a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	e005      	b.n	80025a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025b8:	4b8e      	ldr	r3, [pc, #568]	@ (80027f4 <HAL_DMA_IRQHandler+0x248>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a8e      	ldr	r2, [pc, #568]	@ (80027f8 <HAL_DMA_IRQHandler+0x24c>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0a9b      	lsrs	r3, r3, #10
 80025c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d6:	2208      	movs	r2, #8
 80025d8:	409a      	lsls	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01a      	beq.n	8002618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0204 	bic.w	r2, r2, #4
 80025fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	2208      	movs	r2, #8
 8002606:	409a      	lsls	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	2201      	movs	r2, #1
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d012      	beq.n	800264e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263a:	2201      	movs	r2, #1
 800263c:	409a      	lsls	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002646:	f043 0202 	orr.w	r2, r3, #2
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2204      	movs	r2, #4
 8002654:	409a      	lsls	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d012      	beq.n	8002684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	2204      	movs	r2, #4
 8002672:	409a      	lsls	r2, r3
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267c:	f043 0204 	orr.w	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2210      	movs	r2, #16
 800268a:	409a      	lsls	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4013      	ands	r3, r2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d043      	beq.n	800271c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d03c      	beq.n	800271c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a6:	2210      	movs	r2, #16
 80026a8:	409a      	lsls	r2, r3
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d018      	beq.n	80026ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d108      	bne.n	80026dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d024      	beq.n	800271c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
 80026da:	e01f      	b.n	800271c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01b      	beq.n	800271c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e016      	b.n	800271c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0208 	bic.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2220      	movs	r2, #32
 8002722:	409a      	lsls	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4013      	ands	r3, r2
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 808f 	beq.w	800284c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 8087 	beq.w	800284c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002742:	2220      	movs	r2, #32
 8002744:	409a      	lsls	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b05      	cmp	r3, #5
 8002754:	d136      	bne.n	80027c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0216 	bic.w	r2, r2, #22
 8002764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_DMA_IRQHandler+0x1da>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0208 	bic.w	r2, r2, #8
 8002794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	223f      	movs	r2, #63	@ 0x3f
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07e      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
        }
        return;
 80027c2:	e079      	b.n	80028b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d031      	beq.n	800284c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	4798      	blx	r3
 80027f0:	e02c      	b.n	800284c <HAL_DMA_IRQHandler+0x2a0>
 80027f2:	bf00      	nop
 80027f4:	20000004 	.word	0x20000004
 80027f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	4798      	blx	r3
 800280c:	e01e      	b.n	800284c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10f      	bne.n	800283c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0210 	bic.w	r2, r2, #16
 800282a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002850:	2b00      	cmp	r3, #0
 8002852:	d032      	beq.n	80028ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d022      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2205      	movs	r2, #5
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	3301      	adds	r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	d307      	bcc.n	8002894 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f2      	bne.n	8002878 <HAL_DMA_IRQHandler+0x2cc>
 8002892:	e000      	b.n	8002896 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002894:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	4798      	blx	r3
 80028b6:	e000      	b.n	80028ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80028b8:	bf00      	nop
    }
  }
}
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
 80028cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d108      	bne.n	8002900 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028fe:	e007      	b.n	8002910 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	3b10      	subs	r3, #16
 800292c:	4a14      	ldr	r2, [pc, #80]	@ (8002980 <DMA_CalcBaseAndBitshift+0x64>)
 800292e:	fba2 2303 	umull	r2, r3, r2, r3
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002936:	4a13      	ldr	r2, [pc, #76]	@ (8002984 <DMA_CalcBaseAndBitshift+0x68>)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d909      	bls.n	800295e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002952:	f023 0303 	bic.w	r3, r3, #3
 8002956:	1d1a      	adds	r2, r3, #4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	659a      	str	r2, [r3, #88]	@ 0x58
 800295c:	e007      	b.n	800296e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002966:	f023 0303 	bic.w	r3, r3, #3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002972:	4618      	mov	r0, r3
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	aaaaaaab 	.word	0xaaaaaaab
 8002984:	0800447c 	.word	0x0800447c

08002988 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002998:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11f      	bne.n	80029e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d856      	bhi.n	8002a56 <DMA_CheckFifoParam+0xce>
 80029a8:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <DMA_CheckFifoParam+0x28>)
 80029aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ae:	bf00      	nop
 80029b0:	080029c1 	.word	0x080029c1
 80029b4:	080029d3 	.word	0x080029d3
 80029b8:	080029c1 	.word	0x080029c1
 80029bc:	08002a57 	.word	0x08002a57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d046      	beq.n	8002a5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e043      	b.n	8002a5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029da:	d140      	bne.n	8002a5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e03d      	b.n	8002a5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ea:	d121      	bne.n	8002a30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d837      	bhi.n	8002a62 <DMA_CheckFifoParam+0xda>
 80029f2:	a201      	add	r2, pc, #4	@ (adr r2, 80029f8 <DMA_CheckFifoParam+0x70>)
 80029f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f8:	08002a09 	.word	0x08002a09
 80029fc:	08002a0f 	.word	0x08002a0f
 8002a00:	08002a09 	.word	0x08002a09
 8002a04:	08002a21 	.word	0x08002a21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e030      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d025      	beq.n	8002a66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a1e:	e022      	b.n	8002a66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a28:	d11f      	bne.n	8002a6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a2e:	e01c      	b.n	8002a6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d903      	bls.n	8002a3e <DMA_CheckFifoParam+0xb6>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d003      	beq.n	8002a44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a3c:	e018      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
      break;
 8002a42:	e015      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      break;
 8002a54:	e00b      	b.n	8002a6e <DMA_CheckFifoParam+0xe6>
      break;
 8002a56:	bf00      	nop
 8002a58:	e00a      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e008      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e006      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e004      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e002      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop

08002a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e16b      	b.n	8002d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	f040 815a 	bne.w	8002d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d005      	beq.n	8002ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d130      	bne.n	8002b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80b4 	beq.w	8002d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b60      	ldr	r3, [pc, #384]	@ (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c16:	4b5d      	ldr	r3, [pc, #372]	@ (8002d8c <HAL_GPIO_Init+0x30c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c22:	4a5b      	ldr	r2, [pc, #364]	@ (8002d90 <HAL_GPIO_Init+0x310>)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	089b      	lsrs	r3, r3, #2
 8002c28:	3302      	adds	r3, #2
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	220f      	movs	r2, #15
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4013      	ands	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a52      	ldr	r2, [pc, #328]	@ (8002d94 <HAL_GPIO_Init+0x314>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x226>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a51      	ldr	r2, [pc, #324]	@ (8002d98 <HAL_GPIO_Init+0x318>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d025      	beq.n	8002ca2 <HAL_GPIO_Init+0x222>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a50      	ldr	r2, [pc, #320]	@ (8002d9c <HAL_GPIO_Init+0x31c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <HAL_GPIO_Init+0x21e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a4f      	ldr	r2, [pc, #316]	@ (8002da0 <HAL_GPIO_Init+0x320>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x21a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4e      	ldr	r2, [pc, #312]	@ (8002da4 <HAL_GPIO_Init+0x324>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x216>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4d      	ldr	r2, [pc, #308]	@ (8002da8 <HAL_GPIO_Init+0x328>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x212>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4c      	ldr	r2, [pc, #304]	@ (8002dac <HAL_GPIO_Init+0x32c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x20e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4b      	ldr	r2, [pc, #300]	@ (8002db0 <HAL_GPIO_Init+0x330>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x20a>
 8002c86:	2307      	movs	r3, #7
 8002c88:	e00e      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e00c      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c8e:	2306      	movs	r3, #6
 8002c90:	e00a      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c92:	2305      	movs	r3, #5
 8002c94:	e008      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c96:	2304      	movs	r3, #4
 8002c98:	e006      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e004      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e002      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x228>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f002 0203 	and.w	r2, r2, #3
 8002cae:	0092      	lsls	r2, r2, #2
 8002cb0:	4093      	lsls	r3, r2
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb8:	4935      	ldr	r1, [pc, #212]	@ (8002d90 <HAL_GPIO_Init+0x310>)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	089b      	lsrs	r3, r3, #2
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cea:	4a32      	ldr	r2, [pc, #200]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf0:	4b30      	ldr	r3, [pc, #192]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d14:	4a27      	ldr	r2, [pc, #156]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1a:	4b26      	ldr	r3, [pc, #152]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d68:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <HAL_GPIO_Init+0x334>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3301      	adds	r3, #1
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	f67f ae90 	bls.w	8002a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	bf00      	nop
 8002d80:	3724      	adds	r7, #36	@ 0x24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	40013800 	.word	0x40013800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400
 8002d9c:	40020800 	.word	0x40020800
 8002da0:	40020c00 	.word	0x40020c00
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40021400 	.word	0x40021400
 8002dac:	40021800 	.word	0x40021800
 8002db0:	40021c00 	.word	0x40021c00
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e001      	b.n	8002dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e267      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d075      	beq.n	8002f26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e3a:	4b88      	ldr	r3, [pc, #544]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b85      	ldr	r3, [pc, #532]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b82      	ldr	r3, [pc, #520]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b7e      	ldr	r3, [pc, #504]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x108>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e242      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x74>
 8002e82:	4b76      	ldr	r3, [pc, #472]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a75      	ldr	r2, [pc, #468]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x98>
 8002e9a:	4b70      	ldr	r3, [pc, #448]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a6f      	ldr	r2, [pc, #444]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6c      	ldr	r2, [pc, #432]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xb0>
 8002eb4:	4b69      	ldr	r3, [pc, #420]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a68      	ldr	r2, [pc, #416]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b66      	ldr	r3, [pc, #408]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a65      	ldr	r2, [pc, #404]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd20 	bl	8001918 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fd1c 	bl	8001918 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e207      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b5b      	ldr	r3, [pc, #364]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xc0>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe fd0c 	bl	8001918 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fd08 	bl	8001918 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1f3      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b51      	ldr	r3, [pc, #324]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0xe8>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d063      	beq.n	8002ffa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f32:	4b4a      	ldr	r3, [pc, #296]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00b      	beq.n	8002f56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3e:	4b47      	ldr	r3, [pc, #284]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4a:	4b44      	ldr	r3, [pc, #272]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d116      	bne.n	8002f84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	4b41      	ldr	r3, [pc, #260]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d001      	beq.n	8002f6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e1c7      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4937      	ldr	r1, [pc, #220]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f82:	e03a      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f8c:	4b34      	ldr	r3, [pc, #208]	@ (8003060 <HAL_RCC_OscConfig+0x244>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7fe fcc1 	bl	8001918 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fcbd 	bl	8001918 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e1a8      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	4b2b      	ldr	r3, [pc, #172]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb8:	4b28      	ldr	r3, [pc, #160]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4925      	ldr	r1, [pc, #148]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]
 8002fcc:	e015      	b.n	8002ffa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_OscConfig+0x244>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fca0 	bl	8001918 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fc9c 	bl	8001918 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e187      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d036      	beq.n	8003074 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800300e:	4b15      	ldr	r3, [pc, #84]	@ (8003064 <HAL_RCC_OscConfig+0x248>)
 8003010:	2201      	movs	r2, #1
 8003012:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fe fc80 	bl	8001918 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800301c:	f7fe fc7c 	bl	8001918 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e167      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_OscConfig+0x240>)
 8003030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x200>
 800303a:	e01b      	b.n	8003074 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800303c:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_RCC_OscConfig+0x248>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fc69 	bl	8001918 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003048:	e00e      	b.n	8003068 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304a:	f7fe fc65 	bl	8001918 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d907      	bls.n	8003068 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e150      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800305c:	40023800 	.word	0x40023800
 8003060:	42470000 	.word	0x42470000
 8003064:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003068:	4b88      	ldr	r3, [pc, #544]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ea      	bne.n	800304a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 8097 	beq.w	80031b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003086:	4b81      	ldr	r3, [pc, #516]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	4b7d      	ldr	r3, [pc, #500]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	4a7c      	ldr	r2, [pc, #496]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a2:	4b7a      	ldr	r3, [pc, #488]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030aa:	60bb      	str	r3, [r7, #8]
 80030ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b2:	4b77      	ldr	r3, [pc, #476]	@ (8003290 <HAL_RCC_OscConfig+0x474>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030be:	4b74      	ldr	r3, [pc, #464]	@ (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a73      	ldr	r2, [pc, #460]	@ (8003290 <HAL_RCC_OscConfig+0x474>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fc25 	bl	8001918 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fc21 	bl	8001918 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e10c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003290 <HAL_RCC_OscConfig+0x474>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_OscConfig+0x2ea>
 80030f8:	4b64      	ldr	r3, [pc, #400]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fc:	4a63      	ldr	r2, [pc, #396]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	6713      	str	r3, [r2, #112]	@ 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x30c>
 800310e:	4b5f      	ldr	r3, [pc, #380]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a5e      	ldr	r2, [pc, #376]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
 800311a:	4b5c      	ldr	r3, [pc, #368]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	4a5b      	ldr	r2, [pc, #364]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	@ 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x324>
 8003128:	4b58      	ldr	r3, [pc, #352]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312c:	4a57      	ldr	r2, [pc, #348]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	@ 0x70
 8003134:	4b55      	ldr	r3, [pc, #340]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003138:	4a54      	ldr	r2, [pc, #336]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fbe6 	bl	8001918 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fbe2 	bl	8001918 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e0cb      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b49      	ldr	r3, [pc, #292]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x334>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003174:	f7fe fbd0 	bl	8001918 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fbcc 	bl	8001918 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e0b5      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	4b3e      	ldr	r3, [pc, #248]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d105      	bne.n	80031b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a4:	4b39      	ldr	r3, [pc, #228]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	4a38      	ldr	r2, [pc, #224]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80031aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80a1 	beq.w	80032fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ba:	4b34      	ldr	r3, [pc, #208]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d05c      	beq.n	8003280 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d141      	bne.n	8003252 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b31      	ldr	r3, [pc, #196]	@ (8003294 <HAL_RCC_OscConfig+0x478>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fba0 	bl	8001918 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fb9c 	bl	8001918 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e087      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	4b27      	ldr	r3, [pc, #156]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69da      	ldr	r2, [r3, #28]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	3b01      	subs	r3, #1
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	491b      	ldr	r1, [pc, #108]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x478>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fe fb75 	bl	8001918 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003232:	f7fe fb71 	bl	8001918 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e05c      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x416>
 8003250:	e054      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_RCC_OscConfig+0x478>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fe fb5e 	bl	8001918 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fe fb5a 	bl	8001918 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e045      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_OscConfig+0x470>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x444>
 800327e:	e03d      	b.n	80032fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e038      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000
 8003294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <HAL_RCC_OscConfig+0x4ec>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d028      	beq.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d121      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d11a      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d111      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800

0800330c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0cc      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b68      	ldr	r3, [pc, #416]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d90c      	bls.n	8003348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b65      	ldr	r3, [pc, #404]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a58      	ldr	r2, [pc, #352]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a52      	ldr	r2, [pc, #328]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d044      	beq.n	800342c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d119      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d003      	beq.n	80033ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d107      	bne.n	80033da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ca:	4b3f      	ldr	r3, [pc, #252]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e06f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033da:	4b3b      	ldr	r3, [pc, #236]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e067      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ea:	4b37      	ldr	r3, [pc, #220]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 0203 	bic.w	r2, r3, #3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4934      	ldr	r1, [pc, #208]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033fc:	f7fe fa8c 	bl	8001918 <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003402:	e00a      	b.n	800341a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003404:	f7fe fa88 	bl	8001918 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e04f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	4b2b      	ldr	r3, [pc, #172]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 020c 	and.w	r2, r3, #12
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	429a      	cmp	r2, r3
 800342a:	d1eb      	bne.n	8003404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800342c:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d20c      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b22      	ldr	r3, [pc, #136]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	@ (80034c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	@ (80034c8 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	@ (80034cc <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f9ec 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	0800446c 	.word	0x0800446c
 80034d0:	20000004 	.word	0x20000004
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034dc:	b094      	sub	sp, #80	@ 0x50
 80034de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f0:	4b79      	ldr	r3, [pc, #484]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d00d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x40>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	f200 80e1 	bhi.w	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0x34>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d003      	beq.n	8003512 <HAL_RCC_GetSysClockFreq+0x3a>
 800350a:	e0db      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800350c:	4b73      	ldr	r3, [pc, #460]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 800350e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003510:	e0db      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003512:	4b73      	ldr	r3, [pc, #460]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003514:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003516:	e0d8      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003518:	4b6f      	ldr	r3, [pc, #444]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003520:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003522:	4b6d      	ldr	r3, [pc, #436]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b6a      	ldr	r3, [pc, #424]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003538:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003540:	633b      	str	r3, [r7, #48]	@ 0x30
 8003542:	2300      	movs	r3, #0
 8003544:	637b      	str	r3, [r7, #52]	@ 0x34
 8003546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800354a:	4622      	mov	r2, r4
 800354c:	462b      	mov	r3, r5
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4621      	mov	r1, r4
 8003564:	1a51      	subs	r1, r2, r1
 8003566:	6139      	str	r1, [r7, #16]
 8003568:	4629      	mov	r1, r5
 800356a:	eb63 0301 	sbc.w	r3, r3, r1
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800357c:	4659      	mov	r1, fp
 800357e:	018b      	lsls	r3, r1, #6
 8003580:	4651      	mov	r1, sl
 8003582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003586:	4651      	mov	r1, sl
 8003588:	018a      	lsls	r2, r1, #6
 800358a:	4651      	mov	r1, sl
 800358c:	ebb2 0801 	subs.w	r8, r2, r1
 8003590:	4659      	mov	r1, fp
 8003592:	eb63 0901 	sbc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	462b      	mov	r3, r5
 80035b8:	eb49 0303 	adc.w	r3, r9, r3
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ca:	4629      	mov	r1, r5
 80035cc:	024b      	lsls	r3, r1, #9
 80035ce:	4621      	mov	r1, r4
 80035d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d4:	4621      	mov	r1, r4
 80035d6:	024a      	lsls	r2, r1, #9
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035e8:	f7fc fdee 	bl	80001c8 <__aeabi_uldivmod>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4613      	mov	r3, r2
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f4:	e058      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b38      	ldr	r3, [pc, #224]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	2200      	movs	r2, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	4611      	mov	r1, r2
 8003602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003606:	623b      	str	r3, [r7, #32]
 8003608:	2300      	movs	r3, #0
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
 800360c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	f04f 0000 	mov.w	r0, #0
 8003618:	f04f 0100 	mov.w	r1, #0
 800361c:	0159      	lsls	r1, r3, #5
 800361e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003622:	0150      	lsls	r0, r2, #5
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4641      	mov	r1, r8
 800362a:	ebb2 0a01 	subs.w	sl, r2, r1
 800362e:	4649      	mov	r1, r9
 8003630:	eb63 0b01 	sbc.w	fp, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003648:	ebb2 040a 	subs.w	r4, r2, sl
 800364c:	eb63 050b 	sbc.w	r5, r3, fp
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	00eb      	lsls	r3, r5, #3
 800365a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800365e:	00e2      	lsls	r2, r4, #3
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	4643      	mov	r3, r8
 8003666:	18e3      	adds	r3, r4, r3
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	464b      	mov	r3, r9
 800366c:	eb45 0303 	adc.w	r3, r5, r3
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800367e:	4629      	mov	r1, r5
 8003680:	028b      	lsls	r3, r1, #10
 8003682:	4621      	mov	r1, r4
 8003684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003688:	4621      	mov	r1, r4
 800368a:	028a      	lsls	r2, r1, #10
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003692:	2200      	movs	r2, #0
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	61fa      	str	r2, [r7, #28]
 8003698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800369c:	f7fc fd94 	bl	80001c8 <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4613      	mov	r3, r2
 80036a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	3301      	adds	r3, #1
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3750      	adds	r7, #80	@ 0x50
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	00f42400 	.word	0x00f42400
 80036e0:	007a1200 	.word	0x007a1200

080036e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e041      	b.n	800377a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fd ffcc 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	4610      	mov	r0, r2
 8003724:	f000 fad8 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e041      	b.n	8003818 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d106      	bne.n	80037ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f839 	bl	8003820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3304      	adds	r3, #4
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fa89 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start+0x24>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e022      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d109      	bne.n	8003872 <HAL_TIM_PWM_Start+0x3e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e015      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start+0x58>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_TIM_PWM_Start+0x6a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07c      	b.n	80039a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0x82>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b4:	e013      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0x92>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038c4:	e00b      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038d4:	e003      	b.n	80038de <HAL_TIM_PWM_Start+0xaa>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fce6 	bl	80042b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2d      	ldr	r2, [pc, #180]	@ (80039a8 <HAL_TIM_PWM_Start+0x174>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d004      	beq.n	8003900 <HAL_TIM_PWM_Start+0xcc>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <HAL_TIM_PWM_Start+0x178>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_PWM_Start+0xd0>
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_TIM_PWM_Start+0xd2>
 8003904:	2300      	movs	r3, #0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_TIM_PWM_Start+0x174>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392c:	d01d      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <HAL_TIM_PWM_Start+0x17c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d018      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <HAL_TIM_PWM_Start+0x180>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <HAL_TIM_PWM_Start+0x184>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	@ (80039ac <HAL_TIM_PWM_Start+0x178>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a18      	ldr	r2, [pc, #96]	@ (80039bc <HAL_TIM_PWM_Start+0x188>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIM_PWM_Start+0x136>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a16      	ldr	r2, [pc, #88]	@ (80039c0 <HAL_TIM_PWM_Start+0x18c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d010      	beq.n	800399e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	e007      	b.n	800399e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40010400 	.word	0x40010400
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40001800 	.word	0x40001800

080039c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039de:	2302      	movs	r3, #2
 80039e0:	e0ae      	b.n	8003b40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	f200 809f 	bhi.w	8003b30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003b31 	.word	0x08003b31
 8003a00:	08003b31 	.word	0x08003b31
 8003a04:	08003b31 	.word	0x08003b31
 8003a08:	08003a6d 	.word	0x08003a6d
 8003a0c:	08003b31 	.word	0x08003b31
 8003a10:	08003b31 	.word	0x08003b31
 8003a14:	08003b31 	.word	0x08003b31
 8003a18:	08003aaf 	.word	0x08003aaf
 8003a1c:	08003b31 	.word	0x08003b31
 8003a20:	08003b31 	.word	0x08003b31
 8003a24:	08003b31 	.word	0x08003b31
 8003a28:	08003aef 	.word	0x08003aef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9f6 	bl	8003e24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0204 	bic.w	r2, r2, #4
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
      break;
 8003a6a:	e064      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fa46 	bl	8003f04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      break;
 8003aac:	e043      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fa9b 	bl	8003ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0208 	orr.w	r2, r2, #8
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0204 	bic.w	r2, r2, #4
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	61da      	str	r2, [r3, #28]
      break;
 8003aec:	e023      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 faef 	bl	80040d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	61da      	str	r2, [r3, #28]
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	75fb      	strb	r3, [r7, #23]
      break;
 8003b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_TIM_ConfigClockSource+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0b4      	b.n	8003cce <HAL_TIM_ConfigClockSource+0x186>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9c:	d03e      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0xd4>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba2:	f200 8087 	bhi.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003baa:	f000 8086 	beq.w	8003cba <HAL_TIM_ConfigClockSource+0x172>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bb2:	d87f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b70      	cmp	r3, #112	@ 0x70
 8003bb6:	d01a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xa6>
 8003bb8:	2b70      	cmp	r3, #112	@ 0x70
 8003bba:	d87b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b60      	cmp	r3, #96	@ 0x60
 8003bbe:	d050      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc0:	2b60      	cmp	r3, #96	@ 0x60
 8003bc2:	d877      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b50      	cmp	r3, #80	@ 0x50
 8003bc6:	d03c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xfa>
 8003bc8:	2b50      	cmp	r3, #80	@ 0x50
 8003bca:	d873      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d058      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd0:	2b40      	cmp	r3, #64	@ 0x40
 8003bd2:	d86f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d064      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b30      	cmp	r3, #48	@ 0x30
 8003bda:	d86b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d060      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d867      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d05a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	e062      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	f000 fb3b 	bl	8004278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	609a      	str	r2, [r3, #8]
      break;
 8003c1a:	e04f      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	f000 fb24 	bl	8004278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c3e:	609a      	str	r2, [r3, #8]
      break;
 8003c40:	e03c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 fa98 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2150      	movs	r1, #80	@ 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 faf1 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e02c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 fab7 	bl	80041e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2160      	movs	r1, #96	@ 0x60
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fae1 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e01c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 fa78 	bl	8004184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	@ 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fad1 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e00c      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 fac8 	bl	8004242 <TIM_ITRx_SetConfig>
      break;
 8003cb2:	e003      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a43      	ldr	r2, [pc, #268]	@ (8003df8 <TIM_Base_SetConfig+0x120>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a40      	ldr	r2, [pc, #256]	@ (8003dfc <TIM_Base_SetConfig+0x124>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3f      	ldr	r2, [pc, #252]	@ (8003e00 <TIM_Base_SetConfig+0x128>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e04 <TIM_Base_SetConfig+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	@ (8003e08 <TIM_Base_SetConfig+0x130>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <TIM_Base_SetConfig+0x120>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02b      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d38:	d027      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dfc <TIM_Base_SetConfig+0x124>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d023      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2e      	ldr	r2, [pc, #184]	@ (8003e00 <TIM_Base_SetConfig+0x128>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <TIM_Base_SetConfig+0x12c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01b      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2c      	ldr	r2, [pc, #176]	@ (8003e08 <TIM_Base_SetConfig+0x130>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d017      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003e0c <TIM_Base_SetConfig+0x134>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	@ (8003e10 <TIM_Base_SetConfig+0x138>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a29      	ldr	r2, [pc, #164]	@ (8003e14 <TIM_Base_SetConfig+0x13c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a28      	ldr	r2, [pc, #160]	@ (8003e18 <TIM_Base_SetConfig+0x140>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	@ (8003e1c <TIM_Base_SetConfig+0x144>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a26      	ldr	r2, [pc, #152]	@ (8003e20 <TIM_Base_SetConfig+0x148>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8003df8 <TIM_Base_SetConfig+0x120>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0xf2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <TIM_Base_SetConfig+0x130>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d103      	bne.n	8003dd2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691a      	ldr	r2, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f043 0204 	orr.w	r2, r3, #4
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	40000400 	.word	0x40000400
 8003e00:	40000800 	.word	0x40000800
 8003e04:	40000c00 	.word	0x40000c00
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40014000 	.word	0x40014000
 8003e10:	40014400 	.word	0x40014400
 8003e14:	40014800 	.word	0x40014800
 8003e18:	40001800 	.word	0x40001800
 8003e1c:	40001c00 	.word	0x40001c00
 8003e20:	40002000 	.word	0x40002000

08003e24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	f023 0201 	bic.w	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0302 	bic.w	r3, r3, #2
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a20      	ldr	r2, [pc, #128]	@ (8003efc <TIM_OC1_SetConfig+0xd8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <TIM_OC1_SetConfig+0x64>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <TIM_OC1_SetConfig+0xdc>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10c      	bne.n	8003ea2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0308 	bic.w	r3, r3, #8
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	@ (8003efc <TIM_OC1_SetConfig+0xd8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d003      	beq.n	8003eb2 <TIM_OC1_SetConfig+0x8e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a14      	ldr	r2, [pc, #80]	@ (8003f00 <TIM_OC1_SetConfig+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40010400 	.word	0x40010400

08003f04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 0210 	bic.w	r2, r3, #16
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0320 	bic.w	r3, r3, #32
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a22      	ldr	r2, [pc, #136]	@ (8003fe8 <TIM_OC2_SetConfig+0xe4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC2_SetConfig+0x68>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a21      	ldr	r2, [pc, #132]	@ (8003fec <TIM_OC2_SetConfig+0xe8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d10d      	bne.n	8003f88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	@ (8003fe8 <TIM_OC2_SetConfig+0xe4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d003      	beq.n	8003f98 <TIM_OC2_SetConfig+0x94>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <TIM_OC2_SetConfig+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d113      	bne.n	8003fc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	621a      	str	r2, [r3, #32]
}
 8003fda:	bf00      	nop
 8003fdc:	371c      	adds	r7, #28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a21      	ldr	r2, [pc, #132]	@ (80040d0 <TIM_OC3_SetConfig+0xe0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x66>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <TIM_OC3_SetConfig+0xe4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10d      	bne.n	8004072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800405c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	4313      	orrs	r3, r2
 8004068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a16      	ldr	r2, [pc, #88]	@ (80040d0 <TIM_OC3_SetConfig+0xe0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_OC3_SetConfig+0x92>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <TIM_OC3_SetConfig+0xe4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40010400 	.word	0x40010400

080040d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	031b      	lsls	r3, r3, #12
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4313      	orrs	r3, r2
 800412e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a12      	ldr	r2, [pc, #72]	@ (800417c <TIM_OC4_SetConfig+0xa4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC4_SetConfig+0x68>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a11      	ldr	r2, [pc, #68]	@ (8004180 <TIM_OC4_SetConfig+0xa8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40010000 	.word	0x40010000
 8004180:	40010400 	.word	0x40010400

08004184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 030a 	bic.w	r3, r3, #10
 80041c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	621a      	str	r2, [r3, #32]
}
 80041d6:	bf00      	nop
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b087      	sub	sp, #28
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 0210 	bic.w	r2, r3, #16
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800420c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	031b      	lsls	r3, r3, #12
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800421e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004242:	b480      	push	{r7}
 8004244:	b085      	sub	sp, #20
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	f043 0307 	orr.w	r3, r3, #7
 8004264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	021a      	lsls	r2, r3, #8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	431a      	orrs	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 031f 	and.w	r3, r3, #31
 80042ca:	2201      	movs	r2, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1a      	ldr	r2, [r3, #32]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6a1a      	ldr	r2, [r3, #32]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 031f 	and.w	r3, r3, #31
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004318:	2302      	movs	r3, #2
 800431a:	e05a      	b.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a21      	ldr	r2, [pc, #132]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d022      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d01d      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1d      	ldr	r2, [pc, #116]	@ (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d018      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1b      	ldr	r2, [pc, #108]	@ (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d013      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d00e      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d009      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a17      	ldr	r2, [pc, #92]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d004      	beq.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a15      	ldr	r2, [pc, #84]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d10c      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40001800 	.word	0x40001800

080043fc <memset>:
 80043fc:	4402      	add	r2, r0
 80043fe:	4603      	mov	r3, r0
 8004400:	4293      	cmp	r3, r2
 8004402:	d100      	bne.n	8004406 <memset+0xa>
 8004404:	4770      	bx	lr
 8004406:	f803 1b01 	strb.w	r1, [r3], #1
 800440a:	e7f9      	b.n	8004400 <memset+0x4>

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	@ (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	@ (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	@ (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	@ (8004450 <__libc_init_array+0x44>)
 8004420:	f000 f818 	bl	8004454 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	0800448c 	.word	0x0800448c
 8004448:	0800448c 	.word	0x0800448c
 800444c:	0800448c 	.word	0x0800448c
 8004450:	08004490 	.word	0x08004490

08004454 <_init>:
 8004454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004456:	bf00      	nop
 8004458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800445a:	bc08      	pop	{r3}
 800445c:	469e      	mov	lr, r3
 800445e:	4770      	bx	lr

08004460 <_fini>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr
