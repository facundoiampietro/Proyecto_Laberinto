
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007050  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080071e0  080071e0  000081e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007288  08007288  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007288  08007288  00008288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007290  08007290  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007294  08007294  00008294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08007298  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          000003a0  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e977  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f8e  00000000  00000000  00017a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000199a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  0001a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226f6  00000000  00000000  0001b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001035c  00000000  00000000  0003da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d87a2  00000000  00000000  0004dd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012651d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ac  00000000  00000000  00126560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ad  00000000  00000000  0012a80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071c8 	.word	0x080071c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080071c8 	.word	0x080071c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f001 ff96 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f984 	bl	8000ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 fb18 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bc8:	f000 faf6 	bl	80011b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000bcc:	f000 f9e8 	bl	8000fa0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000bd0:	f000 fa46 	bl	8001060 <MX_TIM3_Init>
  MX_UART5_Init();
 8000bd4:	f000 fac6 	bl	8001164 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	49aa      	ldr	r1, [pc, #680]	@ (8000e84 <main+0x2cc>)
 8000bdc:	48aa      	ldr	r0, [pc, #680]	@ (8000e88 <main+0x2d0>)
 8000bde:	f002 f85f 	bl	8002ca0 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000be2:	4baa      	ldr	r3, [pc, #680]	@ (8000e8c <main+0x2d4>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000be8:	4ba8      	ldr	r3, [pc, #672]	@ (8000e8c <main+0x2d4>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	739a      	strb	r2, [r3, #14]
 8000bee:	4ba7      	ldr	r3, [pc, #668]	@ (8000e8c <main+0x2d4>)
 8000bf0:	7b9a      	ldrb	r2, [r3, #14]
 8000bf2:	4ba6      	ldr	r3, [pc, #664]	@ (8000e8c <main+0x2d4>)
 8000bf4:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000bf6:	4ba5      	ldr	r3, [pc, #660]	@ (8000e8c <main+0x2d4>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	4ba3      	ldr	r3, [pc, #652]	@ (8000e8c <main+0x2d4>)
 8000bfe:	7b5a      	ldrb	r2, [r3, #13]
 8000c00:	4ba2      	ldr	r3, [pc, #648]	@ (8000e8c <main+0x2d4>)
 8000c02:	729a      	strb	r2, [r3, #10]
 8000c04:	4ba1      	ldr	r3, [pc, #644]	@ (8000e8c <main+0x2d4>)
 8000c06:	7a9a      	ldrb	r2, [r3, #10]
 8000c08:	4ba0      	ldr	r3, [pc, #640]	@ (8000e8c <main+0x2d4>)
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000c0c:	4b9f      	ldr	r3, [pc, #636]	@ (8000e8c <main+0x2d4>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	731a      	strb	r2, [r3, #12]
 8000c12:	4b9e      	ldr	r3, [pc, #632]	@ (8000e8c <main+0x2d4>)
 8000c14:	7b1a      	ldrb	r2, [r3, #12]
 8000c16:	4b9d      	ldr	r3, [pc, #628]	@ (8000e8c <main+0x2d4>)
 8000c18:	725a      	strb	r2, [r3, #9]
 8000c1a:	4b9c      	ldr	r3, [pc, #624]	@ (8000e8c <main+0x2d4>)
 8000c1c:	7a5a      	ldrb	r2, [r3, #9]
 8000c1e:	4b9b      	ldr	r3, [pc, #620]	@ (8000e8c <main+0x2d4>)
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	4b9a      	ldr	r3, [pc, #616]	@ (8000e8c <main+0x2d4>)
 8000c24:	799a      	ldrb	r2, [r3, #6]
 8000c26:	4b99      	ldr	r3, [pc, #612]	@ (8000e8c <main+0x2d4>)
 8000c28:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000c2a:	4b98      	ldr	r3, [pc, #608]	@ (8000e8c <main+0x2d4>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	721a      	strb	r2, [r3, #8]
 8000c30:	4b96      	ldr	r3, [pc, #600]	@ (8000e8c <main+0x2d4>)
 8000c32:	7a1a      	ldrb	r2, [r3, #8]
 8000c34:	4b95      	ldr	r3, [pc, #596]	@ (8000e8c <main+0x2d4>)
 8000c36:	715a      	strb	r2, [r3, #5]
 8000c38:	4b94      	ldr	r3, [pc, #592]	@ (8000e8c <main+0x2d4>)
 8000c3a:	795a      	ldrb	r2, [r3, #5]
 8000c3c:	4b93      	ldr	r3, [pc, #588]	@ (8000e8c <main+0x2d4>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000c40:	4b92      	ldr	r3, [pc, #584]	@ (8000e8c <main+0x2d4>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	711a      	strb	r2, [r3, #4]
 8000c46:	4b91      	ldr	r3, [pc, #580]	@ (8000e8c <main+0x2d4>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b90      	ldr	r3, [pc, #576]	@ (8000e8c <main+0x2d4>)
 8000c4c:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000c4e:	4b8f      	ldr	r3, [pc, #572]	@ (8000e8c <main+0x2d4>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000c54:	4b8e      	ldr	r3, [pc, #568]	@ (8000e90 <main+0x2d8>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e90 <main+0x2d8>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b8b      	ldr	r3, [pc, #556]	@ (8000e90 <main+0x2d8>)
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b8a      	ldr	r3, [pc, #552]	@ (8000e90 <main+0x2d8>)
 8000c66:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000c68:	4b89      	ldr	r3, [pc, #548]	@ (8000e90 <main+0x2d8>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000c6e:	4b88      	ldr	r3, [pc, #544]	@ (8000e90 <main+0x2d8>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	72da      	strb	r2, [r3, #11]
 8000c74:	4b86      	ldr	r3, [pc, #536]	@ (8000e90 <main+0x2d8>)
 8000c76:	7ada      	ldrb	r2, [r3, #11]
 8000c78:	4b85      	ldr	r3, [pc, #532]	@ (8000e90 <main+0x2d8>)
 8000c7a:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000c7c:	4b84      	ldr	r3, [pc, #528]	@ (8000e90 <main+0x2d8>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000c82:	4b83      	ldr	r3, [pc, #524]	@ (8000e90 <main+0x2d8>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	735a      	strb	r2, [r3, #13]
 8000c88:	4b81      	ldr	r3, [pc, #516]	@ (8000e90 <main+0x2d8>)
 8000c8a:	7b5a      	ldrb	r2, [r3, #13]
 8000c8c:	4b80      	ldr	r3, [pc, #512]	@ (8000e90 <main+0x2d8>)
 8000c8e:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000c90:	4b7f      	ldr	r3, [pc, #508]	@ (8000e90 <main+0x2d8>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000c96:	4b7e      	ldr	r3, [pc, #504]	@ (8000e90 <main+0x2d8>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	721a      	strb	r2, [r3, #8]
 8000c9c:	4b7c      	ldr	r3, [pc, #496]	@ (8000e90 <main+0x2d8>)
 8000c9e:	7a1a      	ldrb	r2, [r3, #8]
 8000ca0:	4b7b      	ldr	r3, [pc, #492]	@ (8000e90 <main+0x2d8>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000ca4:	4b7a      	ldr	r3, [pc, #488]	@ (8000e90 <main+0x2d8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
 8000caa:	4b79      	ldr	r3, [pc, #484]	@ (8000e90 <main+0x2d8>)
 8000cac:	7a9a      	ldrb	r2, [r3, #10]
 8000cae:	4b78      	ldr	r3, [pc, #480]	@ (8000e90 <main+0x2d8>)
 8000cb0:	725a      	strb	r2, [r3, #9]
 8000cb2:	4b77      	ldr	r3, [pc, #476]	@ (8000e90 <main+0x2d8>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b76      	ldr	r3, [pc, #472]	@ (8000e90 <main+0x2d8>)
 8000cb8:	719a      	strb	r2, [r3, #6]
 8000cba:	4b75      	ldr	r3, [pc, #468]	@ (8000e90 <main+0x2d8>)
 8000cbc:	799a      	ldrb	r2, [r3, #6]
 8000cbe:	4b74      	ldr	r3, [pc, #464]	@ (8000e90 <main+0x2d8>)
 8000cc0:	715a      	strb	r2, [r3, #5]

	girando = 0;
 8000cc2:	4b74      	ldr	r3, [pc, #464]	@ (8000e94 <main+0x2dc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	4872      	ldr	r0, [pc, #456]	@ (8000e98 <main+0x2e0>)
 8000cd0:	f003 fa6c 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cda:	486f      	ldr	r0, [pc, #444]	@ (8000e98 <main+0x2e0>)
 8000cdc:	f003 fa66 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	486c      	ldr	r0, [pc, #432]	@ (8000e98 <main+0x2e0>)
 8000ce8:	f003 fa60 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf2:	4869      	ldr	r0, [pc, #420]	@ (8000e98 <main+0x2e0>)
 8000cf4:	f003 fa5a 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	4868      	ldr	r0, [pc, #416]	@ (8000e9c <main+0x2e4>)
 8000cfc:	f003 ffc8 	bl	8004c90 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000d00:	210c      	movs	r1, #12
 8000d02:	4866      	ldr	r0, [pc, #408]	@ (8000e9c <main+0x2e4>)
 8000d04:	f003 ffc4 	bl	8004c90 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000d08:	4b65      	ldr	r3, [pc, #404]	@ (8000ea0 <main+0x2e8>)
 8000d0a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000d10:	4b63      	ldr	r3, [pc, #396]	@ (8000ea0 <main+0x2e8>)
 8000d12:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8000d16:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d1e:	4861      	ldr	r0, [pc, #388]	@ (8000ea4 <main+0x2ec>)
 8000d20:	f003 fa44 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d2a:	485e      	ldr	r0, [pc, #376]	@ (8000ea4 <main+0x2ec>)
 8000d2c:	f003 fa3e 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d36:	485b      	ldr	r0, [pc, #364]	@ (8000ea4 <main+0x2ec>)
 8000d38:	f003 fa38 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d42:	4858      	ldr	r0, [pc, #352]	@ (8000ea4 <main+0x2ec>)
 8000d44:	f003 fa32 	bl	80041ac <HAL_GPIO_WritePin>

	ubicacion = 0;
 8000d48:	4b57      	ldr	r3, [pc, #348]	@ (8000ea8 <main+0x2f0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	uart_llegada = 0;
 8000d4e:	4b57      	ldr	r3, [pc, #348]	@ (8000eac <main+0x2f4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]

	prueba = 6; //Aca se elige que programa queremos que se realice
 8000d54:	4b56      	ldr	r3, [pc, #344]	@ (8000eb0 <main+0x2f8>)
 8000d56:	2206      	movs	r2, #6
 8000d58:	701a      	strb	r2, [r3, #0]
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d60:	4850      	ldr	r0, [pc, #320]	@ (8000ea4 <main+0x2ec>)
 8000d62:	f003 fa23 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d6c:	484d      	ldr	r0, [pc, #308]	@ (8000ea4 <main+0x2ec>)
 8000d6e:	f003 fa1d 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d78:	484a      	ldr	r0, [pc, #296]	@ (8000ea4 <main+0x2ec>)
 8000d7a:	f003 fa17 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d84:	4847      	ldr	r0, [pc, #284]	@ (8000ea4 <main+0x2ec>)
 8000d86:	f003 fa11 	bl	80041ac <HAL_GPIO_WritePin>
		switch (prueba) {
 8000d8a:	4b49      	ldr	r3, [pc, #292]	@ (8000eb0 <main+0x2f8>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b0c      	cmp	r3, #12
 8000d90:	d8e3      	bhi.n	8000d5a <main+0x1a2>
 8000d92:	a201      	add	r2, pc, #4	@ (adr r2, 8000d98 <main+0x1e0>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000dcd 	.word	0x08000dcd
 8000d9c:	08000d5b 	.word	0x08000d5b
 8000da0:	08000d5b 	.word	0x08000d5b
 8000da4:	08000dd3 	.word	0x08000dd3
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000def 	.word	0x08000def
 8000db0:	08000df5 	.word	0x08000df5
 8000db4:	08000d5b 	.word	0x08000d5b
 8000db8:	08000d5b 	.word	0x08000d5b
 8000dbc:	08000d5b 	.word	0x08000d5b
 8000dc0:	08000e17 	.word	0x08000e17
 8000dc4:	08000e59 	.word	0x08000e59
 8000dc8:	08000e79 	.word	0x08000e79

		case 0:
			prueba_avanzar();
 8000dcc:	f000 fc52 	bl	8001674 <prueba_avanzar>
			break;
 8000dd0:	e056      	b.n	8000e80 <main+0x2c8>

		case 3:
			ubicacion = 0;
 8000dd2:	4b35      	ldr	r3, [pc, #212]	@ (8000ea8 <main+0x2f0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
			prueba = 4;
 8000dd8:	4b35      	ldr	r3, [pc, #212]	@ (8000eb0 <main+0x2f8>)
 8000dda:	2204      	movs	r2, #4
 8000ddc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8000dde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000de2:	f001 fef5 	bl	8002bd0 <HAL_Delay>
			break;
 8000de6:	e04b      	b.n	8000e80 <main+0x2c8>

		case 4:
			programa_principal();
 8000de8:	f000 fc7a 	bl	80016e0 <programa_principal>
			break;
 8000dec:	e048      	b.n	8000e80 <main+0x2c8>

		case 5:
			ajuste_automatico();
 8000dee:	f000 fb83 	bl	80014f8 <ajuste_automatico>
			break;
 8000df2:	e045      	b.n	8000e80 <main+0x2c8>

		case 6:
			sensor_izq_min = 32700;
 8000df4:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb4 <main+0x2fc>)
 8000df6:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000dfa:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <main+0x300>)
 8000dfe:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000e02:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <main+0x304>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <main+0x308>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000e10:	4b27      	ldr	r3, [pc, #156]	@ (8000eb0 <main+0x2f8>)
 8000e12:	2205      	movs	r2, #5
 8000e14:	701a      	strb	r2, [r3, #0]
		case 10:
			TIM3->CCR3 = 0;
 8000e16:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <main+0x2e8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <main+0x2e8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e28:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <main+0x2ec>)
 8000e2a:	f003 f9bf 	bl	80041ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e34:	481b      	ldr	r0, [pc, #108]	@ (8000ea4 <main+0x2ec>)
 8000e36:	f003 f9b9 	bl	80041ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e40:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <main+0x2ec>)
 8000e42:	f003 f9b3 	bl	80041ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e4c:	4815      	ldr	r0, [pc, #84]	@ (8000ea4 <main+0x2ec>)
 8000e4e:	f003 f9ad 	bl	80041ac <HAL_GPIO_WritePin>
			envio_llegada();
 8000e52:	f001 fb93 	bl	800257c <envio_llegada>

				}
			} */
		//	HAL_Delay(3000); //escpera 5 segundos... suspenso
		 //prueba = 11;
			break;
 8000e56:	e013      	b.n	8000e80 <main+0x2c8>
		case 11:
			eliminar_repetidos(camino_solucion,contador_casillas);
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <main+0x30c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	481a      	ldr	r0, [pc, #104]	@ (8000ec8 <main+0x310>)
 8000e60:	f000 fa8a 	bl	8001378 <eliminar_repetidos>
			contador_casillas = contador_casillas - 1;
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <main+0x30c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ec4 <main+0x30c>)
 8000e6e:	701a      	strb	r2, [r3, #0]
			prueba = 12;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <main+0x2f8>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	701a      	strb	r2, [r3, #0]
			break;
 8000e76:	e003      	b.n	8000e80 <main+0x2c8>
		case 12:
			de_reversa_mami();
 8000e78:	f000 face 	bl	8001418 <de_reversa_mami>
			break;
 8000e7c:	bf00      	nop
 8000e7e:	e76c      	b.n	8000d5a <main+0x1a2>
		HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000e80:	e76b      	b.n	8000d5a <main+0x1a2>
 8000e82:	bf00      	nop
 8000e84:	20000230 	.word	0x20000230
 8000e88:	20000080 	.word	0x20000080
 8000e8c:	200001dc 	.word	0x200001dc
 8000e90:	200001ec 	.word	0x200001ec
 8000e94:	2000022c 	.word	0x2000022c
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	20000128 	.word	0x20000128
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	200001d8 	.word	0x200001d8
 8000eac:	200001ff 	.word	0x200001ff
 8000eb0:	200001fd 	.word	0x200001fd
 8000eb4:	20000002 	.word	0x20000002
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	20000200 	.word	0x20000200
 8000ec0:	20000202 	.word	0x20000202
 8000ec4:	200001fc 	.word	0x200001fc
 8000ec8:	2000020c 	.word	0x2000020c

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	@ 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	@ 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f005 fcf6 	bl	80068cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	4b28      	ldr	r3, [pc, #160]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a27      	ldr	r2, [pc, #156]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <SystemClock_Config+0xcc>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a21      	ldr	r2, [pc, #132]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f9c <SystemClock_Config+0xd0>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f34:	2302      	movs	r3, #2
 8000f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000f40:	2332      	movs	r3, #50	@ 0x32
 8000f42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f44:	2304      	movs	r3, #4
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f48:	2307      	movs	r3, #7
 8000f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4618      	mov	r0, r3
 8000f52:	f003 f95d 	bl	8004210 <HAL_RCC_OscConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f5c:	f001 fb94 	bl	8002688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f60:	230f      	movs	r3, #15
 8000f62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f6c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 fbbe 	bl	8004700 <HAL_RCC_ClockConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f8a:	f001 fb7d 	bl	8002688 <Error_Handler>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3750      	adds	r7, #80	@ 0x50
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40007000 	.word	0x40007000

08000fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fb4:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <MX_ADC1_Init+0xb8>)
 8000fb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800105c <MX_ADC1_Init+0xbc>)
 8000fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000fee:	2202      	movs	r2, #2
 8000ff0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001000:	4814      	ldr	r0, [pc, #80]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8001002:	f001 fe09 	bl	8002c18 <HAL_ADC_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800100c:	f001 fb3c 	bl	8002688 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001010:	2309      	movs	r3, #9
 8001012:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001014:	2301      	movs	r3, #1
 8001016:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <MX_ADC1_Init+0xb4>)
 8001022:	f001 ff5b 	bl	8002edc <HAL_ADC_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800102c:	f001 fb2c 	bl	8002688 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001030:	2308      	movs	r3, #8
 8001032:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC1_Init+0xb4>)
 800103e:	f001 ff4d 	bl	8002edc <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001048:	f001 fb1e 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000080 	.word	0x20000080
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001090:	4b32      	ldr	r3, [pc, #200]	@ (800115c <MX_TIM3_Init+0xfc>)
 8001092:	4a33      	ldr	r2, [pc, #204]	@ (8001160 <MX_TIM3_Init+0x100>)
 8001094:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001096:	4b31      	ldr	r3, [pc, #196]	@ (800115c <MX_TIM3_Init+0xfc>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <MX_TIM3_Init+0xfc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010a4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80010a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b6:	4829      	ldr	r0, [pc, #164]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010b8:	f003 fd42 	bl	8004b40 <HAL_TIM_Base_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010c2:	f001 fae1 	bl	8002688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4822      	ldr	r0, [pc, #136]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010d4:	f003 ff66 	bl	8004fa4 <HAL_TIM_ConfigClockSource>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80010de:	f001 fad3 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010e2:	481e      	ldr	r0, [pc, #120]	@ (800115c <MX_TIM3_Init+0xfc>)
 80010e4:	f003 fd7b 	bl	8004bde <HAL_TIM_PWM_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80010ee:	f001 facb 	bl	8002688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4619      	mov	r1, r3
 8001100:	4816      	ldr	r0, [pc, #88]	@ (800115c <MX_TIM3_Init+0xfc>)
 8001102:	f004 fb2d 	bl	8005760 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800110c:	f001 fabc 	bl	8002688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001110:	2360      	movs	r3, #96	@ 0x60
 8001112:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2208      	movs	r2, #8
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_TIM3_Init+0xfc>)
 8001128:	f003 fe7a 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001132:	f001 faa9 	bl	8002688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	220c      	movs	r2, #12
 800113a:	4619      	mov	r1, r3
 800113c:	4807      	ldr	r0, [pc, #28]	@ (800115c <MX_TIM3_Init+0xfc>)
 800113e:	f003 fe6f 	bl	8004e20 <HAL_TIM_PWM_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001148:	f001 fa9e 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <MX_TIM3_Init+0xfc>)
 800114e:	f001 fb63 	bl	8002818 <HAL_TIM_MspPostInit>

}
 8001152:	bf00      	nop
 8001154:	3738      	adds	r7, #56	@ 0x38
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000128 	.word	0x20000128
 8001160:	40000400 	.word	0x40000400

08001164 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <MX_UART5_Init+0x4c>)
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <MX_UART5_Init+0x50>)
 800116c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <MX_UART5_Init+0x4c>)
 8001170:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001174:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001176:	4b0e      	ldr	r3, [pc, #56]	@ (80011b0 <MX_UART5_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <MX_UART5_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <MX_UART5_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001188:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <MX_UART5_Init+0x4c>)
 800118a:	220c      	movs	r2, #12
 800118c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118e:	4b08      	ldr	r3, [pc, #32]	@ (80011b0 <MX_UART5_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <MX_UART5_Init+0x4c>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_UART5_Init+0x4c>)
 800119c:	f004 fb5c 	bl	8005858 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011a6:	f001 fa6f 	bl	8002688 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000170 	.word	0x20000170
 80011b4:	40005000 	.word	0x40005000

080011b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_DMA_Init+0x3c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2038      	movs	r0, #56	@ 0x38
 80011e0:	f002 f9f7 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011e4:	2038      	movs	r0, #56	@ 0x38
 80011e6:	f002 fa10 	bl	800360a <HAL_NVIC_EnableIRQ>

}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	@ 0x28
 80011fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b50      	ldr	r3, [pc, #320]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a4b      	ldr	r2, [pc, #300]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b49      	ldr	r3, [pc, #292]	@ (8001360 <MX_GPIO_Init+0x168>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <MX_GPIO_Init+0x168>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a44      	ldr	r2, [pc, #272]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a3d      	ldr	r2, [pc, #244]	@ (8001360 <MX_GPIO_Init+0x168>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <MX_GPIO_Init+0x168>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800129a:	2200      	movs	r2, #0
 800129c:	2108      	movs	r1, #8
 800129e:	4831      	ldr	r0, [pc, #196]	@ (8001364 <MX_GPIO_Init+0x16c>)
 80012a0:	f002 ff84 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80012aa:	482f      	ldr	r0, [pc, #188]	@ (8001368 <MX_GPIO_Init+0x170>)
 80012ac:	f002 ff7e 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80012b6:	482d      	ldr	r0, [pc, #180]	@ (800136c <MX_GPIO_Init+0x174>)
 80012b8:	f002 ff78 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80012bc:	2308      	movs	r3, #8
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <MX_GPIO_Init+0x16c>)
 80012d4:	f002 fdb6 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_Pin */
  GPIO_InitStruct.Pin = boton_Pin;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4821      	ldr	r0, [pc, #132]	@ (8001370 <MX_GPIO_Init+0x178>)
 80012ec:	f002 fdaa 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
  GPIO_InitStruct.Pin = m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin;
 80012f0:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4817      	ldr	r0, [pc, #92]	@ (8001368 <MX_GPIO_Init+0x170>)
 800130a:	f002 fd9b 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin;
 800130e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4811      	ldr	r0, [pc, #68]	@ (800136c <MX_GPIO_Init+0x174>)
 8001328:	f002 fd8c 	bl	8003e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
  GPIO_InitStruct.Pin = sensor_frontal_Pin|sensor_linea_Pin;
 800132c:	23c0      	movs	r3, #192	@ 0xc0
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480c      	ldr	r0, [pc, #48]	@ (8001374 <MX_GPIO_Init+0x17c>)
 8001342:	f002 fd7f 	bl	8003e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2017      	movs	r0, #23
 800134c:	f002 f941 	bl	80035d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001350:	2017      	movs	r0, #23
 8001352:	f002 f95a 	bl	800360a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	@ 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40021000 	.word	0x40021000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40020000 	.word	0x40020000
 8001374:	40020800 	.word	0x40020800

08001378 <eliminar_repetidos>:

/* USER CODE BEGIN 4 */

void eliminar_repetidos(uint8_t *camino_solucion, uint8_t contador_casillas) {
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < contador_casillas - 1; i++) {
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	e039      	b.n	80013fe <eliminar_repetidos+0x86>
        for (int j = i + 1; j < contador_casillas; j++) {
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	e02e      	b.n	80013f0 <eliminar_repetidos+0x78>
            if (camino_solucion[i] == camino_solucion[j]) {
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	440b      	add	r3, r1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d121      	bne.n	80013ea <eliminar_repetidos+0x72>
                // Se encontró repetido: eliminar todo entre i+1 y j inclusive
                int cantidad_a_eliminar = j - i;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	60bb      	str	r3, [r7, #8]

                for (int k = j; k < contador_casillas; k++) {
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e00d      	b.n	80013d0 <eliminar_repetidos+0x58>
                    camino_solucion[k - cantidad_a_eliminar] = camino_solucion[k];
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	441a      	add	r2, r3
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	440b      	add	r3, r1
 80013c6:	7812      	ldrb	r2, [r2, #0]
 80013c8:	701a      	strb	r2, [r3, #0]
                for (int k = j; k < contador_casillas; k++) {
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbed      	blt.n	80013b4 <eliminar_repetidos+0x3c>
                }

                contador_casillas =contador_casillas - cantidad_a_eliminar;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	78fa      	ldrb	r2, [r7, #3]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	70fb      	strb	r3, [r7, #3]
                i = -1;  // Reiniciar para volver a analizar todo desde el inicio
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	617b      	str	r3, [r7, #20]
                break;
 80013e8:	e006      	b.n	80013f8 <eliminar_repetidos+0x80>
        for (int j = i + 1; j < contador_casillas; j++) {
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3301      	adds	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbcc      	blt.n	8001392 <eliminar_repetidos+0x1a>
    for (int i = 0; i < contador_casillas - 1; i++) {
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	3b01      	subs	r3, #1
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	dbc0      	blt.n	800138a <eliminar_repetidos+0x12>
            }
        }
    }
	
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <de_reversa_mami>:

void de_reversa_mami(void) {//codigo para ir de la casilla 15 a la 0... muy chiche
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

	if (verificar_sensor()) { //cambio de casilla
 800141c:	f000 f930 	bl	8001680 <verificar_sensor>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d048      	beq.n	80014b8 <de_reversa_mami+0xa0>
			contador_giros = 0;
 8001426:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <de_reversa_mami+0xb4>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
			contador_casillas = contador_casillas - 1;
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <de_reversa_mami+0xb8>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	3b01      	subs	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <de_reversa_mami+0xb8>)
 8001436:	701a      	strb	r2, [r3, #0]
			ubicacion = casilla_n = camino_solucion[contador_casillas];
 8001438:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <de_reversa_mami+0xb8>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	461a      	mov	r2, r3
 800143e:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <de_reversa_mami+0xbc>)
 8001440:	5c9a      	ldrb	r2, [r3, r2]
 8001442:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <de_reversa_mami+0xc0>)
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <de_reversa_mami+0xc0>)
 8001448:	781a      	ldrb	r2, [r3, #0]
 800144a:	4b24      	ldr	r3, [pc, #144]	@ (80014dc <de_reversa_mami+0xc4>)
 800144c:	701a      	strb	r2, [r3, #0]
			envio_ubicacion(ubicacion, casilla_n);
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <de_reversa_mami+0xc4>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4a21      	ldr	r2, [pc, #132]	@ (80014d8 <de_reversa_mami+0xc0>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f001 f83d 	bl	80024d8 <envio_ubicacion>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 800145e:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <de_reversa_mami+0xc4>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <de_reversa_mami+0xc8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	491f      	ldr	r1, [pc, #124]	@ (80014e4 <de_reversa_mami+0xcc>)
 8001468:	481f      	ldr	r0, [pc, #124]	@ (80014e8 <de_reversa_mami+0xd0>)
 800146a:	f000 fdbb 	bl	8001fe4 <calculo_minimo_peso>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <de_reversa_mami+0xc0>)
 8001474:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001476:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <de_reversa_mami+0xc4>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <de_reversa_mami+0xc0>)
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fa0b 	bl	800189c <obtener_orientacion_futura>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <de_reversa_mami+0xd4>)
 800148c:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <de_reversa_mami+0xc8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4a16      	ldr	r2, [pc, #88]	@ (80014ec <de_reversa_mami+0xd4>)
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f000 fa2b 	bl	80018f4 <obtenerGiro>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <de_reversa_mami+0xd8>)
 80014a4:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 80014a6:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <de_reversa_mami+0xd4>)
 80014a8:	781a      	ldrb	r2, [r3, #0]
 80014aa:	4b0d      	ldr	r3, [pc, #52]	@ (80014e0 <de_reversa_mami+0xc8>)
 80014ac:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <de_reversa_mami+0xd8>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f000 fba6 	bl	8001c04 <ejecutarGiro>
		}
	if (ubicacion == 0)
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <de_reversa_mami+0xc4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <de_reversa_mami+0xae>
		prueba = 10;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <de_reversa_mami+0xdc>)
 80014c2:	220a      	movs	r2, #10
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	200001fe 	.word	0x200001fe
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	2000020c 	.word	0x2000020c
 80014d8:	20000000 	.word	0x20000000
 80014dc:	200001d8 	.word	0x200001d8
 80014e0:	200001d9 	.word	0x200001d9
 80014e4:	200001ec 	.word	0x200001ec
 80014e8:	200001dc 	.word	0x200001dc
 80014ec:	200001da 	.word	0x200001da
 80014f0:	200001db 	.word	0x200001db
 80014f4:	200001fd 	.word	0x200001fd

080014f8 <ajuste_automatico>:
void ajuste_automatico(void) {
 80014f8:	b5b0      	push	{r4, r5, r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80014fc:	4b52      	ldr	r3, [pc, #328]	@ (8001648 <ajuste_automatico+0x150>)
 80014fe:	881b      	ldrh	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <ajuste_automatico+0x14>
 8001504:	4b51      	ldr	r3, [pc, #324]	@ (800164c <ajuste_automatico+0x154>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d107      	bne.n	800151c <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 800150c:	4b4e      	ldr	r3, [pc, #312]	@ (8001648 <ajuste_automatico+0x150>)
 800150e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001512:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 8001514:	4b4d      	ldr	r3, [pc, #308]	@ (800164c <ajuste_automatico+0x154>)
 8001516:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800151a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 800151c:	4b4a      	ldr	r3, [pc, #296]	@ (8001648 <ajuste_automatico+0x150>)
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	4b4b      	ldr	r3, [pc, #300]	@ (8001650 <ajuste_automatico+0x158>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	b29b      	uxth	r3, r3
 8001526:	429a      	cmp	r2, r3
 8001528:	d904      	bls.n	8001534 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <ajuste_automatico+0x158>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b45      	ldr	r3, [pc, #276]	@ (8001648 <ajuste_automatico+0x150>)
 8001532:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8001534:	4b45      	ldr	r3, [pc, #276]	@ (800164c <ajuste_automatico+0x154>)
 8001536:	881a      	ldrh	r2, [r3, #0]
 8001538:	4b46      	ldr	r3, [pc, #280]	@ (8001654 <ajuste_automatico+0x15c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	429a      	cmp	r2, r3
 8001540:	d904      	bls.n	800154c <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8001542:	4b44      	ldr	r3, [pc, #272]	@ (8001654 <ajuste_automatico+0x15c>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b29a      	uxth	r2, r3
 8001548:	4b40      	ldr	r3, [pc, #256]	@ (800164c <ajuste_automatico+0x154>)
 800154a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 800154c:	4b42      	ldr	r3, [pc, #264]	@ (8001658 <ajuste_automatico+0x160>)
 800154e:	881a      	ldrh	r2, [r3, #0]
 8001550:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <ajuste_automatico+0x158>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	429a      	cmp	r2, r3
 8001558:	d204      	bcs.n	8001564 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800155a:	4b3d      	ldr	r3, [pc, #244]	@ (8001650 <ajuste_automatico+0x158>)
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <ajuste_automatico+0x160>)
 8001562:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001564:	4b3d      	ldr	r3, [pc, #244]	@ (800165c <ajuste_automatico+0x164>)
 8001566:	881a      	ldrh	r2, [r3, #0]
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <ajuste_automatico+0x15c>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	429a      	cmp	r2, r3
 8001570:	d204      	bcs.n	800157c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <ajuste_automatico+0x15c>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b38      	ldr	r3, [pc, #224]	@ (800165c <ajuste_automatico+0x164>)
 800157a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 800157c:	2101      	movs	r1, #1
 800157e:	4838      	ldr	r0, [pc, #224]	@ (8001660 <ajuste_automatico+0x168>)
 8001580:	f002 fdfc 	bl	800417c <HAL_GPIO_ReadPin>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d15c      	bne.n	8001644 <ajuste_automatico+0x14c>
		HAL_Delay(40);
 800158a:	2028      	movs	r0, #40	@ 0x28
 800158c:	f001 fb20 	bl	8002bd0 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001590:	2101      	movs	r1, #1
 8001592:	4833      	ldr	r0, [pc, #204]	@ (8001660 <ajuste_automatico+0x168>)
 8001594:	f002 fdf2 	bl	800417c <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	2b01      	cmp	r3, #1
 800159c:	d152      	bne.n	8001644 <ajuste_automatico+0x14c>
			margen_d = ((sensor_der_max * 0.5) + (sensor_der_min * 0.5));
 800159e:	4b2e      	ldr	r3, [pc, #184]	@ (8001658 <ajuste_automatico+0x160>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff f8e8 	bl	8000778 <__aeabi_i2d>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001664 <ajuste_automatico+0x16c>)
 80015ae:	f7fe fe67 	bl	8000280 <__aeabi_dmul>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4614      	mov	r4, r2
 80015b8:	461d      	mov	r5, r3
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <ajuste_automatico+0x150>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f8da 	bl	8000778 <__aeabi_i2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <ajuste_automatico+0x16c>)
 80015ca:	f7fe fe59 	bl	8000280 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7fe ff83 	bl	80004e0 <__adddf3>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff f933 	bl	800084c <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <ajuste_automatico+0x170>)
 80015ec:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.5) + (sensor_izq_min * 0.5));
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <ajuste_automatico+0x164>)
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff f8c0 	bl	8000778 <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <ajuste_automatico+0x16c>)
 80015fe:	f7fe fe3f 	bl	8000280 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4614      	mov	r4, r2
 8001608:	461d      	mov	r5, r3
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <ajuste_automatico+0x154>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f8b2 	bl	8000778 <__aeabi_i2d>
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <ajuste_automatico+0x16c>)
 800161a:	f7fe fe31 	bl	8000280 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4620      	mov	r0, r4
 8001624:	4629      	mov	r1, r5
 8001626:	f7fe ff5b 	bl	80004e0 <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff f90b 	bl	800084c <__aeabi_d2uiz>
 8001636:	4603      	mov	r3, r0
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <ajuste_automatico+0x174>)
 800163c:	801a      	strh	r2, [r3, #0]
			prueba = 3;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <ajuste_automatico+0x178>)
 8001640:	2203      	movs	r2, #3
 8001642:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001644:	bf00      	nop
 8001646:	bdb0      	pop	{r4, r5, r7, pc}
 8001648:	20000004 	.word	0x20000004
 800164c:	20000002 	.word	0x20000002
 8001650:	200002b2 	.word	0x200002b2
 8001654:	200002b0 	.word	0x200002b0
 8001658:	20000202 	.word	0x20000202
 800165c:	20000200 	.word	0x20000200
 8001660:	40020000 	.word	0x40020000
 8001664:	3fe00000 	.word	0x3fe00000
 8001668:	20000206 	.word	0x20000206
 800166c:	20000204 	.word	0x20000204
 8001670:	200001fd 	.word	0x200001fd

08001674 <prueba_avanzar>:
	ejecutarGiro(izquierda);
	correccion_avanzar();
	while (1)
		;
}
void prueba_avanzar(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8001678:	f000 f9ee 	bl	8001a58 <correccion_avanzar>
//	ejecutarGiro(izquierda);
//	ejecutarGiro(adelante);

		;
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <verificar_sensor>:

bool verificar_sensor(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
	GPIO_PinState lectura1, lectura2;
	bool pedido = false;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <verificar_sensor+0x58>)
 800168e:	f002 fd75 	bl	800417c <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	71bb      	strb	r3, [r7, #6]
	if (lectura1 != ultima_lectura_valida) {
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <verificar_sensor+0x5c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	79ba      	ldrb	r2, [r7, #6]
 800169c:	429a      	cmp	r2, r3
 800169e:	d015      	beq.n	80016cc <verificar_sensor+0x4c>
		HAL_Delay(tiempo_rebotes);
 80016a0:	2014      	movs	r0, #20
 80016a2:	f001 fa95 	bl	8002bd0 <HAL_Delay>
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <verificar_sensor+0x58>)
 80016aa:	f002 fd67 	bl	800417c <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	717b      	strb	r3, [r7, #5]
		if (lectura2 == lectura1)
 80016b2:	797a      	ldrb	r2, [r7, #5]
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d102      	bne.n	80016c0 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <verificar_sensor+0x5c>)
 80016bc:	797b      	ldrb	r3, [r7, #5]
 80016be:	7013      	strb	r3, [r2, #0]
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <verificar_sensor+0x5c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <verificar_sensor+0x4c>
			pedido = true;
 80016c8:	2301      	movs	r3, #1
 80016ca:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 80016cc:	79fb      	ldrb	r3, [r7, #7]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40020800 	.word	0x40020800
 80016dc:	20000006 	.word	0x20000006

080016e0 <programa_principal>:

void programa_principal(void) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	correccion_avanzar();
 80016e4:	f000 f9b8 	bl	8001a58 <correccion_avanzar>
	if (verificar_sensor()) { //cambio de casilla
 80016e8:	f7ff ffca 	bl	8001680 <verificar_sensor>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d055      	beq.n	800179e <programa_principal+0xbe>
			contador_giros = 0;
 80016f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001868 <programa_principal+0x188>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
			contador_casillas = contador_casillas + 1;
 80016f8:	4b5c      	ldr	r3, [pc, #368]	@ (800186c <programa_principal+0x18c>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	3301      	adds	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b5a      	ldr	r3, [pc, #360]	@ (800186c <programa_principal+0x18c>)
 8001702:	701a      	strb	r2, [r3, #0]
			ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001704:	4b5a      	ldr	r3, [pc, #360]	@ (8001870 <programa_principal+0x190>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4a5a      	ldr	r2, [pc, #360]	@ (8001874 <programa_principal+0x194>)
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f922 	bl	8001958 <act_ubicacion>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	4b55      	ldr	r3, [pc, #340]	@ (8001870 <programa_principal+0x190>)
 800171a:	701a      	strb	r2, [r3, #0]
			envio_ubicacion(ubicacion, casilla_n);
 800171c:	4b54      	ldr	r3, [pc, #336]	@ (8001870 <programa_principal+0x190>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4a55      	ldr	r2, [pc, #340]	@ (8001878 <programa_principal+0x198>)
 8001722:	7812      	ldrb	r2, [r2, #0]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fed6 	bl	80024d8 <envio_ubicacion>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 800172c:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <programa_principal+0x190>)
 800172e:	781a      	ldrb	r2, [r3, #0]
 8001730:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <programa_principal+0x194>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4951      	ldr	r1, [pc, #324]	@ (800187c <programa_principal+0x19c>)
 8001736:	4852      	ldr	r0, [pc, #328]	@ (8001880 <programa_principal+0x1a0>)
 8001738:	f000 fc54 	bl	8001fe4 <calculo_minimo_peso>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b4d      	ldr	r3, [pc, #308]	@ (8001878 <programa_principal+0x198>)
 8001742:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 8001744:	4b4c      	ldr	r3, [pc, #304]	@ (8001878 <programa_principal+0x198>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff45 	bl	80025d8 <envio_casilla_n>
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 800174e:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <programa_principal+0x190>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	4a49      	ldr	r2, [pc, #292]	@ (8001878 <programa_principal+0x198>)
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f89f 	bl	800189c <obtener_orientacion_futura>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	4b48      	ldr	r3, [pc, #288]	@ (8001884 <programa_principal+0x1a4>)
 8001764:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001766:	4b43      	ldr	r3, [pc, #268]	@ (8001874 <programa_principal+0x194>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4a46      	ldr	r2, [pc, #280]	@ (8001884 <programa_principal+0x1a4>)
 800176c:	7812      	ldrb	r2, [r2, #0]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f000 f8bf 	bl	80018f4 <obtenerGiro>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <programa_principal+0x1a8>)
 800177c:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 800177e:	4b41      	ldr	r3, [pc, #260]	@ (8001884 <programa_principal+0x1a4>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <programa_principal+0x194>)
 8001784:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 8001786:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <programa_principal+0x1a8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fa3a 	bl	8001c04 <ejecutarGiro>
			camino_solucion[contador_casillas] = ubicacion;
 8001790:	4b36      	ldr	r3, [pc, #216]	@ (800186c <programa_principal+0x18c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <programa_principal+0x190>)
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <programa_principal+0x1ac>)
 800179c:	5499      	strb	r1, [r3, r2]
		}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 800179e:	2140      	movs	r1, #64	@ 0x40
 80017a0:	483b      	ldr	r0, [pc, #236]	@ (8001890 <programa_principal+0x1b0>)
 80017a2:	f002 fceb 	bl	800417c <HAL_GPIO_ReadPin>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d154      	bne.n	8001856 <programa_principal+0x176>
		HAL_Delay(tiempo_rebotes);
 80017ac:	2014      	movs	r0, #20
 80017ae:	f001 fa0f 	bl	8002bd0 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 80017b2:	2140      	movs	r1, #64	@ 0x40
 80017b4:	4836      	ldr	r0, [pc, #216]	@ (8001890 <programa_principal+0x1b0>)
 80017b6:	f002 fce1 	bl	800417c <HAL_GPIO_ReadPin>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d14a      	bne.n	8001856 <programa_principal+0x176>
			envio_pared();
 80017c0:	f000 feba 	bl	8002538 <envio_pared>
			/*mini_avance();*/
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <programa_principal+0x190>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4a2a      	ldr	r2, [pc, #168]	@ (8001874 <programa_principal+0x194>)
 80017ca:	7812      	ldrb	r2, [r2, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	482b      	ldr	r0, [pc, #172]	@ (800187c <programa_principal+0x19c>)
 80017d0:	f000 fb16 	bl	8001e00 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 80017d4:	492a      	ldr	r1, [pc, #168]	@ (8001880 <programa_principal+0x1a0>)
 80017d6:	4829      	ldr	r0, [pc, #164]	@ (800187c <programa_principal+0x19c>)
 80017d8:	f000 fb64 	bl	8001ea4 <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80017dc:	4b24      	ldr	r3, [pc, #144]	@ (8001870 <programa_principal+0x190>)
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <programa_principal+0x194>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4925      	ldr	r1, [pc, #148]	@ (800187c <programa_principal+0x19c>)
 80017e6:	4826      	ldr	r0, [pc, #152]	@ (8001880 <programa_principal+0x1a0>)
 80017e8:	f000 fbfc 	bl	8001fe4 <calculo_minimo_peso>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461a      	mov	r2, r3
 80017f0:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <programa_principal+0x198>)
 80017f2:	701a      	strb	r2, [r3, #0]
			envio_casilla_n(casilla_n);
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <programa_principal+0x198>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 feed 	bl	80025d8 <envio_casilla_n>
			envio_contador(contador_aux);
 80017fe:	4b25      	ldr	r3, [pc, #148]	@ (8001894 <programa_principal+0x1b4>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 ff14 	bl	8002630 <envio_contador>
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <programa_principal+0x190>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4a1a      	ldr	r2, [pc, #104]	@ (8001878 <programa_principal+0x198>)
 800180e:	7812      	ldrb	r2, [r2, #0]
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f842 	bl	800189c <obtener_orientacion_futura>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <programa_principal+0x1a4>)
 800181e:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001820:	4b14      	ldr	r3, [pc, #80]	@ (8001874 <programa_principal+0x194>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <programa_principal+0x1a4>)
 8001826:	7812      	ldrb	r2, [r2, #0]
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f862 	bl	80018f4 <obtenerGiro>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <programa_principal+0x1a8>)
 8001836:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <programa_principal+0x1a4>)
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	4b0d      	ldr	r3, [pc, #52]	@ (8001874 <programa_principal+0x194>)
 800183e:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <programa_principal+0x188>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <programa_principal+0x16c>
				mini_retroceso();
 8001848:	f000 f9c0 	bl	8001bcc <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <programa_principal+0x1a8>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f9d7 	bl	8001c04 <ejecutarGiro>
		}
	}
	if (ubicacion == 15) {
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <programa_principal+0x190>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d102      	bne.n	8001864 <programa_principal+0x184>
						prueba = 10;
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <programa_principal+0x1b8>)
 8001860:	220a      	movs	r2, #10
 8001862:	701a      	strb	r2, [r3, #0]
					}
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200001fe 	.word	0x200001fe
 800186c:	200001fc 	.word	0x200001fc
 8001870:	200001d8 	.word	0x200001d8
 8001874:	200001d9 	.word	0x200001d9
 8001878:	20000000 	.word	0x20000000
 800187c:	200001ec 	.word	0x200001ec
 8001880:	200001dc 	.word	0x200001dc
 8001884:	200001da 	.word	0x200001da
 8001888:	200001db 	.word	0x200001db
 800188c:	2000020c 	.word	0x2000020c
 8001890:	40020800 	.word	0x40020800
 8001894:	20000208 	.word	0x20000208
 8001898:	200001fd 	.word	0x200001fd

0800189c <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	460a      	mov	r2, r1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	4613      	mov	r3, r2
 80018aa:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 80018ac:	79ba      	ldrb	r2, [r7, #6]
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	3301      	adds	r3, #1
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d101      	bne.n	80018ba <obtener_orientacion_futura+0x1e>
		return oeste;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e015      	b.n	80018e6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 80018ba:	79ba      	ldrb	r2, [r7, #6]
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	3b01      	subs	r3, #1
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d101      	bne.n	80018c8 <obtener_orientacion_futura+0x2c>
		return este;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e00e      	b.n	80018e6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 80018c8:	79ba      	ldrb	r2, [r7, #6]
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	3304      	adds	r3, #4
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d101      	bne.n	80018d6 <obtener_orientacion_futura+0x3a>
		return norte;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e007      	b.n	80018e6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 80018d6:	79ba      	ldrb	r2, [r7, #6]
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	3b04      	subs	r3, #4
 80018dc:	429a      	cmp	r2, r3
 80018de:	d101      	bne.n	80018e4 <obtener_orientacion_futura+0x48>
		return sur;
 80018e0:	2302      	movs	r3, #2
 80018e2:	e000      	b.n	80018e6 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 80018e4:	2364      	movs	r3, #100	@ 0x64
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8001904:	79ba      	ldrb	r2, [r7, #6]
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	3304      	adds	r3, #4
 800190c:	425a      	negs	r2, r3
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	f002 0203 	and.w	r2, r2, #3
 8001916:	bf58      	it	pl
 8001918:	4253      	negpl	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d812      	bhi.n	8001948 <obtenerGiro+0x54>
 8001922:	a201      	add	r2, pc, #4	@ (adr r2, 8001928 <obtenerGiro+0x34>)
 8001924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001928:	08001939 	.word	0x08001939
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001941 	.word	0x08001941
 8001934:	08001945 	.word	0x08001945
	case 0:
		return adelante;
 8001938:	2300      	movs	r3, #0
 800193a:	e006      	b.n	800194a <obtenerGiro+0x56>
	case 1:
		return derecha;
 800193c:	2302      	movs	r3, #2
 800193e:	e004      	b.n	800194a <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8001940:	2303      	movs	r3, #3
 8001942:	e002      	b.n	800194a <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <obtenerGiro+0x56>
	default:
		return 100; // Error
 8001948:	2364      	movs	r3, #100	@ 0x64
	}
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop

08001958 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	460a      	mov	r2, r1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	4613      	mov	r3, r2
 8001966:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001968:	79bb      	ldrb	r3, [r7, #6]
 800196a:	2b03      	cmp	r3, #3
 800196c:	d81a      	bhi.n	80019a4 <act_ubicacion+0x4c>
 800196e:	a201      	add	r2, pc, #4	@ (adr r2, 8001974 <act_ubicacion+0x1c>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	08001985 	.word	0x08001985
 8001978:	0800198d 	.word	0x0800198d
 800197c:	08001995 	.word	0x08001995
 8001980:	0800199d 	.word	0x0800199d
	case 0:
		return ubicacion + 4;
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	3304      	adds	r3, #4
 8001988:	b2db      	uxtb	r3, r3
 800198a:	e00c      	b.n	80019a6 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	3b01      	subs	r3, #1
 8001990:	b2db      	uxtb	r3, r3
 8001992:	e008      	b.n	80019a6 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3b04      	subs	r3, #4
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e004      	b.n	80019a6 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3301      	adds	r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	e000      	b.n	80019a6 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 80019a4:	2364      	movs	r3, #100	@ 0x64
	}
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop

080019b4 <promediar>:

void promediar(uint16_t *buffer) {
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e012      	b.n	80019f0 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3302      	adds	r3, #2
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	461a      	mov	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	dde9      	ble.n	80019ca <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <promediar+0x64>)
 80019fe:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <promediar+0x68>)
 8001a08:	801a      	strh	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200002b0 	.word	0x200002b0
 8001a1c:	200002b2 	.word	0x200002b2

08001a20 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001a2a:	f7ff ffc3 	bl	80019b4 <promediar>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000230 	.word	0x20000230

08001a3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a46:	f7ff ffb5 	bl	80019b4 <promediar>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000270 	.word	0x20000270

08001a58 <correccion_avanzar>:
void correccion_avanzar(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
		apagar_izquierda();
	} else {
		avanzar();
	}
*/
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001acc <correccion_avanzar+0x74>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <correccion_avanzar+0x78>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d209      	bcs.n	8001a7e <correccion_avanzar+0x26>
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <correccion_avanzar+0x7c>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <correccion_avanzar+0x80>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d202      	bcs.n	8001a7e <correccion_avanzar+0x26>
			apagar_izquierda();  // apagar motor derecho
 8001a78:	f000 f858 	bl	8001b2c <apagar_izquierda>
 8001a7c:	e024      	b.n	8001ac8 <correccion_avanzar+0x70>
		} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <correccion_avanzar+0x78>)
 8001a80:	881a      	ldrh	r2, [r3, #0]
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <correccion_avanzar+0x74>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d209      	bcs.n	8001aa0 <correccion_avanzar+0x48>
 8001a8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <correccion_avanzar+0x80>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <correccion_avanzar+0x7c>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d202      	bcs.n	8001aa0 <correccion_avanzar+0x48>
			apagar_derecha();  //apaga motor izquierdo
 8001a9a:	f000 f86f 	bl	8001b7c <apagar_derecha>
 8001a9e:	e013      	b.n	8001ac8 <correccion_avanzar+0x70>
		} else if ((margen_i > sensor_izq_avg) && (sensor_der_avg < margen_d)){
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <correccion_avanzar+0x78>)
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <correccion_avanzar+0x74>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d909      	bls.n	8001ac2 <correccion_avanzar+0x6a>
 8001aae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad8 <correccion_avanzar+0x80>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <correccion_avanzar+0x7c>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d202      	bcs.n	8001ac2 <correccion_avanzar+0x6a>
			avanzar();
 8001abc:	f000 f80e 	bl	8001adc <avanzar>
 8001ac0:	e002      	b.n	8001ac8 <correccion_avanzar+0x70>
		} else {
			avanzar();
 8001ac2:	f000 f80b 	bl	8001adc <avanzar>
		}
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002b0 	.word	0x200002b0
 8001ad0:	20000204 	.word	0x20000204
 8001ad4:	20000206 	.word	0x20000206
 8001ad8:	200002b2 	.word	0x200002b2

08001adc <avanzar>:
void avanzar(void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae6:	480f      	ldr	r0, [pc, #60]	@ (8001b24 <avanzar+0x48>)
 8001ae8:	f002 fb60 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001af2:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <avanzar+0x48>)
 8001af4:	f002 fb5a 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001afe:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <avanzar+0x48>)
 8001b00:	f002 fb54 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0a:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <avanzar+0x48>)
 8001b0c:	f002 fb4e 	bl	80041ac <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <avanzar+0x4c>)
 8001b12:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <avanzar+0x4c>)
 8001b1a:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8001b1e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40000400 	.word	0x40000400

08001b2c <apagar_izquierda>:

void apagar_izquierda(void) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b36:	480f      	ldr	r0, [pc, #60]	@ (8001b74 <apagar_izquierda+0x48>)
 8001b38:	f002 fb38 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b42:	480c      	ldr	r0, [pc, #48]	@ (8001b74 <apagar_izquierda+0x48>)
 8001b44:	f002 fb32 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b4e:	4809      	ldr	r0, [pc, #36]	@ (8001b74 <apagar_izquierda+0x48>)
 8001b50:	f002 fb2c 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b5a:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <apagar_izquierda+0x48>)
 8001b5c:	f002 fb26 	bl	80041ac <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <apagar_izquierda+0x4c>)
 8001b62:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_min; // rueda a velocidad media
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <apagar_izquierda+0x4c>)
 8001b6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40000400 	.word	0x40000400

08001b7c <apagar_derecha>:

void apagar_derecha(void) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b86:	480f      	ldr	r0, [pc, #60]	@ (8001bc4 <apagar_derecha+0x48>)
 8001b88:	f002 fb10 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b92:	480c      	ldr	r0, [pc, #48]	@ (8001bc4 <apagar_derecha+0x48>)
 8001b94:	f002 fb0a 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b9e:	4809      	ldr	r0, [pc, #36]	@ (8001bc4 <apagar_derecha+0x48>)
 8001ba0:	f002 fb04 	bl	80041ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001baa:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <apagar_derecha+0x48>)
 8001bac:	f002 fafe 	bl	80041ac <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_min; // rueda a velocidad media (condigurable)
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <apagar_derecha+0x4c>)
 8001bb2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <apagar_derecha+0x4c>)
 8001bba:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40000400 	.word	0x40000400

08001bcc <mini_retroceso>:

void mini_retroceso(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001bd0:	2002      	movs	r0, #2
 8001bd2:	f000 f8b1 	bl	8001d38 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f000 f8e0 	bl	8001d9c <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001bdc:	2064      	movs	r0, #100	@ 0x64
 8001bde:	f000 fff7 	bl	8002bd0 <HAL_Delay>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <mini_avance>:
void mini_avance(void) {
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 f8a4 	bl	8001d38 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f000 f8d3 	bl	8001d9c <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001bf6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001bfa:	f000 ffe9 	bl	8002bd0 <HAL_Delay>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	f200 808a 	bhi.w	8001d2a <ejecutarGiro+0x126>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <ejecutarGiro+0x18>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c99 	.word	0x08001c99
 8001c24:	08001c33 	.word	0x08001c33
 8001c28:	08001d01 	.word	0x08001d01
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001c2c:	f7ff ffdb 	bl	8001be6 <mini_avance>
		break;
 8001c30:	e07b      	b.n	8001d2a <ejecutarGiro+0x126>
	case derecha:
		if (contador_giros == 0) {
 8001c32:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11b      	bne.n	8001c72 <ejecutarGiro+0x6e>
			contador_giros = contador_giros + 1;
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c44:	701a      	strb	r2, [r3, #0]
			mini_avance();
 8001c46:	f7ff ffce 	bl	8001be6 <mini_avance>
			setMotorIzquierdo(avance);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 f874 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 f8a3 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001c56:	20c8      	movs	r0, #200	@ 0xc8
 8001c58:	f000 ffba 	bl	8002bd0 <HAL_Delay>
			setMotorIzquierdo(avance);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f000 f86b 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001c62:	2002      	movs	r0, #2
 8001c64:	f000 f89a 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_der);
 8001c68:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001c6c:	f000 ffb0 	bl	8002bd0 <HAL_Delay>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
//			mini_avance();
		}
		break;
 8001c70:	e05b      	b.n	8001d2a <ejecutarGiro+0x126>
			contador_giros = contador_giros + 1;
 8001c72:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c7c:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001c7e:	f7ff ffa5 	bl	8001bcc <mini_retroceso>
			setMotorIzquierdo(avance);
 8001c82:	2001      	movs	r0, #1
 8001c84:	f000 f858 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f000 f887 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001c8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001c92:	f000 ff9d 	bl	8002bd0 <HAL_Delay>
		break;
 8001c96:	e048      	b.n	8001d2a <ejecutarGiro+0x126>
	case izquierda:
		if (contador_giros == 0) {
 8001c98:	4b26      	ldr	r3, [pc, #152]	@ (8001d34 <ejecutarGiro+0x130>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <ejecutarGiro+0xd4>
			contador_giros = contador_giros + 1;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <ejecutarGiro+0x130>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <ejecutarGiro+0x130>)
 8001caa:	701a      	strb	r2, [r3, #0]
			mini_avance();
 8001cac:	f7ff ff9b 	bl	8001be6 <mini_avance>
			setMotorIzquierdo(avance);
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 f841 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f000 f870 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001cbc:	20c8      	movs	r0, #200	@ 0xc8
 8001cbe:	f000 ff87 	bl	8002bd0 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f000 f838 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f000 f867 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_izq);
 8001cce:	f44f 7002 	mov.w	r0, #520	@ 0x208
 8001cd2:	f000 ff7d 	bl	8002bd0 <HAL_Delay>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
//			mini_avance();
		}
		break;
 8001cd6:	e028      	b.n	8001d2a <ejecutarGiro+0x126>
			contador_giros = contador_giros + 1;
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <ejecutarGiro+0x130>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <ejecutarGiro+0x130>)
 8001ce2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001ce4:	20c8      	movs	r0, #200	@ 0xc8
 8001ce6:	f000 ff73 	bl	8002bd0 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f000 f824 	bl	8001d38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f000 f853 	bl	8001d9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001cf6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001cfa:	f000 ff69 	bl	8002bd0 <HAL_Delay>
		break;
 8001cfe:	e014      	b.n	8001d2a <ejecutarGiro+0x126>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <ejecutarGiro+0x130>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <ejecutarGiro+0x130>)
 8001d0a:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f000 f813 	bl	8001d38 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001d12:	2002      	movs	r0, #2
 8001d14:	f000 f842 	bl	8001d9c <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001d18:	f44f 707f 	mov.w	r0, #1020	@ 0x3fc
 8001d1c:	f000 ff58 	bl	8002bd0 <HAL_Delay>
		mini_avance();
 8001d20:	f7ff ff61 	bl	8001be6 <mini_avance>
		mini_avance();
 8001d24:	f7ff ff5f 	bl	8001be6 <mini_avance>
		break;
 8001d28:	bf00      	nop

	}
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200001fe 	.word	0x200001fe

08001d38 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001d42:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <setMotorIzquierdo+0x5c>)
 8001d44:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d48:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d002      	beq.n	8001d56 <setMotorIzquierdo+0x1e>
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d00d      	beq.n	8001d70 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001d54:	e019      	b.n	8001d8a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d5c:	480e      	ldr	r0, [pc, #56]	@ (8001d98 <setMotorIzquierdo+0x60>)
 8001d5e:	f002 fa25 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d68:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <setMotorIzquierdo+0x60>)
 8001d6a:	f002 fa1f 	bl	80041ac <HAL_GPIO_WritePin>
		break;
 8001d6e:	e00c      	b.n	8001d8a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d76:	4808      	ldr	r0, [pc, #32]	@ (8001d98 <setMotorIzquierdo+0x60>)
 8001d78:	f002 fa18 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <setMotorIzquierdo+0x60>)
 8001d84:	f002 fa12 	bl	80041ac <HAL_GPIO_WritePin>
		break;
 8001d88:	bf00      	nop
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40020400 	.word	0x40020400

08001d9c <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <setMotorDerecho+0x5c>)
 8001da8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d002      	beq.n	8001dba <setMotorDerecho+0x1e>
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d00d      	beq.n	8001dd4 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001db8:	e019      	b.n	8001dee <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dc0:	480e      	ldr	r0, [pc, #56]	@ (8001dfc <setMotorDerecho+0x60>)
 8001dc2:	f002 f9f3 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dcc:	480b      	ldr	r0, [pc, #44]	@ (8001dfc <setMotorDerecho+0x60>)
 8001dce:	f002 f9ed 	bl	80041ac <HAL_GPIO_WritePin>
		break;
 8001dd2:	e00c      	b.n	8001dee <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dda:	4808      	ldr	r0, [pc, #32]	@ (8001dfc <setMotorDerecho+0x60>)
 8001ddc:	f002 f9e6 	bl	80041ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <setMotorDerecho+0x60>)
 8001de8:	f002 f9e0 	bl	80041ac <HAL_GPIO_WritePin>
		break;
 8001dec:	bf00      	nop
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40000400 	.word	0x40000400
 8001dfc:	40020400 	.word	0x40020400

08001e00 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001e10:	78bb      	ldrb	r3, [r7, #2]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d83a      	bhi.n	8001e8c <act_pared+0x8c>
 8001e16:	a201      	add	r2, pc, #4	@ (adr r2, 8001e1c <act_pared+0x1c>)
 8001e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1c:	08001e2d 	.word	0x08001e2d
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08001e5d 	.word	0x08001e5d
 8001e28:	08001e75 	.word	0x08001e75
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	440b      	add	r3, r1
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]
		break;
 8001e42:	e025      	b.n	8001e90 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	440b      	add	r3, r1
 8001e52:	f042 0204 	orr.w	r2, r2, #4
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]
		break;
 8001e5a:	e019      	b.n	8001e90 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	440b      	add	r3, r1
 8001e6a:	f042 0202 	orr.w	r2, r2, #2
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
		break;
 8001e72:	e00d      	b.n	8001e90 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001e74:	78fb      	ldrb	r3, [r7, #3]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	440b      	add	r3, r1
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	701a      	strb	r2, [r3, #0]
		break;
 8001e8a:	e001      	b.n	8001e90 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e003      	b.n	8001e98 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e08b      	b.n	8001fcc <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	e081      	b.n	8001fbe <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001eba:	2364      	movs	r3, #100	@ 0x64
 8001ebc:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b0b      	cmp	r3, #11
 8001ec2:	dc15      	bgt.n	8001ef0 <act_pesos+0x4c>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10d      	bne.n	8001ef0 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	7dfa      	ldrb	r2, [r7, #23]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d905      	bls.n	8001ef0 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3304      	adds	r3, #4
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d01e      	beq.n	8001f34 <act_pesos+0x90>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b07      	cmp	r3, #7
 8001efa:	d01b      	beq.n	8001f34 <act_pesos+0x90>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b0b      	cmp	r3, #11
 8001f00:	d018      	beq.n	8001f34 <act_pesos+0x90>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d015      	beq.n	8001f34 <act_pesos+0x90>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	7dfa      	ldrb	r2, [r7, #23]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d905      	bls.n	8001f34 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b03      	cmp	r3, #3
 8001f38:	dd15      	ble.n	8001f66 <act_pesos+0xc2>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10d      	bne.n	8001f66 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3b04      	subs	r3, #4
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	7dfa      	ldrb	r2, [r7, #23]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d905      	bls.n	8001f66 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3b04      	subs	r3, #4
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <act_pesos+0x106>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d016      	beq.n	8001faa <act_pesos+0x106>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d013      	beq.n	8001faa <act_pesos+0x106>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d010      	beq.n	8001faa <act_pesos+0x106>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d00d      	beq.n	8001faa <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	7dfa      	ldrb	r2, [r7, #23]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d905      	bls.n	8001faa <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	7dfa      	ldrb	r2, [r7, #23]
 8001fb2:	3201      	adds	r2, #1
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2b0e      	cmp	r3, #14
 8001fc2:	f77f af7a 	ble.w	8001eba <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0e      	cmp	r3, #14
 8001fd0:	f77f af70 	ble.w	8001eb4 <act_pesos+0x10>
		}
	}
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 8001ffa:	230f      	movs	r3, #15
 8001ffc:	75fb      	strb	r3, [r7, #23]
	if (ubicacion == 15){
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b0f      	cmp	r3, #15
 8002002:	d105      	bne.n	8002010 <calculo_minimo_peso+0x2c>
		casilla_n = 15;
 8002004:	4b9a      	ldr	r3, [pc, #616]	@ (8002270 <calculo_minimo_peso+0x28c>)
 8002006:	220f      	movs	r2, #15
 8002008:	701a      	strb	r2, [r3, #0]
		return casilla_n;
 800200a:	4b99      	ldr	r3, [pc, #612]	@ (8002270 <calculo_minimo_peso+0x28c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	e24e      	b.n	80024ae <calculo_minimo_peso+0x4ca>
	}
	else{

	switch (orientacion_actual) {	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	2b03      	cmp	r3, #3
 8002014:	f200 824a 	bhi.w	80024ac <calculo_minimo_peso+0x4c8>
 8002018:	a201      	add	r2, pc, #4	@ (adr r2, 8002020 <calculo_minimo_peso+0x3c>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002393 	.word	0x08002393
 8002028:	08002157 	.word	0x08002157
 800202c:	08002279 	.word	0x08002279
	case norte:
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	3304      	adds	r3, #4
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	7dfa      	ldrb	r2, [r7, #23]
 800203c:	429a      	cmp	r2, r3
 800203e:	d915      	bls.n	800206c <calculo_minimo_peso+0x88>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	4413      	add	r3, r2
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <calculo_minimo_peso+0x88>
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b0b      	cmp	r3, #11
 8002054:	d80a      	bhi.n	800206c <calculo_minimo_peso+0x88>
			minimo_peso = peso[ubicacion + 4];
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	3304      	adds	r3, #4
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	3304      	adds	r3, #4
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b81      	ldr	r3, [pc, #516]	@ (8002270 <calculo_minimo_peso+0x28c>)
 800206a:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	3301      	adds	r3, #1
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	7dfa      	ldrb	r2, [r7, #23]
 8002078:	429a      	cmp	r2, r3
 800207a:	d91e      	bls.n	80020ba <calculo_minimo_peso+0xd6>
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4413      	add	r3, r2
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d116      	bne.n	80020ba <calculo_minimo_peso+0xd6>
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d013      	beq.n	80020ba <calculo_minimo_peso+0xd6>
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b07      	cmp	r3, #7
 8002096:	d010      	beq.n	80020ba <calculo_minimo_peso+0xd6>
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b0b      	cmp	r3, #11
 800209c:	d00d      	beq.n	80020ba <calculo_minimo_peso+0xd6>
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d00a      	beq.n	80020ba <calculo_minimo_peso+0xd6>
			minimo_peso = peso[ubicacion + 1];
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	3301      	adds	r3, #1
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b6e      	ldr	r3, [pc, #440]	@ (8002270 <calculo_minimo_peso+0x28c>)
 80020b8:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	3b01      	subs	r3, #1
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4413      	add	r3, r2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	7dfa      	ldrb	r2, [r7, #23]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d924      	bls.n	8002114 <calculo_minimo_peso+0x130>
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11c      	bne.n	8002114 <calculo_minimo_peso+0x130>
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <calculo_minimo_peso+0x130>
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d016      	beq.n	8002114 <calculo_minimo_peso+0x130>
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d013      	beq.n	8002114 <calculo_minimo_peso+0x130>
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d010      	beq.n	8002114 <calculo_minimo_peso+0x130>
			contador_aux = contador_aux + 1;
 80020f2:	4b60      	ldr	r3, [pc, #384]	@ (8002274 <calculo_minimo_peso+0x290>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002274 <calculo_minimo_peso+0x290>)
 80020fc:	701a      	strb	r2, [r3, #0]
			minimo_peso = peso[ubicacion - 1];
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	3b01      	subs	r3, #1
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	3b01      	subs	r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	4b57      	ldr	r3, [pc, #348]	@ (8002270 <calculo_minimo_peso+0x28c>)
 8002112:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	3b04      	subs	r3, #4
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	7dfa      	ldrb	r2, [r7, #23]
 8002120:	429a      	cmp	r2, r3
 8002122:	d915      	bls.n	8002150 <calculo_minimo_peso+0x16c>
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <calculo_minimo_peso+0x16c>
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d90a      	bls.n	8002150 <calculo_minimo_peso+0x16c>
			minimo_peso = peso[ubicacion - 4];
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	3b04      	subs	r3, #4
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	3b04      	subs	r3, #4
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b48      	ldr	r3, [pc, #288]	@ (8002270 <calculo_minimo_peso+0x28c>)
 800214e:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8002150:	4b47      	ldr	r3, [pc, #284]	@ (8002270 <calculo_minimo_peso+0x28c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	e1ab      	b.n	80024ae <calculo_minimo_peso+0x4ca>
		break;
	case sur:
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	3b04      	subs	r3, #4
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4413      	add	r3, r2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	7dfa      	ldrb	r2, [r7, #23]
 8002162:	429a      	cmp	r2, r3
 8002164:	d915      	bls.n	8002192 <calculo_minimo_peso+0x1ae>
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10d      	bne.n	8002192 <calculo_minimo_peso+0x1ae>
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d90a      	bls.n	8002192 <calculo_minimo_peso+0x1ae>
			minimo_peso = peso[ubicacion - 4];
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	3b04      	subs	r3, #4
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3b04      	subs	r3, #4
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <calculo_minimo_peso+0x28c>)
 8002190:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	3301      	adds	r3, #1
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	7dfa      	ldrb	r2, [r7, #23]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d91e      	bls.n	80021e0 <calculo_minimo_peso+0x1fc>
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d116      	bne.n	80021e0 <calculo_minimo_peso+0x1fc>
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d013      	beq.n	80021e0 <calculo_minimo_peso+0x1fc>
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d010      	beq.n	80021e0 <calculo_minimo_peso+0x1fc>
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b0b      	cmp	r3, #11
 80021c2:	d00d      	beq.n	80021e0 <calculo_minimo_peso+0x1fc>
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	2b0f      	cmp	r3, #15
 80021c8:	d00a      	beq.n	80021e0 <calculo_minimo_peso+0x1fc>
			minimo_peso = peso[ubicacion + 1];
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	3301      	adds	r3, #1
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	3301      	adds	r3, #1
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <calculo_minimo_peso+0x28c>)
 80021de:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4413      	add	r3, r2
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	7dfa      	ldrb	r2, [r7, #23]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d91e      	bls.n	800222e <calculo_minimo_peso+0x24a>
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d116      	bne.n	800222e <calculo_minimo_peso+0x24a>
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d013      	beq.n	800222e <calculo_minimo_peso+0x24a>
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d010      	beq.n	800222e <calculo_minimo_peso+0x24a>
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2b08      	cmp	r3, #8
 8002210:	d00d      	beq.n	800222e <calculo_minimo_peso+0x24a>
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d00a      	beq.n	800222e <calculo_minimo_peso+0x24a>
			minimo_peso = peso[ubicacion - 1];
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3b01      	subs	r3, #1
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	3b01      	subs	r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <calculo_minimo_peso+0x28c>)
 800222c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	3304      	adds	r3, #4
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	7dfa      	ldrb	r2, [r7, #23]
 800223a:	429a      	cmp	r2, r3
 800223c:	d915      	bls.n	800226a <calculo_minimo_peso+0x286>
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <calculo_minimo_peso+0x286>
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b0b      	cmp	r3, #11
 8002252:	d80a      	bhi.n	800226a <calculo_minimo_peso+0x286>
			minimo_peso = peso[ubicacion + 4];
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	3304      	adds	r3, #4
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	3304      	adds	r3, #4
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4b02      	ldr	r3, [pc, #8]	@ (8002270 <calculo_minimo_peso+0x28c>)
 8002268:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 800226a:	4b01      	ldr	r3, [pc, #4]	@ (8002270 <calculo_minimo_peso+0x28c>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	e11e      	b.n	80024ae <calculo_minimo_peso+0x4ca>
 8002270:	20000000 	.word	0x20000000
 8002274:	20000208 	.word	0x20000208
		break;
	case oeste:
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	3301      	adds	r3, #1
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	7dfa      	ldrb	r2, [r7, #23]
 8002284:	429a      	cmp	r2, r3
 8002286:	d91e      	bls.n	80022c6 <calculo_minimo_peso+0x2e2>
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4413      	add	r3, r2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <calculo_minimo_peso+0x2e2>
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	2b03      	cmp	r3, #3
 800229c:	d013      	beq.n	80022c6 <calculo_minimo_peso+0x2e2>
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	2b07      	cmp	r3, #7
 80022a2:	d010      	beq.n	80022c6 <calculo_minimo_peso+0x2e2>
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b0b      	cmp	r3, #11
 80022a8:	d00d      	beq.n	80022c6 <calculo_minimo_peso+0x2e2>
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d00a      	beq.n	80022c6 <calculo_minimo_peso+0x2e2>
			minimo_peso = peso[ubicacion + 1];
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	3301      	adds	r3, #1
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	3301      	adds	r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b7e      	ldr	r3, [pc, #504]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 80022c4:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	3304      	adds	r3, #4
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	7dfa      	ldrb	r2, [r7, #23]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d915      	bls.n	8002302 <calculo_minimo_peso+0x31e>
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <calculo_minimo_peso+0x31e>
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b0b      	cmp	r3, #11
 80022ea:	d80a      	bhi.n	8002302 <calculo_minimo_peso+0x31e>
			minimo_peso = peso[ubicacion + 4];
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3304      	adds	r3, #4
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	3304      	adds	r3, #4
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b6f      	ldr	r3, [pc, #444]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 8002300:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	3b04      	subs	r3, #4
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	7dfa      	ldrb	r2, [r7, #23]
 800230e:	429a      	cmp	r2, r3
 8002310:	d915      	bls.n	800233e <calculo_minimo_peso+0x35a>
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <calculo_minimo_peso+0x35a>
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d90a      	bls.n	800233e <calculo_minimo_peso+0x35a>
			minimo_peso = peso[ubicacion - 4];
 8002328:	79fb      	ldrb	r3, [r7, #7]
 800232a:	3b04      	subs	r3, #4
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	3b04      	subs	r3, #4
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 800233c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	3b01      	subs	r3, #1
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	7dfa      	ldrb	r2, [r7, #23]
 800234a:	429a      	cmp	r2, r3
 800234c:	d91e      	bls.n	800238c <calculo_minimo_peso+0x3a8>
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4413      	add	r3, r2
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <calculo_minimo_peso+0x3a8>
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <calculo_minimo_peso+0x3a8>
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d010      	beq.n	800238c <calculo_minimo_peso+0x3a8>
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d00d      	beq.n	800238c <calculo_minimo_peso+0x3a8>
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	2b0c      	cmp	r3, #12
 8002374:	d00a      	beq.n	800238c <calculo_minimo_peso+0x3a8>
			minimo_peso = peso[ubicacion - 1];
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	3b01      	subs	r3, #1
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	3b01      	subs	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b4c      	ldr	r3, [pc, #304]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 800238a:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	e08d      	b.n	80024ae <calculo_minimo_peso+0x4ca>
		break;
	case este:
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12))) {
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3b01      	subs	r3, #1
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	7dfa      	ldrb	r2, [r7, #23]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d91e      	bls.n	80023e0 <calculo_minimo_peso+0x3fc>
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	4413      	add	r3, r2
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d116      	bne.n	80023e0 <calculo_minimo_peso+0x3fc>
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <calculo_minimo_peso+0x3fc>
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d010      	beq.n	80023e0 <calculo_minimo_peso+0x3fc>
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d00d      	beq.n	80023e0 <calculo_minimo_peso+0x3fc>
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d00a      	beq.n	80023e0 <calculo_minimo_peso+0x3fc>
			minimo_peso = peso[ubicacion - 1];
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4413      	add	r3, r2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	3b01      	subs	r3, #1
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	4b37      	ldr	r3, [pc, #220]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 80023de:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	3304      	adds	r3, #4
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	7dfa      	ldrb	r2, [r7, #23]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d915      	bls.n	800241c <calculo_minimo_peso+0x438>
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	4413      	add	r3, r2
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <calculo_minimo_peso+0x438>
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	2b0b      	cmp	r3, #11
 8002404:	d80a      	bhi.n	800241c <calculo_minimo_peso+0x438>
			minimo_peso = peso[ubicacion + 4];
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	3304      	adds	r3, #4
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	4413      	add	r3, r2
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	3304      	adds	r3, #4
 8002416:	b2da      	uxtb	r2, r3
 8002418:	4b28      	ldr	r3, [pc, #160]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 800241a:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	3b04      	subs	r3, #4
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	7dfa      	ldrb	r2, [r7, #23]
 8002428:	429a      	cmp	r2, r3
 800242a:	d915      	bls.n	8002458 <calculo_minimo_peso+0x474>
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10d      	bne.n	8002458 <calculo_minimo_peso+0x474>
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	2b03      	cmp	r3, #3
 8002440:	d90a      	bls.n	8002458 <calculo_minimo_peso+0x474>
			minimo_peso = peso[ubicacion - 4];
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	3b04      	subs	r3, #4
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	3b04      	subs	r3, #4
 8002452:	b2da      	uxtb	r2, r3
 8002454:	4b19      	ldr	r3, [pc, #100]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 8002456:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	3301      	adds	r3, #1
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	7dfa      	ldrb	r2, [r7, #23]
 8002464:	429a      	cmp	r2, r3
 8002466:	d91e      	bls.n	80024a6 <calculo_minimo_peso+0x4c2>
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d116      	bne.n	80024a6 <calculo_minimo_peso+0x4c2>
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	2b03      	cmp	r3, #3
 800247c:	d013      	beq.n	80024a6 <calculo_minimo_peso+0x4c2>
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	2b07      	cmp	r3, #7
 8002482:	d010      	beq.n	80024a6 <calculo_minimo_peso+0x4c2>
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b0b      	cmp	r3, #11
 8002488:	d00d      	beq.n	80024a6 <calculo_minimo_peso+0x4c2>
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d00a      	beq.n	80024a6 <calculo_minimo_peso+0x4c2>
			minimo_peso = peso[ubicacion + 1];
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	3301      	adds	r3, #1
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	3301      	adds	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 80024a4:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80024a6:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <calculo_minimo_peso+0x4d8>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	e000      	b.n	80024ae <calculo_minimo_peso+0x4ca>
		break;
	default:
		return 100;
 80024ac:	2364      	movs	r3, #100	@ 0x64
	}
	}
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000000 	.word	0x20000000

080024c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	4603      	mov	r3, r0
 80024c8:	80fb      	strh	r3, [r7, #6]

}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <envio_ubicacion>:

void envio_ubicacion(uint8_t ubicacion,uint8_t casilla_n) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	460a      	mov	r2, r1
 80024e2:	71fb      	strb	r3, [r7, #7]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion){
 80024e8:	79ba      	ldrb	r2, [r7, #6]
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d117      	bne.n	8002520 <envio_ubicacion+0x48>
		sprintf(mensaje, "Ubicacion: %d", ubicacion);
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	461a      	mov	r2, r3
 80024f4:	490c      	ldr	r1, [pc, #48]	@ (8002528 <envio_ubicacion+0x50>)
 80024f6:	480d      	ldr	r0, [pc, #52]	@ (800252c <envio_ubicacion+0x54>)
 80024f8:	f004 f9c6 	bl	8006888 <siprintf>
		strcat(mensaje, "\r\n");
 80024fc:	480b      	ldr	r0, [pc, #44]	@ (800252c <envio_ubicacion+0x54>)
 80024fe:	f7fd fe67 	bl	80001d0 <strlen>
 8002502:	4603      	mov	r3, r0
 8002504:	461a      	mov	r2, r3
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <envio_ubicacion+0x54>)
 8002508:	4413      	add	r3, r2
 800250a:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <envio_ubicacion+0x58>)
 800250c:	8811      	ldrh	r1, [r2, #0]
 800250e:	7892      	ldrb	r2, [r2, #2]
 8002510:	8019      	strh	r1, [r3, #0]
 8002512:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 8002514:	2332      	movs	r3, #50	@ 0x32
 8002516:	2220      	movs	r2, #32
 8002518:	4904      	ldr	r1, [pc, #16]	@ (800252c <envio_ubicacion+0x54>)
 800251a:	4806      	ldr	r0, [pc, #24]	@ (8002534 <envio_ubicacion+0x5c>)
 800251c:	f003 f9ec 	bl	80058f8 <HAL_UART_Transmit>
	}

}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	080071e0 	.word	0x080071e0
 800252c:	200001b8 	.word	0x200001b8
 8002530:	080071f0 	.word	0x080071f0
 8002534:	20000170 	.word	0x20000170

08002538 <envio_pared>:
void envio_pared(void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
		/*mensaje[0] = '\0';*/
		sprintf(mensaje, "Choque pared %d");
 800253c:	490b      	ldr	r1, [pc, #44]	@ (800256c <envio_pared+0x34>)
 800253e:	480c      	ldr	r0, [pc, #48]	@ (8002570 <envio_pared+0x38>)
 8002540:	f004 f9a2 	bl	8006888 <siprintf>
		strcat(mensaje, "\r\n");
 8002544:	480a      	ldr	r0, [pc, #40]	@ (8002570 <envio_pared+0x38>)
 8002546:	f7fd fe43 	bl	80001d0 <strlen>
 800254a:	4603      	mov	r3, r0
 800254c:	461a      	mov	r2, r3
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <envio_pared+0x38>)
 8002550:	4413      	add	r3, r2
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <envio_pared+0x3c>)
 8002554:	8811      	ldrh	r1, [r2, #0]
 8002556:	7892      	ldrb	r2, [r2, #2]
 8002558:	8019      	strh	r1, [r3, #0]
 800255a:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800255c:	2332      	movs	r3, #50	@ 0x32
 800255e:	2220      	movs	r2, #32
 8002560:	4903      	ldr	r1, [pc, #12]	@ (8002570 <envio_pared+0x38>)
 8002562:	4805      	ldr	r0, [pc, #20]	@ (8002578 <envio_pared+0x40>)
 8002564:	f003 f9c8 	bl	80058f8 <HAL_UART_Transmit>
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	080071f4 	.word	0x080071f4
 8002570:	200001b8 	.word	0x200001b8
 8002574:	080071f0 	.word	0x080071f0
 8002578:	20000170 	.word	0x20000170

0800257c <envio_llegada>:

void envio_llegada(void) {
 800257c:	b5b0      	push	{r4, r5, r7, lr}
 800257e:	af00      	add	r7, sp, #0
	if (uart_llegada == 0){
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <envio_llegada+0x4c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d11c      	bne.n	80025c2 <envio_llegada+0x46>
		mensaje[0] = '\0';
 8002588:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <envio_llegada+0x50>)
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
		strcat(mensaje, "Llegue a la meta \r\n");
 800258e:	480f      	ldr	r0, [pc, #60]	@ (80025cc <envio_llegada+0x50>)
 8002590:	f7fd fe1e 	bl	80001d0 <strlen>
 8002594:	4603      	mov	r3, r0
 8002596:	461a      	mov	r2, r3
 8002598:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <envio_llegada+0x50>)
 800259a:	4413      	add	r3, r2
 800259c:	4a0c      	ldr	r2, [pc, #48]	@ (80025d0 <envio_llegada+0x54>)
 800259e:	461d      	mov	r5, r3
 80025a0:	4614      	mov	r4, r2
 80025a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025a4:	6028      	str	r0, [r5, #0]
 80025a6:	6069      	str	r1, [r5, #4]
 80025a8:	60aa      	str	r2, [r5, #8]
 80025aa:	60eb      	str	r3, [r5, #12]
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	6128      	str	r0, [r5, #16]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80025b0:	2332      	movs	r3, #50	@ 0x32
 80025b2:	2220      	movs	r2, #32
 80025b4:	4905      	ldr	r1, [pc, #20]	@ (80025cc <envio_llegada+0x50>)
 80025b6:	4807      	ldr	r0, [pc, #28]	@ (80025d4 <envio_llegada+0x58>)
 80025b8:	f003 f99e 	bl	80058f8 <HAL_UART_Transmit>
		uart_llegada = 1;
 80025bc:	4b02      	ldr	r3, [pc, #8]	@ (80025c8 <envio_llegada+0x4c>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
	}
}
 80025c2:	bf00      	nop
 80025c4:	bdb0      	pop	{r4, r5, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200001ff 	.word	0x200001ff
 80025cc:	200001b8 	.word	0x200001b8
 80025d0:	08007204 	.word	0x08007204
 80025d4:	20000170 	.word	0x20000170

080025d8 <envio_casilla_n>:

void envio_casilla_n(uint8_t casilla_n) {
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
	mensaje[0] = '\0';
 80025e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <envio_casilla_n+0x48>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
	sprintf(mensaje, "Siguiente casilla: %d", casilla_n);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	461a      	mov	r2, r3
 80025ec:	490d      	ldr	r1, [pc, #52]	@ (8002624 <envio_casilla_n+0x4c>)
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <envio_casilla_n+0x48>)
 80025f0:	f004 f94a 	bl	8006888 <siprintf>
	strcat(mensaje, "\r\n");
 80025f4:	480a      	ldr	r0, [pc, #40]	@ (8002620 <envio_casilla_n+0x48>)
 80025f6:	f7fd fdeb 	bl	80001d0 <strlen>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <envio_casilla_n+0x48>)
 8002600:	4413      	add	r3, r2
 8002602:	4a09      	ldr	r2, [pc, #36]	@ (8002628 <envio_casilla_n+0x50>)
 8002604:	8811      	ldrh	r1, [r2, #0]
 8002606:	7892      	ldrb	r2, [r2, #2]
 8002608:	8019      	strh	r1, [r3, #0]
 800260a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800260c:	2332      	movs	r3, #50	@ 0x32
 800260e:	2220      	movs	r2, #32
 8002610:	4903      	ldr	r1, [pc, #12]	@ (8002620 <envio_casilla_n+0x48>)
 8002612:	4806      	ldr	r0, [pc, #24]	@ (800262c <envio_casilla_n+0x54>)
 8002614:	f003 f970 	bl	80058f8 <HAL_UART_Transmit>
	

}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200001b8 	.word	0x200001b8
 8002624:	08007218 	.word	0x08007218
 8002628:	080071f0 	.word	0x080071f0
 800262c:	20000170 	.word	0x20000170

08002630 <envio_contador>:
void envio_contador(uint8_t contador_aux) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
	mensaje[0] = '\0';
 800263a:	4b0f      	ldr	r3, [pc, #60]	@ (8002678 <envio_contador+0x48>)
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
	sprintf(mensaje, "%d", contador_aux);
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	461a      	mov	r2, r3
 8002644:	490d      	ldr	r1, [pc, #52]	@ (800267c <envio_contador+0x4c>)
 8002646:	480c      	ldr	r0, [pc, #48]	@ (8002678 <envio_contador+0x48>)
 8002648:	f004 f91e 	bl	8006888 <siprintf>
	strcat(mensaje, "\r\n");
 800264c:	480a      	ldr	r0, [pc, #40]	@ (8002678 <envio_contador+0x48>)
 800264e:	f7fd fdbf 	bl	80001d0 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	461a      	mov	r2, r3
 8002656:	4b08      	ldr	r3, [pc, #32]	@ (8002678 <envio_contador+0x48>)
 8002658:	4413      	add	r3, r2
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <envio_contador+0x50>)
 800265c:	8811      	ldrh	r1, [r2, #0]
 800265e:	7892      	ldrb	r2, [r2, #2]
 8002660:	8019      	strh	r1, [r3, #0]
 8002662:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 8002664:	2332      	movs	r3, #50	@ 0x32
 8002666:	2220      	movs	r2, #32
 8002668:	4903      	ldr	r1, [pc, #12]	@ (8002678 <envio_contador+0x48>)
 800266a:	4806      	ldr	r0, [pc, #24]	@ (8002684 <envio_contador+0x54>)
 800266c:	f003 f944 	bl	80058f8 <HAL_UART_Transmit>
}
 8002670:	bf00      	nop
 8002672:	3708      	adds	r7, #8
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200001b8 	.word	0x200001b8
 800267c:	08007230 	.word	0x08007230
 8002680:	080071f0 	.word	0x080071f0
 8002684:	20000170 	.word	0x20000170

08002688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002690:	bf00      	nop
 8002692:	e7fd      	b.n	8002690 <Error_Handler+0x8>

08002694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_MspInit+0x4c>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026d2:	2007      	movs	r0, #7
 80026d4:	f000 ff72 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2f      	ldr	r2, [pc, #188]	@ (80027c0 <HAL_ADC_MspInit+0xdc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d158      	bne.n	80027b8 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6453      	str	r3, [r2, #68]	@ 0x44
 8002716:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_ADC_MspInit+0xe0>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 800273e:	2303      	movs	r3, #3
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002742:	2303      	movs	r3, #3
 8002744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274a:	f107 0314 	add.w	r3, r7, #20
 800274e:	4619      	mov	r1, r3
 8002750:	481d      	ldr	r0, [pc, #116]	@ (80027c8 <HAL_ADC_MspInit+0xe4>)
 8002752:	f001 fb77 	bl	8003e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002756:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002758:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_ADC_MspInit+0xec>)
 800275a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800275c:	4b1b      	ldr	r3, [pc, #108]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 800275e:	2200      	movs	r2, #0
 8002760:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002762:	4b1a      	ldr	r3, [pc, #104]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002768:	4b18      	ldr	r3, [pc, #96]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002770:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002774:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002776:	4b15      	ldr	r3, [pc, #84]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800277c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800277e:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002780:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002784:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002788:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800278c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002790:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002794:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 8002798:	2200      	movs	r2, #0
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800279c:	480b      	ldr	r0, [pc, #44]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 800279e:	f000 ff4f 	bl	8003640 <HAL_DMA_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80027a8:	f7ff ff6e 	bl	8002688 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a07      	ldr	r2, [pc, #28]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80027b2:	4a06      	ldr	r2, [pc, #24]	@ (80027cc <HAL_ADC_MspInit+0xe8>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027b8:	bf00      	nop
 80027ba:	3728      	adds	r7, #40	@ 0x28
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40012000 	.word	0x40012000
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020400 	.word	0x40020400
 80027cc:	200000c8 	.word	0x200000c8
 80027d0:	40026410 	.word	0x40026410

080027d4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_TIM_Base_MspInit+0x3c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_TIM_Base_MspInit+0x40>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_TIM_Base_MspInit+0x40>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <HAL_TIM_Base_MspInit+0x40>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	40000400 	.word	0x40000400
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a12      	ldr	r2, [pc, #72]	@ (8002880 <HAL_TIM_MspPostInit+0x68>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11e      	bne.n	8002878 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_TIM_MspPostInit+0x6c>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	4a10      	ldr	r2, [pc, #64]	@ (8002884 <HAL_TIM_MspPostInit+0x6c>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	@ 0x30
 800284a:	4b0e      	ldr	r3, [pc, #56]	@ (8002884 <HAL_TIM_MspPostInit+0x6c>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 8002856:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800285a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002868:	2302      	movs	r3, #2
 800286a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	4619      	mov	r1, r3
 8002872:	4805      	ldr	r0, [pc, #20]	@ (8002888 <HAL_TIM_MspPostInit+0x70>)
 8002874:	f001 fae6 	bl	8003e44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40000400 	.word	0x40000400
 8002884:	40023800 	.word	0x40023800
 8002888:	40020800 	.word	0x40020800

0800288c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2c      	ldr	r2, [pc, #176]	@ (800295c <HAL_UART_MspInit+0xd0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d152      	bne.n	8002954 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028be:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a23      	ldr	r2, [pc, #140]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_UART_MspInit+0xd4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002914:	2308      	movs	r3, #8
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4619      	mov	r1, r3
 800291e:	4811      	ldr	r0, [pc, #68]	@ (8002964 <HAL_UART_MspInit+0xd8>)
 8002920:	f001 fa90 	bl	8003e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002924:	2304      	movs	r3, #4
 8002926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002928:	2302      	movs	r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002934:	2308      	movs	r3, #8
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	480a      	ldr	r0, [pc, #40]	@ (8002968 <HAL_UART_MspInit+0xdc>)
 8002940:	f001 fa80 	bl	8003e44 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002944:	2200      	movs	r2, #0
 8002946:	2100      	movs	r1, #0
 8002948:	2035      	movs	r0, #53	@ 0x35
 800294a:	f000 fe42 	bl	80035d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800294e:	2035      	movs	r0, #53	@ 0x35
 8002950:	f000 fe5b 	bl	800360a <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 8002954:	bf00      	nop
 8002956:	3728      	adds	r7, #40	@ 0x28
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40005000 	.word	0x40005000
 8002960:	40023800 	.word	0x40023800
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00

0800296c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <NMI_Handler+0x4>

08002974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002978:	bf00      	nop
 800297a:	e7fd      	b.n	8002978 <HardFault_Handler+0x4>

0800297c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002980:	bf00      	nop
 8002982:	e7fd      	b.n	8002980 <MemManage_Handler+0x4>

08002984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <UsageFault_Handler+0x4>

08002994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f000 f8e5 	bl	8002b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}

080029ca <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_frontal_Pin);
 80029ce:	2040      	movs	r0, #64	@ 0x40
 80029d0:	f001 fc06 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 80029d4:	2080      	movs	r0, #128	@ 0x80
 80029d6:	f001 fc03 	bl	80041e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80029e4:	4802      	ldr	r0, [pc, #8]	@ (80029f0 <UART5_IRQHandler+0x10>)
 80029e6:	f003 f813 	bl	8005a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000170 	.word	0x20000170

080029f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029f8:	4802      	ldr	r0, [pc, #8]	@ (8002a04 <DMA2_Stream0_IRQHandler+0x10>)
 80029fa:	f000 ffb9 	bl	8003970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200000c8 	.word	0x200000c8

08002a08 <_sbrk>:
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <_sbrk+0x5c>)
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <_sbrk+0x60>)
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <_sbrk+0x22>
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <_sbrk+0x64>)
 8002a26:	4a12      	ldr	r2, [pc, #72]	@ (8002a70 <_sbrk+0x68>)
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b10      	ldr	r3, [pc, #64]	@ (8002a6c <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d207      	bcs.n	8002a48 <_sbrk+0x40>
 8002a38:	f003 ff50 	bl	80068dc <__errno>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	220c      	movs	r2, #12
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	f04f 33ff 	mov.w	r3, #4294967295
 8002a46:	e009      	b.n	8002a5c <_sbrk+0x54>
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <_sbrk+0x64>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b07      	ldr	r3, [pc, #28]	@ (8002a6c <_sbrk+0x64>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4413      	add	r3, r2
 8002a56:	4a05      	ldr	r2, [pc, #20]	@ (8002a6c <_sbrk+0x64>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20020000 	.word	0x20020000
 8002a68:	00000400 	.word	0x00000400
 8002a6c:	200002b4 	.word	0x200002b4
 8002a70:	20000408 	.word	0x20000408

08002a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a78:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <SystemInit+0x20>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7e:	4a05      	ldr	r2, [pc, #20]	@ (8002a94 <SystemInit+0x20>)
 8002a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <Reset_Handler>:
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad0 <LoopFillZerobss+0xe>
 8002a9c:	f7ff ffea 	bl	8002a74 <SystemInit>
 8002aa0:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <LoopFillZerobss+0x12>)
 8002aa2:	490d      	ldr	r1, [pc, #52]	@ (8002ad8 <LoopFillZerobss+0x16>)
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <LoopFillZerobss+0x1a>)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:
 8002aaa:	58d4      	ldr	r4, [r2, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:
 8002ab0:	18c4      	adds	r4, r0, r3
 8002ab2:	428c      	cmp	r4, r1
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <LoopFillZerobss+0x1e>)
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x22>)
 8002aba:	2300      	movs	r3, #0
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:
 8002ac2:	42a2      	cmp	r2, r4
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>
 8002ac6:	f003 ff0f 	bl	80068e8 <__libc_init_array>
 8002aca:	f7fe f875 	bl	8000bb8 <main>
 8002ace:	4770      	bx	lr
 8002ad0:	20020000 	.word	0x20020000
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000064 	.word	0x20000064
 8002adc:	08007298 	.word	0x08007298
 8002ae0:	20000064 	.word	0x20000064
 8002ae4:	20000404 	.word	0x20000404

08002ae8 <ADC_IRQHandler>:
 8002ae8:	e7fe      	b.n	8002ae8 <ADC_IRQHandler>
	...

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b2c <HAL_Init+0x40>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b2c <HAL_Init+0x40>)
 8002af6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <HAL_Init+0x40>)
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b08:	4b08      	ldr	r3, [pc, #32]	@ (8002b2c <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a07      	ldr	r2, [pc, #28]	@ (8002b2c <HAL_Init+0x40>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f000 fd51 	bl	80035bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 f808 	bl	8002b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b20:	f7ff fdb8 	bl	8002694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00

08002b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b38:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <HAL_InitTick+0x54>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_InitTick+0x58>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	4619      	mov	r1, r3
 8002b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fd69 	bl	8003626 <HAL_SYSTICK_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00e      	b.n	8002b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b0f      	cmp	r3, #15
 8002b62:	d80a      	bhi.n	8002b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b64:	2200      	movs	r2, #0
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f000 fd31 	bl	80035d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b70:	4a06      	ldr	r2, [pc, #24]	@ (8002b8c <HAL_InitTick+0x5c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	e000      	b.n	8002b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20000008 	.word	0x20000008
 8002b88:	20000010 	.word	0x20000010
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b94:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_IncTick+0x20>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_IncTick+0x24>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_IncTick+0x24>)
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	20000010 	.word	0x20000010
 8002bb4:	200002b8 	.word	0x200002b8

08002bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return uwTick;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	@ (8002bcc <HAL_GetTick+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200002b8 	.word	0x200002b8

08002bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd8:	f7ff ffee 	bl	8002bb8 <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d005      	beq.n	8002bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_Delay+0x44>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bf6:	bf00      	nop
 8002bf8:	f7ff ffde 	bl	8002bb8 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d8f7      	bhi.n	8002bf8 <HAL_Delay+0x28>
  {
  }
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000010 	.word	0x20000010

08002c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e033      	b.n	8002c96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fd54 	bl	80026e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c5e:	f023 0302 	bic.w	r3, r3, #2
 8002c62:	f043 0202 	orr.w	r2, r3, #2
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa58 	bl	8003120 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	f043 0201 	orr.w	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c86:	e001      	b.n	8002c8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_ADC_Start_DMA+0x22>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e0eb      	b.n	8002e9a <HAL_ADC_Start_DMA+0x1fa>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d018      	beq.n	8002d0a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea4 <HAL_ADC_Start_DMA+0x204>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea8 <HAL_ADC_Start_DMA+0x208>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	0c9a      	lsrs	r2, r3, #18
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d18:	d107      	bne.n	8002d2a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 80a3 	bne.w	8002e80 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d42:	f023 0301 	bic.w	r3, r3, #1
 8002d46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	f023 0206 	bic.w	r2, r3, #6
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	645a      	str	r2, [r3, #68]	@ 0x44
 8002d86:	e002      	b.n	8002d8e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d96:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <HAL_ADC_Start_DMA+0x20c>)
 8002d98:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9e:	4a44      	ldr	r2, [pc, #272]	@ (8002eb0 <HAL_ADC_Start_DMA+0x210>)
 8002da0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	4a43      	ldr	r2, [pc, #268]	@ (8002eb4 <HAL_ADC_Start_DMA+0x214>)
 8002da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dae:	4a42      	ldr	r2, [pc, #264]	@ (8002eb8 <HAL_ADC_Start_DMA+0x218>)
 8002db0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002dca:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dda:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	334c      	adds	r3, #76	@ 0x4c
 8002de6:	4619      	mov	r1, r3
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f000 fcd6 	bl	800379c <HAL_DMA_Start_IT>
 8002df0:	4603      	mov	r3, r0
 8002df2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d12a      	bne.n	8002e56 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <HAL_ADC_Start_DMA+0x21c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d015      	beq.n	8002e36 <HAL_ADC_Start_DMA+0x196>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <HAL_ADC_Start_DMA+0x220>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_Start_DMA+0x180>
 8002e14:	4b25      	ldr	r3, [pc, #148]	@ (8002eac <HAL_ADC_Start_DMA+0x20c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_ADC_Start_DMA+0x224>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d136      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
 8002e2a:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_ADC_Start_DMA+0x20c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d130      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d129      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	e020      	b.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <HAL_ADC_Start_DMA+0x21c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d11b      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d114      	bne.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e7c:	609a      	str	r2, [r3, #8]
 8002e7e:	e00b      	b.n	8002e98 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0210 	orr.w	r2, r3, #16
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e90:	f043 0201 	orr.w	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008
 8002ea8:	431bde83 	.word	0x431bde83
 8002eac:	40012300 	.word	0x40012300
 8002eb0:	08003319 	.word	0x08003319
 8002eb4:	080033d3 	.word	0x080033d3
 8002eb8:	080033ef 	.word	0x080033ef
 8002ebc:	40012000 	.word	0x40012000
 8002ec0:	40012100 	.word	0x40012100
 8002ec4:	40012200 	.word	0x40012200

08002ec8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1c>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e105      	b.n	8003104 <HAL_ADC_ConfigChannel+0x228>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d925      	bls.n	8002f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43da      	mvns	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4403      	add	r3, r0
 8002f46:	3b1e      	subs	r3, #30
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e022      	b.n	8002f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4403      	add	r3, r0
 8002f90:	409a      	lsls	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d824      	bhi.n	8002fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b05      	subs	r3, #5
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fea:	e04c      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d824      	bhi.n	800303e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	@ 0x23
 8003006:	221f      	movs	r2, #31
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43da      	mvns	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	400a      	ands	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b23      	subs	r3, #35	@ 0x23
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30
 800303c:	e023      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	@ 0x41
 8003050:	221f      	movs	r2, #31
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	@ 0x41
 800307a:	fa00 f203 	lsl.w	r2, r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003086:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <HAL_ADC_ConfigChannel+0x234>)
 8003088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <HAL_ADC_ConfigChannel+0x238>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d109      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1cc>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b12      	cmp	r3, #18
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <HAL_ADC_ConfigChannel+0x238>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d123      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b10      	cmp	r3, #16
 80030b8:	d003      	beq.n	80030c2 <HAL_ADC_ConfigChannel+0x1e6>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b11      	cmp	r3, #17
 80030c0:	d11b      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d111      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <HAL_ADC_ConfigChannel+0x23c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a10      	ldr	r2, [pc, #64]	@ (800311c <HAL_ADC_ConfigChannel+0x240>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0c9a      	lsrs	r2, r3, #18
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030ec:	e002      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f9      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40012300 	.word	0x40012300
 8003114:	40012000 	.word	0x40012000
 8003118:	20000008 	.word	0x20000008
 800311c:	431bde83 	.word	0x431bde83

08003120 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003128:	4b79      	ldr	r3, [pc, #484]	@ (8003310 <ADC_Init+0x1f0>)
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	431a      	orrs	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003154:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	021a      	lsls	r2, r3, #8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800319a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	4a58      	ldr	r2, [pc, #352]	@ (8003314 <ADC_Init+0x1f4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80031c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6899      	ldr	r1, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80031e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e00f      	b.n	800321e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800320c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800321c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0202 	bic.w	r2, r2, #2
 800322c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7e1b      	ldrb	r3, [r3, #24]
 8003238:	005a      	lsls	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800326a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	3b01      	subs	r3, #1
 8003278:	035a      	lsls	r2, r3, #13
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
 8003282:	e007      	b.n	8003294 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	051a      	lsls	r2, r3, #20
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80032c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6899      	ldr	r1, [r3, #8]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032d6:	025a      	lsls	r2, r3, #9
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6899      	ldr	r1, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	029a      	lsls	r2, r3, #10
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	40012300 	.word	0x40012300
 8003314:	0f000001 	.word	0x0f000001

08003318 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d13c      	bne.n	80033ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d12b      	bne.n	80033a4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003350:	2b00      	cmp	r3, #0
 8003352:	d127      	bne.n	80033a4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800336c:	2b00      	cmp	r3, #0
 800336e:	d119      	bne.n	80033a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0220 	bic.w	r2, r2, #32
 800337e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003390:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	f043 0201 	orr.w	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7fe fb49 	bl	8001a3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033aa:	e00e      	b.n	80033ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff fd85 	bl	8002ec8 <HAL_ADC_ErrorCallback>
}
 80033be:	e004      	b.n	80033ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033de:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f7fe fb1d 	bl	8001a20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b084      	sub	sp, #16
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033fa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2240      	movs	r2, #64	@ 0x40
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f043 0204 	orr.w	r2, r3, #4
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fd5a 	bl	8002ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800342c:	4b0c      	ldr	r3, [pc, #48]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003438:	4013      	ands	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800344c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344e:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <__NVIC_SetPriorityGrouping+0x44>)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	60d3      	str	r3, [r2, #12]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <__NVIC_GetPriorityGrouping+0x18>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0307 	and.w	r3, r3, #7
}
 8003472:	4618      	mov	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348e:	2b00      	cmp	r3, #0
 8003490:	db0b      	blt.n	80034aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 021f 	and.w	r2, r3, #31
 8003498:	4907      	ldr	r1, [pc, #28]	@ (80034b8 <__NVIC_EnableIRQ+0x38>)
 800349a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2001      	movs	r0, #1
 80034a2:	fa00 f202 	lsl.w	r2, r0, r2
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	e000e100 	.word	0xe000e100

080034bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	db0a      	blt.n	80034e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	490c      	ldr	r1, [pc, #48]	@ (8003508 <__NVIC_SetPriority+0x4c>)
 80034d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	440b      	add	r3, r1
 80034e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e4:	e00a      	b.n	80034fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4908      	ldr	r1, [pc, #32]	@ (800350c <__NVIC_SetPriority+0x50>)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	3b04      	subs	r3, #4
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	761a      	strb	r2, [r3, #24]
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	e000e100 	.word	0xe000e100
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f1c3 0307 	rsb	r3, r3, #7
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf28      	it	cs
 800352e:	2304      	movcs	r3, #4
 8003530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3304      	adds	r3, #4
 8003536:	2b06      	cmp	r3, #6
 8003538:	d902      	bls.n	8003540 <NVIC_EncodePriority+0x30>
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3b03      	subs	r3, #3
 800353e:	e000      	b.n	8003542 <NVIC_EncodePriority+0x32>
 8003540:	2300      	movs	r3, #0
 8003542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	401a      	ands	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43d9      	mvns	r1, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003568:	4313      	orrs	r3, r2
         );
}
 800356a:	4618      	mov	r0, r3
 800356c:	3724      	adds	r7, #36	@ 0x24
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3b01      	subs	r3, #1
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003588:	d301      	bcc.n	800358e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358a:	2301      	movs	r3, #1
 800358c:	e00f      	b.n	80035ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358e:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <SysTick_Config+0x40>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003596:	210f      	movs	r1, #15
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	f7ff ff8e 	bl	80034bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <SysTick_Config+0x40>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a6:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <SysTick_Config+0x40>)
 80035a8:	2207      	movs	r2, #7
 80035aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000e010 	.word	0xe000e010

080035bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ff29 	bl	800341c <__NVIC_SetPriorityGrouping>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e4:	f7ff ff3e 	bl	8003464 <__NVIC_GetPriorityGrouping>
 80035e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	6978      	ldr	r0, [r7, #20]
 80035f0:	f7ff ff8e 	bl	8003510 <NVIC_EncodePriority>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff5d 	bl	80034bc <__NVIC_SetPriority>
}
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff ff31 	bl	8003480 <__NVIC_EnableIRQ>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b082      	sub	sp, #8
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ffa2 	bl	8003578 <SysTick_Config>
 8003634:	4603      	mov	r3, r0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800364c:	f7ff fab4 	bl	8002bb8 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e099      	b.n	8003790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800367c:	e00f      	b.n	800369e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367e:	f7ff fa9b 	bl	8002bb8 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b05      	cmp	r3, #5
 800368a:	d908      	bls.n	800369e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2203      	movs	r2, #3
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e078      	b.n	8003790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e8      	bne.n	800367e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_DMA_Init+0x158>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d107      	bne.n	8003708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	4313      	orrs	r3, r2
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0307 	bic.w	r3, r3, #7
 800371e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	2b04      	cmp	r3, #4
 8003730:	d117      	bne.n	8003762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 fb01 	bl	8003d4c <DMA_CheckFifoParam>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2240      	movs	r2, #64	@ 0x40
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800375e:	2301      	movs	r3, #1
 8003760:	e016      	b.n	8003790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fab8 	bl	8003ce0 <DMA_CalcBaseAndBitshift>
 8003770:	4603      	mov	r3, r0
 8003772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	223f      	movs	r2, #63	@ 0x3f
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	f010803f 	.word	0xf010803f

0800379c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_DMA_Start_IT+0x26>
 80037be:	2302      	movs	r3, #2
 80037c0:	e040      	b.n	8003844 <HAL_DMA_Start_IT+0xa8>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d12f      	bne.n	8003836 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fa4a 	bl	8003c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f4:	223f      	movs	r2, #63	@ 0x3f
 80037f6:	409a      	lsls	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0216 	orr.w	r2, r2, #22
 800380a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0208 	orr.w	r2, r2, #8
 8003822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	e005      	b.n	8003842 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800383e:	2302      	movs	r3, #2
 8003840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003842:	7dfb      	ldrb	r3, [r7, #23]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003858:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800385a:	f7ff f9ad 	bl	8002bb8 <HAL_GetTick>
 800385e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d008      	beq.n	800387e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2280      	movs	r2, #128	@ 0x80
 8003870:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e052      	b.n	8003924 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0216 	bic.w	r2, r2, #22
 800388c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800389c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d103      	bne.n	80038ae <HAL_DMA_Abort+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0208 	bic.w	r2, r2, #8
 80038bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ce:	e013      	b.n	80038f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d0:	f7ff f972 	bl	8002bb8 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d90c      	bls.n	80038f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2203      	movs	r2, #3
 80038e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e015      	b.n	8003924 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e4      	bne.n	80038d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390a:	223f      	movs	r2, #63	@ 0x3f
 800390c:	409a      	lsls	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d004      	beq.n	800394a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e00c      	b.n	8003964 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2205      	movs	r2, #5
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800397c:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb8 <HAL_DMA_IRQHandler+0x248>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a8e      	ldr	r2, [pc, #568]	@ (8003bbc <HAL_DMA_IRQHandler+0x24c>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	2208      	movs	r2, #8
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0204 	bic.w	r2, r2, #4
 80039c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c8:	2208      	movs	r2, #8
 80039ca:	409a      	lsls	r2, r3
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e0:	2201      	movs	r2, #1
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d012      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	2201      	movs	r2, #1
 8003a00:	409a      	lsls	r2, r3
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a16:	2204      	movs	r2, #4
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a34:	2204      	movs	r2, #4
 8003a36:	409a      	lsls	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d043      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d03c      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d018      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d024      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e01f      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e016      	b.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d107      	bne.n	8003ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0208 	bic.w	r2, r2, #8
 8003ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 808f 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 8087 	beq.w	8003c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2220      	movs	r2, #32
 8003b08:	409a      	lsls	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b05      	cmp	r3, #5
 8003b18:	d136      	bne.n	8003b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0216 	bic.w	r2, r2, #22
 8003b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x1da>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0208 	bic.w	r2, r2, #8
 8003b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5e:	223f      	movs	r2, #63	@ 0x3f
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d07e      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
        }
        return;
 8003b86:	e079      	b.n	8003c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01d      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10d      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d031      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	4798      	blx	r3
 8003bb4:	e02c      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
 8003bb6:	bf00      	nop
 8003bb8:	20000008 	.word	0x20000008
 8003bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d023      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
 8003bd0:	e01e      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10f      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0210 	bic.w	r2, r2, #16
 8003bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d032      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d022      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2205      	movs	r2, #5
 8003c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0201 	bic.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d307      	bcc.n	8003c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f2      	bne.n	8003c3c <HAL_DMA_IRQHandler+0x2cc>
 8003c56:	e000      	b.n	8003c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d005      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c7c:	bf00      	nop
    }
  }
}
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d108      	bne.n	8003cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cc2:	e007      	b.n	8003cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b10      	subs	r3, #16
 8003cf0:	4a14      	ldr	r2, [pc, #80]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x64>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cfa:	4a13      	ldr	r2, [pc, #76]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x68>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d909      	bls.n	8003d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d16:	f023 0303 	bic.w	r3, r3, #3
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d20:	e007      	b.n	8003d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	aaaaaaab 	.word	0xaaaaaaab
 8003d48:	0800724c 	.word	0x0800724c

08003d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d11f      	bne.n	8003da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b03      	cmp	r3, #3
 8003d6a:	d856      	bhi.n	8003e1a <DMA_CheckFifoParam+0xce>
 8003d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d74 <DMA_CheckFifoParam+0x28>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d97 	.word	0x08003d97
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003e1b 	.word	0x08003e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d046      	beq.n	8003e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d94:	e043      	b.n	8003e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d9e:	d140      	bne.n	8003e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da4:	e03d      	b.n	8003e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dae:	d121      	bne.n	8003df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d837      	bhi.n	8003e26 <DMA_CheckFifoParam+0xda>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <DMA_CheckFifoParam+0x70>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003dcd 	.word	0x08003dcd
 8003dc0:	08003dd3 	.word	0x08003dd3
 8003dc4:	08003dcd 	.word	0x08003dcd
 8003dc8:	08003de5 	.word	0x08003de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e030      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d025      	beq.n	8003e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de2:	e022      	b.n	8003e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dec:	d11f      	bne.n	8003e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003df2:	e01c      	b.n	8003e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d903      	bls.n	8003e02 <DMA_CheckFifoParam+0xb6>
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d003      	beq.n	8003e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e00:	e018      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      break;
 8003e06:	e015      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
      break;
 8003e18:	e00b      	b.n	8003e32 <DMA_CheckFifoParam+0xe6>
      break;
 8003e1a:	bf00      	nop
 8003e1c:	e00a      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e008      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
    }
  } 
  
  return status; 
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop

08003e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b089      	sub	sp, #36	@ 0x24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	e16b      	b.n	8004138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e60:	2201      	movs	r2, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	f040 815a 	bne.w	8004132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d005      	beq.n	8003e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d130      	bne.n	8003ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ecc:	2201      	movs	r2, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 0201 	and.w	r2, r3, #1
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d017      	beq.n	8003f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	2203      	movs	r2, #3
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d123      	bne.n	8003f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	08da      	lsrs	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3208      	adds	r2, #8
 8003f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	220f      	movs	r2, #15
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	08da      	lsrs	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3208      	adds	r2, #8
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	2203      	movs	r2, #3
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80b4 	beq.w	8004132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	4b60      	ldr	r3, [pc, #384]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fda:	4b5d      	ldr	r3, [pc, #372]	@ (8004150 <HAL_GPIO_Init+0x30c>)
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8004154 <HAL_GPIO_Init+0x310>)
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3302      	adds	r3, #2
 8003fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	220f      	movs	r2, #15
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	4013      	ands	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a52      	ldr	r2, [pc, #328]	@ (8004158 <HAL_GPIO_Init+0x314>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d02b      	beq.n	800406a <HAL_GPIO_Init+0x226>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a51      	ldr	r2, [pc, #324]	@ (800415c <HAL_GPIO_Init+0x318>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d025      	beq.n	8004066 <HAL_GPIO_Init+0x222>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a50      	ldr	r2, [pc, #320]	@ (8004160 <HAL_GPIO_Init+0x31c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d01f      	beq.n	8004062 <HAL_GPIO_Init+0x21e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a4f      	ldr	r2, [pc, #316]	@ (8004164 <HAL_GPIO_Init+0x320>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d019      	beq.n	800405e <HAL_GPIO_Init+0x21a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4e      	ldr	r2, [pc, #312]	@ (8004168 <HAL_GPIO_Init+0x324>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d013      	beq.n	800405a <HAL_GPIO_Init+0x216>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a4d      	ldr	r2, [pc, #308]	@ (800416c <HAL_GPIO_Init+0x328>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00d      	beq.n	8004056 <HAL_GPIO_Init+0x212>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a4c      	ldr	r2, [pc, #304]	@ (8004170 <HAL_GPIO_Init+0x32c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <HAL_GPIO_Init+0x20e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a4b      	ldr	r2, [pc, #300]	@ (8004174 <HAL_GPIO_Init+0x330>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d101      	bne.n	800404e <HAL_GPIO_Init+0x20a>
 800404a:	2307      	movs	r3, #7
 800404c:	e00e      	b.n	800406c <HAL_GPIO_Init+0x228>
 800404e:	2308      	movs	r3, #8
 8004050:	e00c      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004052:	2306      	movs	r3, #6
 8004054:	e00a      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004056:	2305      	movs	r3, #5
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x228>
 800405a:	2304      	movs	r3, #4
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x228>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x228>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x228>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	@ (8004154 <HAL_GPIO_Init+0x310>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	4b3b      	ldr	r3, [pc, #236]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ae:	4a32      	ldr	r2, [pc, #200]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b4:	4b30      	ldr	r3, [pc, #192]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d8:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040de:	4b26      	ldr	r3, [pc, #152]	@ (8004178 <HAL_GPIO_Init+0x334>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004102:	4a1d      	ldr	r2, [pc, #116]	@ (8004178 <HAL_GPIO_Init+0x334>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004108:	4b1b      	ldr	r3, [pc, #108]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412c:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <HAL_GPIO_Init+0x334>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f ae90 	bls.w	8003e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	@ 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40021400 	.word	0x40021400
 8004170:	40021800 	.word	0x40021800
 8004174:	40021c00 	.word	0x40021c00
 8004178:	40013c00 	.word	0x40013c00

0800417c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	887b      	ldrh	r3, [r7, #2]
 800418e:	4013      	ands	r3, r2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e001      	b.n	800419e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
	  GPIOx->BSRR = GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c8:	e003      	b.n	80041d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	041a      	lsls	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
	...

080041e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041ea:	4b08      	ldr	r3, [pc, #32]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041f6:	4a05      	ldr	r2, [pc, #20]	@ (800420c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe f95e 	bl	80024c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40013c00 	.word	0x40013c00

08004210 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e267      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d075      	beq.n	800431a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800422e:	4b88      	ldr	r3, [pc, #544]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b04      	cmp	r3, #4
 8004238:	d00c      	beq.n	8004254 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423a:	4b85      	ldr	r3, [pc, #532]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004242:	2b08      	cmp	r3, #8
 8004244:	d112      	bne.n	800426c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004246:	4b82      	ldr	r3, [pc, #520]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800424e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004252:	d10b      	bne.n	800426c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	4b7e      	ldr	r3, [pc, #504]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d05b      	beq.n	8004318 <HAL_RCC_OscConfig+0x108>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d157      	bne.n	8004318 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e242      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004274:	d106      	bne.n	8004284 <HAL_RCC_OscConfig+0x74>
 8004276:	4b76      	ldr	r3, [pc, #472]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a75      	ldr	r2, [pc, #468]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e01d      	b.n	80042c0 <HAL_RCC_OscConfig+0xb0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCC_OscConfig+0x98>
 800428e:	4b70      	ldr	r3, [pc, #448]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6f      	ldr	r2, [pc, #444]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004294:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	4b6d      	ldr	r3, [pc, #436]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a6c      	ldr	r2, [pc, #432]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e00b      	b.n	80042c0 <HAL_RCC_OscConfig+0xb0>
 80042a8:	4b69      	ldr	r3, [pc, #420]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a68      	ldr	r2, [pc, #416]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b66      	ldr	r3, [pc, #408]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a65      	ldr	r2, [pc, #404]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d013      	beq.n	80042f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe fc76 	bl	8002bb8 <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d0:	f7fe fc72 	bl	8002bb8 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b64      	cmp	r3, #100	@ 0x64
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e207      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0f0      	beq.n	80042d0 <HAL_RCC_OscConfig+0xc0>
 80042ee:	e014      	b.n	800431a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fe fc62 	bl	8002bb8 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fe fc5e 	bl	8002bb8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1f3      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	4b51      	ldr	r3, [pc, #324]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f0      	bne.n	80042f8 <HAL_RCC_OscConfig+0xe8>
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d063      	beq.n	80043ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004326:	4b4a      	ldr	r3, [pc, #296]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004332:	4b47      	ldr	r3, [pc, #284]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800433a:	2b08      	cmp	r3, #8
 800433c:	d11c      	bne.n	8004378 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800433e:	4b44      	ldr	r3, [pc, #272]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d116      	bne.n	8004378 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434a:	4b41      	ldr	r3, [pc, #260]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_RCC_OscConfig+0x152>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e1c7      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b3b      	ldr	r3, [pc, #236]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4937      	ldr	r1, [pc, #220]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004376:	e03a      	b.n	80043ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d020      	beq.n	80043c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004380:	4b34      	ldr	r3, [pc, #208]	@ (8004454 <HAL_RCC_OscConfig+0x244>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fe fc17 	bl	8002bb8 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438e:	f7fe fc13 	bl	8002bb8 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e1a8      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b28      	ldr	r3, [pc, #160]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4925      	ldr	r1, [pc, #148]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	600b      	str	r3, [r1, #0]
 80043c0:	e015      	b.n	80043ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c2:	4b24      	ldr	r3, [pc, #144]	@ (8004454 <HAL_RCC_OscConfig+0x244>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fe fbf6 	bl	8002bb8 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d0:	f7fe fbf2 	bl	8002bb8 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e187      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d036      	beq.n	8004468 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d016      	beq.n	8004430 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004402:	4b15      	ldr	r3, [pc, #84]	@ (8004458 <HAL_RCC_OscConfig+0x248>)
 8004404:	2201      	movs	r2, #1
 8004406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fe fbd6 	bl	8002bb8 <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004410:	f7fe fbd2 	bl	8002bb8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e167      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <HAL_RCC_OscConfig+0x240>)
 8004424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x200>
 800442e:	e01b      	b.n	8004468 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004430:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_OscConfig+0x248>)
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fe fbbf 	bl	8002bb8 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	e00e      	b.n	800445c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443e:	f7fe fbbb 	bl	8002bb8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d907      	bls.n	800445c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e150      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
 8004450:	40023800 	.word	0x40023800
 8004454:	42470000 	.word	0x42470000
 8004458:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	4b88      	ldr	r3, [pc, #544]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800445e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ea      	bne.n	800443e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8097 	beq.w	80045a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004476:	2300      	movs	r3, #0
 8004478:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b81      	ldr	r3, [pc, #516]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10f      	bne.n	80044a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	4b7d      	ldr	r3, [pc, #500]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448e:	4a7c      	ldr	r2, [pc, #496]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004494:	6413      	str	r3, [r2, #64]	@ 0x40
 8004496:	4b7a      	ldr	r3, [pc, #488]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a2:	2301      	movs	r3, #1
 80044a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	4b77      	ldr	r3, [pc, #476]	@ (8004684 <HAL_RCC_OscConfig+0x474>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d118      	bne.n	80044e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b2:	4b74      	ldr	r3, [pc, #464]	@ (8004684 <HAL_RCC_OscConfig+0x474>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a73      	ldr	r2, [pc, #460]	@ (8004684 <HAL_RCC_OscConfig+0x474>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044be:	f7fe fb7b 	bl	8002bb8 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fe fb77 	bl	8002bb8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e10c      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004684 <HAL_RCC_OscConfig+0x474>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <HAL_RCC_OscConfig+0x2ea>
 80044ec:	4b64      	ldr	r3, [pc, #400]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f0:	4a63      	ldr	r2, [pc, #396]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f8:	e01c      	b.n	8004534 <HAL_RCC_OscConfig+0x324>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d10c      	bne.n	800451c <HAL_RCC_OscConfig+0x30c>
 8004502:	4b5f      	ldr	r3, [pc, #380]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	4a5e      	ldr	r2, [pc, #376]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004508:	f043 0304 	orr.w	r3, r3, #4
 800450c:	6713      	str	r3, [r2, #112]	@ 0x70
 800450e:	4b5c      	ldr	r3, [pc, #368]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	4a5b      	ldr	r2, [pc, #364]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004514:	f043 0301 	orr.w	r3, r3, #1
 8004518:	6713      	str	r3, [r2, #112]	@ 0x70
 800451a:	e00b      	b.n	8004534 <HAL_RCC_OscConfig+0x324>
 800451c:	4b58      	ldr	r3, [pc, #352]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004520:	4a57      	ldr	r2, [pc, #348]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	6713      	str	r3, [r2, #112]	@ 0x70
 8004528:	4b55      	ldr	r3, [pc, #340]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800452c:	4a54      	ldr	r2, [pc, #336]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800452e:	f023 0304 	bic.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800453c:	f7fe fb3c 	bl	8002bb8 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004542:	e00a      	b.n	800455a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004544:	f7fe fb38 	bl	8002bb8 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e0cb      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455a:	4b49      	ldr	r3, [pc, #292]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ee      	beq.n	8004544 <HAL_RCC_OscConfig+0x334>
 8004566:	e014      	b.n	8004592 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004568:	f7fe fb26 	bl	8002bb8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800456e:	e00a      	b.n	8004586 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004570:	f7fe fb22 	bl	8002bb8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e0b5      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ee      	bne.n	8004570 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d105      	bne.n	80045a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004598:	4b39      	ldr	r3, [pc, #228]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	4a38      	ldr	r2, [pc, #224]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800459e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80a1 	beq.w	80046f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045ae:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d05c      	beq.n	8004674 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d141      	bne.n	8004646 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_OscConfig+0x478>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fe faf6 	bl	8002bb8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fe faf2 	bl	8002bb8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e087      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	4b27      	ldr	r3, [pc, #156]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	019b      	lsls	r3, r3, #6
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	085b      	lsrs	r3, r3, #1
 8004606:	3b01      	subs	r3, #1
 8004608:	041b      	lsls	r3, r3, #16
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	061b      	lsls	r3, r3, #24
 8004612:	491b      	ldr	r1, [pc, #108]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004618:	4b1b      	ldr	r3, [pc, #108]	@ (8004688 <HAL_RCC_OscConfig+0x478>)
 800461a:	2201      	movs	r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fe facb 	bl	8002bb8 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fe fac7 	bl	8002bb8 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e05c      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004638:	4b11      	ldr	r3, [pc, #68]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x416>
 8004644:	e054      	b.n	80046f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004646:	4b10      	ldr	r3, [pc, #64]	@ (8004688 <HAL_RCC_OscConfig+0x478>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fe fab4 	bl	8002bb8 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe fab0 	bl	8002bb8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e045      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <HAL_RCC_OscConfig+0x470>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0x444>
 8004672:	e03d      	b.n	80046f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d107      	bne.n	800468c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e038      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
 8004680:	40023800 	.word	0x40023800
 8004684:	40007000 	.word	0x40007000
 8004688:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <HAL_RCC_OscConfig+0x4ec>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d028      	beq.n	80046ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d121      	bne.n	80046ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d11a      	bne.n	80046ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046bc:	4013      	ands	r3, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d111      	bne.n	80046ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	3b01      	subs	r3, #1
 80046d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d107      	bne.n	80046ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e000      	b.n	80046f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0cc      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b68      	ldr	r3, [pc, #416]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d90c      	bls.n	800473c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b65      	ldr	r3, [pc, #404]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a58      	ldr	r2, [pc, #352]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800475e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a52      	ldr	r2, [pc, #328]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d119      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d003      	beq.n	80047be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4b3f      	ldr	r3, [pc, #252]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	4b3b      	ldr	r3, [pc, #236]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e067      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b37      	ldr	r3, [pc, #220]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4934      	ldr	r1, [pc, #208]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fe f9e2 	bl	8002bb8 <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fe f9de 	bl	8002bb8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e04f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b2b      	ldr	r3, [pc, #172]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20c      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b22      	ldr	r3, [pc, #136]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	@ (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b12      	ldr	r3, [pc, #72]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004886:	f000 f821 	bl	80048cc <HAL_RCC_GetSysClockFreq>
 800488a:	4602      	mov	r2, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	@ (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	490a      	ldr	r1, [pc, #40]	@ (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	5ccb      	ldrb	r3, [r1, r3]
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	@ (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fe f942 	bl	8002b30 <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08007234 	.word	0x08007234
 80048c4:	20000008 	.word	0x20000008
 80048c8:	2000000c 	.word	0x2000000c

080048cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d0:	b094      	sub	sp, #80	@ 0x50
 80048d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e4:	4b79      	ldr	r3, [pc, #484]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d00d      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x40>
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	f200 80e1 	bhi.w	8004ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_RCC_GetSysClockFreq+0x34>
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x3a>
 80048fe:	e0db      	b.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004900:	4b73      	ldr	r3, [pc, #460]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004902:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004904:	e0db      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004906:	4b73      	ldr	r3, [pc, #460]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004908:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800490a:	e0d8      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800490c:	4b6f      	ldr	r3, [pc, #444]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004914:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004916:	4b6d      	ldr	r3, [pc, #436]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004922:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	2200      	movs	r2, #0
 800492a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800492c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800492e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004934:	633b      	str	r3, [r7, #48]	@ 0x30
 8004936:	2300      	movs	r3, #0
 8004938:	637b      	str	r3, [r7, #52]	@ 0x34
 800493a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	0159      	lsls	r1, r3, #5
 800494c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004950:	0150      	lsls	r0, r2, #5
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4621      	mov	r1, r4
 8004958:	1a51      	subs	r1, r2, r1
 800495a:	6139      	str	r1, [r7, #16]
 800495c:	4629      	mov	r1, r5
 800495e:	eb63 0301 	sbc.w	r3, r3, r1
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004970:	4659      	mov	r1, fp
 8004972:	018b      	lsls	r3, r1, #6
 8004974:	4651      	mov	r1, sl
 8004976:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800497a:	4651      	mov	r1, sl
 800497c:	018a      	lsls	r2, r1, #6
 800497e:	4651      	mov	r1, sl
 8004980:	ebb2 0801 	subs.w	r8, r2, r1
 8004984:	4659      	mov	r1, fp
 8004986:	eb63 0901 	sbc.w	r9, r3, r1
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004996:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800499a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800499e:	4690      	mov	r8, r2
 80049a0:	4699      	mov	r9, r3
 80049a2:	4623      	mov	r3, r4
 80049a4:	eb18 0303 	adds.w	r3, r8, r3
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	462b      	mov	r3, r5
 80049ac:	eb49 0303 	adc.w	r3, r9, r3
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049be:	4629      	mov	r1, r5
 80049c0:	024b      	lsls	r3, r1, #9
 80049c2:	4621      	mov	r1, r4
 80049c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049c8:	4621      	mov	r1, r4
 80049ca:	024a      	lsls	r2, r1, #9
 80049cc:	4610      	mov	r0, r2
 80049ce:	4619      	mov	r1, r3
 80049d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049dc:	f7fb ff56 	bl	800088c <__aeabi_uldivmod>
 80049e0:	4602      	mov	r2, r0
 80049e2:	460b      	mov	r3, r1
 80049e4:	4613      	mov	r3, r2
 80049e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e8:	e058      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ea:	4b38      	ldr	r3, [pc, #224]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	2200      	movs	r2, #0
 80049f2:	4618      	mov	r0, r3
 80049f4:	4611      	mov	r1, r2
 80049f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049fa:	623b      	str	r3, [r7, #32]
 80049fc:	2300      	movs	r3, #0
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	f04f 0000 	mov.w	r0, #0
 8004a0c:	f04f 0100 	mov.w	r1, #0
 8004a10:	0159      	lsls	r1, r3, #5
 8004a12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a16:	0150      	lsls	r0, r2, #5
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a22:	4649      	mov	r1, r9
 8004a24:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a3c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a40:	eb63 050b 	sbc.w	r5, r3, fp
 8004a44:	f04f 0200 	mov.w	r2, #0
 8004a48:	f04f 0300 	mov.w	r3, #0
 8004a4c:	00eb      	lsls	r3, r5, #3
 8004a4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a52:	00e2      	lsls	r2, r4, #3
 8004a54:	4614      	mov	r4, r2
 8004a56:	461d      	mov	r5, r3
 8004a58:	4643      	mov	r3, r8
 8004a5a:	18e3      	adds	r3, r4, r3
 8004a5c:	603b      	str	r3, [r7, #0]
 8004a5e:	464b      	mov	r3, r9
 8004a60:	eb45 0303 	adc.w	r3, r5, r3
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a72:	4629      	mov	r1, r5
 8004a74:	028b      	lsls	r3, r1, #10
 8004a76:	4621      	mov	r1, r4
 8004a78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	028a      	lsls	r2, r1, #10
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a86:	2200      	movs	r2, #0
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	61fa      	str	r2, [r7, #28]
 8004a8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a90:	f7fb fefc 	bl	800088c <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4613      	mov	r3, r2
 8004a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004aac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004aae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ab6:	e002      	b.n	8004abe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004abe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3750      	adds	r7, #80	@ 0x50
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	007a1200 	.word	0x007a1200

08004ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000008 	.word	0x20000008

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	@ (8004b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	@ (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	08007244 	.word	0x08007244

08004b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b1c:	f7ff ffdc 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	0b5b      	lsrs	r3, r3, #13
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	4903      	ldr	r1, [pc, #12]	@ (8004b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b2e:	5ccb      	ldrb	r3, [r1, r3]
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	08007244 	.word	0x08007244

08004b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e041      	b.n	8004bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d106      	bne.n	8004b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fd fe34 	bl	80027d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f000 fad8 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e041      	b.n	8004c74 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f839 	bl	8004c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f000 fa89 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0x24>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e022      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d109      	bne.n	8004cce <HAL_TIM_PWM_Start+0x3e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	bf14      	ite	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	2300      	moveq	r3, #0
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	e015      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d109      	bne.n	8004ce8 <HAL_TIM_PWM_Start+0x58>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e008      	b.n	8004cfa <HAL_TIM_PWM_Start+0x6a>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	bf14      	ite	ne
 8004cf4:	2301      	movne	r3, #1
 8004cf6:	2300      	moveq	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e07c      	b.n	8004dfc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x82>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d10:	e013      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d104      	bne.n	8004d22 <HAL_TIM_PWM_Start+0x92>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d20:	e00b      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_PWM_Start+0xa2>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d30:	e003      	b.n	8004d3a <HAL_TIM_PWM_Start+0xaa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fce6 	bl	8005714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004e04 <HAL_TIM_PWM_Start+0x174>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_PWM_Start+0xcc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a2c      	ldr	r2, [pc, #176]	@ (8004e08 <HAL_TIM_PWM_Start+0x178>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_PWM_Start+0xd0>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_TIM_PWM_Start+0xd2>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a22      	ldr	r2, [pc, #136]	@ (8004e04 <HAL_TIM_PWM_Start+0x174>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d022      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d88:	d01d      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e0c <HAL_TIM_PWM_Start+0x17c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <HAL_TIM_PWM_Start+0x180>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e14 <HAL_TIM_PWM_Start+0x184>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <HAL_TIM_PWM_Start+0x178>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <HAL_TIM_PWM_Start+0x188>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIM_PWM_Start+0x136>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	@ (8004e1c <HAL_TIM_PWM_Start+0x18c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d111      	bne.n	8004dea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f003 0307 	and.w	r3, r3, #7
 8004dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b06      	cmp	r3, #6
 8004dd6:	d010      	beq.n	8004dfa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	e007      	b.n	8004dfa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0201 	orr.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40010000 	.word	0x40010000
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40001800 	.word	0x40001800

08004e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0ae      	b.n	8004f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	f200 809f 	bhi.w	8004f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004f8d 	.word	0x08004f8d
 8004e5c:	08004f8d 	.word	0x08004f8d
 8004e60:	08004f8d 	.word	0x08004f8d
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004f8d 	.word	0x08004f8d
 8004e6c:	08004f8d 	.word	0x08004f8d
 8004e70:	08004f8d 	.word	0x08004f8d
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f8d 	.word	0x08004f8d
 8004e7c:	08004f8d 	.word	0x08004f8d
 8004e80:	08004f8d 	.word	0x08004f8d
 8004e84:	08004f4b 	.word	0x08004f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f9f6 	bl	8005280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0208 	orr.w	r2, r2, #8
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0204 	bic.w	r2, r2, #4
 8004eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	619a      	str	r2, [r3, #24]
      break;
 8004ec6:	e064      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa46 	bl	8005360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]
      break;
 8004f08:	e043      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fa9b 	bl	800544c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0208 	orr.w	r2, r2, #8
 8004f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0204 	bic.w	r2, r2, #4
 8004f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69d9      	ldr	r1, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
      break;
 8004f48:	e023      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 faef 	bl	8005534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69d9      	ldr	r1, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	61da      	str	r2, [r3, #28]
      break;
 8004f8a:	e002      	b.n	8004f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e0b4      	b.n	800512a <HAL_TIM_ConfigClockSource+0x186>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ff8:	d03e      	beq.n	8005078 <HAL_TIM_ConfigClockSource+0xd4>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ffe:	f200 8087 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005006:	f000 8086 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x172>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800500e:	d87f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b70      	cmp	r3, #112	@ 0x70
 8005012:	d01a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0xa6>
 8005014:	2b70      	cmp	r3, #112	@ 0x70
 8005016:	d87b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b60      	cmp	r3, #96	@ 0x60
 800501a:	d050      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x11a>
 800501c:	2b60      	cmp	r3, #96	@ 0x60
 800501e:	d877      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b50      	cmp	r3, #80	@ 0x50
 8005022:	d03c      	beq.n	800509e <HAL_TIM_ConfigClockSource+0xfa>
 8005024:	2b50      	cmp	r3, #80	@ 0x50
 8005026:	d873      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d058      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x13a>
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d86f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b30      	cmp	r3, #48	@ 0x30
 8005032:	d064      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15a>
 8005034:	2b30      	cmp	r3, #48	@ 0x30
 8005036:	d86b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d060      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d867      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05c      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15a>
 8005044:	2b10      	cmp	r3, #16
 8005046:	d05a      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x15a>
 8005048:	e062      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800505a:	f000 fb3b 	bl	80056d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800506c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	609a      	str	r2, [r3, #8]
      break;
 8005076:	e04f      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005088:	f000 fb24 	bl	80056d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800509a:	609a      	str	r2, [r3, #8]
      break;
 800509c:	e03c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fa98 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2150      	movs	r1, #80	@ 0x50
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 faf1 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80050bc:	e02c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fab7 	bl	800563e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2160      	movs	r1, #96	@ 0x60
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fae1 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80050dc:	e01c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 fa78 	bl	80055e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2140      	movs	r1, #64	@ 0x40
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fad1 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 80050fc:	e00c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 fac8 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 800510e:	e003      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e000      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a43      	ldr	r2, [pc, #268]	@ (8005254 <TIM_Base_SetConfig+0x120>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a40      	ldr	r2, [pc, #256]	@ (8005258 <TIM_Base_SetConfig+0x124>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3f      	ldr	r2, [pc, #252]	@ (800525c <TIM_Base_SetConfig+0x128>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <TIM_Base_SetConfig+0x12c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a3d      	ldr	r2, [pc, #244]	@ (8005264 <TIM_Base_SetConfig+0x130>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d108      	bne.n	8005186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a32      	ldr	r2, [pc, #200]	@ (8005254 <TIM_Base_SetConfig+0x120>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d02b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005194:	d027      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2f      	ldr	r2, [pc, #188]	@ (8005258 <TIM_Base_SetConfig+0x124>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d023      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <TIM_Base_SetConfig+0x128>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <TIM_Base_SetConfig+0x12c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <TIM_Base_SetConfig+0x130>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d017      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <TIM_Base_SetConfig+0x134>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2a      	ldr	r2, [pc, #168]	@ (800526c <TIM_Base_SetConfig+0x138>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d00f      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a29      	ldr	r2, [pc, #164]	@ (8005270 <TIM_Base_SetConfig+0x13c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00b      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a28      	ldr	r2, [pc, #160]	@ (8005274 <TIM_Base_SetConfig+0x140>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a27      	ldr	r2, [pc, #156]	@ (8005278 <TIM_Base_SetConfig+0x144>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a26      	ldr	r2, [pc, #152]	@ (800527c <TIM_Base_SetConfig+0x148>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d108      	bne.n	80051f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689a      	ldr	r2, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <TIM_Base_SetConfig+0x120>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <TIM_Base_SetConfig+0xf2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a10      	ldr	r2, [pc, #64]	@ (8005264 <TIM_Base_SetConfig+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d103      	bne.n	800522e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f043 0204 	orr.w	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40014000 	.word	0x40014000
 800526c:	40014400 	.word	0x40014400
 8005270:	40014800 	.word	0x40014800
 8005274:	40001800 	.word	0x40001800
 8005278:	40001c00 	.word	0x40001c00
 800527c:	40002000 	.word	0x40002000

08005280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f023 0201 	bic.w	r2, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 0302 	bic.w	r3, r3, #2
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a20      	ldr	r2, [pc, #128]	@ (8005358 <TIM_OC1_SetConfig+0xd8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_OC1_SetConfig+0x64>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a1f      	ldr	r2, [pc, #124]	@ (800535c <TIM_OC1_SetConfig+0xdc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d10c      	bne.n	80052fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0308 	bic.w	r3, r3, #8
 80052ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f023 0304 	bic.w	r3, r3, #4
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a15      	ldr	r2, [pc, #84]	@ (8005358 <TIM_OC1_SetConfig+0xd8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC1_SetConfig+0x8e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a14      	ldr	r2, [pc, #80]	@ (800535c <TIM_OC1_SetConfig+0xdc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d111      	bne.n	8005332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40010000 	.word	0x40010000
 800535c:	40010400 	.word	0x40010400

08005360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005360:	b480      	push	{r7}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f023 0210 	bic.w	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	699b      	ldr	r3, [r3, #24]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800538e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0320 	bic.w	r3, r3, #32
 80053aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <TIM_OC2_SetConfig+0xe4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d003      	beq.n	80053c8 <TIM_OC2_SetConfig+0x68>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a21      	ldr	r2, [pc, #132]	@ (8005448 <TIM_OC2_SetConfig+0xe8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d10d      	bne.n	80053e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a17      	ldr	r2, [pc, #92]	@ (8005444 <TIM_OC2_SetConfig+0xe4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC2_SetConfig+0x94>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a16      	ldr	r2, [pc, #88]	@ (8005448 <TIM_OC2_SetConfig+0xe8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d113      	bne.n	800541c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400

0800544c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a21      	ldr	r2, [pc, #132]	@ (800552c <TIM_OC3_SetConfig+0xe0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_OC3_SetConfig+0x66>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a20      	ldr	r2, [pc, #128]	@ (8005530 <TIM_OC3_SetConfig+0xe4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10d      	bne.n	80054ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a16      	ldr	r2, [pc, #88]	@ (800552c <TIM_OC3_SetConfig+0xe0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC3_SetConfig+0x92>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a15      	ldr	r2, [pc, #84]	@ (8005530 <TIM_OC3_SetConfig+0xe4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d113      	bne.n	8005506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40010000 	.word	0x40010000
 8005530:	40010400 	.word	0x40010400

08005534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800556a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	021b      	lsls	r3, r3, #8
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800557e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	031b      	lsls	r3, r3, #12
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <TIM_OC4_SetConfig+0xa4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d003      	beq.n	800559c <TIM_OC4_SetConfig+0x68>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a11      	ldr	r2, [pc, #68]	@ (80055dc <TIM_OC4_SetConfig+0xa8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d109      	bne.n	80055b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	019b      	lsls	r3, r3, #6
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400

080055e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f023 0201 	bic.w	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 030a 	bic.w	r3, r3, #10
 800561c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	621a      	str	r2, [r3, #32]
}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563e:	b480      	push	{r7}
 8005640:	b087      	sub	sp, #28
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	f023 0210 	bic.w	r2, r3, #16
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	609a      	str	r2, [r3, #8]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	2201      	movs	r2, #1
 8005728:	fa02 f303 	lsl.w	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	43db      	mvns	r3, r3
 8005736:	401a      	ands	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6a1a      	ldr	r2, [r3, #32]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	431a      	orrs	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005774:	2302      	movs	r3, #2
 8005776:	e05a      	b.n	800582e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800579e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a21      	ldr	r2, [pc, #132]	@ (800583c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c4:	d01d      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1a      	ldr	r2, [pc, #104]	@ (8005848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a18      	ldr	r2, [pc, #96]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a17      	ldr	r2, [pc, #92]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d10c      	bne.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	4313      	orrs	r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40010400 	.word	0x40010400
 8005850:	40014000 	.word	0x40014000
 8005854:	40001800 	.word	0x40001800

08005858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e042      	b.n	80058f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fd f804 	bl	800288c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2224      	movs	r2, #36	@ 0x24
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800589a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fd7f 	bl	80063a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695a      	ldr	r2, [r3, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68da      	ldr	r2, [r3, #12]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08a      	sub	sp, #40	@ 0x28
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	603b      	str	r3, [r7, #0]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b20      	cmp	r3, #32
 8005916:	d175      	bne.n	8005a04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <HAL_UART_Transmit+0x2c>
 800591e:	88fb      	ldrh	r3, [r7, #6]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e06e      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2221      	movs	r2, #33	@ 0x21
 8005932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005936:	f7fd f93f 	bl	8002bb8 <HAL_GetTick>
 800593a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	88fa      	ldrh	r2, [r7, #6]
 8005946:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005950:	d108      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800596c:	e02e      	b.n	80059cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2180      	movs	r1, #128	@ 0x80
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb1d 	bl	8005fb8 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03a      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	3302      	adds	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e007      	b.n	80059be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1cb      	bne.n	800596e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	2140      	movs	r1, #64	@ 0x40
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 fae9 	bl	8005fb8 <UART_WaitOnFlagUntilTimeout>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d005      	beq.n	80059f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e006      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b0ba      	sub	sp, #232	@ 0xe8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10f      	bne.n	8005a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_UART_IRQHandler+0x66>
 8005a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fbd7 	bl	8006222 <UART_Receive_IT>
      return;
 8005a74:	e273      	b.n	8005f5e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80de 	beq.w	8005c3c <HAL_UART_IRQHandler+0x22c>
 8005a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80d1 	beq.w	8005c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <HAL_UART_IRQHandler+0xae>
 8005aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ac2:	f003 0304 	and.w	r3, r3, #4
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <HAL_UART_IRQHandler+0xd2>
 8005aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ada:	f043 0202 	orr.w	r2, r3, #2
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
 8005aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	f043 0204 	orr.w	r2, r3, #4
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <HAL_UART_IRQHandler+0x126>
 8005b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d105      	bne.n	8005b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d005      	beq.n	8005b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	f043 0208 	orr.w	r2, r3, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 820a 	beq.w	8005f54 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d008      	beq.n	8005b5e <HAL_UART_IRQHandler+0x14e>
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fb62 	bl	8006222 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b40      	cmp	r3, #64	@ 0x40
 8005b6a:	bf0c      	ite	eq
 8005b6c:	2301      	moveq	r3, #1
 8005b6e:	2300      	movne	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d103      	bne.n	8005b8a <HAL_UART_IRQHandler+0x17a>
 8005b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d04f      	beq.n	8005c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa6d 	bl	800606a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9a:	2b40      	cmp	r3, #64	@ 0x40
 8005b9c:	d141      	bne.n	8005c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bac:	e853 3f00 	ldrex	r3, [r3]
 8005bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005bda:	e841 2300 	strex	r3, r2, [r1]
 8005bde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1d9      	bne.n	8005b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d013      	beq.n	8005c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf6:	4a8a      	ldr	r2, [pc, #552]	@ (8005e20 <HAL_UART_IRQHandler+0x410>)
 8005bf8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fd fe94 	bl	800392c <HAL_DMA_Abort_IT>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d016      	beq.n	8005c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c18:	e00e      	b.n	8005c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9b6 	bl	8005f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c20:	e00a      	b.n	8005c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9b2 	bl	8005f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c28:	e006      	b.n	8005c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f9ae 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c36:	e18d      	b.n	8005f54 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c38:	bf00      	nop
    return;
 8005c3a:	e18b      	b.n	8005f54 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	f040 8167 	bne.w	8005f14 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c4a:	f003 0310 	and.w	r3, r3, #16
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8160 	beq.w	8005f14 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8159 	beq.w	8005f14 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c62:	2300      	movs	r3, #0
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	f040 80ce 	bne.w	8005e24 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80a9 	beq.w	8005df0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	f080 80a2 	bcs.w	8005df0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cbe:	f000 8088 	beq.w	8005dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1d9      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3314      	adds	r3, #20
 8005d14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d20:	f023 0301 	bic.w	r3, r3, #1
 8005d24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	3314      	adds	r3, #20
 8005d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e1      	bne.n	8005d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3314      	adds	r3, #20
 8005d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e3      	bne.n	8005d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	330c      	adds	r3, #12
 8005d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d9a:	e853 3f00 	ldrex	r3, [r3]
 8005d9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da2:	f023 0310 	bic.w	r3, r3, #16
 8005da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005db4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005db6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dbc:	e841 2300 	strex	r3, r2, [r1]
 8005dc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d1e3      	bne.n	8005d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fd fd3d 	bl	800384c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8d9 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005dee:	e0b3      	b.n	8005f58 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005df4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	f040 80ad 	bne.w	8005f58 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e08:	f040 80a6 	bne.w	8005f58 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f8c1 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
      return;
 8005e1e:	e09b      	b.n	8005f58 <HAL_UART_IRQHandler+0x548>
 8005e20:	08006131 	.word	0x08006131
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f000 808e 	beq.w	8005f5c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8089 	beq.w	8005f5c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e3      	bne.n	8005e4a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	623b      	str	r3, [r7, #32]
   return(result);
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f023 0301 	bic.w	r3, r3, #1
 8005e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ea6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e3      	bne.n	8005e82 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005eec:	61fa      	str	r2, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	69b9      	ldr	r1, [r7, #24]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e3      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f847 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f12:	e023      	b.n	8005f5c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <HAL_UART_IRQHandler+0x524>
 8005f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f000 f910 	bl	8006152 <UART_Transmit_IT>
    return;
 8005f32:	e014      	b.n	8005f5e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00e      	beq.n	8005f5e <HAL_UART_IRQHandler+0x54e>
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f950 	bl	80061f2 <UART_EndTransmit_IT>
    return;
 8005f52:	e004      	b.n	8005f5e <HAL_UART_IRQHandler+0x54e>
    return;
 8005f54:	bf00      	nop
 8005f56:	e002      	b.n	8005f5e <HAL_UART_IRQHandler+0x54e>
      return;
 8005f58:	bf00      	nop
 8005f5a:	e000      	b.n	8005f5e <HAL_UART_IRQHandler+0x54e>
      return;
 8005f5c:	bf00      	nop
  }
}
 8005f5e:	37e8      	adds	r7, #232	@ 0xe8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc8:	e03b      	b.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d037      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd2:	f7fc fdf1 	bl	8002bb8 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	6a3a      	ldr	r2, [r7, #32]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d302      	bcc.n	8005fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e03a      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d023      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b80      	cmp	r3, #128	@ 0x80
 8005ffe:	d020      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b40      	cmp	r3, #64	@ 0x40
 8006004:	d01d      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b08      	cmp	r3, #8
 8006012:	d116      	bne.n	8006042 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f81d 	bl	800606a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2208      	movs	r2, #8
 8006034:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e00f      	b.n	8006062 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	429a      	cmp	r2, r3
 8006050:	bf0c      	ite	eq
 8006052:	2301      	moveq	r3, #1
 8006054:	2300      	movne	r3, #0
 8006056:	b2db      	uxtb	r3, r3
 8006058:	461a      	mov	r2, r3
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	429a      	cmp	r2, r3
 800605e:	d0b4      	beq.n	8005fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800606a:	b480      	push	{r7}
 800606c:	b095      	sub	sp, #84	@ 0x54
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	330c      	adds	r3, #12
 8006078:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	330c      	adds	r3, #12
 8006090:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006092:	643a      	str	r2, [r7, #64]	@ 0x40
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006098:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e5      	bne.n	8006072 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3314      	adds	r3, #20
 80060c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e5      	bne.n	80060a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d119      	bne.n	8006116 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006102:	61ba      	str	r2, [r7, #24]
 8006104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006124:	bf00      	nop
 8006126:	3754      	adds	r7, #84	@ 0x54
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff21 	bl	8005f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800614a:	bf00      	nop
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006152:	b480      	push	{r7}
 8006154:	b085      	sub	sp, #20
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b21      	cmp	r3, #33	@ 0x21
 8006164:	d13e      	bne.n	80061e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800616e:	d114      	bne.n	800619a <UART_Transmit_IT+0x48>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800618c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e008      	b.n	80061ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1c59      	adds	r1, r3, #1
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6211      	str	r1, [r2, #32]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	4619      	mov	r1, r3
 80061ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10f      	bne.n	80061e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	e000      	b.n	80061e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80061e4:	2302      	movs	r3, #2
  }
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006208:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fea6 	bl	8005f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08c      	sub	sp, #48	@ 0x30
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800622e:	2300      	movs	r3, #0
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b22      	cmp	r3, #34	@ 0x22
 800623c:	f040 80aa 	bne.w	8006394 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006248:	d115      	bne.n	8006276 <UART_Receive_IT+0x54>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d111      	bne.n	8006276 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006256:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	b29a      	uxth	r2, r3
 8006266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006268:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	@ 0x28
 8006274:	e024      	b.n	80062c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006284:	d007      	beq.n	8006296 <UART_Receive_IT+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10a      	bne.n	80062a4 <UART_Receive_IT+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d106      	bne.n	80062a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	e008      	b.n	80062b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4619      	mov	r1, r3
 80062ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d15d      	bne.n	8006390 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0220 	bic.w	r2, r2, #32
 80062e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006316:	2b01      	cmp	r3, #1
 8006318:	d135      	bne.n	8006386 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	330c      	adds	r3, #12
 8006326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	613b      	str	r3, [r7, #16]
   return(result);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	330c      	adds	r3, #12
 800633e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006340:	623a      	str	r2, [r7, #32]
 8006342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	69f9      	ldr	r1, [r7, #28]
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	61bb      	str	r3, [r7, #24]
   return(result);
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e5      	bne.n	8006320 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b10      	cmp	r3, #16
 8006360:	d10a      	bne.n	8006378 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff fe0e 	bl	8005fa0 <HAL_UARTEx_RxEventCallback>
 8006384:	e002      	b.n	800638c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7ff fdf6 	bl	8005f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	e002      	b.n	8006396 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e000      	b.n	8006396 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3730      	adds	r7, #48	@ 0x30
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a4:	b0c0      	sub	sp, #256	@ 0x100
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063bc:	68d9      	ldr	r1, [r3, #12]
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	ea40 0301 	orr.w	r3, r0, r1
 80063c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	431a      	orrs	r2, r3
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80063f8:	f021 010c 	bic.w	r1, r1, #12
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006406:	430b      	orrs	r3, r1
 8006408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641a:	6999      	ldr	r1, [r3, #24]
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	ea40 0301 	orr.w	r3, r0, r1
 8006426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b8f      	ldr	r3, [pc, #572]	@ (800666c <UART_SetConfig+0x2cc>)
 8006430:	429a      	cmp	r2, r3
 8006432:	d005      	beq.n	8006440 <UART_SetConfig+0xa0>
 8006434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b8d      	ldr	r3, [pc, #564]	@ (8006670 <UART_SetConfig+0x2d0>)
 800643c:	429a      	cmp	r2, r3
 800643e:	d104      	bne.n	800644a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006440:	f7fe fb6a 	bl	8004b18 <HAL_RCC_GetPCLK2Freq>
 8006444:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006448:	e003      	b.n	8006452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644a:	f7fe fb51 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 800644e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800645c:	f040 810c 	bne.w	8006678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006464:	2200      	movs	r2, #0
 8006466:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800646a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800646e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	1891      	adds	r1, r2, r2
 8006478:	65b9      	str	r1, [r7, #88]	@ 0x58
 800647a:	415b      	adcs	r3, r3
 800647c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800647e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006482:	4621      	mov	r1, r4
 8006484:	eb12 0801 	adds.w	r8, r2, r1
 8006488:	4629      	mov	r1, r5
 800648a:	eb43 0901 	adc.w	r9, r3, r1
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800649a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800649e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064a2:	4690      	mov	r8, r2
 80064a4:	4699      	mov	r9, r3
 80064a6:	4623      	mov	r3, r4
 80064a8:	eb18 0303 	adds.w	r3, r8, r3
 80064ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064b0:	462b      	mov	r3, r5
 80064b2:	eb49 0303 	adc.w	r3, r9, r3
 80064b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064ce:	460b      	mov	r3, r1
 80064d0:	18db      	adds	r3, r3, r3
 80064d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064d4:	4613      	mov	r3, r2
 80064d6:	eb42 0303 	adc.w	r3, r2, r3
 80064da:	657b      	str	r3, [r7, #84]	@ 0x54
 80064dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064e4:	f7fa f9d2 	bl	800088c <__aeabi_uldivmod>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4b61      	ldr	r3, [pc, #388]	@ (8006674 <UART_SetConfig+0x2d4>)
 80064ee:	fba3 2302 	umull	r2, r3, r3, r2
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	011c      	lsls	r4, r3, #4
 80064f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006500:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006508:	4642      	mov	r2, r8
 800650a:	464b      	mov	r3, r9
 800650c:	1891      	adds	r1, r2, r2
 800650e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006510:	415b      	adcs	r3, r3
 8006512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006518:	4641      	mov	r1, r8
 800651a:	eb12 0a01 	adds.w	sl, r2, r1
 800651e:	4649      	mov	r1, r9
 8006520:	eb43 0b01 	adc.w	fp, r3, r1
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006538:	4692      	mov	sl, r2
 800653a:	469b      	mov	fp, r3
 800653c:	4643      	mov	r3, r8
 800653e:	eb1a 0303 	adds.w	r3, sl, r3
 8006542:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006546:	464b      	mov	r3, r9
 8006548:	eb4b 0303 	adc.w	r3, fp, r3
 800654c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006564:	460b      	mov	r3, r1
 8006566:	18db      	adds	r3, r3, r3
 8006568:	643b      	str	r3, [r7, #64]	@ 0x40
 800656a:	4613      	mov	r3, r2
 800656c:	eb42 0303 	adc.w	r3, r2, r3
 8006570:	647b      	str	r3, [r7, #68]	@ 0x44
 8006572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800657a:	f7fa f987 	bl	800088c <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4611      	mov	r1, r2
 8006584:	4b3b      	ldr	r3, [pc, #236]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006586:	fba3 2301 	umull	r2, r3, r3, r1
 800658a:	095b      	lsrs	r3, r3, #5
 800658c:	2264      	movs	r2, #100	@ 0x64
 800658e:	fb02 f303 	mul.w	r3, r2, r3
 8006592:	1acb      	subs	r3, r1, r3
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800659a:	4b36      	ldr	r3, [pc, #216]	@ (8006674 <UART_SetConfig+0x2d4>)
 800659c:	fba3 2302 	umull	r2, r3, r3, r2
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065a8:	441c      	add	r4, r3
 80065aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	1891      	adds	r1, r2, r2
 80065c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065c4:	415b      	adcs	r3, r3
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065cc:	4641      	mov	r1, r8
 80065ce:	1851      	adds	r1, r2, r1
 80065d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065d2:	4649      	mov	r1, r9
 80065d4:	414b      	adcs	r3, r1
 80065d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065e4:	4659      	mov	r1, fp
 80065e6:	00cb      	lsls	r3, r1, #3
 80065e8:	4651      	mov	r1, sl
 80065ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ee:	4651      	mov	r1, sl
 80065f0:	00ca      	lsls	r2, r1, #3
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	4642      	mov	r2, r8
 80065fa:	189b      	adds	r3, r3, r2
 80065fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006600:	464b      	mov	r3, r9
 8006602:	460a      	mov	r2, r1
 8006604:	eb42 0303 	adc.w	r3, r2, r3
 8006608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006618:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800661c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006620:	460b      	mov	r3, r1
 8006622:	18db      	adds	r3, r3, r3
 8006624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006626:	4613      	mov	r3, r2
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800662e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006636:	f7fa f929 	bl	800088c <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4b0d      	ldr	r3, [pc, #52]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006640:	fba3 1302 	umull	r1, r3, r3, r2
 8006644:	095b      	lsrs	r3, r3, #5
 8006646:	2164      	movs	r1, #100	@ 0x64
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	3332      	adds	r3, #50	@ 0x32
 8006652:	4a08      	ldr	r2, [pc, #32]	@ (8006674 <UART_SetConfig+0x2d4>)
 8006654:	fba2 2303 	umull	r2, r3, r2, r3
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f003 0207 	and.w	r2, r3, #7
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4422      	add	r2, r4
 8006666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006668:	e106      	b.n	8006878 <UART_SetConfig+0x4d8>
 800666a:	bf00      	nop
 800666c:	40011000 	.word	0x40011000
 8006670:	40011400 	.word	0x40011400
 8006674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667c:	2200      	movs	r2, #0
 800667e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006682:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800668a:	4642      	mov	r2, r8
 800668c:	464b      	mov	r3, r9
 800668e:	1891      	adds	r1, r2, r2
 8006690:	6239      	str	r1, [r7, #32]
 8006692:	415b      	adcs	r3, r3
 8006694:	627b      	str	r3, [r7, #36]	@ 0x24
 8006696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800669a:	4641      	mov	r1, r8
 800669c:	1854      	adds	r4, r2, r1
 800669e:	4649      	mov	r1, r9
 80066a0:	eb43 0501 	adc.w	r5, r3, r1
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	00eb      	lsls	r3, r5, #3
 80066ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066b2:	00e2      	lsls	r2, r4, #3
 80066b4:	4614      	mov	r4, r2
 80066b6:	461d      	mov	r5, r3
 80066b8:	4643      	mov	r3, r8
 80066ba:	18e3      	adds	r3, r4, r3
 80066bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066c0:	464b      	mov	r3, r9
 80066c2:	eb45 0303 	adc.w	r3, r5, r3
 80066c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066e6:	4629      	mov	r1, r5
 80066e8:	008b      	lsls	r3, r1, #2
 80066ea:	4621      	mov	r1, r4
 80066ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f0:	4621      	mov	r1, r4
 80066f2:	008a      	lsls	r2, r1, #2
 80066f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80066f8:	f7fa f8c8 	bl	800088c <__aeabi_uldivmod>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4b60      	ldr	r3, [pc, #384]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006702:	fba3 2302 	umull	r2, r3, r3, r2
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	011c      	lsls	r4, r3, #4
 800670a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800670e:	2200      	movs	r2, #0
 8006710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006714:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	1891      	adds	r1, r2, r2
 8006722:	61b9      	str	r1, [r7, #24]
 8006724:	415b      	adcs	r3, r3
 8006726:	61fb      	str	r3, [r7, #28]
 8006728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800672c:	4641      	mov	r1, r8
 800672e:	1851      	adds	r1, r2, r1
 8006730:	6139      	str	r1, [r7, #16]
 8006732:	4649      	mov	r1, r9
 8006734:	414b      	adcs	r3, r1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	f04f 0200 	mov.w	r2, #0
 800673c:	f04f 0300 	mov.w	r3, #0
 8006740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006744:	4659      	mov	r1, fp
 8006746:	00cb      	lsls	r3, r1, #3
 8006748:	4651      	mov	r1, sl
 800674a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800674e:	4651      	mov	r1, sl
 8006750:	00ca      	lsls	r2, r1, #3
 8006752:	4610      	mov	r0, r2
 8006754:	4619      	mov	r1, r3
 8006756:	4603      	mov	r3, r0
 8006758:	4642      	mov	r2, r8
 800675a:	189b      	adds	r3, r3, r2
 800675c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006760:	464b      	mov	r3, r9
 8006762:	460a      	mov	r2, r1
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800676c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006776:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006784:	4649      	mov	r1, r9
 8006786:	008b      	lsls	r3, r1, #2
 8006788:	4641      	mov	r1, r8
 800678a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800678e:	4641      	mov	r1, r8
 8006790:	008a      	lsls	r2, r1, #2
 8006792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006796:	f7fa f879 	bl	800088c <__aeabi_uldivmod>
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	4b38      	ldr	r3, [pc, #224]	@ (8006884 <UART_SetConfig+0x4e4>)
 80067a2:	fba3 2301 	umull	r2, r3, r3, r1
 80067a6:	095b      	lsrs	r3, r3, #5
 80067a8:	2264      	movs	r2, #100	@ 0x64
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	1acb      	subs	r3, r1, r3
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	3332      	adds	r3, #50	@ 0x32
 80067b4:	4a33      	ldr	r2, [pc, #204]	@ (8006884 <UART_SetConfig+0x4e4>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	095b      	lsrs	r3, r3, #5
 80067bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067c0:	441c      	add	r4, r3
 80067c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067c6:	2200      	movs	r2, #0
 80067c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80067ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80067cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067d0:	4642      	mov	r2, r8
 80067d2:	464b      	mov	r3, r9
 80067d4:	1891      	adds	r1, r2, r2
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	415b      	adcs	r3, r3
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067e0:	4641      	mov	r1, r8
 80067e2:	1851      	adds	r1, r2, r1
 80067e4:	6039      	str	r1, [r7, #0]
 80067e6:	4649      	mov	r1, r9
 80067e8:	414b      	adcs	r3, r1
 80067ea:	607b      	str	r3, [r7, #4]
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	f04f 0300 	mov.w	r3, #0
 80067f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067f8:	4659      	mov	r1, fp
 80067fa:	00cb      	lsls	r3, r1, #3
 80067fc:	4651      	mov	r1, sl
 80067fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006802:	4651      	mov	r1, sl
 8006804:	00ca      	lsls	r2, r1, #3
 8006806:	4610      	mov	r0, r2
 8006808:	4619      	mov	r1, r3
 800680a:	4603      	mov	r3, r0
 800680c:	4642      	mov	r2, r8
 800680e:	189b      	adds	r3, r3, r2
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006812:	464b      	mov	r3, r9
 8006814:	460a      	mov	r2, r1
 8006816:	eb42 0303 	adc.w	r3, r2, r3
 800681a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	663b      	str	r3, [r7, #96]	@ 0x60
 8006826:	667a      	str	r2, [r7, #100]	@ 0x64
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006834:	4649      	mov	r1, r9
 8006836:	008b      	lsls	r3, r1, #2
 8006838:	4641      	mov	r1, r8
 800683a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800683e:	4641      	mov	r1, r8
 8006840:	008a      	lsls	r2, r1, #2
 8006842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006846:	f7fa f821 	bl	800088c <__aeabi_uldivmod>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006850:	fba3 1302 	umull	r1, r3, r3, r2
 8006854:	095b      	lsrs	r3, r3, #5
 8006856:	2164      	movs	r1, #100	@ 0x64
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	3332      	adds	r3, #50	@ 0x32
 8006862:	4a08      	ldr	r2, [pc, #32]	@ (8006884 <UART_SetConfig+0x4e4>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	f003 020f 	and.w	r2, r3, #15
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4422      	add	r2, r4
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800687e:	46bd      	mov	sp, r7
 8006880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006884:	51eb851f 	.word	0x51eb851f

08006888 <siprintf>:
 8006888:	b40e      	push	{r1, r2, r3}
 800688a:	b510      	push	{r4, lr}
 800688c:	b09d      	sub	sp, #116	@ 0x74
 800688e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006890:	9002      	str	r0, [sp, #8]
 8006892:	9006      	str	r0, [sp, #24]
 8006894:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006898:	480a      	ldr	r0, [pc, #40]	@ (80068c4 <siprintf+0x3c>)
 800689a:	9107      	str	r1, [sp, #28]
 800689c:	9104      	str	r1, [sp, #16]
 800689e:	490a      	ldr	r1, [pc, #40]	@ (80068c8 <siprintf+0x40>)
 80068a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a4:	9105      	str	r1, [sp, #20]
 80068a6:	2400      	movs	r4, #0
 80068a8:	a902      	add	r1, sp, #8
 80068aa:	6800      	ldr	r0, [r0, #0]
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068b0:	f000 f994 	bl	8006bdc <_svfiprintf_r>
 80068b4:	9b02      	ldr	r3, [sp, #8]
 80068b6:	701c      	strb	r4, [r3, #0]
 80068b8:	b01d      	add	sp, #116	@ 0x74
 80068ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068be:	b003      	add	sp, #12
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	20000014 	.word	0x20000014
 80068c8:	ffff0208 	.word	0xffff0208

080068cc <memset>:
 80068cc:	4402      	add	r2, r0
 80068ce:	4603      	mov	r3, r0
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d100      	bne.n	80068d6 <memset+0xa>
 80068d4:	4770      	bx	lr
 80068d6:	f803 1b01 	strb.w	r1, [r3], #1
 80068da:	e7f9      	b.n	80068d0 <memset+0x4>

080068dc <__errno>:
 80068dc:	4b01      	ldr	r3, [pc, #4]	@ (80068e4 <__errno+0x8>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000014 	.word	0x20000014

080068e8 <__libc_init_array>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006920 <__libc_init_array+0x38>)
 80068ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006924 <__libc_init_array+0x3c>)
 80068ee:	1b64      	subs	r4, r4, r5
 80068f0:	10a4      	asrs	r4, r4, #2
 80068f2:	2600      	movs	r6, #0
 80068f4:	42a6      	cmp	r6, r4
 80068f6:	d109      	bne.n	800690c <__libc_init_array+0x24>
 80068f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006928 <__libc_init_array+0x40>)
 80068fa:	4c0c      	ldr	r4, [pc, #48]	@ (800692c <__libc_init_array+0x44>)
 80068fc:	f000 fc64 	bl	80071c8 <_init>
 8006900:	1b64      	subs	r4, r4, r5
 8006902:	10a4      	asrs	r4, r4, #2
 8006904:	2600      	movs	r6, #0
 8006906:	42a6      	cmp	r6, r4
 8006908:	d105      	bne.n	8006916 <__libc_init_array+0x2e>
 800690a:	bd70      	pop	{r4, r5, r6, pc}
 800690c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006910:	4798      	blx	r3
 8006912:	3601      	adds	r6, #1
 8006914:	e7ee      	b.n	80068f4 <__libc_init_array+0xc>
 8006916:	f855 3b04 	ldr.w	r3, [r5], #4
 800691a:	4798      	blx	r3
 800691c:	3601      	adds	r6, #1
 800691e:	e7f2      	b.n	8006906 <__libc_init_array+0x1e>
 8006920:	08007290 	.word	0x08007290
 8006924:	08007290 	.word	0x08007290
 8006928:	08007290 	.word	0x08007290
 800692c:	08007294 	.word	0x08007294

08006930 <__retarget_lock_acquire_recursive>:
 8006930:	4770      	bx	lr

08006932 <__retarget_lock_release_recursive>:
 8006932:	4770      	bx	lr

08006934 <_free_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4605      	mov	r5, r0
 8006938:	2900      	cmp	r1, #0
 800693a:	d041      	beq.n	80069c0 <_free_r+0x8c>
 800693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006940:	1f0c      	subs	r4, r1, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfb8      	it	lt
 8006946:	18e4      	addlt	r4, r4, r3
 8006948:	f000 f8e0 	bl	8006b0c <__malloc_lock>
 800694c:	4a1d      	ldr	r2, [pc, #116]	@ (80069c4 <_free_r+0x90>)
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	b933      	cbnz	r3, 8006960 <_free_r+0x2c>
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	6014      	str	r4, [r2, #0]
 8006956:	4628      	mov	r0, r5
 8006958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695c:	f000 b8dc 	b.w	8006b18 <__malloc_unlock>
 8006960:	42a3      	cmp	r3, r4
 8006962:	d908      	bls.n	8006976 <_free_r+0x42>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	1821      	adds	r1, r4, r0
 8006968:	428b      	cmp	r3, r1
 800696a:	bf01      	itttt	eq
 800696c:	6819      	ldreq	r1, [r3, #0]
 800696e:	685b      	ldreq	r3, [r3, #4]
 8006970:	1809      	addeq	r1, r1, r0
 8006972:	6021      	streq	r1, [r4, #0]
 8006974:	e7ed      	b.n	8006952 <_free_r+0x1e>
 8006976:	461a      	mov	r2, r3
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	b10b      	cbz	r3, 8006980 <_free_r+0x4c>
 800697c:	42a3      	cmp	r3, r4
 800697e:	d9fa      	bls.n	8006976 <_free_r+0x42>
 8006980:	6811      	ldr	r1, [r2, #0]
 8006982:	1850      	adds	r0, r2, r1
 8006984:	42a0      	cmp	r0, r4
 8006986:	d10b      	bne.n	80069a0 <_free_r+0x6c>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	4401      	add	r1, r0
 800698c:	1850      	adds	r0, r2, r1
 800698e:	4283      	cmp	r3, r0
 8006990:	6011      	str	r1, [r2, #0]
 8006992:	d1e0      	bne.n	8006956 <_free_r+0x22>
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	6053      	str	r3, [r2, #4]
 800699a:	4408      	add	r0, r1
 800699c:	6010      	str	r0, [r2, #0]
 800699e:	e7da      	b.n	8006956 <_free_r+0x22>
 80069a0:	d902      	bls.n	80069a8 <_free_r+0x74>
 80069a2:	230c      	movs	r3, #12
 80069a4:	602b      	str	r3, [r5, #0]
 80069a6:	e7d6      	b.n	8006956 <_free_r+0x22>
 80069a8:	6820      	ldr	r0, [r4, #0]
 80069aa:	1821      	adds	r1, r4, r0
 80069ac:	428b      	cmp	r3, r1
 80069ae:	bf04      	itt	eq
 80069b0:	6819      	ldreq	r1, [r3, #0]
 80069b2:	685b      	ldreq	r3, [r3, #4]
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	bf04      	itt	eq
 80069b8:	1809      	addeq	r1, r1, r0
 80069ba:	6021      	streq	r1, [r4, #0]
 80069bc:	6054      	str	r4, [r2, #4]
 80069be:	e7ca      	b.n	8006956 <_free_r+0x22>
 80069c0:	bd38      	pop	{r3, r4, r5, pc}
 80069c2:	bf00      	nop
 80069c4:	20000400 	.word	0x20000400

080069c8 <sbrk_aligned>:
 80069c8:	b570      	push	{r4, r5, r6, lr}
 80069ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006a08 <sbrk_aligned+0x40>)
 80069cc:	460c      	mov	r4, r1
 80069ce:	6831      	ldr	r1, [r6, #0]
 80069d0:	4605      	mov	r5, r0
 80069d2:	b911      	cbnz	r1, 80069da <sbrk_aligned+0x12>
 80069d4:	f000 fba4 	bl	8007120 <_sbrk_r>
 80069d8:	6030      	str	r0, [r6, #0]
 80069da:	4621      	mov	r1, r4
 80069dc:	4628      	mov	r0, r5
 80069de:	f000 fb9f 	bl	8007120 <_sbrk_r>
 80069e2:	1c43      	adds	r3, r0, #1
 80069e4:	d103      	bne.n	80069ee <sbrk_aligned+0x26>
 80069e6:	f04f 34ff 	mov.w	r4, #4294967295
 80069ea:	4620      	mov	r0, r4
 80069ec:	bd70      	pop	{r4, r5, r6, pc}
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	f024 0403 	bic.w	r4, r4, #3
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d0f8      	beq.n	80069ea <sbrk_aligned+0x22>
 80069f8:	1a21      	subs	r1, r4, r0
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 fb90 	bl	8007120 <_sbrk_r>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d1f2      	bne.n	80069ea <sbrk_aligned+0x22>
 8006a04:	e7ef      	b.n	80069e6 <sbrk_aligned+0x1e>
 8006a06:	bf00      	nop
 8006a08:	200003fc 	.word	0x200003fc

08006a0c <_malloc_r>:
 8006a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	1ccd      	adds	r5, r1, #3
 8006a12:	f025 0503 	bic.w	r5, r5, #3
 8006a16:	3508      	adds	r5, #8
 8006a18:	2d0c      	cmp	r5, #12
 8006a1a:	bf38      	it	cc
 8006a1c:	250c      	movcc	r5, #12
 8006a1e:	2d00      	cmp	r5, #0
 8006a20:	4606      	mov	r6, r0
 8006a22:	db01      	blt.n	8006a28 <_malloc_r+0x1c>
 8006a24:	42a9      	cmp	r1, r5
 8006a26:	d904      	bls.n	8006a32 <_malloc_r+0x26>
 8006a28:	230c      	movs	r3, #12
 8006a2a:	6033      	str	r3, [r6, #0]
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b08 <_malloc_r+0xfc>
 8006a36:	f000 f869 	bl	8006b0c <__malloc_lock>
 8006a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3e:	461c      	mov	r4, r3
 8006a40:	bb44      	cbnz	r4, 8006a94 <_malloc_r+0x88>
 8006a42:	4629      	mov	r1, r5
 8006a44:	4630      	mov	r0, r6
 8006a46:	f7ff ffbf 	bl	80069c8 <sbrk_aligned>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	d158      	bne.n	8006b02 <_malloc_r+0xf6>
 8006a50:	f8d8 4000 	ldr.w	r4, [r8]
 8006a54:	4627      	mov	r7, r4
 8006a56:	2f00      	cmp	r7, #0
 8006a58:	d143      	bne.n	8006ae2 <_malloc_r+0xd6>
 8006a5a:	2c00      	cmp	r4, #0
 8006a5c:	d04b      	beq.n	8006af6 <_malloc_r+0xea>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4639      	mov	r1, r7
 8006a62:	4630      	mov	r0, r6
 8006a64:	eb04 0903 	add.w	r9, r4, r3
 8006a68:	f000 fb5a 	bl	8007120 <_sbrk_r>
 8006a6c:	4581      	cmp	r9, r0
 8006a6e:	d142      	bne.n	8006af6 <_malloc_r+0xea>
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	1a6d      	subs	r5, r5, r1
 8006a74:	4629      	mov	r1, r5
 8006a76:	4630      	mov	r0, r6
 8006a78:	f7ff ffa6 	bl	80069c8 <sbrk_aligned>
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	d03a      	beq.n	8006af6 <_malloc_r+0xea>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	442b      	add	r3, r5
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	f8d8 3000 	ldr.w	r3, [r8]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	bb62      	cbnz	r2, 8006ae8 <_malloc_r+0xdc>
 8006a8e:	f8c8 7000 	str.w	r7, [r8]
 8006a92:	e00f      	b.n	8006ab4 <_malloc_r+0xa8>
 8006a94:	6822      	ldr	r2, [r4, #0]
 8006a96:	1b52      	subs	r2, r2, r5
 8006a98:	d420      	bmi.n	8006adc <_malloc_r+0xd0>
 8006a9a:	2a0b      	cmp	r2, #11
 8006a9c:	d917      	bls.n	8006ace <_malloc_r+0xc2>
 8006a9e:	1961      	adds	r1, r4, r5
 8006aa0:	42a3      	cmp	r3, r4
 8006aa2:	6025      	str	r5, [r4, #0]
 8006aa4:	bf18      	it	ne
 8006aa6:	6059      	strne	r1, [r3, #4]
 8006aa8:	6863      	ldr	r3, [r4, #4]
 8006aaa:	bf08      	it	eq
 8006aac:	f8c8 1000 	streq.w	r1, [r8]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 f82f 	bl	8006b18 <__malloc_unlock>
 8006aba:	f104 000b 	add.w	r0, r4, #11
 8006abe:	1d23      	adds	r3, r4, #4
 8006ac0:	f020 0007 	bic.w	r0, r0, #7
 8006ac4:	1ac2      	subs	r2, r0, r3
 8006ac6:	bf1c      	itt	ne
 8006ac8:	1a1b      	subne	r3, r3, r0
 8006aca:	50a3      	strne	r3, [r4, r2]
 8006acc:	e7af      	b.n	8006a2e <_malloc_r+0x22>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	bf0c      	ite	eq
 8006ad4:	f8c8 2000 	streq.w	r2, [r8]
 8006ad8:	605a      	strne	r2, [r3, #4]
 8006ada:	e7eb      	b.n	8006ab4 <_malloc_r+0xa8>
 8006adc:	4623      	mov	r3, r4
 8006ade:	6864      	ldr	r4, [r4, #4]
 8006ae0:	e7ae      	b.n	8006a40 <_malloc_r+0x34>
 8006ae2:	463c      	mov	r4, r7
 8006ae4:	687f      	ldr	r7, [r7, #4]
 8006ae6:	e7b6      	b.n	8006a56 <_malloc_r+0x4a>
 8006ae8:	461a      	mov	r2, r3
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	42a3      	cmp	r3, r4
 8006aee:	d1fb      	bne.n	8006ae8 <_malloc_r+0xdc>
 8006af0:	2300      	movs	r3, #0
 8006af2:	6053      	str	r3, [r2, #4]
 8006af4:	e7de      	b.n	8006ab4 <_malloc_r+0xa8>
 8006af6:	230c      	movs	r3, #12
 8006af8:	6033      	str	r3, [r6, #0]
 8006afa:	4630      	mov	r0, r6
 8006afc:	f000 f80c 	bl	8006b18 <__malloc_unlock>
 8006b00:	e794      	b.n	8006a2c <_malloc_r+0x20>
 8006b02:	6005      	str	r5, [r0, #0]
 8006b04:	e7d6      	b.n	8006ab4 <_malloc_r+0xa8>
 8006b06:	bf00      	nop
 8006b08:	20000400 	.word	0x20000400

08006b0c <__malloc_lock>:
 8006b0c:	4801      	ldr	r0, [pc, #4]	@ (8006b14 <__malloc_lock+0x8>)
 8006b0e:	f7ff bf0f 	b.w	8006930 <__retarget_lock_acquire_recursive>
 8006b12:	bf00      	nop
 8006b14:	200003f8 	.word	0x200003f8

08006b18 <__malloc_unlock>:
 8006b18:	4801      	ldr	r0, [pc, #4]	@ (8006b20 <__malloc_unlock+0x8>)
 8006b1a:	f7ff bf0a 	b.w	8006932 <__retarget_lock_release_recursive>
 8006b1e:	bf00      	nop
 8006b20:	200003f8 	.word	0x200003f8

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	461f      	mov	r7, r3
 8006b2c:	42be      	cmp	r6, r7
 8006b2e:	680b      	ldr	r3, [r1, #0]
 8006b30:	4682      	mov	sl, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	4690      	mov	r8, r2
 8006b36:	d82d      	bhi.n	8006b94 <__ssputs_r+0x70>
 8006b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b40:	d026      	beq.n	8006b90 <__ssputs_r+0x6c>
 8006b42:	6965      	ldr	r5, [r4, #20]
 8006b44:	6909      	ldr	r1, [r1, #16]
 8006b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4a:	eba3 0901 	sub.w	r9, r3, r1
 8006b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b52:	1c7b      	adds	r3, r7, #1
 8006b54:	444b      	add	r3, r9
 8006b56:	106d      	asrs	r5, r5, #1
 8006b58:	429d      	cmp	r5, r3
 8006b5a:	bf38      	it	cc
 8006b5c:	461d      	movcc	r5, r3
 8006b5e:	0553      	lsls	r3, r2, #21
 8006b60:	d527      	bpl.n	8006bb2 <__ssputs_r+0x8e>
 8006b62:	4629      	mov	r1, r5
 8006b64:	f7ff ff52 	bl	8006a0c <_malloc_r>
 8006b68:	4606      	mov	r6, r0
 8006b6a:	b360      	cbz	r0, 8006bc6 <__ssputs_r+0xa2>
 8006b6c:	6921      	ldr	r1, [r4, #16]
 8006b6e:	464a      	mov	r2, r9
 8006b70:	f000 fae6 	bl	8007140 <memcpy>
 8006b74:	89a3      	ldrh	r3, [r4, #12]
 8006b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7e:	81a3      	strh	r3, [r4, #12]
 8006b80:	6126      	str	r6, [r4, #16]
 8006b82:	6165      	str	r5, [r4, #20]
 8006b84:	444e      	add	r6, r9
 8006b86:	eba5 0509 	sub.w	r5, r5, r9
 8006b8a:	6026      	str	r6, [r4, #0]
 8006b8c:	60a5      	str	r5, [r4, #8]
 8006b8e:	463e      	mov	r6, r7
 8006b90:	42be      	cmp	r6, r7
 8006b92:	d900      	bls.n	8006b96 <__ssputs_r+0x72>
 8006b94:	463e      	mov	r6, r7
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	f000 faa6 	bl	80070ec <memmove>
 8006ba0:	68a3      	ldr	r3, [r4, #8]
 8006ba2:	1b9b      	subs	r3, r3, r6
 8006ba4:	60a3      	str	r3, [r4, #8]
 8006ba6:	6823      	ldr	r3, [r4, #0]
 8006ba8:	4433      	add	r3, r6
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	2000      	movs	r0, #0
 8006bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	f000 fad2 	bl	800715c <_realloc_r>
 8006bb8:	4606      	mov	r6, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d1e0      	bne.n	8006b80 <__ssputs_r+0x5c>
 8006bbe:	6921      	ldr	r1, [r4, #16]
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	f7ff feb7 	bl	8006934 <_free_r>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	f8ca 3000 	str.w	r3, [sl]
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e7e9      	b.n	8006bae <__ssputs_r+0x8a>
	...

08006bdc <_svfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4698      	mov	r8, r3
 8006be2:	898b      	ldrh	r3, [r1, #12]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	b09d      	sub	sp, #116	@ 0x74
 8006be8:	4607      	mov	r7, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	d510      	bpl.n	8006c12 <_svfiprintf_r+0x36>
 8006bf0:	690b      	ldr	r3, [r1, #16]
 8006bf2:	b973      	cbnz	r3, 8006c12 <_svfiprintf_r+0x36>
 8006bf4:	2140      	movs	r1, #64	@ 0x40
 8006bf6:	f7ff ff09 	bl	8006a0c <_malloc_r>
 8006bfa:	6028      	str	r0, [r5, #0]
 8006bfc:	6128      	str	r0, [r5, #16]
 8006bfe:	b930      	cbnz	r0, 8006c0e <_svfiprintf_r+0x32>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	b01d      	add	sp, #116	@ 0x74
 8006c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0e:	2340      	movs	r3, #64	@ 0x40
 8006c10:	616b      	str	r3, [r5, #20]
 8006c12:	2300      	movs	r3, #0
 8006c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c16:	2320      	movs	r3, #32
 8006c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c20:	2330      	movs	r3, #48	@ 0x30
 8006c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006dc0 <_svfiprintf_r+0x1e4>
 8006c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c2a:	f04f 0901 	mov.w	r9, #1
 8006c2e:	4623      	mov	r3, r4
 8006c30:	469a      	mov	sl, r3
 8006c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c36:	b10a      	cbz	r2, 8006c3c <_svfiprintf_r+0x60>
 8006c38:	2a25      	cmp	r2, #37	@ 0x25
 8006c3a:	d1f9      	bne.n	8006c30 <_svfiprintf_r+0x54>
 8006c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c40:	d00b      	beq.n	8006c5a <_svfiprintf_r+0x7e>
 8006c42:	465b      	mov	r3, fp
 8006c44:	4622      	mov	r2, r4
 8006c46:	4629      	mov	r1, r5
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f7ff ff6b 	bl	8006b24 <__ssputs_r>
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f000 80a7 	beq.w	8006da2 <_svfiprintf_r+0x1c6>
 8006c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c56:	445a      	add	r2, fp
 8006c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 809f 	beq.w	8006da2 <_svfiprintf_r+0x1c6>
 8006c64:	2300      	movs	r3, #0
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6e:	f10a 0a01 	add.w	sl, sl, #1
 8006c72:	9304      	str	r3, [sp, #16]
 8006c74:	9307      	str	r3, [sp, #28]
 8006c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c7c:	4654      	mov	r4, sl
 8006c7e:	2205      	movs	r2, #5
 8006c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c84:	484e      	ldr	r0, [pc, #312]	@ (8006dc0 <_svfiprintf_r+0x1e4>)
 8006c86:	f7f9 faab 	bl	80001e0 <memchr>
 8006c8a:	9a04      	ldr	r2, [sp, #16]
 8006c8c:	b9d8      	cbnz	r0, 8006cc6 <_svfiprintf_r+0xea>
 8006c8e:	06d0      	lsls	r0, r2, #27
 8006c90:	bf44      	itt	mi
 8006c92:	2320      	movmi	r3, #32
 8006c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c98:	0711      	lsls	r1, r2, #28
 8006c9a:	bf44      	itt	mi
 8006c9c:	232b      	movmi	r3, #43	@ 0x2b
 8006c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ca8:	d015      	beq.n	8006cd6 <_svfiprintf_r+0xfa>
 8006caa:	9a07      	ldr	r2, [sp, #28]
 8006cac:	4654      	mov	r4, sl
 8006cae:	2000      	movs	r0, #0
 8006cb0:	f04f 0c0a 	mov.w	ip, #10
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cba:	3b30      	subs	r3, #48	@ 0x30
 8006cbc:	2b09      	cmp	r3, #9
 8006cbe:	d94b      	bls.n	8006d58 <_svfiprintf_r+0x17c>
 8006cc0:	b1b0      	cbz	r0, 8006cf0 <_svfiprintf_r+0x114>
 8006cc2:	9207      	str	r2, [sp, #28]
 8006cc4:	e014      	b.n	8006cf0 <_svfiprintf_r+0x114>
 8006cc6:	eba0 0308 	sub.w	r3, r0, r8
 8006cca:	fa09 f303 	lsl.w	r3, r9, r3
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	46a2      	mov	sl, r4
 8006cd4:	e7d2      	b.n	8006c7c <_svfiprintf_r+0xa0>
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	1d19      	adds	r1, r3, #4
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	9103      	str	r1, [sp, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bfbb      	ittet	lt
 8006ce2:	425b      	neglt	r3, r3
 8006ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce8:	9307      	strge	r3, [sp, #28]
 8006cea:	9307      	strlt	r3, [sp, #28]
 8006cec:	bfb8      	it	lt
 8006cee:	9204      	strlt	r2, [sp, #16]
 8006cf0:	7823      	ldrb	r3, [r4, #0]
 8006cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cf4:	d10a      	bne.n	8006d0c <_svfiprintf_r+0x130>
 8006cf6:	7863      	ldrb	r3, [r4, #1]
 8006cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cfa:	d132      	bne.n	8006d62 <_svfiprintf_r+0x186>
 8006cfc:	9b03      	ldr	r3, [sp, #12]
 8006cfe:	1d1a      	adds	r2, r3, #4
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	9203      	str	r2, [sp, #12]
 8006d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d08:	3402      	adds	r4, #2
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dd0 <_svfiprintf_r+0x1f4>
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	2203      	movs	r2, #3
 8006d14:	4650      	mov	r0, sl
 8006d16:	f7f9 fa63 	bl	80001e0 <memchr>
 8006d1a:	b138      	cbz	r0, 8006d2c <_svfiprintf_r+0x150>
 8006d1c:	9b04      	ldr	r3, [sp, #16]
 8006d1e:	eba0 000a 	sub.w	r0, r0, sl
 8006d22:	2240      	movs	r2, #64	@ 0x40
 8006d24:	4082      	lsls	r2, r0
 8006d26:	4313      	orrs	r3, r2
 8006d28:	3401      	adds	r4, #1
 8006d2a:	9304      	str	r3, [sp, #16]
 8006d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d30:	4824      	ldr	r0, [pc, #144]	@ (8006dc4 <_svfiprintf_r+0x1e8>)
 8006d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d36:	2206      	movs	r2, #6
 8006d38:	f7f9 fa52 	bl	80001e0 <memchr>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	d036      	beq.n	8006dae <_svfiprintf_r+0x1d2>
 8006d40:	4b21      	ldr	r3, [pc, #132]	@ (8006dc8 <_svfiprintf_r+0x1ec>)
 8006d42:	bb1b      	cbnz	r3, 8006d8c <_svfiprintf_r+0x1b0>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	3307      	adds	r3, #7
 8006d48:	f023 0307 	bic.w	r3, r3, #7
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	9303      	str	r3, [sp, #12]
 8006d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d52:	4433      	add	r3, r6
 8006d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d56:	e76a      	b.n	8006c2e <_svfiprintf_r+0x52>
 8006d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	2001      	movs	r0, #1
 8006d60:	e7a8      	b.n	8006cb4 <_svfiprintf_r+0xd8>
 8006d62:	2300      	movs	r3, #0
 8006d64:	3401      	adds	r4, #1
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f04f 0c0a 	mov.w	ip, #10
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d74:	3a30      	subs	r2, #48	@ 0x30
 8006d76:	2a09      	cmp	r2, #9
 8006d78:	d903      	bls.n	8006d82 <_svfiprintf_r+0x1a6>
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0c6      	beq.n	8006d0c <_svfiprintf_r+0x130>
 8006d7e:	9105      	str	r1, [sp, #20]
 8006d80:	e7c4      	b.n	8006d0c <_svfiprintf_r+0x130>
 8006d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d86:	4604      	mov	r4, r0
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e7f0      	b.n	8006d6e <_svfiprintf_r+0x192>
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4b0e      	ldr	r3, [pc, #56]	@ (8006dcc <_svfiprintf_r+0x1f0>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	4638      	mov	r0, r7
 8006d98:	f3af 8000 	nop.w
 8006d9c:	1c42      	adds	r2, r0, #1
 8006d9e:	4606      	mov	r6, r0
 8006da0:	d1d6      	bne.n	8006d50 <_svfiprintf_r+0x174>
 8006da2:	89ab      	ldrh	r3, [r5, #12]
 8006da4:	065b      	lsls	r3, r3, #25
 8006da6:	f53f af2d 	bmi.w	8006c04 <_svfiprintf_r+0x28>
 8006daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dac:	e72c      	b.n	8006c08 <_svfiprintf_r+0x2c>
 8006dae:	ab03      	add	r3, sp, #12
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	462a      	mov	r2, r5
 8006db4:	4b05      	ldr	r3, [pc, #20]	@ (8006dcc <_svfiprintf_r+0x1f0>)
 8006db6:	a904      	add	r1, sp, #16
 8006db8:	4638      	mov	r0, r7
 8006dba:	f000 f879 	bl	8006eb0 <_printf_i>
 8006dbe:	e7ed      	b.n	8006d9c <_svfiprintf_r+0x1c0>
 8006dc0:	08007254 	.word	0x08007254
 8006dc4:	0800725e 	.word	0x0800725e
 8006dc8:	00000000 	.word	0x00000000
 8006dcc:	08006b25 	.word	0x08006b25
 8006dd0:	0800725a 	.word	0x0800725a

08006dd4 <_printf_common>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	4616      	mov	r6, r2
 8006dda:	4698      	mov	r8, r3
 8006ddc:	688a      	ldr	r2, [r1, #8]
 8006dde:	690b      	ldr	r3, [r1, #16]
 8006de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006de4:	4293      	cmp	r3, r2
 8006de6:	bfb8      	it	lt
 8006de8:	4613      	movlt	r3, r2
 8006dea:	6033      	str	r3, [r6, #0]
 8006dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006df0:	4607      	mov	r7, r0
 8006df2:	460c      	mov	r4, r1
 8006df4:	b10a      	cbz	r2, 8006dfa <_printf_common+0x26>
 8006df6:	3301      	adds	r3, #1
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	0699      	lsls	r1, r3, #26
 8006dfe:	bf42      	ittt	mi
 8006e00:	6833      	ldrmi	r3, [r6, #0]
 8006e02:	3302      	addmi	r3, #2
 8006e04:	6033      	strmi	r3, [r6, #0]
 8006e06:	6825      	ldr	r5, [r4, #0]
 8006e08:	f015 0506 	ands.w	r5, r5, #6
 8006e0c:	d106      	bne.n	8006e1c <_printf_common+0x48>
 8006e0e:	f104 0a19 	add.w	sl, r4, #25
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	6832      	ldr	r2, [r6, #0]
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	42ab      	cmp	r3, r5
 8006e1a:	dc26      	bgt.n	8006e6a <_printf_common+0x96>
 8006e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e20:	6822      	ldr	r2, [r4, #0]
 8006e22:	3b00      	subs	r3, #0
 8006e24:	bf18      	it	ne
 8006e26:	2301      	movne	r3, #1
 8006e28:	0692      	lsls	r2, r2, #26
 8006e2a:	d42b      	bmi.n	8006e84 <_printf_common+0xb0>
 8006e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e30:	4641      	mov	r1, r8
 8006e32:	4638      	mov	r0, r7
 8006e34:	47c8      	blx	r9
 8006e36:	3001      	adds	r0, #1
 8006e38:	d01e      	beq.n	8006e78 <_printf_common+0xa4>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	6922      	ldr	r2, [r4, #16]
 8006e3e:	f003 0306 	and.w	r3, r3, #6
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	bf02      	ittt	eq
 8006e46:	68e5      	ldreq	r5, [r4, #12]
 8006e48:	6833      	ldreq	r3, [r6, #0]
 8006e4a:	1aed      	subeq	r5, r5, r3
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	bf0c      	ite	eq
 8006e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e54:	2500      	movne	r5, #0
 8006e56:	4293      	cmp	r3, r2
 8006e58:	bfc4      	itt	gt
 8006e5a:	1a9b      	subgt	r3, r3, r2
 8006e5c:	18ed      	addgt	r5, r5, r3
 8006e5e:	2600      	movs	r6, #0
 8006e60:	341a      	adds	r4, #26
 8006e62:	42b5      	cmp	r5, r6
 8006e64:	d11a      	bne.n	8006e9c <_printf_common+0xc8>
 8006e66:	2000      	movs	r0, #0
 8006e68:	e008      	b.n	8006e7c <_printf_common+0xa8>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4652      	mov	r2, sl
 8006e6e:	4641      	mov	r1, r8
 8006e70:	4638      	mov	r0, r7
 8006e72:	47c8      	blx	r9
 8006e74:	3001      	adds	r0, #1
 8006e76:	d103      	bne.n	8006e80 <_printf_common+0xac>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e80:	3501      	adds	r5, #1
 8006e82:	e7c6      	b.n	8006e12 <_printf_common+0x3e>
 8006e84:	18e1      	adds	r1, r4, r3
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	2030      	movs	r0, #48	@ 0x30
 8006e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e8e:	4422      	add	r2, r4
 8006e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e98:	3302      	adds	r3, #2
 8006e9a:	e7c7      	b.n	8006e2c <_printf_common+0x58>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c8      	blx	r9
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d0e6      	beq.n	8006e78 <_printf_common+0xa4>
 8006eaa:	3601      	adds	r6, #1
 8006eac:	e7d9      	b.n	8006e62 <_printf_common+0x8e>
	...

08006eb0 <_printf_i>:
 8006eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006eb4:	7e0f      	ldrb	r7, [r1, #24]
 8006eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006eb8:	2f78      	cmp	r7, #120	@ 0x78
 8006eba:	4691      	mov	r9, r2
 8006ebc:	4680      	mov	r8, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	469a      	mov	sl, r3
 8006ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ec6:	d807      	bhi.n	8006ed8 <_printf_i+0x28>
 8006ec8:	2f62      	cmp	r7, #98	@ 0x62
 8006eca:	d80a      	bhi.n	8006ee2 <_printf_i+0x32>
 8006ecc:	2f00      	cmp	r7, #0
 8006ece:	f000 80d1 	beq.w	8007074 <_printf_i+0x1c4>
 8006ed2:	2f58      	cmp	r7, #88	@ 0x58
 8006ed4:	f000 80b8 	beq.w	8007048 <_printf_i+0x198>
 8006ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ee0:	e03a      	b.n	8006f58 <_printf_i+0xa8>
 8006ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ee6:	2b15      	cmp	r3, #21
 8006ee8:	d8f6      	bhi.n	8006ed8 <_printf_i+0x28>
 8006eea:	a101      	add	r1, pc, #4	@ (adr r1, 8006ef0 <_printf_i+0x40>)
 8006eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f5d 	.word	0x08006f5d
 8006ef8:	08006ed9 	.word	0x08006ed9
 8006efc:	08006ed9 	.word	0x08006ed9
 8006f00:	08006ed9 	.word	0x08006ed9
 8006f04:	08006ed9 	.word	0x08006ed9
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	08006ed9 	.word	0x08006ed9
 8006f10:	08006ed9 	.word	0x08006ed9
 8006f14:	08006ed9 	.word	0x08006ed9
 8006f18:	08006ed9 	.word	0x08006ed9
 8006f1c:	0800705b 	.word	0x0800705b
 8006f20:	08006f87 	.word	0x08006f87
 8006f24:	08007015 	.word	0x08007015
 8006f28:	08006ed9 	.word	0x08006ed9
 8006f2c:	08006ed9 	.word	0x08006ed9
 8006f30:	0800707d 	.word	0x0800707d
 8006f34:	08006ed9 	.word	0x08006ed9
 8006f38:	08006f87 	.word	0x08006f87
 8006f3c:	08006ed9 	.word	0x08006ed9
 8006f40:	08006ed9 	.word	0x08006ed9
 8006f44:	0800701d 	.word	0x0800701d
 8006f48:	6833      	ldr	r3, [r6, #0]
 8006f4a:	1d1a      	adds	r2, r3, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6032      	str	r2, [r6, #0]
 8006f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e09c      	b.n	8007096 <_printf_i+0x1e6>
 8006f5c:	6833      	ldr	r3, [r6, #0]
 8006f5e:	6820      	ldr	r0, [r4, #0]
 8006f60:	1d19      	adds	r1, r3, #4
 8006f62:	6031      	str	r1, [r6, #0]
 8006f64:	0606      	lsls	r6, r0, #24
 8006f66:	d501      	bpl.n	8006f6c <_printf_i+0xbc>
 8006f68:	681d      	ldr	r5, [r3, #0]
 8006f6a:	e003      	b.n	8006f74 <_printf_i+0xc4>
 8006f6c:	0645      	lsls	r5, r0, #25
 8006f6e:	d5fb      	bpl.n	8006f68 <_printf_i+0xb8>
 8006f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f74:	2d00      	cmp	r5, #0
 8006f76:	da03      	bge.n	8006f80 <_printf_i+0xd0>
 8006f78:	232d      	movs	r3, #45	@ 0x2d
 8006f7a:	426d      	negs	r5, r5
 8006f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f80:	4858      	ldr	r0, [pc, #352]	@ (80070e4 <_printf_i+0x234>)
 8006f82:	230a      	movs	r3, #10
 8006f84:	e011      	b.n	8006faa <_printf_i+0xfa>
 8006f86:	6821      	ldr	r1, [r4, #0]
 8006f88:	6833      	ldr	r3, [r6, #0]
 8006f8a:	0608      	lsls	r0, r1, #24
 8006f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f90:	d402      	bmi.n	8006f98 <_printf_i+0xe8>
 8006f92:	0649      	lsls	r1, r1, #25
 8006f94:	bf48      	it	mi
 8006f96:	b2ad      	uxthmi	r5, r5
 8006f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f9a:	4852      	ldr	r0, [pc, #328]	@ (80070e4 <_printf_i+0x234>)
 8006f9c:	6033      	str	r3, [r6, #0]
 8006f9e:	bf14      	ite	ne
 8006fa0:	230a      	movne	r3, #10
 8006fa2:	2308      	moveq	r3, #8
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006faa:	6866      	ldr	r6, [r4, #4]
 8006fac:	60a6      	str	r6, [r4, #8]
 8006fae:	2e00      	cmp	r6, #0
 8006fb0:	db05      	blt.n	8006fbe <_printf_i+0x10e>
 8006fb2:	6821      	ldr	r1, [r4, #0]
 8006fb4:	432e      	orrs	r6, r5
 8006fb6:	f021 0104 	bic.w	r1, r1, #4
 8006fba:	6021      	str	r1, [r4, #0]
 8006fbc:	d04b      	beq.n	8007056 <_printf_i+0x1a6>
 8006fbe:	4616      	mov	r6, r2
 8006fc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fc4:	fb03 5711 	mls	r7, r3, r1, r5
 8006fc8:	5dc7      	ldrb	r7, [r0, r7]
 8006fca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fce:	462f      	mov	r7, r5
 8006fd0:	42bb      	cmp	r3, r7
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	d9f4      	bls.n	8006fc0 <_printf_i+0x110>
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d10b      	bne.n	8006ff2 <_printf_i+0x142>
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	07df      	lsls	r7, r3, #31
 8006fde:	d508      	bpl.n	8006ff2 <_printf_i+0x142>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	6861      	ldr	r1, [r4, #4]
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	bfde      	ittt	le
 8006fe8:	2330      	movle	r3, #48	@ 0x30
 8006fea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ff2:	1b92      	subs	r2, r2, r6
 8006ff4:	6122      	str	r2, [r4, #16]
 8006ff6:	f8cd a000 	str.w	sl, [sp]
 8006ffa:	464b      	mov	r3, r9
 8006ffc:	aa03      	add	r2, sp, #12
 8006ffe:	4621      	mov	r1, r4
 8007000:	4640      	mov	r0, r8
 8007002:	f7ff fee7 	bl	8006dd4 <_printf_common>
 8007006:	3001      	adds	r0, #1
 8007008:	d14a      	bne.n	80070a0 <_printf_i+0x1f0>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	b004      	add	sp, #16
 8007010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	f043 0320 	orr.w	r3, r3, #32
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	4832      	ldr	r0, [pc, #200]	@ (80070e8 <_printf_i+0x238>)
 800701e:	2778      	movs	r7, #120	@ 0x78
 8007020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	6831      	ldr	r1, [r6, #0]
 8007028:	061f      	lsls	r7, r3, #24
 800702a:	f851 5b04 	ldr.w	r5, [r1], #4
 800702e:	d402      	bmi.n	8007036 <_printf_i+0x186>
 8007030:	065f      	lsls	r7, r3, #25
 8007032:	bf48      	it	mi
 8007034:	b2ad      	uxthmi	r5, r5
 8007036:	6031      	str	r1, [r6, #0]
 8007038:	07d9      	lsls	r1, r3, #31
 800703a:	bf44      	itt	mi
 800703c:	f043 0320 	orrmi.w	r3, r3, #32
 8007040:	6023      	strmi	r3, [r4, #0]
 8007042:	b11d      	cbz	r5, 800704c <_printf_i+0x19c>
 8007044:	2310      	movs	r3, #16
 8007046:	e7ad      	b.n	8006fa4 <_printf_i+0xf4>
 8007048:	4826      	ldr	r0, [pc, #152]	@ (80070e4 <_printf_i+0x234>)
 800704a:	e7e9      	b.n	8007020 <_printf_i+0x170>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	f023 0320 	bic.w	r3, r3, #32
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	e7f6      	b.n	8007044 <_printf_i+0x194>
 8007056:	4616      	mov	r6, r2
 8007058:	e7bd      	b.n	8006fd6 <_printf_i+0x126>
 800705a:	6833      	ldr	r3, [r6, #0]
 800705c:	6825      	ldr	r5, [r4, #0]
 800705e:	6961      	ldr	r1, [r4, #20]
 8007060:	1d18      	adds	r0, r3, #4
 8007062:	6030      	str	r0, [r6, #0]
 8007064:	062e      	lsls	r6, r5, #24
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	d501      	bpl.n	800706e <_printf_i+0x1be>
 800706a:	6019      	str	r1, [r3, #0]
 800706c:	e002      	b.n	8007074 <_printf_i+0x1c4>
 800706e:	0668      	lsls	r0, r5, #25
 8007070:	d5fb      	bpl.n	800706a <_printf_i+0x1ba>
 8007072:	8019      	strh	r1, [r3, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	4616      	mov	r6, r2
 800707a:	e7bc      	b.n	8006ff6 <_printf_i+0x146>
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	6032      	str	r2, [r6, #0]
 8007082:	681e      	ldr	r6, [r3, #0]
 8007084:	6862      	ldr	r2, [r4, #4]
 8007086:	2100      	movs	r1, #0
 8007088:	4630      	mov	r0, r6
 800708a:	f7f9 f8a9 	bl	80001e0 <memchr>
 800708e:	b108      	cbz	r0, 8007094 <_printf_i+0x1e4>
 8007090:	1b80      	subs	r0, r0, r6
 8007092:	6060      	str	r0, [r4, #4]
 8007094:	6863      	ldr	r3, [r4, #4]
 8007096:	6123      	str	r3, [r4, #16]
 8007098:	2300      	movs	r3, #0
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800709e:	e7aa      	b.n	8006ff6 <_printf_i+0x146>
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	4632      	mov	r2, r6
 80070a4:	4649      	mov	r1, r9
 80070a6:	4640      	mov	r0, r8
 80070a8:	47d0      	blx	sl
 80070aa:	3001      	adds	r0, #1
 80070ac:	d0ad      	beq.n	800700a <_printf_i+0x15a>
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	079b      	lsls	r3, r3, #30
 80070b2:	d413      	bmi.n	80070dc <_printf_i+0x22c>
 80070b4:	68e0      	ldr	r0, [r4, #12]
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	4298      	cmp	r0, r3
 80070ba:	bfb8      	it	lt
 80070bc:	4618      	movlt	r0, r3
 80070be:	e7a6      	b.n	800700e <_printf_i+0x15e>
 80070c0:	2301      	movs	r3, #1
 80070c2:	4632      	mov	r2, r6
 80070c4:	4649      	mov	r1, r9
 80070c6:	4640      	mov	r0, r8
 80070c8:	47d0      	blx	sl
 80070ca:	3001      	adds	r0, #1
 80070cc:	d09d      	beq.n	800700a <_printf_i+0x15a>
 80070ce:	3501      	adds	r5, #1
 80070d0:	68e3      	ldr	r3, [r4, #12]
 80070d2:	9903      	ldr	r1, [sp, #12]
 80070d4:	1a5b      	subs	r3, r3, r1
 80070d6:	42ab      	cmp	r3, r5
 80070d8:	dcf2      	bgt.n	80070c0 <_printf_i+0x210>
 80070da:	e7eb      	b.n	80070b4 <_printf_i+0x204>
 80070dc:	2500      	movs	r5, #0
 80070de:	f104 0619 	add.w	r6, r4, #25
 80070e2:	e7f5      	b.n	80070d0 <_printf_i+0x220>
 80070e4:	08007265 	.word	0x08007265
 80070e8:	08007276 	.word	0x08007276

080070ec <memmove>:
 80070ec:	4288      	cmp	r0, r1
 80070ee:	b510      	push	{r4, lr}
 80070f0:	eb01 0402 	add.w	r4, r1, r2
 80070f4:	d902      	bls.n	80070fc <memmove+0x10>
 80070f6:	4284      	cmp	r4, r0
 80070f8:	4623      	mov	r3, r4
 80070fa:	d807      	bhi.n	800710c <memmove+0x20>
 80070fc:	1e43      	subs	r3, r0, #1
 80070fe:	42a1      	cmp	r1, r4
 8007100:	d008      	beq.n	8007114 <memmove+0x28>
 8007102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007106:	f803 2f01 	strb.w	r2, [r3, #1]!
 800710a:	e7f8      	b.n	80070fe <memmove+0x12>
 800710c:	4402      	add	r2, r0
 800710e:	4601      	mov	r1, r0
 8007110:	428a      	cmp	r2, r1
 8007112:	d100      	bne.n	8007116 <memmove+0x2a>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800711e:	e7f7      	b.n	8007110 <memmove+0x24>

08007120 <_sbrk_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d06      	ldr	r5, [pc, #24]	@ (800713c <_sbrk_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fb fc6c 	bl	8002a08 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_sbrk_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_sbrk_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	200003f4 	.word	0x200003f4

08007140 <memcpy>:
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	f100 33ff 	add.w	r3, r0, #4294967295
 8007148:	d100      	bne.n	800714c <memcpy+0xc>
 800714a:	4770      	bx	lr
 800714c:	b510      	push	{r4, lr}
 800714e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007156:	4291      	cmp	r1, r2
 8007158:	d1f9      	bne.n	800714e <memcpy+0xe>
 800715a:	bd10      	pop	{r4, pc}

0800715c <_realloc_r>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4607      	mov	r7, r0
 8007162:	4614      	mov	r4, r2
 8007164:	460d      	mov	r5, r1
 8007166:	b921      	cbnz	r1, 8007172 <_realloc_r+0x16>
 8007168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	4611      	mov	r1, r2
 800716e:	f7ff bc4d 	b.w	8006a0c <_malloc_r>
 8007172:	b92a      	cbnz	r2, 8007180 <_realloc_r+0x24>
 8007174:	f7ff fbde 	bl	8006934 <_free_r>
 8007178:	4625      	mov	r5, r4
 800717a:	4628      	mov	r0, r5
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	f000 f81a 	bl	80071b8 <_malloc_usable_size_r>
 8007184:	4284      	cmp	r4, r0
 8007186:	4606      	mov	r6, r0
 8007188:	d802      	bhi.n	8007190 <_realloc_r+0x34>
 800718a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800718e:	d8f4      	bhi.n	800717a <_realloc_r+0x1e>
 8007190:	4621      	mov	r1, r4
 8007192:	4638      	mov	r0, r7
 8007194:	f7ff fc3a 	bl	8006a0c <_malloc_r>
 8007198:	4680      	mov	r8, r0
 800719a:	b908      	cbnz	r0, 80071a0 <_realloc_r+0x44>
 800719c:	4645      	mov	r5, r8
 800719e:	e7ec      	b.n	800717a <_realloc_r+0x1e>
 80071a0:	42b4      	cmp	r4, r6
 80071a2:	4622      	mov	r2, r4
 80071a4:	4629      	mov	r1, r5
 80071a6:	bf28      	it	cs
 80071a8:	4632      	movcs	r2, r6
 80071aa:	f7ff ffc9 	bl	8007140 <memcpy>
 80071ae:	4629      	mov	r1, r5
 80071b0:	4638      	mov	r0, r7
 80071b2:	f7ff fbbf 	bl	8006934 <_free_r>
 80071b6:	e7f1      	b.n	800719c <_realloc_r+0x40>

080071b8 <_malloc_usable_size_r>:
 80071b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071bc:	1f18      	subs	r0, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfbc      	itt	lt
 80071c2:	580b      	ldrlt	r3, [r1, r0]
 80071c4:	18c0      	addlt	r0, r0, r3
 80071c6:	4770      	bx	lr

080071c8 <_init>:
 80071c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ca:	bf00      	nop
 80071cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ce:	bc08      	pop	{r3}
 80071d0:	469e      	mov	lr, r3
 80071d2:	4770      	bx	lr

080071d4 <_fini>:
 80071d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d6:	bf00      	nop
 80071d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071da:	bc08      	pop	{r3}
 80071dc:	469e      	mov	lr, r3
 80071de:	4770      	bx	lr
