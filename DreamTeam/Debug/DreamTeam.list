
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cdc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004e64  08004e64  00005e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e7c  08004e7c  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e84  08004e84  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e84  08004e84  00005e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e88  08004e88  00005e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004e8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          000001d0  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abfa  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b35  00000000  00000000  00010c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00012778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  00013358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213c2  00000000  00000000  00013c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0e5  00000000  00000000  0003504b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2302  00000000  00000000  00042130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114432  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032b4  00000000  00000000  00114478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  0011772c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e4c 	.word	0x08004e4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004e4c 	.word	0x08004e4c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b988 	b.w	8000afc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	468e      	mov	lr, r1
 800080c:	4604      	mov	r4, r0
 800080e:	4688      	mov	r8, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d962      	bls.n	80008e0 <__udivmoddi4+0xdc>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	b14e      	cbz	r6, 8000834 <__udivmoddi4+0x30>
 8000820:	f1c6 0320 	rsb	r3, r6, #32
 8000824:	fa01 f806 	lsl.w	r8, r1, r6
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	40b7      	lsls	r7, r6
 800082e:	ea43 0808 	orr.w	r8, r3, r8
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000840:	0c23      	lsrs	r3, r4, #16
 8000842:	fb0e 8811 	mls	r8, lr, r1, r8
 8000846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084a:	fb01 f20c 	mul.w	r2, r1, ip
 800084e:	429a      	cmp	r2, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x62>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f101 30ff 	add.w	r0, r1, #4294967295
 8000858:	f080 80ea 	bcs.w	8000a30 <__udivmoddi4+0x22c>
 800085c:	429a      	cmp	r2, r3
 800085e:	f240 80e7 	bls.w	8000a30 <__udivmoddi4+0x22c>
 8000862:	3902      	subs	r1, #2
 8000864:	443b      	add	r3, r7
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	b2a3      	uxth	r3, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000876:	fb00 fc0c 	mul.w	ip, r0, ip
 800087a:	459c      	cmp	ip, r3
 800087c:	d909      	bls.n	8000892 <__udivmoddi4+0x8e>
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	f100 32ff 	add.w	r2, r0, #4294967295
 8000884:	f080 80d6 	bcs.w	8000a34 <__udivmoddi4+0x230>
 8000888:	459c      	cmp	ip, r3
 800088a:	f240 80d3 	bls.w	8000a34 <__udivmoddi4+0x230>
 800088e:	443b      	add	r3, r7
 8000890:	3802      	subs	r0, #2
 8000892:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000896:	eba3 030c 	sub.w	r3, r3, ip
 800089a:	2100      	movs	r1, #0
 800089c:	b11d      	cbz	r5, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40f3      	lsrs	r3, r6
 80008a0:	2200      	movs	r2, #0
 80008a2:	e9c5 3200 	strd	r3, r2, [r5]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d905      	bls.n	80008ba <__udivmoddi4+0xb6>
 80008ae:	b10d      	cbz	r5, 80008b4 <__udivmoddi4+0xb0>
 80008b0:	e9c5 0100 	strd	r0, r1, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4608      	mov	r0, r1
 80008b8:	e7f5      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008ba:	fab3 f183 	clz	r1, r3
 80008be:	2900      	cmp	r1, #0
 80008c0:	d146      	bne.n	8000950 <__udivmoddi4+0x14c>
 80008c2:	4573      	cmp	r3, lr
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xc8>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 8105 	bhi.w	8000ad6 <__udivmoddi4+0x2d2>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	4690      	mov	r8, r2
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e5      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008da:	e9c5 4800 	strd	r4, r8, [r5]
 80008de:	e7e2      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	f000 8090 	beq.w	8000a06 <__udivmoddi4+0x202>
 80008e6:	fab2 f682 	clz	r6, r2
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	f040 80a4 	bne.w	8000a38 <__udivmoddi4+0x234>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	b280      	uxth	r0, r0
 80008fa:	b2bc      	uxth	r4, r7
 80008fc:	2101      	movs	r1, #1
 80008fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000902:	fb0e 221c 	mls	r2, lr, ip, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb04 f20c 	mul.w	r2, r4, ip
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x11e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000918:	d202      	bcs.n	8000920 <__udivmoddi4+0x11c>
 800091a:	429a      	cmp	r2, r3
 800091c:	f200 80e0 	bhi.w	8000ae0 <__udivmoddi4+0x2dc>
 8000920:	46c4      	mov	ip, r8
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	fbb3 f2fe 	udiv	r2, r3, lr
 8000928:	fb0e 3312 	mls	r3, lr, r2, r3
 800092c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000930:	fb02 f404 	mul.w	r4, r2, r4
 8000934:	429c      	cmp	r4, r3
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0x144>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f102 30ff 	add.w	r0, r2, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x142>
 8000940:	429c      	cmp	r4, r3
 8000942:	f200 80ca 	bhi.w	8000ada <__udivmoddi4+0x2d6>
 8000946:	4602      	mov	r2, r0
 8000948:	1b1b      	subs	r3, r3, r4
 800094a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800094e:	e7a5      	b.n	800089c <__udivmoddi4+0x98>
 8000950:	f1c1 0620 	rsb	r6, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 f706 	lsr.w	r7, r2, r6
 800095a:	431f      	orrs	r7, r3
 800095c:	fa0e f401 	lsl.w	r4, lr, r1
 8000960:	fa20 f306 	lsr.w	r3, r0, r6
 8000964:	fa2e fe06 	lsr.w	lr, lr, r6
 8000968:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	fa1f fc87 	uxth.w	ip, r7
 8000976:	fbbe f0f9 	udiv	r0, lr, r9
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000980:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000984:	fb00 fe0c 	mul.w	lr, r0, ip
 8000988:	45a6      	cmp	lr, r4
 800098a:	fa02 f201 	lsl.w	r2, r2, r1
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x1a0>
 8000990:	193c      	adds	r4, r7, r4
 8000992:	f100 3aff 	add.w	sl, r0, #4294967295
 8000996:	f080 809c 	bcs.w	8000ad2 <__udivmoddi4+0x2ce>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f240 8099 	bls.w	8000ad2 <__udivmoddi4+0x2ce>
 80009a0:	3802      	subs	r0, #2
 80009a2:	443c      	add	r4, r7
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	fa1f fe83 	uxth.w	lr, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009bc:	45a4      	cmp	ip, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1ce>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80009c6:	f080 8082 	bcs.w	8000ace <__udivmoddi4+0x2ca>
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d97f      	bls.n	8000ace <__udivmoddi4+0x2ca>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009d6:	eba4 040c 	sub.w	r4, r4, ip
 80009da:	fba0 ec02 	umull	lr, ip, r0, r2
 80009de:	4564      	cmp	r4, ip
 80009e0:	4673      	mov	r3, lr
 80009e2:	46e1      	mov	r9, ip
 80009e4:	d362      	bcc.n	8000aac <__udivmoddi4+0x2a8>
 80009e6:	d05f      	beq.n	8000aa8 <__udivmoddi4+0x2a4>
 80009e8:	b15d      	cbz	r5, 8000a02 <__udivmoddi4+0x1fe>
 80009ea:	ebb8 0203 	subs.w	r2, r8, r3
 80009ee:	eb64 0409 	sbc.w	r4, r4, r9
 80009f2:	fa04 f606 	lsl.w	r6, r4, r6
 80009f6:	fa22 f301 	lsr.w	r3, r2, r1
 80009fa:	431e      	orrs	r6, r3
 80009fc:	40cc      	lsrs	r4, r1
 80009fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000a02:	2100      	movs	r1, #0
 8000a04:	e74f      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a0a:	0c01      	lsrs	r1, r0, #16
 8000a0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a10:	b280      	uxth	r0, r0
 8000a12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a16:	463b      	mov	r3, r7
 8000a18:	4638      	mov	r0, r7
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	46be      	mov	lr, r7
 8000a20:	2620      	movs	r6, #32
 8000a22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a26:	eba2 0208 	sub.w	r2, r2, r8
 8000a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a2e:	e766      	b.n	80008fe <__udivmoddi4+0xfa>
 8000a30:	4601      	mov	r1, r0
 8000a32:	e718      	b.n	8000866 <__udivmoddi4+0x62>
 8000a34:	4610      	mov	r0, r2
 8000a36:	e72c      	b.n	8000892 <__udivmoddi4+0x8e>
 8000a38:	f1c6 0220 	rsb	r2, r6, #32
 8000a3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a40:	40b7      	lsls	r7, r6
 8000a42:	40b1      	lsls	r1, r6
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a5e:	fb08 f904 	mul.w	r9, r8, r4
 8000a62:	40b0      	lsls	r0, r6
 8000a64:	4589      	cmp	r9, r1
 8000a66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a6a:	b280      	uxth	r0, r0
 8000a6c:	d93e      	bls.n	8000aec <__udivmoddi4+0x2e8>
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a74:	d201      	bcs.n	8000a7a <__udivmoddi4+0x276>
 8000a76:	4589      	cmp	r9, r1
 8000a78:	d81f      	bhi.n	8000aba <__udivmoddi4+0x2b6>
 8000a7a:	eba1 0109 	sub.w	r1, r1, r9
 8000a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a82:	fb09 f804 	mul.w	r8, r9, r4
 8000a86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d229      	bcs.n	8000ae8 <__udivmoddi4+0x2e4>
 8000a94:	18ba      	adds	r2, r7, r2
 8000a96:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a9a:	d2c4      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000a9c:	4542      	cmp	r2, r8
 8000a9e:	d2c2      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000aa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000aa4:	443a      	add	r2, r7
 8000aa6:	e7be      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aa8:	45f0      	cmp	r8, lr
 8000aaa:	d29d      	bcs.n	80009e8 <__udivmoddi4+0x1e4>
 8000aac:	ebbe 0302 	subs.w	r3, lr, r2
 8000ab0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	e796      	b.n	80009e8 <__udivmoddi4+0x1e4>
 8000aba:	eba7 0909 	sub.w	r9, r7, r9
 8000abe:	4449      	add	r1, r9
 8000ac0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ac4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ac8:	fb09 f804 	mul.w	r8, r9, r4
 8000acc:	e7db      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ace:	4673      	mov	r3, lr
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1ce>
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	e766      	b.n	80009a4 <__udivmoddi4+0x1a0>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e6fd      	b.n	80008d6 <__udivmoddi4+0xd2>
 8000ada:	443b      	add	r3, r7
 8000adc:	3a02      	subs	r2, #2
 8000ade:	e733      	b.n	8000948 <__udivmoddi4+0x144>
 8000ae0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	e71c      	b.n	8000922 <__udivmoddi4+0x11e>
 8000ae8:	4649      	mov	r1, r9
 8000aea:	e79c      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aec:	eba1 0109 	sub.w	r1, r1, r9
 8000af0:	46c4      	mov	ip, r8
 8000af2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af6:	fb09 f804 	mul.w	r8, r9, r4
 8000afa:	e7c4      	b.n	8000a86 <__udivmoddi4+0x282>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b04:	f001 fb9e 	bl	8002244 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b08:	f000 f916 	bl	8000d38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b0c:	f000 fa80 	bl	8001010 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b10:	f000 fa5e 	bl	8000fd0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000b14:	f000 f97a 	bl	8000e0c <MX_ADC1_Init>
	MX_TIM3_Init();
 8000b18:	f000 f9d8 	bl	8000ecc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	497d      	ldr	r1, [pc, #500]	@ (8000d14 <main+0x214>)
 8000b20:	487d      	ldr	r0, [pc, #500]	@ (8000d18 <main+0x218>)
 8000b22:	f001 fc69 	bl	80023f8 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000b26:	4b7d      	ldr	r3, [pc, #500]	@ (8000d1c <main+0x21c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8000d1c <main+0x21c>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	739a      	strb	r2, [r3, #14]
 8000b32:	4b7a      	ldr	r3, [pc, #488]	@ (8000d1c <main+0x21c>)
 8000b34:	7b9a      	ldrb	r2, [r3, #14]
 8000b36:	4b79      	ldr	r3, [pc, #484]	@ (8000d1c <main+0x21c>)
 8000b38:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000b3a:	4b78      	ldr	r3, [pc, #480]	@ (8000d1c <main+0x21c>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	735a      	strb	r2, [r3, #13]
 8000b40:	4b76      	ldr	r3, [pc, #472]	@ (8000d1c <main+0x21c>)
 8000b42:	7b5a      	ldrb	r2, [r3, #13]
 8000b44:	4b75      	ldr	r3, [pc, #468]	@ (8000d1c <main+0x21c>)
 8000b46:	729a      	strb	r2, [r3, #10]
 8000b48:	4b74      	ldr	r3, [pc, #464]	@ (8000d1c <main+0x21c>)
 8000b4a:	7a9a      	ldrb	r2, [r3, #10]
 8000b4c:	4b73      	ldr	r3, [pc, #460]	@ (8000d1c <main+0x21c>)
 8000b4e:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000b50:	4b72      	ldr	r3, [pc, #456]	@ (8000d1c <main+0x21c>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	731a      	strb	r2, [r3, #12]
 8000b56:	4b71      	ldr	r3, [pc, #452]	@ (8000d1c <main+0x21c>)
 8000b58:	7b1a      	ldrb	r2, [r3, #12]
 8000b5a:	4b70      	ldr	r3, [pc, #448]	@ (8000d1c <main+0x21c>)
 8000b5c:	725a      	strb	r2, [r3, #9]
 8000b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8000d1c <main+0x21c>)
 8000b60:	7a5a      	ldrb	r2, [r3, #9]
 8000b62:	4b6e      	ldr	r3, [pc, #440]	@ (8000d1c <main+0x21c>)
 8000b64:	719a      	strb	r2, [r3, #6]
 8000b66:	4b6d      	ldr	r3, [pc, #436]	@ (8000d1c <main+0x21c>)
 8000b68:	799a      	ldrb	r2, [r3, #6]
 8000b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8000d1c <main+0x21c>)
 8000b6c:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8000d1c <main+0x21c>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	721a      	strb	r2, [r3, #8]
 8000b74:	4b69      	ldr	r3, [pc, #420]	@ (8000d1c <main+0x21c>)
 8000b76:	7a1a      	ldrb	r2, [r3, #8]
 8000b78:	4b68      	ldr	r3, [pc, #416]	@ (8000d1c <main+0x21c>)
 8000b7a:	715a      	strb	r2, [r3, #5]
 8000b7c:	4b67      	ldr	r3, [pc, #412]	@ (8000d1c <main+0x21c>)
 8000b7e:	795a      	ldrb	r2, [r3, #5]
 8000b80:	4b66      	ldr	r3, [pc, #408]	@ (8000d1c <main+0x21c>)
 8000b82:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000b84:	4b65      	ldr	r3, [pc, #404]	@ (8000d1c <main+0x21c>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	711a      	strb	r2, [r3, #4]
 8000b8a:	4b64      	ldr	r3, [pc, #400]	@ (8000d1c <main+0x21c>)
 8000b8c:	791a      	ldrb	r2, [r3, #4]
 8000b8e:	4b63      	ldr	r3, [pc, #396]	@ (8000d1c <main+0x21c>)
 8000b90:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000b92:	4b62      	ldr	r3, [pc, #392]	@ (8000d1c <main+0x21c>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000b98:	4b61      	ldr	r3, [pc, #388]	@ (8000d20 <main+0x220>)
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000b9e:	4b60      	ldr	r3, [pc, #384]	@ (8000d20 <main+0x220>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	709a      	strb	r2, [r3, #2]
 8000ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8000d20 <main+0x220>)
 8000ba6:	789a      	ldrb	r2, [r3, #2]
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d20 <main+0x220>)
 8000baa:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000bac:	4b5c      	ldr	r3, [pc, #368]	@ (8000d20 <main+0x220>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8000d20 <main+0x220>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	72da      	strb	r2, [r3, #11]
 8000bb8:	4b59      	ldr	r3, [pc, #356]	@ (8000d20 <main+0x220>)
 8000bba:	7ada      	ldrb	r2, [r3, #11]
 8000bbc:	4b58      	ldr	r3, [pc, #352]	@ (8000d20 <main+0x220>)
 8000bbe:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000bc0:	4b57      	ldr	r3, [pc, #348]	@ (8000d20 <main+0x220>)
 8000bc2:	2209      	movs	r2, #9
 8000bc4:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000bc6:	4b56      	ldr	r3, [pc, #344]	@ (8000d20 <main+0x220>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	735a      	strb	r2, [r3, #13]
 8000bcc:	4b54      	ldr	r3, [pc, #336]	@ (8000d20 <main+0x220>)
 8000bce:	7b5a      	ldrb	r2, [r3, #13]
 8000bd0:	4b53      	ldr	r3, [pc, #332]	@ (8000d20 <main+0x220>)
 8000bd2:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000bd4:	4b52      	ldr	r3, [pc, #328]	@ (8000d20 <main+0x220>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000bda:	4b51      	ldr	r3, [pc, #324]	@ (8000d20 <main+0x220>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	721a      	strb	r2, [r3, #8]
 8000be0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <main+0x220>)
 8000be2:	7a1a      	ldrb	r2, [r3, #8]
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <main+0x220>)
 8000be6:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000be8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d20 <main+0x220>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	729a      	strb	r2, [r3, #10]
 8000bee:	4b4c      	ldr	r3, [pc, #304]	@ (8000d20 <main+0x220>)
 8000bf0:	7a9a      	ldrb	r2, [r3, #10]
 8000bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8000d20 <main+0x220>)
 8000bf4:	725a      	strb	r2, [r3, #9]
 8000bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <main+0x220>)
 8000bf8:	7a5a      	ldrb	r2, [r3, #9]
 8000bfa:	4b49      	ldr	r3, [pc, #292]	@ (8000d20 <main+0x220>)
 8000bfc:	719a      	strb	r2, [r3, #6]
 8000bfe:	4b48      	ldr	r3, [pc, #288]	@ (8000d20 <main+0x220>)
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b47      	ldr	r3, [pc, #284]	@ (8000d20 <main+0x220>)
 8000c04:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0c:	4845      	ldr	r0, [pc, #276]	@ (8000d24 <main+0x224>)
 8000c0e:	f002 fde7 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c18:	4842      	ldr	r0, [pc, #264]	@ (8000d24 <main+0x224>)
 8000c1a:	f002 fde1 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c24:	483f      	ldr	r0, [pc, #252]	@ (8000d24 <main+0x224>)
 8000c26:	f002 fddb 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	483c      	ldr	r0, [pc, #240]	@ (8000d24 <main+0x224>)
 8000c32:	f002 fdd5 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000c36:	2108      	movs	r1, #8
 8000c38:	483b      	ldr	r0, [pc, #236]	@ (8000d28 <main+0x228>)
 8000c3a:	f003 faf7 	bl	800422c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000c3e:	210c      	movs	r1, #12
 8000c40:	4839      	ldr	r0, [pc, #228]	@ (8000d28 <main+0x228>)
 8000c42:	f003 faf3 	bl	800422c <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000c46:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <main+0x22c>)
 8000c48:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <main+0x22c>)
 8000c50:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 4; //Aca se elige que programa queremos que se realice
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <main+0x230>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		switch (prueba) {
 8000c5c:	4b34      	ldr	r3, [pc, #208]	@ (8000d30 <main+0x230>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b65      	cmp	r3, #101	@ 0x65
 8000c62:	d052      	beq.n	8000d0a <main+0x20a>
 8000c64:	2b65      	cmp	r3, #101	@ 0x65
 8000c66:	dcf9      	bgt.n	8000c5c <main+0x15c>
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	dc1d      	bgt.n	8000ca8 <main+0x1a8>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dbf5      	blt.n	8000c5c <main+0x15c>
 8000c70:	2b0a      	cmp	r3, #10
 8000c72:	d8f3      	bhi.n	8000c5c <main+0x15c>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <main+0x17c>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000caf 	.word	0x08000caf
 8000c80:	08000cb5 	.word	0x08000cb5
 8000c84:	08000c5d 	.word	0x08000c5d
 8000c88:	08000c5d 	.word	0x08000c5d
 8000c8c:	08000cbb 	.word	0x08000cbb
 8000c90:	08000cc1 	.word	0x08000cc1
 8000c94:	08000c5d 	.word	0x08000c5d
 8000c98:	08000c5d 	.word	0x08000c5d
 8000c9c:	08000c5d 	.word	0x08000c5d
 8000ca0:	08000c5d 	.word	0x08000c5d
 8000ca4:	08000cc7 	.word	0x08000cc7
 8000ca8:	2b64      	cmp	r3, #100	@ 0x64
 8000caa:	d02b      	beq.n	8000d04 <main+0x204>
 8000cac:	e7d6      	b.n	8000c5c <main+0x15c>

		case 0:
			prueba_rapida();
 8000cae:	f000 fb31 	bl	8001314 <prueba_rapida>
			break;
 8000cb2:	e02e      	b.n	8000d12 <main+0x212>

		case 1:
			prueba_giros_y_sensores();
 8000cb4:	f000 fb3a 	bl	800132c <prueba_giros_y_sensores>
			break;
 8000cb8:	e02b      	b.n	8000d12 <main+0x212>

		case 4:
			programa_principal();
 8000cba:	f000 fc0d 	bl	80014d8 <programa_principal>
			break;
 8000cbe:	e028      	b.n	8000d12 <main+0x212>

		case 5:
			ajuste_automatico();
 8000cc0:	f000 fa5e 	bl	8001180 <ajuste_automatico>
			break;
 8000cc4:	e025      	b.n	8000d12 <main+0x212>

		case 10: {
			TIM3->CCR3 = 0;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <main+0x22c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <main+0x22c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cd8:	4816      	ldr	r0, [pc, #88]	@ (8000d34 <main+0x234>)
 8000cda:	f002 fd81 	bl	80037e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <main+0x234>)
 8000ce6:	f002 fd7b 	bl	80037e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cf0:	4810      	ldr	r0, [pc, #64]	@ (8000d34 <main+0x234>)
 8000cf2:	f002 fd75 	bl	80037e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <main+0x234>)
 8000cfe:	f002 fd6f 	bl	80037e0 <HAL_GPIO_WritePin>
		}
			break;
 8000d02:	e006      	b.n	8000d12 <main+0x212>
		case 100:
			prueba_casilla_n();
 8000d04:	f000 fb8e 	bl	8001424 <prueba_casilla_n>
			break;
 8000d08:	e003      	b.n	8000d12 <main+0x212>

		case 101:
			prueba_post_relleno();
 8000d0a:	f000 fbb1 	bl	8001470 <prueba_post_relleno>
			break;
 8000d0e:	bf00      	nop
 8000d10:	e7a4      	b.n	8000c5c <main+0x15c>
		switch (prueba) {
 8000d12:	e7a3      	b.n	8000c5c <main+0x15c>
 8000d14:	2000015c 	.word	0x2000015c
 8000d18:	20000030 	.word	0x20000030
 8000d1c:	20000124 	.word	0x20000124
 8000d20:	20000134 	.word	0x20000134
 8000d24:	40020400 	.word	0x40020400
 8000d28:	200000d8 	.word	0x200000d8
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	20000145 	.word	0x20000145
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	@ 0x50
 8000d3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	2230      	movs	r2, #48	@ 0x30
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 f854 	bl	8004df4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	4a27      	ldr	r2, [pc, #156]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000da8:	2308      	movs	r3, #8
 8000daa:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000dac:	2332      	movs	r3, #50	@ 0x32
 8000dae:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db4:	2307      	movs	r3, #7
 8000db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fd29 	bl	8003814 <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x94>
		Error_Handler();
 8000dc8:	f001 f8c4 	bl	8001f54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ddc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 ff8a 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xc2>
		Error_Handler();
 8000df6:	f001 f8ad 	bl	8001f54 <Error_Handler>
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	3750      	adds	r7, #80	@ 0x50
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <MX_ADC1_Init+0xb8>)
 8000e22:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e2a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec8 <MX_ADC1_Init+0xbc>)
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000e6c:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e6e:	f001 fa7f 	bl	8002370 <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x70>
		Error_Handler();
 8000e78:	f001 f86c 	bl	8001f54 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e8e:	f001 fbd1 	bl	8002634 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000e98:	f001 f85c 	bl	8001f54 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000eaa:	f001 fbc3 	bl	8002634 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000eb4:	f001 f84e 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000030 	.word	0x20000030
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	@ 0x38
 8000ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <MX_TIM3_Init+0x100>)
 8000f00:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f10:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000f14:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000f22:	4829      	ldr	r0, [pc, #164]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f24:	f003 f8da 	bl	80040dc <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000f2e:	f001 f811 	bl	8001f54 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4822      	ldr	r0, [pc, #136]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f40:	f003 fafe 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x82>
		Error_Handler();
 8000f4a:	f001 f803 	bl	8001f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f4e:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f50:	f003 f913 	bl	800417a <HAL_TIM_PWM_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x92>
		Error_Handler();
 8000f5a:	f000 fffb 	bl	8001f54 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f6e:	f003 fec5 	bl	8004cfc <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xb0>
		Error_Handler();
 8000f78:	f000 ffec 	bl	8001f54 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	2360      	movs	r3, #96	@ 0x60
 8000f7e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f94:	f003 fa12 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0xd6>
		Error_Handler();
 8000f9e:	f000 ffd9 	bl	8001f54 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000faa:	f003 fa07 	bl	80043bc <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0xec>
		Error_Handler();
 8000fb4:	f000 ffce 	bl	8001f54 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000fba:	f001 f893 	bl	80020e4 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000d8 	.word	0x200000d8
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2038      	movs	r0, #56	@ 0x38
 8000ff8:	f001 fe97 	bl	8002d2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ffc:	2038      	movs	r0, #56	@ 0x38
 8000ffe:	f001 feb0 	bl	8002d62 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b4e      	ldr	r3, [pc, #312]	@ (8001164 <MX_GPIO_Init+0x154>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a4d      	ldr	r2, [pc, #308]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a46      	ldr	r2, [pc, #280]	@ (8001164 <MX_GPIO_Init+0x154>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b44      	ldr	r3, [pc, #272]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a3f      	ldr	r2, [pc, #252]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a38      	ldr	r2, [pc, #224]	@ (8001164 <MX_GPIO_Init+0x154>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b36      	ldr	r3, [pc, #216]	@ (8001164 <MX_GPIO_Init+0x154>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <MX_GPIO_Init+0x154>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <MX_GPIO_Init+0x154>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <MX_GPIO_Init+0x154>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2108      	movs	r1, #8
 80010b6:	482c      	ldr	r0, [pc, #176]	@ (8001168 <MX_GPIO_Init+0x158>)
 80010b8:	f002 fb92 	bl	80037e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80010c2:	482a      	ldr	r0, [pc, #168]	@ (800116c <MX_GPIO_Init+0x15c>)
 80010c4:	f002 fb8c 	bl	80037e0 <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80010ce:	4828      	ldr	r0, [pc, #160]	@ (8001170 <MX_GPIO_Init+0x160>)
 80010d0:	f002 fb86 	bl	80037e0 <HAL_GPIO_WritePin>
	led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010d4:	2308      	movs	r3, #8
 80010d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	481f      	ldr	r0, [pc, #124]	@ (8001168 <MX_GPIO_Init+0x158>)
 80010ec:	f002 f9c4 	bl	8003478 <HAL_GPIO_Init>

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	481c      	ldr	r0, [pc, #112]	@ (8001174 <MX_GPIO_Init+0x164>)
 8001104:	f002 f9b8 	bl	8003478 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin;
 8001108:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800110c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4812      	ldr	r0, [pc, #72]	@ (800116c <MX_GPIO_Init+0x15c>)
 8001122:	f002 f9a9 	bl	8003478 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
	GPIO_InitStruct.Pin = led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin;
 8001126:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800112a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <MX_GPIO_Init+0x160>)
 8001140:	f002 f99a 	bl	8003478 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8001144:	23c0      	movs	r3, #192	@ 0xc0
 8001146:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4808      	ldr	r0, [pc, #32]	@ (8001178 <MX_GPIO_Init+0x168>)
 8001158:	f002 f98e 	bl	8003478 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800
 8001168:	40021000 	.word	0x40021000
 800116c:	40020400 	.word	0x40020400
 8001170:	40020c00 	.word	0x40020c00
 8001174:	40020000 	.word	0x40020000
 8001178:	40020800 	.word	0x40020800
 800117c:	00000000 	.word	0x00000000

08001180 <ajuste_automatico>:

/* USER CODE BEGIN 4 */
void ajuste_automatico(void) {
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) | (sensor_izq_min == 0)) {
 8001184:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <ajuste_automatico+0x170>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	bf0c      	ite	eq
 800118c:	2301      	moveq	r3, #1
 800118e:	2300      	movne	r3, #0
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b58      	ldr	r3, [pc, #352]	@ (80012f4 <ajuste_automatico+0x174>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf0c      	ite	eq
 800119a:	2301      	moveq	r3, #1
 800119c:	2300      	movne	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d007      	beq.n	80011b8 <ajuste_automatico+0x38>
		sensor_der_min = 32000;
 80011a8:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <ajuste_automatico+0x170>)
 80011aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011ae:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80011b0:	4b50      	ldr	r3, [pc, #320]	@ (80012f4 <ajuste_automatico+0x174>)
 80011b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011b6:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80011b8:	4b4d      	ldr	r3, [pc, #308]	@ (80012f0 <ajuste_automatico+0x170>)
 80011ba:	881a      	ldrh	r2, [r3, #0]
 80011bc:	4b4e      	ldr	r3, [pc, #312]	@ (80012f8 <ajuste_automatico+0x178>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d904      	bls.n	80011d0 <ajuste_automatico+0x50>
		sensor_der_min = sensor_der_avg;
 80011c6:	4b4c      	ldr	r3, [pc, #304]	@ (80012f8 <ajuste_automatico+0x178>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <ajuste_automatico+0x170>)
 80011ce:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 80011d0:	4b48      	ldr	r3, [pc, #288]	@ (80012f4 <ajuste_automatico+0x174>)
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	4b49      	ldr	r3, [pc, #292]	@ (80012fc <ajuste_automatico+0x17c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	429a      	cmp	r2, r3
 80011dc:	d904      	bls.n	80011e8 <ajuste_automatico+0x68>
		sensor_izq_min = sensor_izq_avg;
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <ajuste_automatico+0x17c>)
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	@ (80012f4 <ajuste_automatico+0x174>)
 80011e6:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 80011e8:	4b45      	ldr	r3, [pc, #276]	@ (8001300 <ajuste_automatico+0x180>)
 80011ea:	881a      	ldrh	r2, [r3, #0]
 80011ec:	4b42      	ldr	r3, [pc, #264]	@ (80012f8 <ajuste_automatico+0x178>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d204      	bcs.n	8001200 <ajuste_automatico+0x80>
		sensor_der_max = sensor_der_avg;
 80011f6:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <ajuste_automatico+0x178>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <ajuste_automatico+0x180>)
 80011fe:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001200:	4b40      	ldr	r3, [pc, #256]	@ (8001304 <ajuste_automatico+0x184>)
 8001202:	881a      	ldrh	r2, [r3, #0]
 8001204:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <ajuste_automatico+0x17c>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	429a      	cmp	r2, r3
 800120c:	d204      	bcs.n	8001218 <ajuste_automatico+0x98>
		sensor_izq_max = sensor_izq_avg;
 800120e:	4b3b      	ldr	r3, [pc, #236]	@ (80012fc <ajuste_automatico+0x17c>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <ajuste_automatico+0x184>)
 8001216:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_RESET) {
 8001218:	2101      	movs	r1, #1
 800121a:	483b      	ldr	r0, [pc, #236]	@ (8001308 <ajuste_automatico+0x188>)
 800121c:	f002 fac8 	bl	80037b0 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d159      	bne.n	80012da <ajuste_automatico+0x15a>
		HAL_Delay(40);
 8001226:	2028      	movs	r0, #40	@ 0x28
 8001228:	f001 f87e 	bl	8002328 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_RESET) {
 800122c:	2101      	movs	r1, #1
 800122e:	4836      	ldr	r0, [pc, #216]	@ (8001308 <ajuste_automatico+0x188>)
 8001230:	f002 fabe 	bl	80037b0 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d14f      	bne.n	80012da <ajuste_automatico+0x15a>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 800123a:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <ajuste_automatico+0x180>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fa3e 	bl	80006c0 <__aeabi_i2d>
 8001244:	a326      	add	r3, pc, #152	@ (adr r3, 80012e0 <ajuste_automatico+0x160>)
 8001246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124a:	f7fe ffbd 	bl	80001c8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	4b26      	ldr	r3, [pc, #152]	@ (80012f0 <ajuste_automatico+0x170>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fa30 	bl	80006c0 <__aeabi_i2d>
 8001260:	a321      	add	r3, pc, #132	@ (adr r3, 80012e8 <ajuste_automatico+0x168>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7fe ffaf 	bl	80001c8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4620      	mov	r0, r4
 8001270:	4629      	mov	r1, r5
 8001272:	f7ff f8d9 	bl	8000428 <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f7ff fa89 	bl	8000794 <__aeabi_d2uiz>
 8001282:	4603      	mov	r3, r0
 8001284:	b29a      	uxth	r2, r3
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <ajuste_automatico+0x18c>)
 8001288:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 800128a:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <ajuste_automatico+0x184>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fa16 	bl	80006c0 <__aeabi_i2d>
 8001294:	a312      	add	r3, pc, #72	@ (adr r3, 80012e0 <ajuste_automatico+0x160>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7fe ff95 	bl	80001c8 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4614      	mov	r4, r2
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <ajuste_automatico+0x174>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa08 	bl	80006c0 <__aeabi_i2d>
 80012b0:	a30d      	add	r3, pc, #52	@ (adr r3, 80012e8 <ajuste_automatico+0x168>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7fe ff87 	bl	80001c8 <__aeabi_dmul>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4620      	mov	r0, r4
 80012c0:	4629      	mov	r1, r5
 80012c2:	f7ff f8b1 	bl	8000428 <__adddf3>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fa61 	bl	8000794 <__aeabi_d2uiz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <ajuste_automatico+0x190>)
 80012d8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80012da:	bf00      	nop
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	9999999a 	.word	0x9999999a
 80012e4:	3fd99999 	.word	0x3fd99999
 80012e8:	33333333 	.word	0x33333333
 80012ec:	3fe33333 	.word	0x3fe33333
 80012f0:	20000004 	.word	0x20000004
 80012f4:	20000002 	.word	0x20000002
 80012f8:	200001de 	.word	0x200001de
 80012fc:	200001dc 	.word	0x200001dc
 8001300:	2000014a 	.word	0x2000014a
 8001304:	20000148 	.word	0x20000148
 8001308:	40020000 	.word	0x40020000
 800130c:	2000014e 	.word	0x2000014e
 8001310:	2000014c 	.word	0x2000014c

08001314 <prueba_rapida>:

void prueba_rapida(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8001318:	f000 fa6e 	bl	80017f8 <correccion_avanzar>
	ejecutarGiro(izquierda);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 fb31 	bl	8001984 <ejecutarGiro>
	correccion_avanzar();
 8001322:	f000 fa69 	bl	80017f8 <correccion_avanzar>
	while (1)
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <prueba_rapida+0x12>
	...

0800132c <prueba_giros_y_sensores>:
		;
}

void prueba_giros_y_sensores(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8001330:	f000 fa62 	bl	80017f8 <correccion_avanzar>
	if (verificar_sensor()) {
 8001334:	f000 fc28 	bl	8001b88 <verificar_sensor>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800133e:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4a36      	ldr	r2, [pc, #216]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f000 f9d5 	bl	80016f8 <act_ubicacion>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	4b31      	ldr	r3, [pc, #196]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 8001354:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 8001356:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d121      	bne.n	80013a2 <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 800135e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001362:	f000 ffe1 	bl	8002328 <HAL_Delay>
		ejecutarGiro(izquierda);
 8001366:	2001      	movs	r0, #1
 8001368:	f000 fb0c 	bl	8001984 <ejecutarGiro>
		orientacion_actual = oeste;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 800136e:	2203      	movs	r2, #3
 8001370:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8001372:	e012      	b.n	800139a <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8001374:	f000 fa40 	bl	80017f8 <correccion_avanzar>
			if (verificar_sensor()) {
 8001378:	f000 fc06 	bl	8001b88 <verificar_sensor>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	4a25      	ldr	r2, [pc, #148]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f9b3 	bl	80016f8 <act_ubicacion>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 8001398:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d0e8      	beq.n	8001374 <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b09      	cmp	r3, #9
 80013a8:	d121      	bne.n	80013ee <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 80013aa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013ae:	f000 ffbb 	bl	8002328 <HAL_Delay>
		ejecutarGiro(derecha);
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 fae6 	bl	8001984 <ejecutarGiro>
		orientacion_actual = norte;
 80013b8:	4b18      	ldr	r3, [pc, #96]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 80013be:	e012      	b.n	80013e6 <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 80013c0:	f000 fa1a 	bl	80017f8 <correccion_avanzar>
			if (verificar_sensor()) {
 80013c4:	f000 fbe0 	bl	8001b88 <verificar_sensor>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f98d 	bl	80016f8 <act_ubicacion>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 80013e4:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 80013e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b09      	cmp	r3, #9
 80013ec:	d0e8      	beq.n	80013c0 <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)) {
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <prueba_giros_y_sensores+0xec>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b0d      	cmp	r3, #13
 80013f4:	d10e      	bne.n	8001414 <prueba_giros_y_sensores+0xe8>
 80013f6:	2140      	movs	r1, #64	@ 0x40
 80013f8:	4809      	ldr	r0, [pc, #36]	@ (8001420 <prueba_giros_y_sensores+0xf4>)
 80013fa:	f002 f9d9 	bl	80037b0 <HAL_GPIO_ReadPin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 fabd 	bl	8001984 <ejecutarGiro>
		orientacion_actual = sur;
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <prueba_giros_y_sensores+0xf0>)
 800140c:	2202      	movs	r2, #2
 800140e:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8001410:	f000 f9f2 	bl	80017f8 <correccion_avanzar>
	}
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000120 	.word	0x20000120
 800141c:	20000121 	.word	0x20000121
 8001420:	40020800 	.word	0x40020800

08001424 <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8001428:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <prueba_casilla_n+0x3c>)
 800142a:	2207      	movs	r2, #7
 800142c:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <prueba_casilla_n+0x40>)
 8001430:	2201      	movs	r2, #1
 8001432:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <prueba_casilla_n+0x44>)
 8001436:	2201      	movs	r2, #1
 8001438:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <prueba_casilla_n+0x44>)
 800143c:	2203      	movs	r2, #3
 800143e:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <prueba_casilla_n+0x44>)
 8001442:	2203      	movs	r2, #3
 8001444:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //deberia dar que tiene que ir a 11
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <prueba_casilla_n+0x3c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	4905      	ldr	r1, [pc, #20]	@ (8001464 <prueba_casilla_n+0x40>)
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <prueba_casilla_n+0x44>)
 8001450:	f000 fcbc 	bl	8001dcc <calculo_minimo_peso>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <prueba_casilla_n+0x48>)
 800145a:	701a      	strb	r2, [r3, #0]

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000120 	.word	0x20000120
 8001464:	20000134 	.word	0x20000134
 8001468:	20000124 	.word	0x20000124
 800146c:	20000000 	.word	0x20000000

08001470 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	ubicacion = 5;
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <prueba_post_relleno+0x54>)
 8001476:	2205      	movs	r2, #5
 8001478:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <prueba_post_relleno+0x58>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8001480:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <prueba_post_relleno+0x54>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4a10      	ldr	r2, [pc, #64]	@ (80014c8 <prueba_post_relleno+0x58>)
 8001486:	7812      	ldrb	r2, [r2, #0]
 8001488:	4611      	mov	r1, r2
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f8d6 	bl	800163c <obtener_orientacion_futura>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <prueba_post_relleno+0x5c>)
 8001496:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <prueba_post_relleno+0x60>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <prueba_post_relleno+0x60>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <prueba_post_relleno+0x5c>)
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f8f3 	bl	8001694 <obtenerGiro>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <prueba_post_relleno+0x64>)
 80014b4:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <prueba_post_relleno+0x64>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 fa62 	bl	8001984 <ejecutarGiro>
	while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <prueba_post_relleno+0x50>
 80014c4:	20000120 	.word	0x20000120
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000122 	.word	0x20000122
 80014d0:	20000121 	.word	0x20000121
 80014d4:	20000123 	.word	0x20000123

080014d8 <programa_principal>:
		;
}

void programa_principal(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	correccion_avanzar();
 80014dc:	f000 f98c 	bl	80017f8 <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 80014e0:	f000 fb52 	bl	8001b88 <verificar_sensor>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d040      	beq.n	800156c <programa_principal+0x94>
		contador_giros = 0;
 80014ea:	4b48      	ldr	r3, [pc, #288]	@ (800160c <programa_principal+0x134>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 80014f0:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <programa_principal+0x138>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b45      	ldr	r3, [pc, #276]	@ (8001610 <programa_principal+0x138>)
 80014fa:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80014fc:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <programa_principal+0x13c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4a45      	ldr	r2, [pc, #276]	@ (8001618 <programa_principal+0x140>)
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f8f6 	bl	80016f8 <act_ubicacion>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <programa_principal+0x13c>)
 8001512:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8001514:	4b3f      	ldr	r3, [pc, #252]	@ (8001614 <programa_principal+0x13c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4940      	ldr	r1, [pc, #256]	@ (800161c <programa_principal+0x144>)
 800151c:	4840      	ldr	r0, [pc, #256]	@ (8001620 <programa_principal+0x148>)
 800151e:	f000 fc55 	bl	8001dcc <calculo_minimo_peso>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b3f      	ldr	r3, [pc, #252]	@ (8001624 <programa_principal+0x14c>)
 8001528:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 800152a:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <programa_principal+0x13c>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	4a3d      	ldr	r2, [pc, #244]	@ (8001624 <programa_principal+0x14c>)
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f000 f881 	bl	800163c <obtener_orientacion_futura>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b3a      	ldr	r3, [pc, #232]	@ (8001628 <programa_principal+0x150>)
 8001540:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <programa_principal+0x140>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4a38      	ldr	r2, [pc, #224]	@ (8001628 <programa_principal+0x150>)
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8a1 	bl	8001694 <obtenerGiro>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b35      	ldr	r3, [pc, #212]	@ (800162c <programa_principal+0x154>)
 8001558:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <programa_principal+0x150>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <programa_principal+0x140>)
 8001560:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8001562:	4b32      	ldr	r3, [pc, #200]	@ (800162c <programa_principal+0x154>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fa0c 	bl	8001984 <ejecutarGiro>
	}
	if (solicitud_actualizar == 1) {
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <programa_principal+0x158>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d13a      	bne.n	80015ea <programa_principal+0x112>
		act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8001574:	4b27      	ldr	r3, [pc, #156]	@ (8001614 <programa_principal+0x13c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4a27      	ldr	r2, [pc, #156]	@ (8001618 <programa_principal+0x140>)
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4827      	ldr	r0, [pc, #156]	@ (800161c <programa_principal+0x144>)
 8001580:	f000 fb32 	bl	8001be8 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 8001584:	4926      	ldr	r1, [pc, #152]	@ (8001620 <programa_principal+0x148>)
 8001586:	4825      	ldr	r0, [pc, #148]	@ (800161c <programa_principal+0x144>)
 8001588:	f000 fb80 	bl	8001c8c <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 800158c:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <programa_principal+0x13c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4922      	ldr	r1, [pc, #136]	@ (800161c <programa_principal+0x144>)
 8001594:	4822      	ldr	r0, [pc, #136]	@ (8001620 <programa_principal+0x148>)
 8001596:	f000 fc19 	bl	8001dcc <calculo_minimo_peso>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <programa_principal+0x14c>)
 80015a0:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <programa_principal+0x13c>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <programa_principal+0x14c>)
 80015a8:	7812      	ldrb	r2, [r2, #0]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f845 	bl	800163c <obtener_orientacion_futura>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <programa_principal+0x150>)
 80015b8:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80015ba:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <programa_principal+0x140>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <programa_principal+0x150>)
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f865 	bl	8001694 <obtenerGiro>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <programa_principal+0x154>)
 80015d0:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <programa_principal+0x150>)
 80015d4:	781a      	ldrb	r2, [r3, #0]
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <programa_principal+0x140>)
 80015d8:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <programa_principal+0x154>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f9d0 	bl	8001984 <ejecutarGiro>
		solicitud_actualizar = 0;
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <programa_principal+0x158>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	}
	if (filtrado == 1) {
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <programa_principal+0x15c>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <programa_principal+0x120>
		filtrado_pared();
 80015f4:	f000 fc88 	bl	8001f08 <filtrado_pared>
	}

	if (ubicacion == 15) {
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <programa_principal+0x13c>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d102      	bne.n	8001606 <programa_principal+0x12e>
		prueba = 10;
 8001600:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <programa_principal+0x160>)
 8001602:	220a      	movs	r2, #10
 8001604:	701a      	strb	r2, [r3, #0]
	}
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000146 	.word	0x20000146
 8001610:	20000144 	.word	0x20000144
 8001614:	20000120 	.word	0x20000120
 8001618:	20000121 	.word	0x20000121
 800161c:	20000134 	.word	0x20000134
 8001620:	20000124 	.word	0x20000124
 8001624:	20000000 	.word	0x20000000
 8001628:	20000122 	.word	0x20000122
 800162c:	20000123 	.word	0x20000123
 8001630:	20000158 	.word	0x20000158
 8001634:	20000159 	.word	0x20000159
 8001638:	20000145 	.word	0x20000145

0800163c <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	3301      	adds	r3, #1
 8001652:	429a      	cmp	r2, r3
 8001654:	d101      	bne.n	800165a <obtener_orientacion_futura+0x1e>
		return oeste;
 8001656:	2303      	movs	r3, #3
 8001658:	e015      	b.n	8001686 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 800165a:	79ba      	ldrb	r2, [r7, #6]
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	3b01      	subs	r3, #1
 8001660:	429a      	cmp	r2, r3
 8001662:	d101      	bne.n	8001668 <obtener_orientacion_futura+0x2c>
		return este;
 8001664:	2301      	movs	r3, #1
 8001666:	e00e      	b.n	8001686 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8001668:	79ba      	ldrb	r2, [r7, #6]
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	3304      	adds	r3, #4
 800166e:	429a      	cmp	r2, r3
 8001670:	d101      	bne.n	8001676 <obtener_orientacion_futura+0x3a>
		return norte;
 8001672:	2300      	movs	r3, #0
 8001674:	e007      	b.n	8001686 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	3b04      	subs	r3, #4
 800167c:	429a      	cmp	r2, r3
 800167e:	d101      	bne.n	8001684 <obtener_orientacion_futura+0x48>
		return sur;
 8001680:	2302      	movs	r3, #2
 8001682:	e000      	b.n	8001686 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8001684:	2364      	movs	r3, #100	@ 0x64
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	3304      	adds	r3, #4
 80016ac:	425a      	negs	r2, r3
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	f002 0203 	and.w	r2, r2, #3
 80016b6:	bf58      	it	pl
 80016b8:	4253      	negpl	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d812      	bhi.n	80016e8 <obtenerGiro+0x54>
 80016c2:	a201      	add	r2, pc, #4	@ (adr r2, 80016c8 <obtenerGiro+0x34>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016dd 	.word	0x080016dd
 80016d0:	080016e1 	.word	0x080016e1
 80016d4:	080016e5 	.word	0x080016e5
	case 0:
		return adelante;
 80016d8:	2300      	movs	r3, #0
 80016da:	e006      	b.n	80016ea <obtenerGiro+0x56>
	case 1:
		return derecha;
 80016dc:	2302      	movs	r3, #2
 80016de:	e004      	b.n	80016ea <obtenerGiro+0x56>
	case 2:
		return giro_180;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e002      	b.n	80016ea <obtenerGiro+0x56>
	case 3:
		return izquierda;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <obtenerGiro+0x56>
	default:
		return 100; // Error
 80016e8:	2364      	movs	r3, #100	@ 0x64
	}
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	460a      	mov	r2, r1
 8001702:	71fb      	strb	r3, [r7, #7]
 8001704:	4613      	mov	r3, r2
 8001706:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001708:	79bb      	ldrb	r3, [r7, #6]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d81a      	bhi.n	8001744 <act_ubicacion+0x4c>
 800170e:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <act_ubicacion+0x1c>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	0800172d 	.word	0x0800172d
 800171c:	08001735 	.word	0x08001735
 8001720:	0800173d 	.word	0x0800173d
	case 0:
		return ubicacion + 4;
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	3304      	adds	r3, #4
 8001728:	b2db      	uxtb	r3, r3
 800172a:	e00c      	b.n	8001746 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	3b01      	subs	r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	e008      	b.n	8001746 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	3b04      	subs	r3, #4
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e004      	b.n	8001746 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3301      	adds	r3, #1
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e000      	b.n	8001746 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8001744:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <promediar>:

void promediar(uint16_t *buffer) {
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e012      	b.n	8001790 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3302      	adds	r3, #2
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	4413      	add	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3304      	adds	r3, #4
 8001788:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b0f      	cmp	r3, #15
 8001794:	dde9      	ble.n	800176a <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <promediar+0x64>)
 800179e:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <promediar+0x68>)
 80017a8:	801a      	strh	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	371c      	adds	r7, #28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200001dc 	.word	0x200001dc
 80017bc:	200001de 	.word	0x200001de

080017c0 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80017ca:	f7ff ffc3 	bl	8001754 <promediar>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000015c 	.word	0x2000015c

080017dc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 80017e4:	4803      	ldr	r0, [pc, #12]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0x18>)
 80017e6:	f7ff ffb5 	bl	8001754 <promediar>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000019c 	.word	0x2000019c

080017f8 <correccion_avanzar>:
void correccion_avanzar(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <correccion_avanzar+0x54>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29a      	uxth	r2, r3
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <correccion_avanzar+0x58>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d209      	bcs.n	800181e <correccion_avanzar+0x26>
 800180a:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <correccion_avanzar+0x5c>)
 800180c:	881a      	ldrh	r2, [r3, #0]
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <correccion_avanzar+0x60>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b29b      	uxth	r3, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	d202      	bcs.n	800181e <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8001818:	f000 f870 	bl	80018fc <apagar_derecha>
 800181c:	e013      	b.n	8001846 <correccion_avanzar+0x4e>
	} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 800181e:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <correccion_avanzar+0x58>)
 8001820:	881a      	ldrh	r2, [r3, #0]
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <correccion_avanzar+0x54>)
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	b29b      	uxth	r3, r3
 8001828:	429a      	cmp	r2, r3
 800182a:	d209      	bcs.n	8001840 <correccion_avanzar+0x48>
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <correccion_avanzar+0x60>)
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <correccion_avanzar+0x5c>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d202      	bcs.n	8001840 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 800183a:	f000 f837 	bl	80018ac <apagar_izquierda>
 800183e:	e002      	b.n	8001846 <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8001840:	f000 f80c 	bl	800185c <avanzar>
	}
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	200001dc 	.word	0x200001dc
 8001850:	2000014c 	.word	0x2000014c
 8001854:	2000014e 	.word	0x2000014e
 8001858:	200001de 	.word	0x200001de

0800185c <avanzar>:
void avanzar(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001860:	2200      	movs	r2, #0
 8001862:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001866:	480f      	ldr	r0, [pc, #60]	@ (80018a4 <avanzar+0x48>)
 8001868:	f001 ffba 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 800186c:	2201      	movs	r2, #1
 800186e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001872:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <avanzar+0x48>)
 8001874:	f001 ffb4 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800187e:	4809      	ldr	r0, [pc, #36]	@ (80018a4 <avanzar+0x48>)
 8001880:	f001 ffae 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <avanzar+0x48>)
 800188c:	f001 ffa8 	bl	80037e0 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001890:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <avanzar+0x4c>)
 8001892:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001896:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <avanzar+0x4c>)
 800189a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800189e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40000400 	.word	0x40000400

080018ac <apagar_izquierda>:

void apagar_izquierda(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b6:	480f      	ldr	r0, [pc, #60]	@ (80018f4 <apagar_izquierda+0x48>)
 80018b8:	f001 ff92 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c2:	480c      	ldr	r0, [pc, #48]	@ (80018f4 <apagar_izquierda+0x48>)
 80018c4:	f001 ff8c 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ce:	4809      	ldr	r0, [pc, #36]	@ (80018f4 <apagar_izquierda+0x48>)
 80018d0:	f001 ff86 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018da:	4806      	ldr	r0, [pc, #24]	@ (80018f4 <apagar_izquierda+0x48>)
 80018dc:	f001 ff80 	bl	80037e0 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <apagar_izquierda+0x4c>)
 80018e2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <apagar_izquierda+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40000400 	.word	0x40000400

080018fc <apagar_derecha>:

void apagar_derecha(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001906:	480f      	ldr	r0, [pc, #60]	@ (8001944 <apagar_derecha+0x48>)
 8001908:	f001 ff6a 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001912:	480c      	ldr	r0, [pc, #48]	@ (8001944 <apagar_derecha+0x48>)
 8001914:	f001 ff64 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800191e:	4809      	ldr	r0, [pc, #36]	@ (8001944 <apagar_derecha+0x48>)
 8001920:	f001 ff5e 	bl	80037e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <apagar_derecha+0x48>)
 800192c:	f001 ff58 	bl	80037e0 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001930:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <apagar_derecha+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001936:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <apagar_derecha+0x4c>)
 8001938:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020400 	.word	0x40020400
 8001948:	40000400 	.word	0x40000400

0800194c <mini_retroceso>:

void mini_retroceso(void) {
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001950:	2002      	movs	r0, #2
 8001952:	f000 f8b5 	bl	8001ac0 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001956:	2002      	movs	r0, #2
 8001958:	f000 f8e4 	bl	8001b24 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 800195c:	2064      	movs	r0, #100	@ 0x64
 800195e:	f000 fce3 	bl	8002328 <HAL_Delay>
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}

08001966 <mini_avance>:
void mini_avance(void) {
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 800196a:	2001      	movs	r0, #1
 800196c:	f000 f8a8 	bl	8001ac0 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 f8d7 	bl	8001b24 <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001976:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800197a:	f000 fcd5 	bl	8002328 <HAL_Delay>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b03      	cmp	r3, #3
 8001992:	f200 808f 	bhi.w	8001ab4 <ejecutarGiro+0x130>
 8001996:	a201      	add	r2, pc, #4	@ (adr r2, 800199c <ejecutarGiro+0x18>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	08001a1f 	.word	0x08001a1f
 80019a4:	080019b3 	.word	0x080019b3
 80019a8:	08001a8f 	.word	0x08001a8f
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 80019ac:	f7ff ffdb 	bl	8001966 <mini_avance>
		break;
 80019b0:	e080      	b.n	8001ab4 <ejecutarGiro+0x130>
	case derecha:
		if (contador_giros == 0) {
 80019b2:	4b42      	ldr	r3, [pc, #264]	@ (8001abc <ejecutarGiro+0x138>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d11c      	bne.n	80019f4 <ejecutarGiro+0x70>
			contador_giros = contador_giros + 1;
 80019ba:	4b40      	ldr	r3, [pc, #256]	@ (8001abc <ejecutarGiro+0x138>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <ejecutarGiro+0x138>)
 80019c4:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f000 f87a 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 f8a9 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 80019d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019d6:	f000 fca7 	bl	8002328 <HAL_Delay>
			setMotorIzquierdo(avance);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 f870 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 80019e0:	2002      	movs	r0, #2
 80019e2:	f000 f89f 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 80019e6:	f240 2071 	movw	r0, #625	@ 0x271
 80019ea:	f000 fc9d 	bl	8002328 <HAL_Delay>
			mini_avance();
 80019ee:	f7ff ffba 	bl	8001966 <mini_avance>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 80019f2:	e05f      	b.n	8001ab4 <ejecutarGiro+0x130>
			contador_giros = contador_giros + 1;
 80019f4:	4b31      	ldr	r3, [pc, #196]	@ (8001abc <ejecutarGiro+0x138>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b2f      	ldr	r3, [pc, #188]	@ (8001abc <ejecutarGiro+0x138>)
 80019fe:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001a00:	f7ff ffa4 	bl	800194c <mini_retroceso>
			setMotorIzquierdo(avance);
 8001a04:	2001      	movs	r0, #1
 8001a06:	f000 f85b 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f000 f88a 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001a10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001a14:	f000 fc88 	bl	8002328 <HAL_Delay>
			mini_avance();
 8001a18:	f7ff ffa5 	bl	8001966 <mini_avance>
		break;
 8001a1c:	e04a      	b.n	8001ab4 <ejecutarGiro+0x130>
	case izquierda:
		if (contador_giros == 0) {
 8001a1e:	4b27      	ldr	r3, [pc, #156]	@ (8001abc <ejecutarGiro+0x138>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d11c      	bne.n	8001a60 <ejecutarGiro+0xdc>
			contador_giros = contador_giros + 1;
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <ejecutarGiro+0x138>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <ejecutarGiro+0x138>)
 8001a30:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 f844 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f000 f873 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001a3e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a42:	f000 fc71 	bl	8002328 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001a46:	2002      	movs	r0, #2
 8001a48:	f000 f83a 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f000 f869 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 8001a52:	f240 2071 	movw	r0, #625	@ 0x271
 8001a56:	f000 fc67 	bl	8002328 <HAL_Delay>
			mini_avance();
 8001a5a:	f7ff ff84 	bl	8001966 <mini_avance>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001a5e:	e029      	b.n	8001ab4 <ejecutarGiro+0x130>
			contador_giros = contador_giros + 1;
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <ejecutarGiro+0x138>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <ejecutarGiro+0x138>)
 8001a6a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001a6c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a70:	f000 fc5a 	bl	8002328 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001a74:	2002      	movs	r0, #2
 8001a76:	f000 f823 	bl	8001ac0 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f000 f852 	bl	8001b24 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001a80:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001a84:	f000 fc50 	bl	8002328 <HAL_Delay>
			mini_avance();
 8001a88:	f7ff ff6d 	bl	8001966 <mini_avance>
		break;
 8001a8c:	e012      	b.n	8001ab4 <ejecutarGiro+0x130>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <ejecutarGiro+0x138>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <ejecutarGiro+0x138>)
 8001a98:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 f810 	bl	8001ac0 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001aa0:	2002      	movs	r0, #2
 8001aa2:	f000 f83f 	bl	8001b24 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001aa6:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001aaa:	f000 fc3d 	bl	8002328 <HAL_Delay>
		mini_avance();
 8001aae:	f7ff ff5a 	bl	8001966 <mini_avance>
		break;
 8001ab2:	bf00      	nop

	}
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000146 	.word	0x20000146

08001ac0 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <setMotorIzquierdo+0x5c>)
 8001acc:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d002      	beq.n	8001ade <setMotorIzquierdo+0x1e>
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d00d      	beq.n	8001af8 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001adc:	e019      	b.n	8001b12 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ae4:	480e      	ldr	r0, [pc, #56]	@ (8001b20 <setMotorIzquierdo+0x60>)
 8001ae6:	f001 fe7b 	bl	80037e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001aea:	2201      	movs	r2, #1
 8001aec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001af0:	480b      	ldr	r0, [pc, #44]	@ (8001b20 <setMotorIzquierdo+0x60>)
 8001af2:	f001 fe75 	bl	80037e0 <HAL_GPIO_WritePin>
		break;
 8001af6:	e00c      	b.n	8001b12 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afe:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <setMotorIzquierdo+0x60>)
 8001b00:	f001 fe6e 	bl	80037e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b0a:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <setMotorIzquierdo+0x60>)
 8001b0c:	f001 fe68 	bl	80037e0 <HAL_GPIO_WritePin>
		break;
 8001b10:	bf00      	nop
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40020400 	.word	0x40020400

08001b24 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <setMotorDerecho+0x5c>)
 8001b30:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b34:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d002      	beq.n	8001b42 <setMotorDerecho+0x1e>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d00d      	beq.n	8001b5c <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001b40:	e019      	b.n	8001b76 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b48:	480e      	ldr	r0, [pc, #56]	@ (8001b84 <setMotorDerecho+0x60>)
 8001b4a:	f001 fe49 	bl	80037e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b54:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <setMotorDerecho+0x60>)
 8001b56:	f001 fe43 	bl	80037e0 <HAL_GPIO_WritePin>
		break;
 8001b5a:	e00c      	b.n	8001b76 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b62:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <setMotorDerecho+0x60>)
 8001b64:	f001 fe3c 	bl	80037e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <setMotorDerecho+0x60>)
 8001b70:	f001 fe36 	bl	80037e0 <HAL_GPIO_WritePin>
		break;
 8001b74:	bf00      	nop
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40020400 	.word	0x40020400

08001b88 <verificar_sensor>:

bool verificar_sensor(void) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 8001b8e:	2300      	movs	r3, #0
 8001b90:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	4812      	ldr	r0, [pc, #72]	@ (8001be0 <verificar_sensor+0x58>)
 8001b96:	f001 fe0b 	bl	80037b0 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <verificar_sensor+0x5c>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	79ba      	ldrb	r2, [r7, #6]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d015      	beq.n	8001bd4 <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001ba8:	2014      	movs	r0, #20
 8001baa:	f000 fbbd 	bl	8002328 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001bae:	2180      	movs	r1, #128	@ 0x80
 8001bb0:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <verificar_sensor+0x58>)
 8001bb2:	f001 fdfd 	bl	80037b0 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 8001bba:	797a      	ldrb	r2, [r7, #5]
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d102      	bne.n	8001bc8 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 8001bc2:	4a08      	ldr	r2, [pc, #32]	@ (8001be4 <verificar_sensor+0x5c>)
 8001bc4:	797b      	ldrb	r3, [r7, #5]
 8001bc6:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <verificar_sensor+0x5c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <verificar_sensor+0x4c>
			pedido = true;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020800 	.word	0x40020800
 8001be4:	20000006 	.word	0x20000006

08001be8 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d83a      	bhi.n	8001c74 <act_pared+0x8c>
 8001bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8001c04 <act_pared+0x1c>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c15 	.word	0x08001c15
 8001c08:	08001c2d 	.word	0x08001c2d
 8001c0c:	08001c45 	.word	0x08001c45
 8001c10:	08001c5d 	.word	0x08001c5d
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	440b      	add	r3, r1
 8001c22:	f042 0208 	orr.w	r2, r2, #8
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	701a      	strb	r2, [r3, #0]
		break;
 8001c2a:	e025      	b.n	8001c78 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	440b      	add	r3, r1
 8001c3a:	f042 0204 	orr.w	r2, r2, #4
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
		break;
 8001c42:	e019      	b.n	8001c78 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	440b      	add	r3, r1
 8001c52:	f042 0202 	orr.w	r2, r2, #2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
		break;
 8001c5a:	e00d      	b.n	8001c78 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	440b      	add	r3, r1
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e001      	b.n	8001c78 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001c74:	2300      	movs	r3, #0
 8001c76:	e003      	b.n	8001c80 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	781b      	ldrb	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	e08b      	b.n	8001db4 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e081      	b.n	8001da6 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001ca2:	2364      	movs	r3, #100	@ 0x64
 8001ca4:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b0b      	cmp	r3, #11
 8001caa:	dc15      	bgt.n	8001cd8 <act_pesos+0x4c>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10d      	bne.n	8001cd8 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	7dfa      	ldrb	r2, [r7, #23]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d905      	bls.n	8001cd8 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d01e      	beq.n	8001d1c <act_pesos+0x90>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d01b      	beq.n	8001d1c <act_pesos+0x90>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b0b      	cmp	r3, #11
 8001ce8:	d018      	beq.n	8001d1c <act_pesos+0x90>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b0f      	cmp	r3, #15
 8001cee:	d015      	beq.n	8001d1c <act_pesos+0x90>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3301      	adds	r3, #1
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	7dfa      	ldrb	r2, [r7, #23]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d905      	bls.n	8001d1c <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	3301      	adds	r3, #1
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	dd15      	ble.n	8001d4e <act_pesos+0xc2>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	4413      	add	r3, r2
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d10d      	bne.n	8001d4e <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3b04      	subs	r3, #4
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	7dfa      	ldrb	r2, [r7, #23]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d905      	bls.n	8001d4e <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b04      	subs	r3, #4
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d119      	bne.n	8001d92 <act_pesos+0x106>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d016      	beq.n	8001d92 <act_pesos+0x106>
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d013      	beq.n	8001d92 <act_pesos+0x106>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d010      	beq.n	8001d92 <act_pesos+0x106>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d00d      	beq.n	8001d92 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	7dfa      	ldrb	r2, [r7, #23]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d905      	bls.n	8001d92 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	7dfa      	ldrb	r2, [r7, #23]
 8001d9a:	3201      	adds	r2, #1
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b0e      	cmp	r3, #14
 8001daa:	f77f af7a 	ble.w	8001ca2 <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3301      	adds	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b0e      	cmp	r3, #14
 8001db8:	f77f af70 	ble.w	8001c9c <act_pesos+0x10>
		}
	}
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion) {
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 8001dda:	230f      	movs	r3, #15
 8001ddc:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	3304      	adds	r3, #4
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4413      	add	r3, r2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	7dfa      	ldrb	r2, [r7, #23]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d915      	bls.n	8001e1a <calculo_minimo_peso+0x4e>
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <calculo_minimo_peso+0x4e>
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b0b      	cmp	r3, #11
 8001e02:	d80a      	bhi.n	8001e1a <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	3304      	adds	r3, #4
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	3304      	adds	r3, #4
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <calculo_minimo_peso+0x138>)
 8001e18:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	7dfa      	ldrb	r2, [r7, #23]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d91e      	bls.n	8001e68 <calculo_minimo_peso+0x9c>
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	4413      	add	r3, r2
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d116      	bne.n	8001e68 <calculo_minimo_peso+0x9c>
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d013      	beq.n	8001e68 <calculo_minimo_peso+0x9c>
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	d010      	beq.n	8001e68 <calculo_minimo_peso+0x9c>
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	2b0b      	cmp	r3, #11
 8001e4a:	d00d      	beq.n	8001e68 <calculo_minimo_peso+0x9c>
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	d00a      	beq.n	8001e68 <calculo_minimo_peso+0x9c>
		minimo_peso = peso[ubicacion + 1];
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	3301      	adds	r3, #1
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b27      	ldr	r3, [pc, #156]	@ (8001f04 <calculo_minimo_peso+0x138>)
 8001e66:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	7dfa      	ldrb	r2, [r7, #23]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d915      	bls.n	8001ea4 <calculo_minimo_peso+0xd8>
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <calculo_minimo_peso+0xd8>
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d90a      	bls.n	8001ea4 <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 8001e8e:	79fb      	ldrb	r3, [r7, #7]
 8001e90:	3b04      	subs	r3, #4
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	3b04      	subs	r3, #4
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <calculo_minimo_peso+0x138>)
 8001ea2:	701a      	strb	r2, [r3, #0]

	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	7dfa      	ldrb	r2, [r7, #23]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d91e      	bls.n	8001ef2 <calculo_minimo_peso+0x126>
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	68ba      	ldr	r2, [r7, #8]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d116      	bne.n	8001ef2 <calculo_minimo_peso+0x126>
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d013      	beq.n	8001ef2 <calculo_minimo_peso+0x126>
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	2b07      	cmp	r3, #7
 8001ece:	d010      	beq.n	8001ef2 <calculo_minimo_peso+0x126>
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	2b0b      	cmp	r3, #11
 8001ed4:	d00d      	beq.n	8001ef2 <calculo_minimo_peso+0x126>
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d00a      	beq.n	8001ef2 <calculo_minimo_peso+0x126>
		minimo_peso = peso[ubicacion - 1];
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <calculo_minimo_peso+0x138>)
 8001ef0:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 8001ef2:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <calculo_minimo_peso+0x138>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <filtrado_pared>:
void filtrado_pared(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 8001f0e:	f000 f9ff 	bl	8002310 <HAL_GetTick>
 8001f12:	6078      	str	r0, [r7, #4]
	if (tiempo_rebotes <= (tiempo_actual - tiempo_inicio)) {
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <filtrado_pared+0x3c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b1d      	cmp	r3, #29
 8001f1e:	d90c      	bls.n	8001f3a <filtrado_pared+0x32>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8001f20:	2140      	movs	r1, #64	@ 0x40
 8001f22:	4809      	ldr	r0, [pc, #36]	@ (8001f48 <filtrado_pared+0x40>)
 8001f24:	f001 fc44 	bl	80037b0 <HAL_GPIO_ReadPin>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <filtrado_pared+0x32>

}


*/
			solicitud_actualizar = 1;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <filtrado_pared+0x44>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
			interrupcion_pared = 0;
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <filtrado_pared+0x48>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000154 	.word	0x20000154
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	20000158 	.word	0x20000158
 8001f50:	20000150 	.word	0x20000150

08001f54 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f58:	b672      	cpsid	i
}
 8001f5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <Error_Handler+0x8>

08001f60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_MspInit+0x4c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f9e:	2007      	movs	r0, #7
 8001fa0:	f000 feb8 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800208c <HAL_ADC_MspInit+0xdc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d158      	bne.n	8002084 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	4a2d      	ldr	r2, [pc, #180]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	613b      	str	r3, [r7, #16]
 8001fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	4b27      	ldr	r3, [pc, #156]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b24      	ldr	r3, [pc, #144]	@ (8002090 <HAL_ADC_MspInit+0xe0>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 800200a:	2303      	movs	r3, #3
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200e:	2303      	movs	r3, #3
 8002010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	481d      	ldr	r0, [pc, #116]	@ (8002094 <HAL_ADC_MspInit+0xe4>)
 800201e:	f001 fa2b 	bl	8003478 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002024:	4a1d      	ldr	r2, [pc, #116]	@ (800209c <HAL_ADC_MspInit+0xec>)
 8002026:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800202a:	2200      	movs	r2, #0
 800202c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002034:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800203a:	4b17      	ldr	r3, [pc, #92]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800203c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002040:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002044:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002048:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800204a:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800204c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002050:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002052:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002054:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002058:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800205c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002060:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002068:	480b      	ldr	r0, [pc, #44]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800206a:	f000 fe95 	bl	8002d98 <HAL_DMA_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002074:	f7ff ff6e 	bl	8001f54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
 800207e:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <HAL_ADC_MspInit+0xe8>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	@ 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40012000 	.word	0x40012000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020400 	.word	0x40020400
 8002098:	20000078 	.word	0x20000078
 800209c:	40026410 	.word	0x40026410

080020a0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	@ (80020dc <HAL_TIM_Base_MspInit+0x3c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a09      	ldr	r2, [pc, #36]	@ (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_TIM_Base_MspInit+0x40>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	60da      	str	r2, [r3, #12]
 80020fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a12      	ldr	r2, [pc, #72]	@ (800214c <HAL_TIM_MspPostInit+0x68>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d11e      	bne.n	8002144 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_TIM_MspPostInit+0x6c>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_TIM_MspPostInit+0x6c>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_TIM_MspPostInit+0x6c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 8002122:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002126:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002134:	2302      	movs	r3, #2
 8002136:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	4619      	mov	r1, r3
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <HAL_TIM_MspPostInit+0x70>)
 8002140:	f001 f99a 	bl	8003478 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002144:	bf00      	nop
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40000400 	.word	0x40000400
 8002150:	40023800 	.word	0x40023800
 8002154:	40020800 	.word	0x40020800

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <NMI_Handler+0x4>

08002160 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <HardFault_Handler+0x4>

08002168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <MemManage_Handler+0x4>

08002170 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <BusFault_Handler+0x4>

08002178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800217c:	bf00      	nop
 800217e:	e7fd      	b.n	800217c <UsageFault_Handler+0x4>

08002180 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f000 f89b 	bl	80022e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <DMA2_Stream0_IRQHandler+0x10>)
 80021be:	f000 fef1 	bl	8002fa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000078 	.word	0x20000078

080021cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <SystemInit+0x20>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <SystemInit+0x20>)
 80021d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002228 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f4:	f7ff ffea 	bl	80021cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021f8:	480c      	ldr	r0, [pc, #48]	@ (800222c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fa:	490d      	ldr	r1, [pc, #52]	@ (8002230 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002200:	e002      	b.n	8002208 <LoopCopyDataInit>

08002202 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002202:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002204:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002206:	3304      	adds	r3, #4

08002208 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002208:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800220c:	d3f9      	bcc.n	8002202 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002210:	4c0a      	ldr	r4, [pc, #40]	@ (800223c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002214:	e001      	b.n	800221a <LoopFillZerobss>

08002216 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002216:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002218:	3204      	adds	r2, #4

0800221a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800221c:	d3fb      	bcc.n	8002216 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800221e:	f002 fdf1 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002222:	f7fe fc6d 	bl	8000b00 <main>
  bx  lr    
 8002226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002228:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800222c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002230:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002234:	08004e8c 	.word	0x08004e8c
  ldr r2, =_sbss
 8002238:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800223c:	200001e4 	.word	0x200001e4

08002240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002240:	e7fe      	b.n	8002240 <ADC_IRQHandler>
	...

08002244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002248:	4b0e      	ldr	r3, [pc, #56]	@ (8002284 <HAL_Init+0x40>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_Init+0x40>)
 800224e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_Init+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0a      	ldr	r2, [pc, #40]	@ (8002284 <HAL_Init+0x40>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800225e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a07      	ldr	r2, [pc, #28]	@ (8002284 <HAL_Init+0x40>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226c:	2003      	movs	r0, #3
 800226e:	f000 fd51 	bl	8002d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002272:	2000      	movs	r0, #0
 8002274:	f000 f808 	bl	8002288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002278:	f7ff fe72 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023c00 	.word	0x40023c00

08002288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_InitTick+0x54>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x58>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229e:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fd69 	bl	8002d7e <HAL_SYSTICK_Config>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00e      	b.n	80022d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b0f      	cmp	r3, #15
 80022ba:	d80a      	bhi.n	80022d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022bc:	2200      	movs	r2, #0
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	f04f 30ff 	mov.w	r0, #4294967295
 80022c4:	f000 fd31 	bl	8002d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c8:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <HAL_InitTick+0x5c>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000010 	.word	0x20000010
 80022e4:	2000000c 	.word	0x2000000c

080022e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x20>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x24>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a04      	ldr	r2, [pc, #16]	@ (800230c <HAL_IncTick+0x24>)
 80022fa:	6013      	str	r3, [r2, #0]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000010 	.word	0x20000010
 800230c:	200001e0 	.word	0x200001e0

08002310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_GetTick+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200001e0 	.word	0x200001e0

08002328 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002330:	f7ff ffee 	bl	8002310 <HAL_GetTick>
 8002334:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d005      	beq.n	800234e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <HAL_Delay+0x44>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800234e:	bf00      	nop
 8002350:	f7ff ffde 	bl	8002310 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	429a      	cmp	r2, r3
 800235e:	d8f7      	bhi.n	8002350 <HAL_Delay+0x28>
  {
  }
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010

08002370 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e033      	b.n	80023ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe0e 	bl	8001fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023b6:	f023 0302 	bic.w	r3, r3, #2
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa58 	bl	8002878 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80023de:	e001      	b.n	80023e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <HAL_ADC_Start_DMA+0x22>
 8002416:	2302      	movs	r3, #2
 8002418:	e0eb      	b.n	80025f2 <HAL_ADC_Start_DMA+0x1fa>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d018      	beq.n	8002462 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002440:	4b6e      	ldr	r3, [pc, #440]	@ (80025fc <HAL_ADC_Start_DMA+0x204>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <HAL_ADC_Start_DMA+0x208>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0c9a      	lsrs	r2, r3, #18
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002454:	e002      	b.n	800245c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3b01      	subs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f9      	bne.n	8002456 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002470:	d107      	bne.n	8002482 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002480:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	f040 80a3 	bne.w	80025d8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d0:	d106      	bne.n	80024e0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	f023 0206 	bic.w	r2, r3, #6
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80024de:	e002      	b.n	80024e6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ee:	4b45      	ldr	r3, [pc, #276]	@ (8002604 <HAL_ADC_Start_DMA+0x20c>)
 80024f0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <HAL_ADC_Start_DMA+0x210>)
 80024f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	4a43      	ldr	r2, [pc, #268]	@ (800260c <HAL_ADC_Start_DMA+0x214>)
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002506:	4a42      	ldr	r2, [pc, #264]	@ (8002610 <HAL_ADC_Start_DMA+0x218>)
 8002508:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002512:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002522:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002532:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	334c      	adds	r3, #76	@ 0x4c
 800253e:	4619      	mov	r1, r3
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f000 fcd6 	bl	8002ef4 <HAL_DMA_Start_IT>
 8002548:	4603      	mov	r3, r0
 800254a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b00      	cmp	r3, #0
 8002556:	d12a      	bne.n	80025ae <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a2d      	ldr	r2, [pc, #180]	@ (8002614 <HAL_ADC_Start_DMA+0x21c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d015      	beq.n	800258e <HAL_ADC_Start_DMA+0x196>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2c      	ldr	r2, [pc, #176]	@ (8002618 <HAL_ADC_Start_DMA+0x220>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d105      	bne.n	8002578 <HAL_ADC_Start_DMA+0x180>
 800256c:	4b25      	ldr	r3, [pc, #148]	@ (8002604 <HAL_ADC_Start_DMA+0x20c>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a27      	ldr	r2, [pc, #156]	@ (800261c <HAL_ADC_Start_DMA+0x224>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d136      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
 8002582:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_ADC_Start_DMA+0x20c>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d130      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d129      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e020      	b.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <HAL_ADC_Start_DMA+0x21c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d11b      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d114      	bne.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	e00b      	b.n	80025f0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	431bde83 	.word	0x431bde83
 8002604:	40012300 	.word	0x40012300
 8002608:	08002a71 	.word	0x08002a71
 800260c:	08002b2b 	.word	0x08002b2b
 8002610:	08002b47 	.word	0x08002b47
 8002614:	40012000 	.word	0x40012000
 8002618:	40012100 	.word	0x40012100
 800261c:	40012200 	.word	0x40012200

08002620 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1c>
 800264c:	2302      	movs	r3, #2
 800264e:	e105      	b.n	800285c <HAL_ADC_ConfigChannel+0x228>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d925      	bls.n	80026ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	4613      	mov	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4413      	add	r3, r2
 8002674:	3b1e      	subs	r3, #30
 8002676:	2207      	movs	r2, #7
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43da      	mvns	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	400a      	ands	r2, r1
 8002684:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68d9      	ldr	r1, [r3, #12]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b29b      	uxth	r3, r3
 8002696:	4618      	mov	r0, r3
 8002698:	4603      	mov	r3, r0
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4403      	add	r3, r0
 800269e:	3b1e      	subs	r3, #30
 80026a0:	409a      	lsls	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	e022      	b.n	80026f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6919      	ldr	r1, [r3, #16]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	2207      	movs	r2, #7
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	400a      	ands	r2, r1
 80026ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6919      	ldr	r1, [r3, #16]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	4603      	mov	r3, r0
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4403      	add	r3, r0
 80026e8:	409a      	lsls	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d824      	bhi.n	8002744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	3b05      	subs	r3, #5
 800270c:	221f      	movs	r2, #31
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	400a      	ands	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	4618      	mov	r0, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b05      	subs	r3, #5
 8002736:	fa00 f203 	lsl.w	r2, r0, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	635a      	str	r2, [r3, #52]	@ 0x34
 8002742:	e04c      	b.n	80027de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d824      	bhi.n	8002796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	3b23      	subs	r3, #35	@ 0x23
 800275e:	221f      	movs	r2, #31
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43da      	mvns	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	400a      	ands	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3b23      	subs	r3, #35	@ 0x23
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
 8002794:	e023      	b.n	80027de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b41      	subs	r3, #65	@ 0x41
 80027a8:	221f      	movs	r2, #31
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	400a      	ands	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4618      	mov	r0, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	3b41      	subs	r3, #65	@ 0x41
 80027d2:	fa00 f203 	lsl.w	r2, r0, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027de:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <HAL_ADC_ConfigChannel+0x234>)
 80027e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a21      	ldr	r2, [pc, #132]	@ (800286c <HAL_ADC_ConfigChannel+0x238>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d109      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1cc>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b12      	cmp	r3, #18
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a19      	ldr	r2, [pc, #100]	@ (800286c <HAL_ADC_ConfigChannel+0x238>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d123      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x21e>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d003      	beq.n	800281a <HAL_ADC_ConfigChannel+0x1e6>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b11      	cmp	r3, #17
 8002818:	d11b      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d111      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_ADC_ConfigChannel+0x23c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_ADC_ConfigChannel+0x240>)
 8002834:	fba2 2303 	umull	r2, r3, r2, r3
 8002838:	0c9a      	lsrs	r2, r3, #18
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002844:	e002      	b.n	800284c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f9      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40012300 	.word	0x40012300
 800286c:	40012000 	.word	0x40012000
 8002870:	20000008 	.word	0x20000008
 8002874:	431bde83 	.word	0x431bde83

08002878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002880:	4b79      	ldr	r3, [pc, #484]	@ (8002a68 <ADC_Init+0x1f0>)
 8002882:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	431a      	orrs	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80028d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	4a58      	ldr	r2, [pc, #352]	@ (8002a6c <ADC_Init+0x1f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d022      	beq.n	8002956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800291e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	e00f      	b.n	8002976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002974:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0202 	bic.w	r2, r2, #2
 8002984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6899      	ldr	r1, [r3, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7e1b      	ldrb	r3, [r3, #24]
 8002990:	005a      	lsls	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d01b      	beq.n	80029dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80029c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6859      	ldr	r1, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ce:	3b01      	subs	r3, #1
 80029d0:	035a      	lsls	r2, r3, #13
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	e007      	b.n	80029ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	051a      	lsls	r2, r3, #20
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6899      	ldr	r1, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a2e:	025a      	lsls	r2, r3, #9
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6899      	ldr	r1, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	029a      	lsls	r2, r3, #10
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40012300 	.word	0x40012300
 8002a6c:	0f000001 	.word	0x0f000001

08002a70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d13c      	bne.n	8002b04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d12b      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d127      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d006      	beq.n	8002ac8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d119      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0220 	bic.w	r2, r2, #32
 8002ad6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d105      	bne.n	8002afc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7fe fe6d 	bl	80017dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b02:	e00e      	b.n	8002b22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f003 0310 	and.w	r3, r3, #16
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f7ff fd85 	bl	8002620 <HAL_ADC_ErrorCallback>
}
 8002b16:	e004      	b.n	8002b22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7fe fe41 	bl	80017c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b52:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff fd5a 	bl	8002620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	6039      	str	r1, [r7, #0]
 8002c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	db0a      	blt.n	8002c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	490c      	ldr	r1, [pc, #48]	@ (8002c60 <__NVIC_SetPriority+0x4c>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	440b      	add	r3, r1
 8002c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c3c:	e00a      	b.n	8002c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <__NVIC_SetPriority+0x50>)
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	0112      	lsls	r2, r2, #4
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	440b      	add	r3, r1
 8002c52:	761a      	strb	r2, [r3, #24]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	@ 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f1c3 0307 	rsb	r3, r3, #7
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	bf28      	it	cs
 8002c86:	2304      	movcs	r3, #4
 8002c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d902      	bls.n	8002c98 <NVIC_EncodePriority+0x30>
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3b03      	subs	r3, #3
 8002c96:	e000      	b.n	8002c9a <NVIC_EncodePriority+0x32>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	401a      	ands	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	43d9      	mvns	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc0:	4313      	orrs	r3, r2
         );
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3724      	adds	r7, #36	@ 0x24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce0:	d301      	bcc.n	8002ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00f      	b.n	8002d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <SysTick_Config+0x40>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cee:	210f      	movs	r1, #15
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	f7ff ff8e 	bl	8002c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <SysTick_Config+0x40>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cfe:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <SysTick_Config+0x40>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	e000e010 	.word	0xe000e010

08002d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff29 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	4603      	mov	r3, r0
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
 8002d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3c:	f7ff ff3e 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff8e 	bl	8002c68 <NVIC_EncodePriority>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff5d 	bl	8002c14 <__NVIC_SetPriority>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff31 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffa2 	bl	8002cd0 <SysTick_Config>
 8002d8c:	4603      	mov	r3, r0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff fab4 	bl	8002310 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e099      	b.n	8002ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd4:	e00f      	b.n	8002df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dd6:	f7ff fa9b 	bl	8002310 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d908      	bls.n	8002df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e078      	b.n	8002ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e8      	bne.n	8002dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4b38      	ldr	r3, [pc, #224]	@ (8002ef0 <HAL_DMA_Init+0x158>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f023 0307 	bic.w	r3, r3, #7
 8002e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d117      	bne.n	8002eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fa6f 	bl	8003380 <DMA_CheckFifoParam>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e016      	b.n	8002ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa26 	bl	8003314 <DMA_CalcBaseAndBitshift>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	223f      	movs	r2, #63	@ 0x3f
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	f010803f 	.word	0xf010803f

08002ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_DMA_Start_IT+0x26>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e040      	b.n	8002f9c <HAL_DMA_Start_IT+0xa8>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d12f      	bne.n	8002f8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f9b8 	bl	80032b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	223f      	movs	r2, #63	@ 0x3f
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0216 	orr.w	r2, r2, #22
 8002f62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	e005      	b.n	8002f9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
 8002f98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80031ec <HAL_DMA_IRQHandler+0x248>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a8e      	ldr	r2, [pc, #568]	@ (80031f0 <HAL_DMA_IRQHandler+0x24c>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a9b      	lsrs	r3, r3, #10
 8002fbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	2208      	movs	r2, #8
 8002fd0:	409a      	lsls	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01a      	beq.n	8003010 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	409a      	lsls	r2, r3
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d012      	beq.n	8003046 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003032:	2201      	movs	r2, #1
 8003034:	409a      	lsls	r2, r3
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304a:	2204      	movs	r2, #4
 800304c:	409a      	lsls	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d012      	beq.n	800307c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	2204      	movs	r2, #4
 800306a:	409a      	lsls	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003080:	2210      	movs	r2, #16
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4013      	ands	r3, r2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d043      	beq.n	8003114 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d03c      	beq.n	8003114 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800309e:	2210      	movs	r2, #16
 80030a0:	409a      	lsls	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d108      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d024      	beq.n	8003114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
 80030d2:	e01f      	b.n	8003114 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
 80030e4:	e016      	b.n	8003114 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d107      	bne.n	8003104 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0208 	bic.w	r2, r2, #8
 8003102:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	2220      	movs	r2, #32
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 808f 	beq.w	8003244 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8087 	beq.w	8003244 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313a:	2220      	movs	r2, #32
 800313c:	409a      	lsls	r2, r3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b05      	cmp	r3, #5
 800314c:	d136      	bne.n	80031bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0216 	bic.w	r2, r2, #22
 800315c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800316c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HAL_DMA_IRQHandler+0x1da>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800317a:	2b00      	cmp	r3, #0
 800317c:	d007      	beq.n	800318e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0208 	bic.w	r2, r2, #8
 800318c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	223f      	movs	r2, #63	@ 0x3f
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d07e      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
        }
        return;
 80031ba:	e079      	b.n	80032b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01d      	beq.n	8003206 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d031      	beq.n	8003244 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e02c      	b.n	8003244 <HAL_DMA_IRQHandler+0x2a0>
 80031ea:	bf00      	nop
 80031ec:	20000008 	.word	0x20000008
 80031f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
 8003204:	e01e      	b.n	8003244 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10f      	bne.n	8003234 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0210 	bic.w	r2, r2, #16
 8003222:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003248:	2b00      	cmp	r3, #0
 800324a:	d032      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d022      	beq.n	800329e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2205      	movs	r2, #5
 800325c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	3301      	adds	r3, #1
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	429a      	cmp	r2, r3
 800327a:	d307      	bcc.n	800328c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f2      	bne.n	8003270 <HAL_DMA_IRQHandler+0x2cc>
 800328a:	e000      	b.n	800328e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800328c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
 80032ae:	e000      	b.n	80032b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032b0:	bf00      	nop
    }
  }
}
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
 80032c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80032d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d108      	bne.n	80032f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032f6:	e007      	b.n	8003308 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	3b10      	subs	r3, #16
 8003324:	4a14      	ldr	r2, [pc, #80]	@ (8003378 <DMA_CalcBaseAndBitshift+0x64>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800332e:	4a13      	ldr	r2, [pc, #76]	@ (800337c <DMA_CalcBaseAndBitshift+0x68>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4413      	add	r3, r2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d909      	bls.n	8003356 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	1d1a      	adds	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	659a      	str	r2, [r3, #88]	@ 0x58
 8003354:	e007      	b.n	8003366 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800335e:	f023 0303 	bic.w	r3, r3, #3
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	aaaaaaab 	.word	0xaaaaaaab
 800337c:	08004e74 	.word	0x08004e74

08003380 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d856      	bhi.n	800344e <DMA_CheckFifoParam+0xce>
 80033a0:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <DMA_CheckFifoParam+0x28>)
 80033a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a6:	bf00      	nop
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033cb 	.word	0x080033cb
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	0800344f 	.word	0x0800344f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d046      	beq.n	8003452 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c8:	e043      	b.n	8003452 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033d2:	d140      	bne.n	8003456 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d8:	e03d      	b.n	8003456 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e2:	d121      	bne.n	8003428 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d837      	bhi.n	800345a <DMA_CheckFifoParam+0xda>
 80033ea:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <DMA_CheckFifoParam+0x70>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003407 	.word	0x08003407
 80033f8:	08003401 	.word	0x08003401
 80033fc:	08003419 	.word	0x08003419
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e030      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d025      	beq.n	800345e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003416:	e022      	b.n	800345e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003420:	d11f      	bne.n	8003462 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003426:	e01c      	b.n	8003462 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d903      	bls.n	8003436 <DMA_CheckFifoParam+0xb6>
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2b03      	cmp	r3, #3
 8003432:	d003      	beq.n	800343c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003434:	e018      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      break;
 800343a:	e015      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	e00b      	b.n	8003466 <DMA_CheckFifoParam+0xe6>
      break;
 800344e:	bf00      	nop
 8003450:	e00a      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;
 8003452:	bf00      	nop
 8003454:	e008      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;
 8003456:	bf00      	nop
 8003458:	e006      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;
 800345a:	bf00      	nop
 800345c:	e004      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;
 800345e:	bf00      	nop
 8003460:	e002      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;   
 8003462:	bf00      	nop
 8003464:	e000      	b.n	8003468 <DMA_CheckFifoParam+0xe8>
      break;
 8003466:	bf00      	nop
    }
  } 
  
  return status; 
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	@ 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348e:	2300      	movs	r3, #0
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e16b      	b.n	800376c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003494:	2201      	movs	r2, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	f040 815a 	bne.w	8003766 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d005      	beq.n	80034ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d130      	bne.n	800352c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2203      	movs	r2, #3
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4013      	ands	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003500:	2201      	movs	r2, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 0201 	and.w	r2, r3, #1
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b03      	cmp	r3, #3
 8003536:	d017      	beq.n	8003568 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d123      	bne.n	80035bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	08da      	lsrs	r2, r3, #3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3208      	adds	r2, #8
 800357c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	220f      	movs	r2, #15
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0307 	and.w	r3, r3, #7
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	08da      	lsrs	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3208      	adds	r2, #8
 80035b6:	69b9      	ldr	r1, [r7, #24]
 80035b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0203 	and.w	r2, r3, #3
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 80b4 	beq.w	8003766 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b60      	ldr	r3, [pc, #384]	@ (8003784 <HAL_GPIO_Init+0x30c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	4a5f      	ldr	r2, [pc, #380]	@ (8003784 <HAL_GPIO_Init+0x30c>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800360c:	6453      	str	r3, [r2, #68]	@ 0x44
 800360e:	4b5d      	ldr	r3, [pc, #372]	@ (8003784 <HAL_GPIO_Init+0x30c>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800361a:	4a5b      	ldr	r2, [pc, #364]	@ (8003788 <HAL_GPIO_Init+0x310>)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3302      	adds	r3, #2
 8003622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a52      	ldr	r2, [pc, #328]	@ (800378c <HAL_GPIO_Init+0x314>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02b      	beq.n	800369e <HAL_GPIO_Init+0x226>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a51      	ldr	r2, [pc, #324]	@ (8003790 <HAL_GPIO_Init+0x318>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d025      	beq.n	800369a <HAL_GPIO_Init+0x222>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a50      	ldr	r2, [pc, #320]	@ (8003794 <HAL_GPIO_Init+0x31c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d01f      	beq.n	8003696 <HAL_GPIO_Init+0x21e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4f      	ldr	r2, [pc, #316]	@ (8003798 <HAL_GPIO_Init+0x320>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d019      	beq.n	8003692 <HAL_GPIO_Init+0x21a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4e      	ldr	r2, [pc, #312]	@ (800379c <HAL_GPIO_Init+0x324>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d013      	beq.n	800368e <HAL_GPIO_Init+0x216>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4d      	ldr	r2, [pc, #308]	@ (80037a0 <HAL_GPIO_Init+0x328>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <HAL_GPIO_Init+0x212>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4c      	ldr	r2, [pc, #304]	@ (80037a4 <HAL_GPIO_Init+0x32c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <HAL_GPIO_Init+0x20e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4b      	ldr	r2, [pc, #300]	@ (80037a8 <HAL_GPIO_Init+0x330>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_GPIO_Init+0x20a>
 800367e:	2307      	movs	r3, #7
 8003680:	e00e      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 8003682:	2308      	movs	r3, #8
 8003684:	e00c      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 8003686:	2306      	movs	r3, #6
 8003688:	e00a      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 800368a:	2305      	movs	r3, #5
 800368c:	e008      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 800368e:	2304      	movs	r3, #4
 8003690:	e006      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 8003692:	2303      	movs	r3, #3
 8003694:	e004      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 8003696:	2302      	movs	r3, #2
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <HAL_GPIO_Init+0x228>
 800369e:	2300      	movs	r3, #0
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f002 0203 	and.w	r2, r2, #3
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	4093      	lsls	r3, r2
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036b0:	4935      	ldr	r1, [pc, #212]	@ (8003788 <HAL_GPIO_Init+0x310>)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	089b      	lsrs	r3, r3, #2
 80036b6:	3302      	adds	r3, #2
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_GPIO_Init+0x334>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	43db      	mvns	r3, r3
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	4013      	ands	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036e2:	4a32      	ldr	r2, [pc, #200]	@ (80037ac <HAL_GPIO_Init+0x334>)
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e8:	4b30      	ldr	r3, [pc, #192]	@ (80037ac <HAL_GPIO_Init+0x334>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800370c:	4a27      	ldr	r2, [pc, #156]	@ (80037ac <HAL_GPIO_Init+0x334>)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003712:	4b26      	ldr	r3, [pc, #152]	@ (80037ac <HAL_GPIO_Init+0x334>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	43db      	mvns	r3, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4013      	ands	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003736:	4a1d      	ldr	r2, [pc, #116]	@ (80037ac <HAL_GPIO_Init+0x334>)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800373c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_GPIO_Init+0x334>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003760:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <HAL_GPIO_Init+0x334>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3301      	adds	r3, #1
 800376a:	61fb      	str	r3, [r7, #28]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	f67f ae90 	bls.w	8003494 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	3724      	adds	r7, #36	@ 0x24
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40013800 	.word	0x40013800
 800378c:	40020000 	.word	0x40020000
 8003790:	40020400 	.word	0x40020400
 8003794:	40020800 	.word	0x40020800
 8003798:	40020c00 	.word	0x40020c00
 800379c:	40021000 	.word	0x40021000
 80037a0:	40021400 	.word	0x40021400
 80037a4:	40021800 	.word	0x40021800
 80037a8:	40021c00 	.word	0x40021c00
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
 80037cc:	e001      	b.n	80037d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
 80037ec:	4613      	mov	r3, r2
 80037ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037f6:	887a      	ldrh	r2, [r7, #2]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037fc:	e003      	b.n	8003806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037fe:	887b      	ldrh	r3, [r7, #2]
 8003800:	041a      	lsls	r2, r3, #16
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	619a      	str	r2, [r3, #24]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e267      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d075      	beq.n	800391e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003832:	4b88      	ldr	r3, [pc, #544]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d00c      	beq.n	8003858 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383e:	4b85      	ldr	r3, [pc, #532]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003846:	2b08      	cmp	r3, #8
 8003848:	d112      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384a:	4b82      	ldr	r3, [pc, #520]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003856:	d10b      	bne.n	8003870 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003858:	4b7e      	ldr	r3, [pc, #504]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05b      	beq.n	800391c <HAL_RCC_OscConfig+0x108>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d157      	bne.n	800391c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e242      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003878:	d106      	bne.n	8003888 <HAL_RCC_OscConfig+0x74>
 800387a:	4b76      	ldr	r3, [pc, #472]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a75      	ldr	r2, [pc, #468]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e01d      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x98>
 8003892:	4b70      	ldr	r3, [pc, #448]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a6f      	ldr	r2, [pc, #444]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b6d      	ldr	r3, [pc, #436]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0xb0>
 80038ac:	4b69      	ldr	r3, [pc, #420]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a68      	ldr	r2, [pc, #416]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4b66      	ldr	r3, [pc, #408]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a65      	ldr	r2, [pc, #404]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d013      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038cc:	f7fe fd20 	bl	8002310 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d4:	f7fe fd1c 	bl	8002310 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b64      	cmp	r3, #100	@ 0x64
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e207      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0xc0>
 80038f2:	e014      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f4:	f7fe fd0c 	bl	8002310 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038fc:	f7fe fd08 	bl	8002310 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b64      	cmp	r3, #100	@ 0x64
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1f3      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390e:	4b51      	ldr	r3, [pc, #324]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0xe8>
 800391a:	e000      	b.n	800391e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800391c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d063      	beq.n	80039f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800392a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b47      	ldr	r3, [pc, #284]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800393e:	2b08      	cmp	r3, #8
 8003940:	d11c      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003942:	4b44      	ldr	r3, [pc, #272]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d116      	bne.n	800397c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	4b41      	ldr	r3, [pc, #260]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e1c7      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003966:	4b3b      	ldr	r3, [pc, #236]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4937      	ldr	r1, [pc, #220]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800397a:	e03a      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d020      	beq.n	80039c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b34      	ldr	r3, [pc, #208]	@ (8003a58 <HAL_RCC_OscConfig+0x244>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7fe fcc1 	bl	8002310 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7fe fcbd 	bl	8002310 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e1a8      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b0:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4925      	ldr	r1, [pc, #148]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	600b      	str	r3, [r1, #0]
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c6:	4b24      	ldr	r3, [pc, #144]	@ (8003a58 <HAL_RCC_OscConfig+0x244>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fca0 	bl	8002310 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039d4:	f7fe fc9c 	bl	8002310 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e187      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d036      	beq.n	8003a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d016      	beq.n	8003a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <HAL_RCC_OscConfig+0x248>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fc80 	bl	8002310 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a14:	f7fe fc7c 	bl	8002310 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e167      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a26:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <HAL_RCC_OscConfig+0x240>)
 8003a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0x200>
 8003a32:	e01b      	b.n	8003a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a34:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <HAL_RCC_OscConfig+0x248>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fc69 	bl	8002310 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a40:	e00e      	b.n	8003a60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a42:	f7fe fc65 	bl	8002310 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d907      	bls.n	8003a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e150      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
 8003a54:	40023800 	.word	0x40023800
 8003a58:	42470000 	.word	0x42470000
 8003a5c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	4b88      	ldr	r3, [pc, #544]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ea      	bne.n	8003a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 8097 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7e:	4b81      	ldr	r3, [pc, #516]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
 8003a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	4a7c      	ldr	r2, [pc, #496]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aaa:	4b77      	ldr	r3, [pc, #476]	@ (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab6:	4b74      	ldr	r3, [pc, #464]	@ (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a73      	ldr	r2, [pc, #460]	@ (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fc25 	bl	8002310 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aca:	f7fe fc21 	bl	8002310 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e10c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003adc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_OscConfig+0x474>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f0      	beq.n	8003aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d106      	bne.n	8003afe <HAL_RCC_OscConfig+0x2ea>
 8003af0:	4b64      	ldr	r3, [pc, #400]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af4:	4a63      	ldr	r2, [pc, #396]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003afc:	e01c      	b.n	8003b38 <HAL_RCC_OscConfig+0x324>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b05      	cmp	r3, #5
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0x30c>
 8003b06:	4b5f      	ldr	r3, [pc, #380]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b12:	4b5c      	ldr	r3, [pc, #368]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	4a5b      	ldr	r2, [pc, #364]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0x324>
 8003b20:	4b58      	ldr	r3, [pc, #352]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a57      	ldr	r2, [pc, #348]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b2c:	4b55      	ldr	r3, [pc, #340]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b30:	4a54      	ldr	r2, [pc, #336]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b32:	f023 0304 	bic.w	r3, r3, #4
 8003b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fe fbe6 	bl	8002310 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fe fbe2 	bl	8002310 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0cb      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5e:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0ee      	beq.n	8003b48 <HAL_RCC_OscConfig+0x334>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6c:	f7fe fbd0 	bl	8002310 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b72:	e00a      	b.n	8003b8a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b74:	f7fe fbcc 	bl	8002310 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e0b5      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ee      	bne.n	8003b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b96:	7dfb      	ldrb	r3, [r7, #23]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b39      	ldr	r3, [pc, #228]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	4a38      	ldr	r2, [pc, #224]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80a1 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bb2:	4b34      	ldr	r3, [pc, #208]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d05c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d141      	bne.n	8003c4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fe fba0 	bl	8002310 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fe fb9c 	bl	8002310 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e087      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b27      	ldr	r3, [pc, #156]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	019b      	lsls	r3, r3, #6
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	491b      	ldr	r1, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c22:	f7fe fb75 	bl	8002310 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe fb71 	bl	8002310 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e05c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3c:	4b11      	ldr	r3, [pc, #68]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0f0      	beq.n	8003c2a <HAL_RCC_OscConfig+0x416>
 8003c48:	e054      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b10      	ldr	r3, [pc, #64]	@ (8003c8c <HAL_RCC_OscConfig+0x478>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe fb5e 	bl	8002310 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fb5a 	bl	8002310 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e045      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x444>
 8003c76:	e03d      	b.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e038      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_RCC_OscConfig+0x4ec>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d121      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023800 	.word	0x40023800

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cc      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b68      	ldr	r3, [pc, #416]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d90c      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b65      	ldr	r3, [pc, #404]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d044      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e067      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de2:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4934      	ldr	r1, [pc, #208]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df4:	f7fe fa8c 	bl	8002310 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7fe fa88 	bl	8002310 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 020c 	and.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1eb      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20c      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f821 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe f9ec 	bl	8002288 <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08004e64 	.word	0x08004e64
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	2000000c 	.word	0x2000000c

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b094      	sub	sp, #80	@ 0x50
 8003ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee8:	4b79      	ldr	r3, [pc, #484]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	f200 80e1 	bhi.w	80040bc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x34>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f02:	e0db      	b.n	80040bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b73      	ldr	r3, [pc, #460]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f08:	e0db      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0a:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f0e:	e0d8      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f10:	4b6f      	ldr	r3, [pc, #444]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d063      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b6a      	ldr	r3, [pc, #424]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f42:	4622      	mov	r2, r4
 8003f44:	462b      	mov	r3, r5
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	0159      	lsls	r1, r3, #5
 8003f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f54:	0150      	lsls	r0, r2, #5
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	1a51      	subs	r1, r2, r1
 8003f5e:	6139      	str	r1, [r7, #16]
 8003f60:	4629      	mov	r1, r5
 8003f62:	eb63 0301 	sbc.w	r3, r3, r1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f74:	4659      	mov	r1, fp
 8003f76:	018b      	lsls	r3, r1, #6
 8003f78:	4651      	mov	r1, sl
 8003f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7e:	4651      	mov	r1, sl
 8003f80:	018a      	lsls	r2, r1, #6
 8003f82:	4651      	mov	r1, sl
 8003f84:	ebb2 0801 	subs.w	r8, r2, r1
 8003f88:	4659      	mov	r1, fp
 8003f8a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fa2:	4690      	mov	r8, r2
 8003fa4:	4699      	mov	r9, r3
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	eb18 0303 	adds.w	r3, r8, r3
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	462b      	mov	r3, r5
 8003fb0:	eb49 0303 	adc.w	r3, r9, r3
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	f04f 0300 	mov.w	r3, #0
 8003fbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	024b      	lsls	r3, r1, #9
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fcc:	4621      	mov	r1, r4
 8003fce:	024a      	lsls	r2, r1, #9
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fe0:	f7fc fbf8 	bl	80007d4 <__aeabi_uldivmod>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4613      	mov	r3, r2
 8003fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fec:	e058      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fee:	4b38      	ldr	r3, [pc, #224]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	099b      	lsrs	r3, r3, #6
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	4611      	mov	r1, r2
 8003ffa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	2300      	movs	r3, #0
 8004002:	627b      	str	r3, [r7, #36]	@ 0x24
 8004004:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004008:	4642      	mov	r2, r8
 800400a:	464b      	mov	r3, r9
 800400c:	f04f 0000 	mov.w	r0, #0
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	0159      	lsls	r1, r3, #5
 8004016:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800401a:	0150      	lsls	r0, r2, #5
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4641      	mov	r1, r8
 8004022:	ebb2 0a01 	subs.w	sl, r2, r1
 8004026:	4649      	mov	r1, r9
 8004028:	eb63 0b01 	sbc.w	fp, r3, r1
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004038:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800403c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004040:	ebb2 040a 	subs.w	r4, r2, sl
 8004044:	eb63 050b 	sbc.w	r5, r3, fp
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	603b      	str	r3, [r7, #0]
 8004062:	464b      	mov	r3, r9
 8004064:	eb45 0303 	adc.w	r3, r5, r3
 8004068:	607b      	str	r3, [r7, #4]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004076:	4629      	mov	r1, r5
 8004078:	028b      	lsls	r3, r1, #10
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004080:	4621      	mov	r1, r4
 8004082:	028a      	lsls	r2, r1, #10
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408a:	2200      	movs	r2, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	61fa      	str	r2, [r7, #28]
 8004090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004094:	f7fc fb9e 	bl	80007d4 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	3301      	adds	r3, #1
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040ba:	e002      	b.n	80040c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3750      	adds	r7, #80	@ 0x50
 80040c8:	46bd      	mov	sp, r7
 80040ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	00f42400 	.word	0x00f42400
 80040d8:	007a1200 	.word	0x007a1200

080040dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e041      	b.n	8004172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd ffcc 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 fad8 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b082      	sub	sp, #8
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e041      	b.n	8004210 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f839 	bl	8004218 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f000 fa89 	bl	80046d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e022      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_PWM_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e015      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e008      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07c      	b.n	8004398 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0x92>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fce6 	bl	8004cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2d      	ldr	r2, [pc, #180]	@ (80043a0 <HAL_TIM_PWM_Start+0x174>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_PWM_Start+0xcc>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2c      	ldr	r2, [pc, #176]	@ (80043a4 <HAL_TIM_PWM_Start+0x178>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d101      	bne.n	80042fc <HAL_TIM_PWM_Start+0xd0>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_TIM_PWM_Start+0xd2>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a22      	ldr	r2, [pc, #136]	@ (80043a0 <HAL_TIM_PWM_Start+0x174>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d022      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d01d      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1f      	ldr	r2, [pc, #124]	@ (80043a8 <HAL_TIM_PWM_Start+0x17c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a1d      	ldr	r2, [pc, #116]	@ (80043ac <HAL_TIM_PWM_Start+0x180>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a1c      	ldr	r2, [pc, #112]	@ (80043b0 <HAL_TIM_PWM_Start+0x184>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <HAL_TIM_PWM_Start+0x178>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a18      	ldr	r2, [pc, #96]	@ (80043b4 <HAL_TIM_PWM_Start+0x188>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIM_PWM_Start+0x136>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a16      	ldr	r2, [pc, #88]	@ (80043b8 <HAL_TIM_PWM_Start+0x18c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d111      	bne.n	8004386 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b06      	cmp	r3, #6
 8004372:	d010      	beq.n	8004396 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	e007      	b.n	8004396 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40010000 	.word	0x40010000
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40000400 	.word	0x40000400
 80043ac:	40000800 	.word	0x40000800
 80043b0:	40000c00 	.word	0x40000c00
 80043b4:	40014000 	.word	0x40014000
 80043b8:	40001800 	.word	0x40001800

080043bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e0ae      	b.n	8004538 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b0c      	cmp	r3, #12
 80043e6:	f200 809f 	bhi.w	8004528 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ea:	a201      	add	r2, pc, #4	@ (adr r2, 80043f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f0:	08004425 	.word	0x08004425
 80043f4:	08004529 	.word	0x08004529
 80043f8:	08004529 	.word	0x08004529
 80043fc:	08004529 	.word	0x08004529
 8004400:	08004465 	.word	0x08004465
 8004404:	08004529 	.word	0x08004529
 8004408:	08004529 	.word	0x08004529
 800440c:	08004529 	.word	0x08004529
 8004410:	080044a7 	.word	0x080044a7
 8004414:	08004529 	.word	0x08004529
 8004418:	08004529 	.word	0x08004529
 800441c:	08004529 	.word	0x08004529
 8004420:	080044e7 	.word	0x080044e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f9f6 	bl	800481c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699a      	ldr	r2, [r3, #24]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699a      	ldr	r2, [r3, #24]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0204 	bic.w	r2, r2, #4
 800444e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6999      	ldr	r1, [r3, #24]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	619a      	str	r2, [r3, #24]
      break;
 8004462:	e064      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fa46 	bl	80048fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800447e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699a      	ldr	r2, [r3, #24]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800448e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6999      	ldr	r1, [r3, #24]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	021a      	lsls	r2, r3, #8
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	619a      	str	r2, [r3, #24]
      break;
 80044a4:	e043      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68b9      	ldr	r1, [r7, #8]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fa9b 	bl	80049e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0208 	orr.w	r2, r2, #8
 80044c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0204 	bic.w	r2, r2, #4
 80044d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69d9      	ldr	r1, [r3, #28]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]
      break;
 80044e4:	e023      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 faef 	bl	8004ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69d9      	ldr	r1, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	021a      	lsls	r2, r3, #8
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	61da      	str	r2, [r3, #28]
      break;
 8004526:	e002      	b.n	800452e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
      break;
 800452c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0b4      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x186>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800457a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004594:	d03e      	beq.n	8004614 <HAL_TIM_ConfigClockSource+0xd4>
 8004596:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800459a:	f200 8087 	bhi.w	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a2:	f000 8086 	beq.w	80046b2 <HAL_TIM_ConfigClockSource+0x172>
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045aa:	d87f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d01a      	beq.n	80045e6 <HAL_TIM_ConfigClockSource+0xa6>
 80045b0:	2b70      	cmp	r3, #112	@ 0x70
 80045b2:	d87b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b60      	cmp	r3, #96	@ 0x60
 80045b6:	d050      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x11a>
 80045b8:	2b60      	cmp	r3, #96	@ 0x60
 80045ba:	d877      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b50      	cmp	r3, #80	@ 0x50
 80045be:	d03c      	beq.n	800463a <HAL_TIM_ConfigClockSource+0xfa>
 80045c0:	2b50      	cmp	r3, #80	@ 0x50
 80045c2:	d873      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b40      	cmp	r3, #64	@ 0x40
 80045c6:	d058      	beq.n	800467a <HAL_TIM_ConfigClockSource+0x13a>
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d86f      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b30      	cmp	r3, #48	@ 0x30
 80045ce:	d064      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b30      	cmp	r3, #48	@ 0x30
 80045d2:	d86b      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d060      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d867      	bhi.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05c      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d05a      	beq.n	800469a <HAL_TIM_ConfigClockSource+0x15a>
 80045e4:	e062      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f6:	f000 fb3b 	bl	8004c70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	609a      	str	r2, [r3, #8]
      break;
 8004612:	e04f      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004624:	f000 fb24 	bl	8004c70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689a      	ldr	r2, [r3, #8]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004636:	609a      	str	r2, [r3, #8]
      break;
 8004638:	e03c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	461a      	mov	r2, r3
 8004648:	f000 fa98 	bl	8004b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2150      	movs	r1, #80	@ 0x50
 8004652:	4618      	mov	r0, r3
 8004654:	f000 faf1 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004658:	e02c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	461a      	mov	r2, r3
 8004668:	f000 fab7 	bl	8004bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2160      	movs	r1, #96	@ 0x60
 8004672:	4618      	mov	r0, r3
 8004674:	f000 fae1 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004678:	e01c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	461a      	mov	r2, r3
 8004688:	f000 fa78 	bl	8004b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2140      	movs	r1, #64	@ 0x40
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fad1 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 8004698:	e00c      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4619      	mov	r1, r3
 80046a4:	4610      	mov	r0, r2
 80046a6:	f000 fac8 	bl	8004c3a <TIM_ITRx_SetConfig>
      break;
 80046aa:	e003      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e000      	b.n	80046b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a43      	ldr	r2, [pc, #268]	@ (80047f0 <TIM_Base_SetConfig+0x120>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ee:	d00f      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4a40      	ldr	r2, [pc, #256]	@ (80047f4 <TIM_Base_SetConfig+0x124>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00b      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	@ (80047f8 <TIM_Base_SetConfig+0x128>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d007      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3e      	ldr	r2, [pc, #248]	@ (80047fc <TIM_Base_SetConfig+0x12c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d003      	beq.n	8004710 <TIM_Base_SetConfig+0x40>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3d      	ldr	r2, [pc, #244]	@ (8004800 <TIM_Base_SetConfig+0x130>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d108      	bne.n	8004722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <TIM_Base_SetConfig+0x120>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d02b      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004730:	d027      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a2f      	ldr	r2, [pc, #188]	@ (80047f4 <TIM_Base_SetConfig+0x124>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d023      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a2e      	ldr	r2, [pc, #184]	@ (80047f8 <TIM_Base_SetConfig+0x128>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d01f      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a2d      	ldr	r2, [pc, #180]	@ (80047fc <TIM_Base_SetConfig+0x12c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01b      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a2c      	ldr	r2, [pc, #176]	@ (8004800 <TIM_Base_SetConfig+0x130>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d017      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <TIM_Base_SetConfig+0x134>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <TIM_Base_SetConfig+0x138>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a29      	ldr	r2, [pc, #164]	@ (800480c <TIM_Base_SetConfig+0x13c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a28      	ldr	r2, [pc, #160]	@ (8004810 <TIM_Base_SetConfig+0x140>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a27      	ldr	r2, [pc, #156]	@ (8004814 <TIM_Base_SetConfig+0x144>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a26      	ldr	r2, [pc, #152]	@ (8004818 <TIM_Base_SetConfig+0x148>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d108      	bne.n	8004794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a0e      	ldr	r2, [pc, #56]	@ (80047f0 <TIM_Base_SetConfig+0x120>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d003      	beq.n	80047c2 <TIM_Base_SetConfig+0xf2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a10      	ldr	r2, [pc, #64]	@ (8004800 <TIM_Base_SetConfig+0x130>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d103      	bne.n	80047ca <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	691a      	ldr	r2, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f043 0204 	orr.w	r2, r3, #4
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40014400 	.word	0x40014400
 800480c:	40014800 	.word	0x40014800
 8004810:	40001800 	.word	0x40001800
 8004814:	40001c00 	.word	0x40001c00
 8004818:	40002000 	.word	0x40002000

0800481c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f023 0201 	bic.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800484a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0302 	bic.w	r3, r3, #2
 8004864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a20      	ldr	r2, [pc, #128]	@ (80048f4 <TIM_OC1_SetConfig+0xd8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC1_SetConfig+0x64>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1f      	ldr	r2, [pc, #124]	@ (80048f8 <TIM_OC1_SetConfig+0xdc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10c      	bne.n	800489a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f023 0308 	bic.w	r3, r3, #8
 8004886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <TIM_OC1_SetConfig+0xd8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC1_SetConfig+0x8e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <TIM_OC1_SetConfig+0xdc>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d111      	bne.n	80048ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	621a      	str	r2, [r3, #32]
}
 80048e8:	bf00      	nop
 80048ea:	371c      	adds	r7, #28
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40010400 	.word	0x40010400

080048fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f023 0210 	bic.w	r2, r3, #16
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 0320 	bic.w	r3, r3, #32
 8004946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a22      	ldr	r2, [pc, #136]	@ (80049e0 <TIM_OC2_SetConfig+0xe4>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d003      	beq.n	8004964 <TIM_OC2_SetConfig+0x68>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a21      	ldr	r2, [pc, #132]	@ (80049e4 <TIM_OC2_SetConfig+0xe8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d10d      	bne.n	8004980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a17      	ldr	r2, [pc, #92]	@ (80049e0 <TIM_OC2_SetConfig+0xe4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_OC2_SetConfig+0x94>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <TIM_OC2_SetConfig+0xe8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d113      	bne.n	80049b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000
 80049e4:	40010400 	.word	0x40010400

080049e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0303 	bic.w	r3, r3, #3
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a21      	ldr	r2, [pc, #132]	@ (8004ac8 <TIM_OC3_SetConfig+0xe0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC3_SetConfig+0x66>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a20      	ldr	r2, [pc, #128]	@ (8004acc <TIM_OC3_SetConfig+0xe4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10d      	bne.n	8004a6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	@ (8004ac8 <TIM_OC3_SetConfig+0xe0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d003      	beq.n	8004a7a <TIM_OC3_SetConfig+0x92>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a15      	ldr	r2, [pc, #84]	@ (8004acc <TIM_OC3_SetConfig+0xe4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d113      	bne.n	8004aa2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	011b      	lsls	r3, r3, #4
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685a      	ldr	r2, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	621a      	str	r2, [r3, #32]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	40010400 	.word	0x40010400

08004ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	031b      	lsls	r3, r3, #12
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a12      	ldr	r2, [pc, #72]	@ (8004b74 <TIM_OC4_SetConfig+0xa4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC4_SetConfig+0x68>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <TIM_OC4_SetConfig+0xa8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d109      	bne.n	8004b4c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	019b      	lsls	r3, r3, #6
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	621a      	str	r2, [r3, #32]
}
 8004b66:	bf00      	nop
 8004b68:	371c      	adds	r7, #28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400

08004b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 0201 	bic.w	r2, r3, #1
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 030a 	bic.w	r3, r3, #10
 8004bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f023 0210 	bic.w	r2, r3, #16
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f043 0307 	orr.w	r3, r3, #7
 8004c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	609a      	str	r2, [r3, #8]
}
 8004c64:	bf00      	nop
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e05a      	b.n	8004dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a21      	ldr	r2, [pc, #132]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d60:	d01d      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1d      	ldr	r2, [pc, #116]	@ (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1b      	ldr	r2, [pc, #108]	@ (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a18      	ldr	r2, [pc, #96]	@ (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a15      	ldr	r2, [pc, #84]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d10c      	bne.n	8004db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40000400 	.word	0x40000400
 8004de0:	40000800 	.word	0x40000800
 8004de4:	40000c00 	.word	0x40000c00
 8004de8:	40010400 	.word	0x40010400
 8004dec:	40014000 	.word	0x40014000
 8004df0:	40001800 	.word	0x40001800

08004df4 <memset>:
 8004df4:	4402      	add	r2, r0
 8004df6:	4603      	mov	r3, r0
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <memset+0xa>
 8004dfc:	4770      	bx	lr
 8004dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004e02:	e7f9      	b.n	8004df8 <memset+0x4>

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	@ (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	@ (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	@ (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	@ (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 f818 	bl	8004e4c <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	08004e84 	.word	0x08004e84
 8004e40:	08004e84 	.word	0x08004e84
 8004e44:	08004e84 	.word	0x08004e84
 8004e48:	08004e88 	.word	0x08004e88

08004e4c <_init>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr

08004e58 <_fini>:
 8004e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5a:	bf00      	nop
 8004e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5e:	bc08      	pop	{r3}
 8004e60:	469e      	mov	lr, r3
 8004e62:	4770      	bx	lr
