
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000514c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080052d4  080052d4  000062d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ec  080052ec  00007014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052ec  080052ec  000062ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f4  080052f4  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f4  080052f4  000062f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052f8  080052f8  000062f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080052fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          000001cc  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac5c  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4a  00000000  00000000  00011ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  000137f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093d  00000000  00000000  000143e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213c8  00000000  00000000  00014d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3f1  00000000  00000000  000360e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2396  00000000  00000000  000434d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011586c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032ec  00000000  00000000  001158b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  00118b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052bc 	.word	0x080052bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080052bc 	.word	0x080052bc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b988 	b.w	8000afc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	468e      	mov	lr, r1
 800080c:	4604      	mov	r4, r0
 800080e:	4688      	mov	r8, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d962      	bls.n	80008e0 <__udivmoddi4+0xdc>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	b14e      	cbz	r6, 8000834 <__udivmoddi4+0x30>
 8000820:	f1c6 0320 	rsb	r3, r6, #32
 8000824:	fa01 f806 	lsl.w	r8, r1, r6
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	40b7      	lsls	r7, r6
 800082e:	ea43 0808 	orr.w	r8, r3, r8
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000840:	0c23      	lsrs	r3, r4, #16
 8000842:	fb0e 8811 	mls	r8, lr, r1, r8
 8000846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084a:	fb01 f20c 	mul.w	r2, r1, ip
 800084e:	429a      	cmp	r2, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x62>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f101 30ff 	add.w	r0, r1, #4294967295
 8000858:	f080 80ea 	bcs.w	8000a30 <__udivmoddi4+0x22c>
 800085c:	429a      	cmp	r2, r3
 800085e:	f240 80e7 	bls.w	8000a30 <__udivmoddi4+0x22c>
 8000862:	3902      	subs	r1, #2
 8000864:	443b      	add	r3, r7
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	b2a3      	uxth	r3, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000876:	fb00 fc0c 	mul.w	ip, r0, ip
 800087a:	459c      	cmp	ip, r3
 800087c:	d909      	bls.n	8000892 <__udivmoddi4+0x8e>
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	f100 32ff 	add.w	r2, r0, #4294967295
 8000884:	f080 80d6 	bcs.w	8000a34 <__udivmoddi4+0x230>
 8000888:	459c      	cmp	ip, r3
 800088a:	f240 80d3 	bls.w	8000a34 <__udivmoddi4+0x230>
 800088e:	443b      	add	r3, r7
 8000890:	3802      	subs	r0, #2
 8000892:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000896:	eba3 030c 	sub.w	r3, r3, ip
 800089a:	2100      	movs	r1, #0
 800089c:	b11d      	cbz	r5, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40f3      	lsrs	r3, r6
 80008a0:	2200      	movs	r2, #0
 80008a2:	e9c5 3200 	strd	r3, r2, [r5]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d905      	bls.n	80008ba <__udivmoddi4+0xb6>
 80008ae:	b10d      	cbz	r5, 80008b4 <__udivmoddi4+0xb0>
 80008b0:	e9c5 0100 	strd	r0, r1, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4608      	mov	r0, r1
 80008b8:	e7f5      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008ba:	fab3 f183 	clz	r1, r3
 80008be:	2900      	cmp	r1, #0
 80008c0:	d146      	bne.n	8000950 <__udivmoddi4+0x14c>
 80008c2:	4573      	cmp	r3, lr
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xc8>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 8105 	bhi.w	8000ad6 <__udivmoddi4+0x2d2>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	4690      	mov	r8, r2
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e5      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008da:	e9c5 4800 	strd	r4, r8, [r5]
 80008de:	e7e2      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	f000 8090 	beq.w	8000a06 <__udivmoddi4+0x202>
 80008e6:	fab2 f682 	clz	r6, r2
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	f040 80a4 	bne.w	8000a38 <__udivmoddi4+0x234>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	b280      	uxth	r0, r0
 80008fa:	b2bc      	uxth	r4, r7
 80008fc:	2101      	movs	r1, #1
 80008fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000902:	fb0e 221c 	mls	r2, lr, ip, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb04 f20c 	mul.w	r2, r4, ip
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x11e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000918:	d202      	bcs.n	8000920 <__udivmoddi4+0x11c>
 800091a:	429a      	cmp	r2, r3
 800091c:	f200 80e0 	bhi.w	8000ae0 <__udivmoddi4+0x2dc>
 8000920:	46c4      	mov	ip, r8
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	fbb3 f2fe 	udiv	r2, r3, lr
 8000928:	fb0e 3312 	mls	r3, lr, r2, r3
 800092c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000930:	fb02 f404 	mul.w	r4, r2, r4
 8000934:	429c      	cmp	r4, r3
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0x144>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f102 30ff 	add.w	r0, r2, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x142>
 8000940:	429c      	cmp	r4, r3
 8000942:	f200 80ca 	bhi.w	8000ada <__udivmoddi4+0x2d6>
 8000946:	4602      	mov	r2, r0
 8000948:	1b1b      	subs	r3, r3, r4
 800094a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800094e:	e7a5      	b.n	800089c <__udivmoddi4+0x98>
 8000950:	f1c1 0620 	rsb	r6, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 f706 	lsr.w	r7, r2, r6
 800095a:	431f      	orrs	r7, r3
 800095c:	fa0e f401 	lsl.w	r4, lr, r1
 8000960:	fa20 f306 	lsr.w	r3, r0, r6
 8000964:	fa2e fe06 	lsr.w	lr, lr, r6
 8000968:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	fa1f fc87 	uxth.w	ip, r7
 8000976:	fbbe f0f9 	udiv	r0, lr, r9
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000980:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000984:	fb00 fe0c 	mul.w	lr, r0, ip
 8000988:	45a6      	cmp	lr, r4
 800098a:	fa02 f201 	lsl.w	r2, r2, r1
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x1a0>
 8000990:	193c      	adds	r4, r7, r4
 8000992:	f100 3aff 	add.w	sl, r0, #4294967295
 8000996:	f080 809c 	bcs.w	8000ad2 <__udivmoddi4+0x2ce>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f240 8099 	bls.w	8000ad2 <__udivmoddi4+0x2ce>
 80009a0:	3802      	subs	r0, #2
 80009a2:	443c      	add	r4, r7
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	fa1f fe83 	uxth.w	lr, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009bc:	45a4      	cmp	ip, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1ce>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80009c6:	f080 8082 	bcs.w	8000ace <__udivmoddi4+0x2ca>
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d97f      	bls.n	8000ace <__udivmoddi4+0x2ca>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009d6:	eba4 040c 	sub.w	r4, r4, ip
 80009da:	fba0 ec02 	umull	lr, ip, r0, r2
 80009de:	4564      	cmp	r4, ip
 80009e0:	4673      	mov	r3, lr
 80009e2:	46e1      	mov	r9, ip
 80009e4:	d362      	bcc.n	8000aac <__udivmoddi4+0x2a8>
 80009e6:	d05f      	beq.n	8000aa8 <__udivmoddi4+0x2a4>
 80009e8:	b15d      	cbz	r5, 8000a02 <__udivmoddi4+0x1fe>
 80009ea:	ebb8 0203 	subs.w	r2, r8, r3
 80009ee:	eb64 0409 	sbc.w	r4, r4, r9
 80009f2:	fa04 f606 	lsl.w	r6, r4, r6
 80009f6:	fa22 f301 	lsr.w	r3, r2, r1
 80009fa:	431e      	orrs	r6, r3
 80009fc:	40cc      	lsrs	r4, r1
 80009fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000a02:	2100      	movs	r1, #0
 8000a04:	e74f      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a0a:	0c01      	lsrs	r1, r0, #16
 8000a0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a10:	b280      	uxth	r0, r0
 8000a12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a16:	463b      	mov	r3, r7
 8000a18:	4638      	mov	r0, r7
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	46be      	mov	lr, r7
 8000a20:	2620      	movs	r6, #32
 8000a22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a26:	eba2 0208 	sub.w	r2, r2, r8
 8000a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a2e:	e766      	b.n	80008fe <__udivmoddi4+0xfa>
 8000a30:	4601      	mov	r1, r0
 8000a32:	e718      	b.n	8000866 <__udivmoddi4+0x62>
 8000a34:	4610      	mov	r0, r2
 8000a36:	e72c      	b.n	8000892 <__udivmoddi4+0x8e>
 8000a38:	f1c6 0220 	rsb	r2, r6, #32
 8000a3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a40:	40b7      	lsls	r7, r6
 8000a42:	40b1      	lsls	r1, r6
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a5e:	fb08 f904 	mul.w	r9, r8, r4
 8000a62:	40b0      	lsls	r0, r6
 8000a64:	4589      	cmp	r9, r1
 8000a66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a6a:	b280      	uxth	r0, r0
 8000a6c:	d93e      	bls.n	8000aec <__udivmoddi4+0x2e8>
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a74:	d201      	bcs.n	8000a7a <__udivmoddi4+0x276>
 8000a76:	4589      	cmp	r9, r1
 8000a78:	d81f      	bhi.n	8000aba <__udivmoddi4+0x2b6>
 8000a7a:	eba1 0109 	sub.w	r1, r1, r9
 8000a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a82:	fb09 f804 	mul.w	r8, r9, r4
 8000a86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d229      	bcs.n	8000ae8 <__udivmoddi4+0x2e4>
 8000a94:	18ba      	adds	r2, r7, r2
 8000a96:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a9a:	d2c4      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000a9c:	4542      	cmp	r2, r8
 8000a9e:	d2c2      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000aa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000aa4:	443a      	add	r2, r7
 8000aa6:	e7be      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aa8:	45f0      	cmp	r8, lr
 8000aaa:	d29d      	bcs.n	80009e8 <__udivmoddi4+0x1e4>
 8000aac:	ebbe 0302 	subs.w	r3, lr, r2
 8000ab0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	e796      	b.n	80009e8 <__udivmoddi4+0x1e4>
 8000aba:	eba7 0909 	sub.w	r9, r7, r9
 8000abe:	4449      	add	r1, r9
 8000ac0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ac4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ac8:	fb09 f804 	mul.w	r8, r9, r4
 8000acc:	e7db      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ace:	4673      	mov	r3, lr
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1ce>
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	e766      	b.n	80009a4 <__udivmoddi4+0x1a0>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e6fd      	b.n	80008d6 <__udivmoddi4+0xd2>
 8000ada:	443b      	add	r3, r7
 8000adc:	3a02      	subs	r2, #2
 8000ade:	e733      	b.n	8000948 <__udivmoddi4+0x144>
 8000ae0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	e71c      	b.n	8000922 <__udivmoddi4+0x11e>
 8000ae8:	4649      	mov	r1, r9
 8000aea:	e79c      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aec:	eba1 0109 	sub.w	r1, r1, r9
 8000af0:	46c4      	mov	ip, r8
 8000af2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af6:	fb09 f804 	mul.w	r8, r9, r4
 8000afa:	e7c4      	b.n	8000a86 <__udivmoddi4+0x282>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000b04:	f001 fdbe 	bl	8002684 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b08:	f000 f930 	bl	8000d6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b0c:	f000 fa9a 	bl	8001044 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b10:	f000 fa78 	bl	8001004 <MX_DMA_Init>
	MX_ADC1_Init();
 8000b14:	f000 f994 	bl	8000e40 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000b18:	f000 f9f2 	bl	8000f00 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	4986      	ldr	r1, [pc, #536]	@ (8000d38 <main+0x238>)
 8000b20:	4886      	ldr	r0, [pc, #536]	@ (8000d3c <main+0x23c>)
 8000b22:	f001 fe89 	bl	8002838 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000b26:	4b86      	ldr	r3, [pc, #536]	@ (8000d40 <main+0x240>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000b2c:	4b84      	ldr	r3, [pc, #528]	@ (8000d40 <main+0x240>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	739a      	strb	r2, [r3, #14]
 8000b32:	4b83      	ldr	r3, [pc, #524]	@ (8000d40 <main+0x240>)
 8000b34:	7b9a      	ldrb	r2, [r3, #14]
 8000b36:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <main+0x240>)
 8000b38:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000b3a:	4b81      	ldr	r3, [pc, #516]	@ (8000d40 <main+0x240>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	735a      	strb	r2, [r3, #13]
 8000b40:	4b7f      	ldr	r3, [pc, #508]	@ (8000d40 <main+0x240>)
 8000b42:	7b5a      	ldrb	r2, [r3, #13]
 8000b44:	4b7e      	ldr	r3, [pc, #504]	@ (8000d40 <main+0x240>)
 8000b46:	729a      	strb	r2, [r3, #10]
 8000b48:	4b7d      	ldr	r3, [pc, #500]	@ (8000d40 <main+0x240>)
 8000b4a:	7a9a      	ldrb	r2, [r3, #10]
 8000b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8000d40 <main+0x240>)
 8000b4e:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000b50:	4b7b      	ldr	r3, [pc, #492]	@ (8000d40 <main+0x240>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	731a      	strb	r2, [r3, #12]
 8000b56:	4b7a      	ldr	r3, [pc, #488]	@ (8000d40 <main+0x240>)
 8000b58:	7b1a      	ldrb	r2, [r3, #12]
 8000b5a:	4b79      	ldr	r3, [pc, #484]	@ (8000d40 <main+0x240>)
 8000b5c:	725a      	strb	r2, [r3, #9]
 8000b5e:	4b78      	ldr	r3, [pc, #480]	@ (8000d40 <main+0x240>)
 8000b60:	7a5a      	ldrb	r2, [r3, #9]
 8000b62:	4b77      	ldr	r3, [pc, #476]	@ (8000d40 <main+0x240>)
 8000b64:	719a      	strb	r2, [r3, #6]
 8000b66:	4b76      	ldr	r3, [pc, #472]	@ (8000d40 <main+0x240>)
 8000b68:	799a      	ldrb	r2, [r3, #6]
 8000b6a:	4b75      	ldr	r3, [pc, #468]	@ (8000d40 <main+0x240>)
 8000b6c:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000b6e:	4b74      	ldr	r3, [pc, #464]	@ (8000d40 <main+0x240>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	721a      	strb	r2, [r3, #8]
 8000b74:	4b72      	ldr	r3, [pc, #456]	@ (8000d40 <main+0x240>)
 8000b76:	7a1a      	ldrb	r2, [r3, #8]
 8000b78:	4b71      	ldr	r3, [pc, #452]	@ (8000d40 <main+0x240>)
 8000b7a:	715a      	strb	r2, [r3, #5]
 8000b7c:	4b70      	ldr	r3, [pc, #448]	@ (8000d40 <main+0x240>)
 8000b7e:	795a      	ldrb	r2, [r3, #5]
 8000b80:	4b6f      	ldr	r3, [pc, #444]	@ (8000d40 <main+0x240>)
 8000b82:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000b84:	4b6e      	ldr	r3, [pc, #440]	@ (8000d40 <main+0x240>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	711a      	strb	r2, [r3, #4]
 8000b8a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d40 <main+0x240>)
 8000b8c:	791a      	ldrb	r2, [r3, #4]
 8000b8e:	4b6c      	ldr	r3, [pc, #432]	@ (8000d40 <main+0x240>)
 8000b90:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000b92:	4b6b      	ldr	r3, [pc, #428]	@ (8000d40 <main+0x240>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000b98:	4b6a      	ldr	r3, [pc, #424]	@ (8000d44 <main+0x244>)
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000b9e:	4b69      	ldr	r3, [pc, #420]	@ (8000d44 <main+0x244>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	709a      	strb	r2, [r3, #2]
 8000ba4:	4b67      	ldr	r3, [pc, #412]	@ (8000d44 <main+0x244>)
 8000ba6:	789a      	ldrb	r2, [r3, #2]
 8000ba8:	4b66      	ldr	r3, [pc, #408]	@ (8000d44 <main+0x244>)
 8000baa:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000bac:	4b65      	ldr	r3, [pc, #404]	@ (8000d44 <main+0x244>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000bb2:	4b64      	ldr	r3, [pc, #400]	@ (8000d44 <main+0x244>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	72da      	strb	r2, [r3, #11]
 8000bb8:	4b62      	ldr	r3, [pc, #392]	@ (8000d44 <main+0x244>)
 8000bba:	7ada      	ldrb	r2, [r3, #11]
 8000bbc:	4b61      	ldr	r3, [pc, #388]	@ (8000d44 <main+0x244>)
 8000bbe:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000bc0:	4b60      	ldr	r3, [pc, #384]	@ (8000d44 <main+0x244>)
 8000bc2:	2209      	movs	r2, #9
 8000bc4:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000bc6:	4b5f      	ldr	r3, [pc, #380]	@ (8000d44 <main+0x244>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	735a      	strb	r2, [r3, #13]
 8000bcc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d44 <main+0x244>)
 8000bce:	7b5a      	ldrb	r2, [r3, #13]
 8000bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8000d44 <main+0x244>)
 8000bd2:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000bd4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d44 <main+0x244>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000bda:	4b5a      	ldr	r3, [pc, #360]	@ (8000d44 <main+0x244>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	721a      	strb	r2, [r3, #8]
 8000be0:	4b58      	ldr	r3, [pc, #352]	@ (8000d44 <main+0x244>)
 8000be2:	7a1a      	ldrb	r2, [r3, #8]
 8000be4:	4b57      	ldr	r3, [pc, #348]	@ (8000d44 <main+0x244>)
 8000be6:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000be8:	4b56      	ldr	r3, [pc, #344]	@ (8000d44 <main+0x244>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	729a      	strb	r2, [r3, #10]
 8000bee:	4b55      	ldr	r3, [pc, #340]	@ (8000d44 <main+0x244>)
 8000bf0:	7a9a      	ldrb	r2, [r3, #10]
 8000bf2:	4b54      	ldr	r3, [pc, #336]	@ (8000d44 <main+0x244>)
 8000bf4:	725a      	strb	r2, [r3, #9]
 8000bf6:	4b53      	ldr	r3, [pc, #332]	@ (8000d44 <main+0x244>)
 8000bf8:	7a5a      	ldrb	r2, [r3, #9]
 8000bfa:	4b52      	ldr	r3, [pc, #328]	@ (8000d44 <main+0x244>)
 8000bfc:	719a      	strb	r2, [r3, #6]
 8000bfe:	4b51      	ldr	r3, [pc, #324]	@ (8000d44 <main+0x244>)
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b50      	ldr	r3, [pc, #320]	@ (8000d44 <main+0x244>)
 8000c04:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0c:	484e      	ldr	r0, [pc, #312]	@ (8000d48 <main+0x248>)
 8000c0e:	f003 f807 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c18:	484b      	ldr	r0, [pc, #300]	@ (8000d48 <main+0x248>)
 8000c1a:	f003 f801 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c24:	4848      	ldr	r0, [pc, #288]	@ (8000d48 <main+0x248>)
 8000c26:	f002 fffb 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	4845      	ldr	r0, [pc, #276]	@ (8000d48 <main+0x248>)
 8000c32:	f002 fff5 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000c36:	2108      	movs	r1, #8
 8000c38:	4844      	ldr	r0, [pc, #272]	@ (8000d4c <main+0x24c>)
 8000c3a:	f003 fd2f 	bl	800469c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000c3e:	210c      	movs	r1, #12
 8000c40:	4842      	ldr	r0, [pc, #264]	@ (8000d4c <main+0x24c>)
 8000c42:	f003 fd2b 	bl	800469c <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000c46:	4b42      	ldr	r3, [pc, #264]	@ (8000d50 <main+0x250>)
 8000c48:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000c4e:	4b40      	ldr	r3, [pc, #256]	@ (8000d50 <main+0x250>)
 8000c50:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 4; //Aca se elige que programa queremos que se realice
 8000c56:	4b3f      	ldr	r3, [pc, #252]	@ (8000d54 <main+0x254>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (prueba) {
 8000c5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <main+0x254>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b65      	cmp	r3, #101	@ 0x65
 8000c62:	d063      	beq.n	8000d2c <main+0x22c>
 8000c64:	2b65      	cmp	r3, #101	@ 0x65
 8000c66:	dcf9      	bgt.n	8000c5c <main+0x15c>
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	dc1d      	bgt.n	8000ca8 <main+0x1a8>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dbf5      	blt.n	8000c5c <main+0x15c>
 8000c70:	2b0a      	cmp	r3, #10
 8000c72:	d8f3      	bhi.n	8000c5c <main+0x15c>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <main+0x17c>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000caf 	.word	0x08000caf
 8000c80:	08000cb5 	.word	0x08000cb5
 8000c84:	08000c5d 	.word	0x08000c5d
 8000c88:	08000c5d 	.word	0x08000c5d
 8000c8c:	08000cbb 	.word	0x08000cbb
 8000c90:	08000cc1 	.word	0x08000cc1
 8000c94:	08000cc7 	.word	0x08000cc7
 8000c98:	08000c5d 	.word	0x08000c5d
 8000c9c:	08000c5d 	.word	0x08000c5d
 8000ca0:	08000c5d 	.word	0x08000c5d
 8000ca4:	08000ce9 	.word	0x08000ce9
 8000ca8:	2b64      	cmp	r3, #100	@ 0x64
 8000caa:	d03c      	beq.n	8000d26 <main+0x226>
 8000cac:	e7d6      	b.n	8000c5c <main+0x15c>

		case 0:
			prueba_avanzar();
 8000cae:	f000 fb5b 	bl	8001368 <prueba_avanzar>
			break;
 8000cb2:	e03f      	b.n	8000d34 <main+0x234>

		case 1:
			prueba_giros_y_sensores();
 8000cb4:	f000 fb60 	bl	8001378 <prueba_giros_y_sensores>
			break;
 8000cb8:	e03c      	b.n	8000d34 <main+0x234>

		case 4:
			programa_principal();
 8000cba:	f000 fc37 	bl	800152c <programa_principal>
			break;
 8000cbe:	e039      	b.n	8000d34 <main+0x234>

		case 5:
			ajuste_automatico();
 8000cc0:	f000 fa8e 	bl	80011e0 <ajuste_automatico>
			break;
 8000cc4:	e036      	b.n	8000d34 <main+0x234>

		case 6:
			sensor_izq_min = 32700;
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <main+0x258>)
 8000cc8:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000ccc:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000cce:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <main+0x25c>)
 8000cd0:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000cd4:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <main+0x260>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <main+0x264>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <main+0x254>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	701a      	strb	r2, [r3, #0]
		case 10: {
			TIM3->CCR3 = 0;
 8000ce8:	4b19      	ldr	r3, [pc, #100]	@ (8000d50 <main+0x250>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000cee:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <main+0x250>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cfa:	481b      	ldr	r0, [pc, #108]	@ (8000d68 <main+0x268>)
 8000cfc:	f002 ff90 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d06:	4818      	ldr	r0, [pc, #96]	@ (8000d68 <main+0x268>)
 8000d08:	f002 ff8a 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d12:	4815      	ldr	r0, [pc, #84]	@ (8000d68 <main+0x268>)
 8000d14:	f002 ff84 	bl	8003c20 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d1e:	4812      	ldr	r0, [pc, #72]	@ (8000d68 <main+0x268>)
 8000d20:	f002 ff7e 	bl	8003c20 <HAL_GPIO_WritePin>

		}
			break;
 8000d24:	e006      	b.n	8000d34 <main+0x234>
		case 100:
			prueba_casilla_n();
 8000d26:	f000 fba3 	bl	8001470 <prueba_casilla_n>
			break;
 8000d2a:	e003      	b.n	8000d34 <main+0x234>

		case 101:
			prueba_post_relleno();
 8000d2c:	f000 fbca 	bl	80014c4 <prueba_post_relleno>
			break;
 8000d30:	bf00      	nop
 8000d32:	e793      	b.n	8000c5c <main+0x15c>
		switch (prueba) {
 8000d34:	e792      	b.n	8000c5c <main+0x15c>
 8000d36:	bf00      	nop
 8000d38:	20000158 	.word	0x20000158
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	20000124 	.word	0x20000124
 8000d44:	20000134 	.word	0x20000134
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	200000d8 	.word	0x200000d8
 8000d50:	40000400 	.word	0x40000400
 8000d54:	20000145 	.word	0x20000145
 8000d58:	20000002 	.word	0x20000002
 8000d5c:	20000004 	.word	0x20000004
 8000d60:	20000148 	.word	0x20000148
 8000d64:	2000014a 	.word	0x2000014a
 8000d68:	40020c00 	.word	0x40020c00

08000d6c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b094      	sub	sp, #80	@ 0x50
 8000d70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	2230      	movs	r2, #48	@ 0x30
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 fa72 	bl	8005264 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b28      	ldr	r3, [pc, #160]	@ (8000e38 <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d98:	4a27      	ldr	r2, [pc, #156]	@ (8000e38 <SystemClock_Config+0xcc>)
 8000d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da0:	4b25      	ldr	r3, [pc, #148]	@ (8000e38 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dac:	2300      	movs	r3, #0
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	4b22      	ldr	r3, [pc, #136]	@ (8000e3c <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <SystemClock_Config+0xd0>)
 8000db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dba:	6013      	str	r3, [r2, #0]
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd0:	2310      	movs	r3, #16
 8000dd2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000de0:	2332      	movs	r3, #50	@ 0x32
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000de4:	2304      	movs	r3, #4
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de8:	2307      	movs	r3, #7
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 ff47 	bl	8003c84 <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x94>
		Error_Handler();
 8000dfc:	f001 fac4 	bl	8002388 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e00:	230f      	movs	r3, #15
 8000e02:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e10:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f9a8 	bl	8004174 <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xc2>
		Error_Handler();
 8000e2a:	f001 faad 	bl	8002388 <Error_Handler>
	}
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	@ 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000e46:	463b      	mov	r3, r7
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000e52:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e54:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <MX_ADC1_Init+0xb8>)
 8000e56:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e5e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e60:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e72:	4b20      	ldr	r3, [pc, #128]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e82:	4a1e      	ldr	r2, [pc, #120]	@ (8000efc <MX_ADC1_Init+0xbc>)
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000ea0:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000ea2:	f001 fc85 	bl	80027b0 <HAL_ADC_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000eac:	f001 fa6c 	bl	8002388 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000ec2:	f001 fdd7 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000ecc:	f001 fa5c 	bl	8002388 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ed8:	463b      	mov	r3, r7
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_ADC1_Init+0xb4>)
 8000ede:	f001 fdc9 	bl	8002a74 <HAL_ADC_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
		Error_Handler();
 8000ee8:	f001 fa4e 	bl	8002388 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000030 	.word	0x20000030
 8000ef8:	40012000 	.word	0x40012000
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000f30:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f32:	4a33      	ldr	r2, [pc, #204]	@ (8001000 <MX_TIM3_Init+0x100>)
 8000f34:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000f36:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8000f42:	4b2e      	ldr	r3, [pc, #184]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f44:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000f48:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000f56:	4829      	ldr	r0, [pc, #164]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f58:	f003 faf8 	bl	800454c <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000f62:	f001 fa11 	bl	8002388 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f74:	f003 fd1c 	bl	80049b0 <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM3_Init+0x82>
		Error_Handler();
 8000f7e:	f001 fa03 	bl	8002388 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f82:	481e      	ldr	r0, [pc, #120]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000f84:	f003 fb31 	bl	80045ea <HAL_TIM_PWM_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM3_Init+0x92>
		Error_Handler();
 8000f8e:	f001 f9fb 	bl	8002388 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4816      	ldr	r0, [pc, #88]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000fa2:	f004 f8e3 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0xb0>
		Error_Handler();
 8000fac:	f001 f9ec 	bl	8002388 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb0:	2360      	movs	r3, #96	@ 0x60
 8000fb2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000fc8:	f003 fc30 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0xd6>
		Error_Handler();
 8000fd2:	f001 f9d9 	bl	8002388 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	220c      	movs	r2, #12
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000fde:	f003 fc25 	bl	800482c <HAL_TIM_PWM_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0xec>
		Error_Handler();
 8000fe8:	f001 f9ce 	bl	8002388 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000fec:	4803      	ldr	r0, [pc, #12]	@ (8000ffc <MX_TIM3_Init+0xfc>)
 8000fee:	f001 fa93 	bl	8002518 <HAL_TIM_MspPostInit>

}
 8000ff2:	bf00      	nop
 8000ff4:	3738      	adds	r7, #56	@ 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000d8 	.word	0x200000d8
 8001000:	40000400 	.word	0x40000400

08001004 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_DMA_Init+0x3c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <MX_DMA_Init+0x3c>)
 8001014:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <MX_DMA_Init+0x3c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2038      	movs	r0, #56	@ 0x38
 800102c:	f002 f89d 	bl	800316a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001030:	2038      	movs	r0, #56	@ 0x38
 8001032:	f002 f8b6 	bl	80031a2 <HAL_NVIC_EnableIRQ>

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b59      	ldr	r3, [pc, #356]	@ (80011c4 <MX_GPIO_Init+0x180>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a58      	ldr	r2, [pc, #352]	@ (80011c4 <MX_GPIO_Init+0x180>)
 8001064:	f043 0310 	orr.w	r3, r3, #16
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b56      	ldr	r3, [pc, #344]	@ (80011c4 <MX_GPIO_Init+0x180>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <MX_GPIO_Init+0x180>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a51      	ldr	r2, [pc, #324]	@ (80011c4 <MX_GPIO_Init+0x180>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b4f      	ldr	r3, [pc, #316]	@ (80011c4 <MX_GPIO_Init+0x180>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <MX_GPIO_Init+0x180>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a4a      	ldr	r2, [pc, #296]	@ (80011c4 <MX_GPIO_Init+0x180>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b48      	ldr	r3, [pc, #288]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a43      	ldr	r2, [pc, #268]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b3d      	ldr	r3, [pc, #244]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a3c      	ldr	r2, [pc, #240]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <MX_GPIO_Init+0x180>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2108      	movs	r1, #8
 80010ea:	4837      	ldr	r0, [pc, #220]	@ (80011c8 <MX_GPIO_Init+0x184>)
 80010ec:	f002 fd98 	bl	8003c20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80010f6:	4835      	ldr	r0, [pc, #212]	@ (80011cc <MX_GPIO_Init+0x188>)
 80010f8:	f002 fd92 	bl	8003c20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <MX_GPIO_Init+0x18c>)
 8001104:	f002 fd8c 	bl	8003c20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001108:	2308      	movs	r3, #8
 800110a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	482a      	ldr	r0, [pc, #168]	@ (80011c8 <MX_GPIO_Init+0x184>)
 8001120:	f002 fbca 	bl	80038b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 8001124:	2301      	movs	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4827      	ldr	r0, [pc, #156]	@ (80011d4 <MX_GPIO_Init+0x190>)
 8001138:	f002 fbbe 	bl	80038b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin;
 800113c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001140:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <MX_GPIO_Init+0x188>)
 8001156:	f002 fbaf 	bl	80038b8 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
	GPIO_InitStruct.Pin = led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin;
 800115a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800115e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	4817      	ldr	r0, [pc, #92]	@ (80011d0 <MX_GPIO_Init+0x18c>)
 8001174:	f002 fba0 	bl	80038b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_frontal_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin;
 8001178:	2340      	movs	r3, #64	@ 0x40
 800117a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001180:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(sensor_frontal_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4812      	ldr	r0, [pc, #72]	@ (80011d8 <MX_GPIO_Init+0x194>)
 800118e:	f002 fb93 	bl	80038b8 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_linea_Pin;
 8001192:	2380      	movs	r3, #128	@ 0x80
 8001194:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(sensor_linea_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480c      	ldr	r0, [pc, #48]	@ (80011d8 <MX_GPIO_Init+0x194>)
 80011a6:	f002 fb87 	bl	80038b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2017      	movs	r0, #23
 80011b0:	f001 ffdb 	bl	800316a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011b4:	2017      	movs	r0, #23
 80011b6:	f001 fff4 	bl	80031a2 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020800 	.word	0x40020800
 80011dc:	00000000 	.word	0x00000000

080011e0 <ajuste_automatico>:

/* USER CODE BEGIN 4 */
void ajuste_automatico(void) {
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80011e4:	4b56      	ldr	r3, [pc, #344]	@ (8001340 <ajuste_automatico+0x160>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <ajuste_automatico+0x14>
 80011ec:	4b55      	ldr	r3, [pc, #340]	@ (8001344 <ajuste_automatico+0x164>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d107      	bne.n	8001204 <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80011f4:	4b52      	ldr	r3, [pc, #328]	@ (8001340 <ajuste_automatico+0x160>)
 80011f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011fa:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80011fc:	4b51      	ldr	r3, [pc, #324]	@ (8001344 <ajuste_automatico+0x164>)
 80011fe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001202:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 8001204:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <ajuste_automatico+0x160>)
 8001206:	881a      	ldrh	r2, [r3, #0]
 8001208:	4b4f      	ldr	r3, [pc, #316]	@ (8001348 <ajuste_automatico+0x168>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	429a      	cmp	r2, r3
 8001210:	d904      	bls.n	800121c <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 8001212:	4b4d      	ldr	r3, [pc, #308]	@ (8001348 <ajuste_automatico+0x168>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b49      	ldr	r3, [pc, #292]	@ (8001340 <ajuste_automatico+0x160>)
 800121a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 800121c:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <ajuste_automatico+0x164>)
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	4b4a      	ldr	r3, [pc, #296]	@ (800134c <ajuste_automatico+0x16c>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	429a      	cmp	r2, r3
 8001228:	d904      	bls.n	8001234 <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 800122a:	4b48      	ldr	r3, [pc, #288]	@ (800134c <ajuste_automatico+0x16c>)
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b44      	ldr	r3, [pc, #272]	@ (8001344 <ajuste_automatico+0x164>)
 8001232:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 8001234:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <ajuste_automatico+0x170>)
 8001236:	881a      	ldrh	r2, [r3, #0]
 8001238:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <ajuste_automatico+0x168>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	429a      	cmp	r2, r3
 8001240:	d204      	bcs.n	800124c <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 8001242:	4b41      	ldr	r3, [pc, #260]	@ (8001348 <ajuste_automatico+0x168>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <ajuste_automatico+0x170>)
 800124a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 800124c:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <ajuste_automatico+0x174>)
 800124e:	881a      	ldrh	r2, [r3, #0]
 8001250:	4b3e      	ldr	r3, [pc, #248]	@ (800134c <ajuste_automatico+0x16c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	429a      	cmp	r2, r3
 8001258:	d204      	bcs.n	8001264 <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 800125a:	4b3c      	ldr	r3, [pc, #240]	@ (800134c <ajuste_automatico+0x16c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b3c      	ldr	r3, [pc, #240]	@ (8001354 <ajuste_automatico+0x174>)
 8001262:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001264:	2101      	movs	r1, #1
 8001266:	483c      	ldr	r0, [pc, #240]	@ (8001358 <ajuste_automatico+0x178>)
 8001268:	f002 fcc2 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d15c      	bne.n	800132c <ajuste_automatico+0x14c>
		HAL_Delay(40);
 8001272:	2028      	movs	r0, #40	@ 0x28
 8001274:	f001 fa78 	bl	8002768 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001278:	2101      	movs	r1, #1
 800127a:	4837      	ldr	r0, [pc, #220]	@ (8001358 <ajuste_automatico+0x178>)
 800127c:	f002 fcb8 	bl	8003bf0 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d152      	bne.n	800132c <ajuste_automatico+0x14c>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 8001286:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <ajuste_automatico+0x170>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fa18 	bl	80006c0 <__aeabi_i2d>
 8001290:	a327      	add	r3, pc, #156	@ (adr r3, 8001330 <ajuste_automatico+0x150>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7fe ff97 	bl	80001c8 <__aeabi_dmul>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4614      	mov	r4, r2
 80012a0:	461d      	mov	r5, r3
 80012a2:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <ajuste_automatico+0x160>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fa0a 	bl	80006c0 <__aeabi_i2d>
 80012ac:	a322      	add	r3, pc, #136	@ (adr r3, 8001338 <ajuste_automatico+0x158>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7fe ff89 	bl	80001c8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f8b3 	bl	8000428 <__adddf3>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fa63 	bl	8000794 <__aeabi_d2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b22      	ldr	r3, [pc, #136]	@ (800135c <ajuste_automatico+0x17c>)
 80012d4:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <ajuste_automatico+0x174>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f9f0 	bl	80006c0 <__aeabi_i2d>
 80012e0:	a313      	add	r3, pc, #76	@ (adr r3, 8001330 <ajuste_automatico+0x150>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7fe ff6f 	bl	80001c8 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <ajuste_automatico+0x164>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f9e2 	bl	80006c0 <__aeabi_i2d>
 80012fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001338 <ajuste_automatico+0x158>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7fe ff61 	bl	80001c8 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff f88b 	bl	8000428 <__adddf3>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f7ff fa3b 	bl	8000794 <__aeabi_d2uiz>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <ajuste_automatico+0x180>)
 8001324:	801a      	strh	r2, [r3, #0]
			prueba = 4;
 8001326:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <ajuste_automatico+0x184>)
 8001328:	2204      	movs	r2, #4
 800132a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800132c:	bf00      	nop
 800132e:	bdb0      	pop	{r4, r5, r7, pc}
 8001330:	9999999a 	.word	0x9999999a
 8001334:	3fd99999 	.word	0x3fd99999
 8001338:	33333333 	.word	0x33333333
 800133c:	3fe33333 	.word	0x3fe33333
 8001340:	20000004 	.word	0x20000004
 8001344:	20000002 	.word	0x20000002
 8001348:	200001da 	.word	0x200001da
 800134c:	200001d8 	.word	0x200001d8
 8001350:	2000014a 	.word	0x2000014a
 8001354:	20000148 	.word	0x20000148
 8001358:	40020000 	.word	0x40020000
 800135c:	2000014e 	.word	0x2000014e
 8001360:	2000014c 	.word	0x2000014c
 8001364:	20000145 	.word	0x20000145

08001368 <prueba_avanzar>:
	ejecutarGiro(izquierda);
	correccion_avanzar();
	while (1)
		;
}
void prueba_avanzar(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
//	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
	ejecutarGiro(adelante);
 800136c:	2000      	movs	r0, #0
 800136e:	f000 fb35 	bl	80019dc <ejecutarGiro>

	while (1)
 8001372:	bf00      	nop
 8001374:	e7fd      	b.n	8001372 <prueba_avanzar+0xa>
	...

08001378 <prueba_giros_y_sensores>:
		;
}

void prueba_giros_y_sensores(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	correccion_avanzar();
 800137c:	f000 fa68 	bl	8001850 <correccion_avanzar>
	if (verificar_sensor()) {
 8001380:	f000 fc3e 	bl	8001c00 <verificar_sensor>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800138a:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	4a36      	ldr	r2, [pc, #216]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f9db 	bl	8001750 <act_ubicacion>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b31      	ldr	r3, [pc, #196]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013a0:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d121      	bne.n	80013ee <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 80013aa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013ae:	f001 f9db 	bl	8002768 <HAL_Delay>
		ejecutarGiro(izquierda);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 fb12 	bl	80019dc <ejecutarGiro>
		orientacion_actual = oeste;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 80013be:	e012      	b.n	80013e6 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 80013c0:	f000 fa46 	bl	8001850 <correccion_avanzar>
			if (verificar_sensor()) {
 80013c4:	f000 fc1c 	bl	8001c00 <verificar_sensor>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4a25      	ldr	r2, [pc, #148]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 80013d4:	7812      	ldrb	r2, [r2, #0]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 f9b9 	bl	8001750 <act_ubicacion>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b20      	ldr	r3, [pc, #128]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013e4:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d0e8      	beq.n	80013c0 <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b09      	cmp	r3, #9
 80013f4:	d121      	bne.n	800143a <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 80013f6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013fa:	f001 f9b5 	bl	8002768 <HAL_Delay>
		ejecutarGiro(derecha);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 faec 	bl	80019dc <ejecutarGiro>
		orientacion_actual = norte;
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 800140a:	e012      	b.n	8001432 <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 800140c:	f000 fa20 	bl	8001850 <correccion_avanzar>
			if (verificar_sensor()) {
 8001410:	f000 fbf6 	bl	8001c00 <verificar_sensor>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f993 	bl	8001750 <act_ubicacion>
 800142a:	4603      	mov	r3, r0
 800142c:	461a      	mov	r2, r3
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 8001430:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8001432:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b09      	cmp	r3, #9
 8001438:	d0e8      	beq.n	800140c <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)) {
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <prueba_giros_y_sensores+0xec>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b0d      	cmp	r3, #13
 8001440:	d10e      	bne.n	8001460 <prueba_giros_y_sensores+0xe8>
 8001442:	2140      	movs	r1, #64	@ 0x40
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <prueba_giros_y_sensores+0xf4>)
 8001446:	f002 fbd3 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d107      	bne.n	8001460 <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 fac3 	bl	80019dc <ejecutarGiro>
		orientacion_actual = sur;
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <prueba_giros_y_sensores+0xf0>)
 8001458:	2202      	movs	r2, #2
 800145a:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 800145c:	f000 f9f8 	bl	8001850 <correccion_avanzar>
	}
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000120 	.word	0x20000120
 8001468:	20000121 	.word	0x20000121
 800146c:	40020800 	.word	0x40020800

08001470 <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8001474:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <prueba_casilla_n+0x40>)
 8001476:	2207      	movs	r2, #7
 8001478:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <prueba_casilla_n+0x44>)
 800147c:	2201      	movs	r2, #1
 800147e:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8001480:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <prueba_casilla_n+0x48>)
 8001482:	2201      	movs	r2, #1
 8001484:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8001486:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <prueba_casilla_n+0x48>)
 8001488:	2203      	movs	r2, #3
 800148a:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 800148c:	4b0a      	ldr	r3, [pc, #40]	@ (80014b8 <prueba_casilla_n+0x48>)
 800148e:	2203      	movs	r2, #3
 8001490:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //deberia dar que tiene que ir a 11
 8001492:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <prueba_casilla_n+0x40>)
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <prueba_casilla_n+0x4c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4906      	ldr	r1, [pc, #24]	@ (80014b4 <prueba_casilla_n+0x44>)
 800149c:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <prueba_casilla_n+0x48>)
 800149e:	f000 fcd1 	bl	8001e44 <calculo_minimo_peso>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	@ (80014c0 <prueba_casilla_n+0x50>)
 80014a8:	701a      	strb	r2, [r3, #0]

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000120 	.word	0x20000120
 80014b4:	20000134 	.word	0x20000134
 80014b8:	20000124 	.word	0x20000124
 80014bc:	20000121 	.word	0x20000121
 80014c0:	20000000 	.word	0x20000000

080014c4 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	ubicacion = 5;
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <prueba_post_relleno+0x54>)
 80014ca:	2205      	movs	r2, #5
 80014cc:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <prueba_post_relleno+0x58>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <prueba_post_relleno+0x54>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4a10      	ldr	r2, [pc, #64]	@ (800151c <prueba_post_relleno+0x58>)
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f8d8 	bl	8001694 <obtener_orientacion_futura>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <prueba_post_relleno+0x5c>)
 80014ea:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001524 <prueba_post_relleno+0x60>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <prueba_post_relleno+0x60>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <prueba_post_relleno+0x5c>)
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f8f5 	bl	80016ec <obtenerGiro>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <prueba_post_relleno+0x64>)
 8001508:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 800150a:	4b07      	ldr	r3, [pc, #28]	@ (8001528 <prueba_post_relleno+0x64>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fa64 	bl	80019dc <ejecutarGiro>
	while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <prueba_post_relleno+0x50>
 8001518:	20000120 	.word	0x20000120
 800151c:	20000000 	.word	0x20000000
 8001520:	20000122 	.word	0x20000122
 8001524:	20000121 	.word	0x20000121
 8001528:	20000123 	.word	0x20000123

0800152c <programa_principal>:
		;
}

void programa_principal(void) {
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8001530:	f000 f98e 	bl	8001850 <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 8001534:	f000 fb64 	bl	8001c00 <verificar_sensor>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d041      	beq.n	80015c2 <programa_principal+0x96>
		contador_giros = 0;
 800153e:	4b49      	ldr	r3, [pc, #292]	@ (8001664 <programa_principal+0x138>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 8001544:	4b48      	ldr	r3, [pc, #288]	@ (8001668 <programa_principal+0x13c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <programa_principal+0x13c>)
 800154e:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001550:	4b46      	ldr	r3, [pc, #280]	@ (800166c <programa_principal+0x140>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4a46      	ldr	r2, [pc, #280]	@ (8001670 <programa_principal+0x144>)
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f8f8 	bl	8001750 <act_ubicacion>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b41      	ldr	r3, [pc, #260]	@ (800166c <programa_principal+0x140>)
 8001566:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8001568:	4b40      	ldr	r3, [pc, #256]	@ (800166c <programa_principal+0x140>)
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b40      	ldr	r3, [pc, #256]	@ (8001670 <programa_principal+0x144>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4940      	ldr	r1, [pc, #256]	@ (8001674 <programa_principal+0x148>)
 8001572:	4841      	ldr	r0, [pc, #260]	@ (8001678 <programa_principal+0x14c>)
 8001574:	f000 fc66 	bl	8001e44 <calculo_minimo_peso>
 8001578:	4603      	mov	r3, r0
 800157a:	461a      	mov	r2, r3
 800157c:	4b3f      	ldr	r3, [pc, #252]	@ (800167c <programa_principal+0x150>)
 800157e:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001580:	4b3a      	ldr	r3, [pc, #232]	@ (800166c <programa_principal+0x140>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <programa_principal+0x150>)
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f882 	bl	8001694 <obtener_orientacion_futura>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <programa_principal+0x154>)
 8001596:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001598:	4b35      	ldr	r3, [pc, #212]	@ (8001670 <programa_principal+0x144>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4a38      	ldr	r2, [pc, #224]	@ (8001680 <programa_principal+0x154>)
 800159e:	7812      	ldrb	r2, [r2, #0]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f8a2 	bl	80016ec <obtenerGiro>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <programa_principal+0x158>)
 80015ae:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <programa_principal+0x154>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001670 <programa_principal+0x144>)
 80015b6:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 80015b8:	4b32      	ldr	r3, [pc, #200]	@ (8001684 <programa_principal+0x158>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fa0d 	bl	80019dc <ejecutarGiro>
	}
	if (solicitud_actualizar == 1) {
 80015c2:	4b31      	ldr	r3, [pc, #196]	@ (8001688 <programa_principal+0x15c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d13b      	bne.n	8001644 <programa_principal+0x118>
		act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <programa_principal+0x140>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4a27      	ldr	r2, [pc, #156]	@ (8001670 <programa_principal+0x144>)
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4827      	ldr	r0, [pc, #156]	@ (8001674 <programa_principal+0x148>)
 80015d8:	f000 fb42 	bl	8001c60 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 80015dc:	4926      	ldr	r1, [pc, #152]	@ (8001678 <programa_principal+0x14c>)
 80015de:	4825      	ldr	r0, [pc, #148]	@ (8001674 <programa_principal+0x148>)
 80015e0:	f000 fb90 	bl	8001d04 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <programa_principal+0x140>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <programa_principal+0x144>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4921      	ldr	r1, [pc, #132]	@ (8001674 <programa_principal+0x148>)
 80015ee:	4822      	ldr	r0, [pc, #136]	@ (8001678 <programa_principal+0x14c>)
 80015f0:	f000 fc28 	bl	8001e44 <calculo_minimo_peso>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <programa_principal+0x150>)
 80015fa:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <programa_principal+0x140>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4a1e      	ldr	r2, [pc, #120]	@ (800167c <programa_principal+0x150>)
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f844 	bl	8001694 <obtener_orientacion_futura>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <programa_principal+0x154>)
 8001612:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <programa_principal+0x144>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <programa_principal+0x154>)
 800161a:	7812      	ldrb	r2, [r2, #0]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f864 	bl	80016ec <obtenerGiro>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <programa_principal+0x158>)
 800162a:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <programa_principal+0x154>)
 800162e:	781a      	ldrb	r2, [r3, #0]
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <programa_principal+0x144>)
 8001632:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8001634:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <programa_principal+0x158>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f9cf 	bl	80019dc <ejecutarGiro>
		solicitud_actualizar = 0;
 800163e:	4b12      	ldr	r3, [pc, #72]	@ (8001688 <programa_principal+0x15c>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
	}
	if (filtrado == 1) {
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <programa_principal+0x160>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d101      	bne.n	8001652 <programa_principal+0x126>
		filtrado_pared();
 800164e:	f000 fe55 	bl	80022fc <filtrado_pared>
	}

	if (ubicacion == 15) {
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <programa_principal+0x140>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d102      	bne.n	8001660 <programa_principal+0x134>
		prueba = 10;
 800165a:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <programa_principal+0x164>)
 800165c:	220a      	movs	r2, #10
 800165e:	701a      	strb	r2, [r3, #0]
	}
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000146 	.word	0x20000146
 8001668:	20000144 	.word	0x20000144
 800166c:	20000120 	.word	0x20000120
 8001670:	20000121 	.word	0x20000121
 8001674:	20000134 	.word	0x20000134
 8001678:	20000124 	.word	0x20000124
 800167c:	20000000 	.word	0x20000000
 8001680:	20000122 	.word	0x20000122
 8001684:	20000123 	.word	0x20000123
 8001688:	20000154 	.word	0x20000154
 800168c:	20000155 	.word	0x20000155
 8001690:	20000145 	.word	0x20000145

08001694 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	71fb      	strb	r3, [r7, #7]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 80016a4:	79ba      	ldrb	r2, [r7, #6]
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	3301      	adds	r3, #1
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d101      	bne.n	80016b2 <obtener_orientacion_futura+0x1e>
		return oeste;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e015      	b.n	80016de <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 80016b2:	79ba      	ldrb	r2, [r7, #6]
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d101      	bne.n	80016c0 <obtener_orientacion_futura+0x2c>
		return este;
 80016bc:	2301      	movs	r3, #1
 80016be:	e00e      	b.n	80016de <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 80016c0:	79ba      	ldrb	r2, [r7, #6]
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	3304      	adds	r3, #4
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d101      	bne.n	80016ce <obtener_orientacion_futura+0x3a>
		return norte;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e007      	b.n	80016de <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 80016ce:	79ba      	ldrb	r2, [r7, #6]
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3b04      	subs	r3, #4
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d101      	bne.n	80016dc <obtener_orientacion_futura+0x48>
		return sur;
 80016d8:	2302      	movs	r3, #2
 80016da:	e000      	b.n	80016de <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 80016dc:	2364      	movs	r3, #100	@ 0x64
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	460a      	mov	r2, r1
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 80016fc:	79ba      	ldrb	r2, [r7, #6]
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	3304      	adds	r3, #4
 8001704:	425a      	negs	r2, r3
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	f002 0203 	and.w	r2, r2, #3
 800170e:	bf58      	it	pl
 8001710:	4253      	negpl	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d812      	bhi.n	8001740 <obtenerGiro+0x54>
 800171a:	a201      	add	r2, pc, #4	@ (adr r2, 8001720 <obtenerGiro+0x34>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	08001735 	.word	0x08001735
 8001728:	08001739 	.word	0x08001739
 800172c:	0800173d 	.word	0x0800173d
	case 0:
		return adelante;
 8001730:	2300      	movs	r3, #0
 8001732:	e006      	b.n	8001742 <obtenerGiro+0x56>
	case 1:
		return derecha;
 8001734:	2302      	movs	r3, #2
 8001736:	e004      	b.n	8001742 <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8001738:	2303      	movs	r3, #3
 800173a:	e002      	b.n	8001742 <obtenerGiro+0x56>
	case 3:
		return izquierda;
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <obtenerGiro+0x56>
	default:
		return 100; // Error
 8001740:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001742:	4618      	mov	r0, r3
 8001744:	3714      	adds	r7, #20
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop

08001750 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	460a      	mov	r2, r1
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	4613      	mov	r3, r2
 800175e:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001760:	79bb      	ldrb	r3, [r7, #6]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d81a      	bhi.n	800179c <act_ubicacion+0x4c>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <act_ubicacion+0x1c>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001785 	.word	0x08001785
 8001774:	0800178d 	.word	0x0800178d
 8001778:	08001795 	.word	0x08001795
	case 0:
		return ubicacion + 4;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3304      	adds	r3, #4
 8001780:	b2db      	uxtb	r3, r3
 8001782:	e00c      	b.n	800179e <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	3b01      	subs	r3, #1
 8001788:	b2db      	uxtb	r3, r3
 800178a:	e008      	b.n	800179e <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	3b04      	subs	r3, #4
 8001790:	b2db      	uxtb	r3, r3
 8001792:	e004      	b.n	800179e <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	3301      	adds	r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	e000      	b.n	800179e <act_ubicacion+0x4e>
	default:
		return 100; // Error
 800179c:	2364      	movs	r3, #100	@ 0x64
	}
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <promediar>:

void promediar(uint16_t *buffer) {
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	e012      	b.n	80017e8 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	4413      	add	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3302      	adds	r3, #2
 80017d2:	881b      	ldrh	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4413      	add	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3304      	adds	r3, #4
 80017e0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	dde9      	ble.n	80017c2 <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <promediar+0x64>)
 80017f6:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <promediar+0x68>)
 8001800:	801a      	strh	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200001d8 	.word	0x200001d8
 8001814:	200001da 	.word	0x200001da

08001818 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001820:	4803      	ldr	r0, [pc, #12]	@ (8001830 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001822:	f7ff ffc3 	bl	80017ac <promediar>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000158 	.word	0x20000158

08001834 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 800183c:	4803      	ldr	r0, [pc, #12]	@ (800184c <HAL_ADC_ConvCpltCallback+0x18>)
 800183e:	f7ff ffb5 	bl	80017ac <promediar>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000198 	.word	0x20000198

08001850 <correccion_avanzar>:
void correccion_avanzar(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <correccion_avanzar+0x54>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <correccion_avanzar+0x58>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d209      	bcs.n	8001876 <correccion_avanzar+0x26>
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <correccion_avanzar+0x5c>)
 8001864:	881a      	ldrh	r2, [r3, #0]
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <correccion_avanzar+0x60>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	429a      	cmp	r2, r3
 800186e:	d202      	bcs.n	8001876 <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8001870:	f000 f870 	bl	8001954 <apagar_derecha>
 8001874:	e013      	b.n	800189e <correccion_avanzar+0x4e>
	} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <correccion_avanzar+0x58>)
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <correccion_avanzar+0x54>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	429a      	cmp	r2, r3
 8001882:	d209      	bcs.n	8001898 <correccion_avanzar+0x48>
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <correccion_avanzar+0x60>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <correccion_avanzar+0x5c>)
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d202      	bcs.n	8001898 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8001892:	f000 f837 	bl	8001904 <apagar_izquierda>
 8001896:	e002      	b.n	800189e <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8001898:	f000 f80c 	bl	80018b4 <avanzar>
	}
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200001d8 	.word	0x200001d8
 80018a8:	2000014c 	.word	0x2000014c
 80018ac:	2000014e 	.word	0x2000014e
 80018b0:	200001da 	.word	0x200001da

080018b4 <avanzar>:
void avanzar(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018be:	480f      	ldr	r0, [pc, #60]	@ (80018fc <avanzar+0x48>)
 80018c0:	f002 f9ae 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ca:	480c      	ldr	r0, [pc, #48]	@ (80018fc <avanzar+0x48>)
 80018cc:	f002 f9a8 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80018d0:	2200      	movs	r2, #0
 80018d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018d6:	4809      	ldr	r0, [pc, #36]	@ (80018fc <avanzar+0x48>)
 80018d8:	f002 f9a2 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e2:	4806      	ldr	r0, [pc, #24]	@ (80018fc <avanzar+0x48>)
 80018e4:	f002 f99c 	bl	8003c20 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <avanzar+0x4c>)
 80018ea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018ee:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 80018f0:	4b03      	ldr	r3, [pc, #12]	@ (8001900 <avanzar+0x4c>)
 80018f2:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 80018f6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020400 	.word	0x40020400
 8001900:	40000400 	.word	0x40000400

08001904 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800190e:	480f      	ldr	r0, [pc, #60]	@ (800194c <apagar_izquierda+0x48>)
 8001910:	f002 f986 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800191a:	480c      	ldr	r0, [pc, #48]	@ (800194c <apagar_izquierda+0x48>)
 800191c:	f002 f980 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001926:	4809      	ldr	r0, [pc, #36]	@ (800194c <apagar_izquierda+0x48>)
 8001928:	f002 f97a 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001932:	4806      	ldr	r0, [pc, #24]	@ (800194c <apagar_izquierda+0x48>)
 8001934:	f002 f974 	bl	8003c20 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <apagar_izquierda+0x4c>)
 800193a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800193e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001940:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <apagar_izquierda+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	40020400 	.word	0x40020400
 8001950:	40000400 	.word	0x40000400

08001954 <apagar_derecha>:

void apagar_derecha(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800195e:	480f      	ldr	r0, [pc, #60]	@ (800199c <apagar_derecha+0x48>)
 8001960:	f002 f95e 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800196a:	480c      	ldr	r0, [pc, #48]	@ (800199c <apagar_derecha+0x48>)
 800196c:	f002 f958 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001976:	4809      	ldr	r0, [pc, #36]	@ (800199c <apagar_derecha+0x48>)
 8001978:	f002 f952 	bl	8003c20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001982:	4806      	ldr	r0, [pc, #24]	@ (800199c <apagar_derecha+0x48>)
 8001984:	f002 f94c 	bl	8003c20 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <apagar_derecha+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800198e:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <apagar_derecha+0x4c>)
 8001990:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40020400 	.word	0x40020400
 80019a0:	40000400 	.word	0x40000400

080019a4 <mini_retroceso>:

void mini_retroceso(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 80019a8:	2002      	movs	r0, #2
 80019aa:	f000 f8c5 	bl	8001b38 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 80019ae:	2002      	movs	r0, #2
 80019b0:	f000 f8f4 	bl	8001b9c <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 80019b4:	2064      	movs	r0, #100	@ 0x64
 80019b6:	f000 fed7 	bl	8002768 <HAL_Delay>
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}

080019be <mini_avance>:
void mini_avance(void) {
 80019be:	b580      	push	{r7, lr}
 80019c0:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 f8b8 	bl	8001b38 <setMotorIzquierdo>
	setMotorDerecho(avance);
 80019c8:	2001      	movs	r0, #1
 80019ca:	f000 f8e7 	bl	8001b9c <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 80019ce:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019d2:	f000 fec9 	bl	8002768 <HAL_Delay>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	f200 809f 	bhi.w	8001b2c <ejecutarGiro+0x150>
 80019ee:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <ejecutarGiro+0x18>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a87 	.word	0x08001a87
 80019fc:	08001a0b 	.word	0x08001a0b
 8001a00:	08001b07 	.word	0x08001b07
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001a04:	f7ff ffdb 	bl	80019be <mini_avance>
		break;
 8001a08:	e090      	b.n	8001b2c <ejecutarGiro+0x150>
	case derecha:
		if (contador_giros == 0) {
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d124      	bne.n	8001a5c <ejecutarGiro+0x80>
			contador_giros = contador_giros + 1;
 8001a12:	4b48      	ldr	r3, [pc, #288]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3301      	adds	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a1c:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 f88a 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 f8b9 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001a2a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a2e:	f000 fe9b 	bl	8002768 <HAL_Delay>
			setMotorIzquierdo(avance);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 f880 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f000 f8af 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 8001a3e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001a42:	f000 fe91 	bl	8002768 <HAL_Delay>
			mini_avance();
 8001a46:	f7ff ffba 	bl	80019be <mini_avance>
			HAL_Delay(tiempo_muerto);
 8001a4a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a4e:	f000 fe8b 	bl	8002768 <HAL_Delay>
			HAL_Delay(tiempo_muerto);
 8001a52:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a56:	f000 fe87 	bl	8002768 <HAL_Delay>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001a5a:	e067      	b.n	8001b2c <ejecutarGiro+0x150>
			contador_giros = contador_giros + 1;
 8001a5c:	4b35      	ldr	r3, [pc, #212]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a66:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001a68:	f7ff ff9c 	bl	80019a4 <mini_retroceso>
			setMotorIzquierdo(avance);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 f863 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001a72:	2002      	movs	r0, #2
 8001a74:	f000 f892 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001a78:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001a7c:	f000 fe74 	bl	8002768 <HAL_Delay>
			mini_avance();
 8001a80:	f7ff ff9d 	bl	80019be <mini_avance>
		break;
 8001a84:	e052      	b.n	8001b2c <ejecutarGiro+0x150>
	case izquierda:
		if (contador_giros == 0) {
 8001a86:	4b2b      	ldr	r3, [pc, #172]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d124      	bne.n	8001ad8 <ejecutarGiro+0xfc>
			contador_giros = contador_giros + 1;
 8001a8e:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3301      	adds	r3, #1
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <ejecutarGiro+0x158>)
 8001a98:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f000 f84c 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f000 f87b 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001aa6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001aaa:	f000 fe5d 	bl	8002768 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f000 f842 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f000 f871 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 8001aba:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8001abe:	f000 fe53 	bl	8002768 <HAL_Delay>
			mini_avance();
 8001ac2:	f7ff ff7c 	bl	80019be <mini_avance>
			HAL_Delay(tiempo_muerto);
 8001ac6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001aca:	f000 fe4d 	bl	8002768 <HAL_Delay>
			HAL_Delay(tiempo_muerto);
 8001ace:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ad2:	f000 fe49 	bl	8002768 <HAL_Delay>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001ad6:	e029      	b.n	8001b2c <ejecutarGiro+0x150>
			contador_giros = contador_giros + 1;
 8001ad8:	4b16      	ldr	r3, [pc, #88]	@ (8001b34 <ejecutarGiro+0x158>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <ejecutarGiro+0x158>)
 8001ae2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001ae4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ae8:	f000 fe3e 	bl	8002768 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001aec:	2002      	movs	r0, #2
 8001aee:	f000 f823 	bl	8001b38 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f000 f852 	bl	8001b9c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001af8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001afc:	f000 fe34 	bl	8002768 <HAL_Delay>
			mini_avance();
 8001b00:	f7ff ff5d 	bl	80019be <mini_avance>
		break;
 8001b04:	e012      	b.n	8001b2c <ejecutarGiro+0x150>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <ejecutarGiro+0x158>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <ejecutarGiro+0x158>)
 8001b10:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 f810 	bl	8001b38 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f000 f83f 	bl	8001b9c <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001b1e:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001b22:	f000 fe21 	bl	8002768 <HAL_Delay>
		mini_avance();
 8001b26:	f7ff ff4a 	bl	80019be <mini_avance>
		break;
 8001b2a:	bf00      	nop

	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000146 	.word	0x20000146

08001b38 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <setMotorIzquierdo+0x5c>)
 8001b44:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b48:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d002      	beq.n	8001b56 <setMotorIzquierdo+0x1e>
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d00d      	beq.n	8001b70 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001b54:	e019      	b.n	8001b8a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5c:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <setMotorIzquierdo+0x60>)
 8001b5e:	f002 f85f 	bl	8003c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b68:	480b      	ldr	r0, [pc, #44]	@ (8001b98 <setMotorIzquierdo+0x60>)
 8001b6a:	f002 f859 	bl	8003c20 <HAL_GPIO_WritePin>
		break;
 8001b6e:	e00c      	b.n	8001b8a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <setMotorIzquierdo+0x60>)
 8001b78:	f002 f852 	bl	8003c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <setMotorIzquierdo+0x60>)
 8001b84:	f002 f84c 	bl	8003c20 <HAL_GPIO_WritePin>
		break;
 8001b88:	bf00      	nop
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40020400 	.word	0x40020400

08001b9c <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <setMotorDerecho+0x5c>)
 8001ba8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d002      	beq.n	8001bba <setMotorDerecho+0x1e>
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d00d      	beq.n	8001bd4 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001bb8:	e019      	b.n	8001bee <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bc0:	480e      	ldr	r0, [pc, #56]	@ (8001bfc <setMotorDerecho+0x60>)
 8001bc2:	f002 f82d 	bl	8003c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bcc:	480b      	ldr	r0, [pc, #44]	@ (8001bfc <setMotorDerecho+0x60>)
 8001bce:	f002 f827 	bl	8003c20 <HAL_GPIO_WritePin>
		break;
 8001bd2:	e00c      	b.n	8001bee <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bda:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <setMotorDerecho+0x60>)
 8001bdc:	f002 f820 	bl	8003c20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be6:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <setMotorDerecho+0x60>)
 8001be8:	f002 f81a 	bl	8003c20 <HAL_GPIO_WritePin>
		break;
 8001bec:	bf00      	nop
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40020400 	.word	0x40020400

08001c00 <verificar_sensor>:

bool verificar_sensor(void) {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 8001c06:	2300      	movs	r3, #0
 8001c08:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001c0a:	2180      	movs	r1, #128	@ 0x80
 8001c0c:	4812      	ldr	r0, [pc, #72]	@ (8001c58 <verificar_sensor+0x58>)
 8001c0e:	f001 ffef 	bl	8003bf0 <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <verificar_sensor+0x5c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	79ba      	ldrb	r2, [r7, #6]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d015      	beq.n	8001c4c <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001c20:	2014      	movs	r0, #20
 8001c22:	f000 fda1 	bl	8002768 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001c26:	2180      	movs	r1, #128	@ 0x80
 8001c28:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <verificar_sensor+0x58>)
 8001c2a:	f001 ffe1 	bl	8003bf0 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 8001c32:	797a      	ldrb	r2, [r7, #5]
 8001c34:	79bb      	ldrb	r3, [r7, #6]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d102      	bne.n	8001c40 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 8001c3a:	4a08      	ldr	r2, [pc, #32]	@ (8001c5c <verificar_sensor+0x5c>)
 8001c3c:	797b      	ldrb	r3, [r7, #5]
 8001c3e:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <verificar_sensor+0x5c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <verificar_sensor+0x4c>
			pedido = true;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	20000006 	.word	0x20000006

08001c60 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001c70:	78bb      	ldrb	r3, [r7, #2]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d83a      	bhi.n	8001cec <act_pared+0x8c>
 8001c76:	a201      	add	r2, pc, #4	@ (adr r2, 8001c7c <act_pared+0x1c>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c8d 	.word	0x08001c8d
 8001c80:	08001ca5 	.word	0x08001ca5
 8001c84:	08001cbd 	.word	0x08001cbd
 8001c88:	08001cd5 	.word	0x08001cd5
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	440b      	add	r3, r1
 8001c9a:	f042 0208 	orr.w	r2, r2, #8
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
		break;
 8001ca2:	e025      	b.n	8001cf0 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f042 0204 	orr.w	r2, r2, #4
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
		break;
 8001cba:	e019      	b.n	8001cf0 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781a      	ldrb	r2, [r3, #0]
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	440b      	add	r3, r1
 8001cca:	f042 0202 	orr.w	r2, r2, #2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
		break;
 8001cd2:	e00d      	b.n	8001cf0 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781a      	ldrb	r2, [r3, #0]
 8001cdc:	78fb      	ldrb	r3, [r7, #3]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	f042 0201 	orr.w	r2, r2, #1
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	701a      	strb	r2, [r3, #0]
		break;
 8001cea:	e001      	b.n	8001cf0 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001cec:	2300      	movs	r3, #0
 8001cee:	e003      	b.n	8001cf8 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	e08b      	b.n	8001e2c <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	e081      	b.n	8001e1e <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001d1a:	2364      	movs	r3, #100	@ 0x64
 8001d1c:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b0b      	cmp	r3, #11
 8001d22:	dc15      	bgt.n	8001d50 <act_pesos+0x4c>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3304      	adds	r3, #4
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	7dfa      	ldrb	r2, [r7, #23]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d905      	bls.n	8001d50 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3304      	adds	r3, #4
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d01e      	beq.n	8001d94 <act_pesos+0x90>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b07      	cmp	r3, #7
 8001d5a:	d01b      	beq.n	8001d94 <act_pesos+0x90>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b0b      	cmp	r3, #11
 8001d60:	d018      	beq.n	8001d94 <act_pesos+0x90>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d015      	beq.n	8001d94 <act_pesos+0x90>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	7dfa      	ldrb	r2, [r7, #23]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d905      	bls.n	8001d94 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	dd15      	ble.n	8001dc6 <act_pesos+0xc2>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	4413      	add	r3, r2
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b04      	subs	r3, #4
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	7dfa      	ldrb	r2, [r7, #23]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d905      	bls.n	8001dc6 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3b04      	subs	r3, #4
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <act_pesos+0x106>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d016      	beq.n	8001e0a <act_pesos+0x106>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d013      	beq.n	8001e0a <act_pesos+0x106>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d010      	beq.n	8001e0a <act_pesos+0x106>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d00d      	beq.n	8001e0a <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	7dfa      	ldrb	r2, [r7, #23]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d905      	bls.n	8001e0a <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	7dfa      	ldrb	r2, [r7, #23]
 8001e12:	3201      	adds	r2, #1
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b0e      	cmp	r3, #14
 8001e22:	f77f af7a 	ble.w	8001d1a <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b0e      	cmp	r3, #14
 8001e30:	f77f af70 	ble.w	8001d14 <act_pesos+0x10>
		}
	}
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	460b      	mov	r3, r1
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	75fb      	strb	r3, [r7, #23]
	switch (orientacion_actual) {
 8001e5e:	79bb      	ldrb	r3, [r7, #6]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	f200 8241 	bhi.w	80022e8 <calculo_minimo_peso+0x4a4>
 8001e66:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <calculo_minimo_peso+0x28>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001e7d 	.word	0x08001e7d
 8001e70:	080021cf 	.word	0x080021cf
 8001e74:	08001f97 	.word	0x08001f97
 8001e78:	080020b5 	.word	0x080020b5
	case norte:
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	7dfa      	ldrb	r2, [r7, #23]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d915      	bls.n	8001eb8 <calculo_minimo_peso+0x74>
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10d      	bne.n	8001eb8 <calculo_minimo_peso+0x74>
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	2b0b      	cmp	r3, #11
 8001ea0:	d80a      	bhi.n	8001eb8 <calculo_minimo_peso+0x74>
			minimo_peso = peso[ubicacion + 4];
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b7e      	ldr	r3, [pc, #504]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001eb6:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	7dfa      	ldrb	r2, [r7, #23]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d91e      	bls.n	8001f06 <calculo_minimo_peso+0xc2>
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d116      	bne.n	8001f06 <calculo_minimo_peso+0xc2>
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d013      	beq.n	8001f06 <calculo_minimo_peso+0xc2>
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b07      	cmp	r3, #7
 8001ee2:	d010      	beq.n	8001f06 <calculo_minimo_peso+0xc2>
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b0b      	cmp	r3, #11
 8001ee8:	d00d      	beq.n	8001f06 <calculo_minimo_peso+0xc2>
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d00a      	beq.n	8001f06 <calculo_minimo_peso+0xc2>
			minimo_peso = peso[ubicacion + 1];
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4b6b      	ldr	r3, [pc, #428]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001f04:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	7dfa      	ldrb	r2, [r7, #23]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d91e      	bls.n	8001f54 <calculo_minimo_peso+0x110>
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d116      	bne.n	8001f54 <calculo_minimo_peso+0x110>
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d013      	beq.n	8001f54 <calculo_minimo_peso+0x110>
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	2b07      	cmp	r3, #7
 8001f30:	d010      	beq.n	8001f54 <calculo_minimo_peso+0x110>
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b0b      	cmp	r3, #11
 8001f36:	d00d      	beq.n	8001f54 <calculo_minimo_peso+0x110>
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d00a      	beq.n	8001f54 <calculo_minimo_peso+0x110>
			minimo_peso = peso[ubicacion - 1];
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b57      	ldr	r3, [pc, #348]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001f52:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	3b04      	subs	r3, #4
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	7dfa      	ldrb	r2, [r7, #23]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d915      	bls.n	8001f90 <calculo_minimo_peso+0x14c>
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10d      	bne.n	8001f90 <calculo_minimo_peso+0x14c>
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d90a      	bls.n	8001f90 <calculo_minimo_peso+0x14c>
			minimo_peso = peso[ubicacion - 4];
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	3b04      	subs	r3, #4
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	3b04      	subs	r3, #4
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001f8e:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8001f90:	4b47      	ldr	r3, [pc, #284]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	e1a9      	b.n	80022ea <calculo_minimo_peso+0x4a6>
		break;
	case sur:
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	3b04      	subs	r3, #4
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	7dfa      	ldrb	r2, [r7, #23]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d915      	bls.n	8001fd2 <calculo_minimo_peso+0x18e>
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	4413      	add	r3, r2
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <calculo_minimo_peso+0x18e>
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d90a      	bls.n	8001fd2 <calculo_minimo_peso+0x18e>
			minimo_peso = peso[ubicacion - 4];
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 8001fd0:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	7dfa      	ldrb	r2, [r7, #23]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d91e      	bls.n	8002020 <calculo_minimo_peso+0x1dc>
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <calculo_minimo_peso+0x1dc>
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d013      	beq.n	8002020 <calculo_minimo_peso+0x1dc>
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	2b07      	cmp	r3, #7
 8001ffc:	d010      	beq.n	8002020 <calculo_minimo_peso+0x1dc>
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b0b      	cmp	r3, #11
 8002002:	d00d      	beq.n	8002020 <calculo_minimo_peso+0x1dc>
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d00a      	beq.n	8002020 <calculo_minimo_peso+0x1dc>
			minimo_peso = peso[ubicacion + 1];
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	3301      	adds	r3, #1
 800200e:	68fa      	ldr	r2, [r7, #12]
 8002010:	4413      	add	r3, r2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 800201e:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3b01      	subs	r3, #1
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	7dfa      	ldrb	r2, [r7, #23]
 800202c:	429a      	cmp	r2, r3
 800202e:	d91e      	bls.n	800206e <calculo_minimo_peso+0x22a>
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d116      	bne.n	800206e <calculo_minimo_peso+0x22a>
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d013      	beq.n	800206e <calculo_minimo_peso+0x22a>
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b07      	cmp	r3, #7
 800204a:	d010      	beq.n	800206e <calculo_minimo_peso+0x22a>
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	2b0b      	cmp	r3, #11
 8002050:	d00d      	beq.n	800206e <calculo_minimo_peso+0x22a>
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b0f      	cmp	r3, #15
 8002056:	d00a      	beq.n	800206e <calculo_minimo_peso+0x22a>
			minimo_peso = peso[ubicacion - 1];
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	3b01      	subs	r3, #1
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	3b01      	subs	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 800206c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	3304      	adds	r3, #4
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	7dfa      	ldrb	r2, [r7, #23]
 800207a:	429a      	cmp	r2, r3
 800207c:	d915      	bls.n	80020aa <calculo_minimo_peso+0x266>
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	4413      	add	r3, r2
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <calculo_minimo_peso+0x266>
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b0b      	cmp	r3, #11
 8002092:	d80a      	bhi.n	80020aa <calculo_minimo_peso+0x266>
			minimo_peso = peso[ubicacion + 4];
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	3304      	adds	r3, #4
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	3304      	adds	r3, #4
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b02      	ldr	r3, [pc, #8]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 80020a8:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80020aa:	4b01      	ldr	r3, [pc, #4]	@ (80020b0 <calculo_minimo_peso+0x26c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	e11c      	b.n	80022ea <calculo_minimo_peso+0x4a6>
 80020b0:	20000000 	.word	0x20000000
		break;
	case oeste:
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	3301      	adds	r3, #1
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4413      	add	r3, r2
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	7dfa      	ldrb	r2, [r7, #23]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d95a      	bls.n	800217a <calculo_minimo_peso+0x336>
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d152      	bne.n	800217a <calculo_minimo_peso+0x336>
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d04f      	beq.n	800217a <calculo_minimo_peso+0x336>
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b07      	cmp	r3, #7
 80020de:	d04c      	beq.n	800217a <calculo_minimo_peso+0x336>
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b0b      	cmp	r3, #11
 80020e4:	d049      	beq.n	800217a <calculo_minimo_peso+0x336>
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d046      	beq.n	800217a <calculo_minimo_peso+0x336>
			minimo_peso = peso[ubicacion + 1];
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	3301      	adds	r3, #1
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4413      	add	r3, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b7e      	ldr	r3, [pc, #504]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 8002100:	701a      	strb	r2, [r3, #0]

			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	3304      	adds	r3, #4
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4413      	add	r3, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	7dfa      	ldrb	r2, [r7, #23]
 800210e:	429a      	cmp	r2, r3
 8002110:	d915      	bls.n	800213e <calculo_minimo_peso+0x2fa>
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10d      	bne.n	800213e <calculo_minimo_peso+0x2fa>
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b0b      	cmp	r3, #11
 8002126:	d80a      	bhi.n	800213e <calculo_minimo_peso+0x2fa>
				minimo_peso = peso[ubicacion + 4];
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	3304      	adds	r3, #4
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	3304      	adds	r3, #4
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b6f      	ldr	r3, [pc, #444]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 800213c:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	3b04      	subs	r3, #4
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	7dfa      	ldrb	r2, [r7, #23]
 800214a:	429a      	cmp	r2, r3
 800214c:	d915      	bls.n	800217a <calculo_minimo_peso+0x336>
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <calculo_minimo_peso+0x336>
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d90a      	bls.n	800217a <calculo_minimo_peso+0x336>
				minimo_peso = peso[ubicacion - 4];
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3b04      	subs	r3, #4
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	3b04      	subs	r3, #4
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b60      	ldr	r3, [pc, #384]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 8002178:	701a      	strb	r2, [r3, #0]
			}

		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	3b01      	subs	r3, #1
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	7dfa      	ldrb	r2, [r7, #23]
 8002186:	429a      	cmp	r2, r3
 8002188:	d91e      	bls.n	80021c8 <calculo_minimo_peso+0x384>
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <calculo_minimo_peso+0x384>
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d013      	beq.n	80021c8 <calculo_minimo_peso+0x384>
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b07      	cmp	r3, #7
 80021a4:	d010      	beq.n	80021c8 <calculo_minimo_peso+0x384>
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b0b      	cmp	r3, #11
 80021aa:	d00d      	beq.n	80021c8 <calculo_minimo_peso+0x384>
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d00a      	beq.n	80021c8 <calculo_minimo_peso+0x384>
			minimo_peso = peso[ubicacion - 1];
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b4c      	ldr	r3, [pc, #304]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 80021c6:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80021c8:	4b4b      	ldr	r3, [pc, #300]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	e08d      	b.n	80022ea <calculo_minimo_peso+0x4a6>
		break;
	case este:
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	7dfa      	ldrb	r2, [r7, #23]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d91e      	bls.n	800221c <calculo_minimo_peso+0x3d8>
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d116      	bne.n	800221c <calculo_minimo_peso+0x3d8>
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d013      	beq.n	800221c <calculo_minimo_peso+0x3d8>
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b07      	cmp	r3, #7
 80021f8:	d010      	beq.n	800221c <calculo_minimo_peso+0x3d8>
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b0b      	cmp	r3, #11
 80021fe:	d00d      	beq.n	800221c <calculo_minimo_peso+0x3d8>
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	d00a      	beq.n	800221c <calculo_minimo_peso+0x3d8>
			minimo_peso = peso[ubicacion - 1];
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	3b01      	subs	r3, #1
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4413      	add	r3, r2
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	3b01      	subs	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 800221a:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	3304      	adds	r3, #4
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	7dfa      	ldrb	r2, [r7, #23]
 8002228:	429a      	cmp	r2, r3
 800222a:	d915      	bls.n	8002258 <calculo_minimo_peso+0x414>
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10d      	bne.n	8002258 <calculo_minimo_peso+0x414>
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b0b      	cmp	r3, #11
 8002240:	d80a      	bhi.n	8002258 <calculo_minimo_peso+0x414>
			minimo_peso = peso[ubicacion + 4];
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	3304      	adds	r3, #4
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4413      	add	r3, r2
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	3304      	adds	r3, #4
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b28      	ldr	r3, [pc, #160]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 8002256:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	3b04      	subs	r3, #4
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	7dfa      	ldrb	r2, [r7, #23]
 8002264:	429a      	cmp	r2, r3
 8002266:	d915      	bls.n	8002294 <calculo_minimo_peso+0x450>
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <calculo_minimo_peso+0x450>
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d90a      	bls.n	8002294 <calculo_minimo_peso+0x450>
			minimo_peso = peso[ubicacion - 4];
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	3b04      	subs	r3, #4
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	3b04      	subs	r3, #4
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 8002292:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	3301      	adds	r3, #1
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	7dfa      	ldrb	r2, [r7, #23]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d91e      	bls.n	80022e2 <calculo_minimo_peso+0x49e>
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4413      	add	r3, r2
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d116      	bne.n	80022e2 <calculo_minimo_peso+0x49e>
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d013      	beq.n	80022e2 <calculo_minimo_peso+0x49e>
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d010      	beq.n	80022e2 <calculo_minimo_peso+0x49e>
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b0b      	cmp	r3, #11
 80022c4:	d00d      	beq.n	80022e2 <calculo_minimo_peso+0x49e>
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d00a      	beq.n	80022e2 <calculo_minimo_peso+0x49e>
			minimo_peso = peso[ubicacion + 1];
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	3301      	adds	r3, #1
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	3301      	adds	r3, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 80022e0:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80022e2:	4b05      	ldr	r3, [pc, #20]	@ (80022f8 <calculo_minimo_peso+0x4b4>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	e000      	b.n	80022ea <calculo_minimo_peso+0x4a6>
		break;
	default:
		return 100;
 80022e8:	2364      	movs	r3, #100	@ 0x64
	}
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <filtrado_pared>:
void filtrado_pared(void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 8002302:	f000 fa25 	bl	8002750 <HAL_GetTick>
 8002306:	6078      	str	r0, [r7, #4]
	if (200 <= (tiempo_actual - tiempo_inicio)) {
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <filtrado_pared+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2bc7      	cmp	r3, #199	@ 0xc7
 8002312:	d90e      	bls.n	8002332 <filtrado_pared+0x36>
		GPIO_PinState estado_sensor = HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin);
 8002314:	2140      	movs	r1, #64	@ 0x40
 8002316:	480a      	ldr	r0, [pc, #40]	@ (8002340 <filtrado_pared+0x44>)
 8002318:	f001 fc6a 	bl	8003bf0 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	70fb      	strb	r3, [r7, #3]
		if (GPIO_PIN_RESET == estado_sensor) {
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <filtrado_pared+0x30>
			solicitud_actualizar = 1;
 8002326:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <filtrado_pared+0x48>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
		}
		filtrado = 0;
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <filtrado_pared+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
	}
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000150 	.word	0x20000150
 8002340:	40020800 	.word	0x40020800
 8002344:	20000154 	.word	0x20000154
 8002348:	20000155 	.word	0x20000155

0800234c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == sensor_frontal_Pin) && (filtrado == 0)) {
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b40      	cmp	r3, #64	@ 0x40
 800235a:	d10c      	bne.n	8002376 <HAL_GPIO_EXTI_Callback+0x2a>
 800235c:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x34>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d107      	bne.n	8002376 <HAL_GPIO_EXTI_Callback+0x2a>
		tiempo_inicio = HAL_GetTick();
 8002366:	f000 f9f3 	bl	8002750 <HAL_GetTick>
 800236a:	4603      	mov	r3, r0
 800236c:	4a05      	ldr	r2, [pc, #20]	@ (8002384 <HAL_GPIO_EXTI_Callback+0x38>)
 800236e:	6013      	str	r3, [r2, #0]
		filtrado = 1;
 8002370:	4b03      	ldr	r3, [pc, #12]	@ (8002380 <HAL_GPIO_EXTI_Callback+0x34>)
 8002372:	2201      	movs	r2, #1
 8002374:	701a      	strb	r2, [r3, #0]
	}
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000155 	.word	0x20000155
 8002384:	20000150 	.word	0x20000150

08002388 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
}
 800238e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <Error_Handler+0x8>

08002394 <HAL_MspInit>:
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a0f      	ldr	r2, [pc, #60]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a08      	ldr	r2, [pc, #32]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_MspInit+0x4c>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2007      	movs	r0, #7
 80023d4:	f000 febe 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40023800 	.word	0x40023800

080023e4 <HAL_ADC_MspInit>:
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	@ 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2f      	ldr	r2, [pc, #188]	@ (80024c0 <HAL_ADC_MspInit+0xdc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d158      	bne.n	80024b8 <HAL_ADC_MspInit+0xd4>
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	4b2e      	ldr	r3, [pc, #184]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	4a2d      	ldr	r2, [pc, #180]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6453      	str	r3, [r2, #68]	@ 0x44
 8002416:	4b2b      	ldr	r3, [pc, #172]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a26      	ldr	r2, [pc, #152]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <HAL_ADC_MspInit+0xe0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2303      	movs	r3, #3
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	2303      	movs	r3, #3
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	481d      	ldr	r0, [pc, #116]	@ (80024c8 <HAL_ADC_MspInit+0xe4>)
 8002452:	f001 fa31 	bl	80038b8 <HAL_GPIO_Init>
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002458:	4a1d      	ldr	r2, [pc, #116]	@ (80024d0 <HAL_ADC_MspInit+0xec>)
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b1b      	ldr	r3, [pc, #108]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002474:	611a      	str	r2, [r3, #16]
 8002476:	4b15      	ldr	r3, [pc, #84]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800247c:	615a      	str	r2, [r3, #20]
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002480:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800248c:	61da      	str	r2, [r3, #28]
 800248e:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002490:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002494:	621a      	str	r2, [r3, #32]
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 8002498:	2200      	movs	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
 800249c:	480b      	ldr	r0, [pc, #44]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 800249e:	f000 fe9b 	bl	80031d8 <HAL_DMA_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ADC_MspInit+0xc8>
 80024a8:	f7ff ff6e 	bl	8002388 <Error_Handler>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a07      	ldr	r2, [pc, #28]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80024b2:	4a06      	ldr	r2, [pc, #24]	@ (80024cc <HAL_ADC_MspInit+0xe8>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6393      	str	r3, [r2, #56]	@ 0x38
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40012000 	.word	0x40012000
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40020400 	.word	0x40020400
 80024cc:	20000078 	.word	0x20000078
 80024d0:	40026410 	.word	0x40026410

080024d4 <HAL_TIM_Base_MspInit>:
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002510 <HAL_TIM_Base_MspInit+0x3c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d10d      	bne.n	8002502 <HAL_TIM_Base_MspInit+0x2e>
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002514 <HAL_TIM_Base_MspInit+0x40>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <HAL_TIM_Base_MspInit+0x40>)
 80024f0:	f043 0302 	orr.w	r3, r3, #2
 80024f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f6:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <HAL_TIM_Base_MspInit+0x40>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40000400 	.word	0x40000400
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_TIM_MspPostInit>:
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <HAL_TIM_MspPostInit+0x68>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d11e      	bne.n	8002578 <HAL_TIM_MspPostInit+0x60>
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <HAL_TIM_MspPostInit+0x6c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	@ (8002584 <HAL_TIM_MspPostInit+0x6c>)
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <HAL_TIM_MspPostInit+0x6c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0304 	and.w	r3, r3, #4
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	2302      	movs	r3, #2
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	2302      	movs	r3, #2
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	@ (8002588 <HAL_TIM_MspPostInit+0x70>)
 8002574:	f001 f9a0 	bl	80038b8 <HAL_GPIO_Init>
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40000400 	.word	0x40000400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020800 	.word	0x40020800

0800258c <NMI_Handler>:
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
 8002590:	bf00      	nop
 8002592:	e7fd      	b.n	8002590 <NMI_Handler+0x4>

08002594 <HardFault_Handler>:
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
 8002598:	bf00      	nop
 800259a:	e7fd      	b.n	8002598 <HardFault_Handler+0x4>

0800259c <MemManage_Handler>:
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <MemManage_Handler+0x4>

080025a4 <BusFault_Handler>:
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	bf00      	nop
 80025aa:	e7fd      	b.n	80025a8 <BusFault_Handler+0x4>

080025ac <UsageFault_Handler>:
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <UsageFault_Handler+0x4>

080025b4 <SVC_Handler>:
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <DebugMon_Handler>:
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <PendSV_Handler>:
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <SysTick_Handler>:
 80025de:	b580      	push	{r7, lr}
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	f000 f8a1 	bl	8002728 <HAL_IncTick>
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}

080025ea <EXTI9_5_IRQHandler>:
 80025ea:	b580      	push	{r7, lr}
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	2040      	movs	r0, #64	@ 0x40
 80025f0:	f001 fb30 	bl	8003c54 <HAL_GPIO_EXTI_IRQHandler>
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <DMA2_Stream0_IRQHandler>:
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4802      	ldr	r0, [pc, #8]	@ (8002608 <DMA2_Stream0_IRQHandler+0x10>)
 80025fe:	f000 fef1 	bl	80033e4 <HAL_DMA_IRQHandler>
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000078 	.word	0x20000078

0800260c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <SystemInit+0x20>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	4a05      	ldr	r2, [pc, #20]	@ (800262c <SystemInit+0x20>)
 8002618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800261c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <Reset_Handler>:
 8002630:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002668 <LoopFillZerobss+0xe>
 8002634:	f7ff ffea 	bl	800260c <SystemInit>
 8002638:	480c      	ldr	r0, [pc, #48]	@ (800266c <LoopFillZerobss+0x12>)
 800263a:	490d      	ldr	r1, [pc, #52]	@ (8002670 <LoopFillZerobss+0x16>)
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <LoopFillZerobss+0x1a>)
 800263e:	2300      	movs	r3, #0
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:
 8002642:	58d4      	ldr	r4, [r2, r3]
 8002644:	50c4      	str	r4, [r0, r3]
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:
 8002648:	18c4      	adds	r4, r0, r3
 800264a:	428c      	cmp	r4, r1
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <LoopFillZerobss+0x1e>)
 8002650:	4c0a      	ldr	r4, [pc, #40]	@ (800267c <LoopFillZerobss+0x22>)
 8002652:	2300      	movs	r3, #0
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:
 800265a:	42a2      	cmp	r2, r4
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>
 800265e:	f002 fe09 	bl	8005274 <__libc_init_array>
 8002662:	f7fe fa4d 	bl	8000b00 <main>
 8002666:	4770      	bx	lr
 8002668:	20020000 	.word	0x20020000
 800266c:	20000000 	.word	0x20000000
 8002670:	20000014 	.word	0x20000014
 8002674:	080052fc 	.word	0x080052fc
 8002678:	20000014 	.word	0x20000014
 800267c:	200001e0 	.word	0x200001e0

08002680 <ADC_IRQHandler>:
 8002680:	e7fe      	b.n	8002680 <ADC_IRQHandler>
	...

08002684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002688:	4b0e      	ldr	r3, [pc, #56]	@ (80026c4 <HAL_Init+0x40>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <HAL_Init+0x40>)
 800268e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002694:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_Init+0x40>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_Init+0x40>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800269e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a0:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_Init+0x40>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a07      	ldr	r2, [pc, #28]	@ (80026c4 <HAL_Init+0x40>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 fd51 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f000 f808 	bl	80026c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b8:	f7ff fe6c 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00

080026c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_InitTick+0x54>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_InitTick+0x58>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026de:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fd69 	bl	80031be <HAL_SYSTICK_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00e      	b.n	8002714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b0f      	cmp	r3, #15
 80026fa:	d80a      	bhi.n	8002712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026fc:	2200      	movs	r2, #0
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f000 fd31 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002708:	4a06      	ldr	r2, [pc, #24]	@ (8002724 <HAL_InitTick+0x5c>)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000008 	.word	0x20000008
 8002720:	20000010 	.word	0x20000010
 8002724:	2000000c 	.word	0x2000000c

08002728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800272c:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_IncTick+0x20>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_IncTick+0x24>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	@ (800274c <HAL_IncTick+0x24>)
 800273a:	6013      	str	r3, [r2, #0]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	20000010 	.word	0x20000010
 800274c:	200001dc 	.word	0x200001dc

08002750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return uwTick;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <HAL_GetTick+0x14>)
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	200001dc 	.word	0x200001dc

08002768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7ff ffee 	bl	8002750 <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002780:	d005      	beq.n	800278e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002782:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <HAL_Delay+0x44>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278e:	bf00      	nop
 8002790:	f7ff ffde 	bl	8002750 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d8f7      	bhi.n	8002790 <HAL_Delay+0x28>
  {
  }
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000010 	.word	0x20000010

080027b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e033      	b.n	800282e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fe08 	bl	80023e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027f6:	f023 0302 	bic.w	r3, r3, #2
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa58 	bl	8002cb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0201 	orr.w	r2, r3, #1
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	641a      	str	r2, [r3, #64]	@ 0x40
 800281e:	e001      	b.n	8002824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800282c:	7bfb      	ldrb	r3, [r7, #15]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_ADC_Start_DMA+0x22>
 8002856:	2302      	movs	r3, #2
 8002858:	e0eb      	b.n	8002a32 <HAL_ADC_Start_DMA+0x1fa>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d018      	beq.n	80028a2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002880:	4b6e      	ldr	r3, [pc, #440]	@ (8002a3c <HAL_ADC_Start_DMA+0x204>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	@ (8002a40 <HAL_ADC_Start_DMA+0x208>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	0c9a      	lsrs	r2, r3, #18
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002894:	e002      	b.n	800289c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f9      	bne.n	8002896 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b0:	d107      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f040 80a3 	bne.w	8002a18 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80028fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002910:	d106      	bne.n	8002920 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	f023 0206 	bic.w	r2, r3, #6
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	645a      	str	r2, [r3, #68]	@ 0x44
 800291e:	e002      	b.n	8002926 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800292e:	4b45      	ldr	r3, [pc, #276]	@ (8002a44 <HAL_ADC_Start_DMA+0x20c>)
 8002930:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002936:	4a44      	ldr	r2, [pc, #272]	@ (8002a48 <HAL_ADC_Start_DMA+0x210>)
 8002938:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	4a43      	ldr	r2, [pc, #268]	@ (8002a4c <HAL_ADC_Start_DMA+0x214>)
 8002940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	4a42      	ldr	r2, [pc, #264]	@ (8002a50 <HAL_ADC_Start_DMA+0x218>)
 8002948:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002952:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002962:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002972:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	334c      	adds	r3, #76	@ 0x4c
 800297e:	4619      	mov	r1, r3
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f000 fcd6 	bl	8003334 <HAL_DMA_Start_IT>
 8002988:	4603      	mov	r3, r0
 800298a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 031f 	and.w	r3, r3, #31
 8002994:	2b00      	cmp	r3, #0
 8002996:	d12a      	bne.n	80029ee <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a2d      	ldr	r2, [pc, #180]	@ (8002a54 <HAL_ADC_Start_DMA+0x21c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d015      	beq.n	80029ce <HAL_ADC_Start_DMA+0x196>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2c      	ldr	r2, [pc, #176]	@ (8002a58 <HAL_ADC_Start_DMA+0x220>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_Start_DMA+0x180>
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_ADC_Start_DMA+0x20c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <HAL_ADC_Start_DMA+0x224>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d136      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_ADC_Start_DMA+0x20c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d130      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d129      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e020      	b.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a18      	ldr	r2, [pc, #96]	@ (8002a54 <HAL_ADC_Start_DMA+0x21c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d11b      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d114      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a14:	609a      	str	r2, [r3, #8]
 8002a16:	e00b      	b.n	8002a30 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	f043 0210 	orr.w	r2, r3, #16
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002a30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000008 	.word	0x20000008
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	40012300 	.word	0x40012300
 8002a48:	08002eb1 	.word	0x08002eb1
 8002a4c:	08002f6b 	.word	0x08002f6b
 8002a50:	08002f87 	.word	0x08002f87
 8002a54:	40012000 	.word	0x40012000
 8002a58:	40012100 	.word	0x40012100
 8002a5c:	40012200 	.word	0x40012200

08002a60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1c>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e105      	b.n	8002c9c <HAL_ADC_ConfigChannel+0x228>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d925      	bls.n	8002aec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68d9      	ldr	r1, [r3, #12]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b1e      	subs	r3, #30
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43da      	mvns	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68d9      	ldr	r1, [r3, #12]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	4603      	mov	r3, r0
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4403      	add	r3, r0
 8002ade:	3b1e      	subs	r3, #30
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e022      	b.n	8002b32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6919      	ldr	r1, [r3, #16]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	2207      	movs	r2, #7
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6919      	ldr	r1, [r3, #16]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4618      	mov	r0, r3
 8002b22:	4603      	mov	r3, r0
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4403      	add	r3, r0
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d824      	bhi.n	8002b84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b05      	subs	r3, #5
 8002b4c:	221f      	movs	r2, #31
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	400a      	ands	r2, r1
 8002b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	4618      	mov	r0, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	3b05      	subs	r3, #5
 8002b76:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b82:	e04c      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d824      	bhi.n	8002bd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b23      	subs	r3, #35	@ 0x23
 8002b9e:	221f      	movs	r2, #31
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	400a      	ands	r2, r1
 8002bac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b23      	subs	r3, #35	@ 0x23
 8002bc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bd4:	e023      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	3b41      	subs	r3, #65	@ 0x41
 8002be8:	221f      	movs	r2, #31
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	4618      	mov	r0, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	3b41      	subs	r3, #65	@ 0x41
 8002c12:	fa00 f203 	lsl.w	r2, r0, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ca8 <HAL_ADC_ConfigChannel+0x234>)
 8002c20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a21      	ldr	r2, [pc, #132]	@ (8002cac <HAL_ADC_ConfigChannel+0x238>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d109      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1cc>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b12      	cmp	r3, #18
 8002c32:	d105      	bne.n	8002c40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a19      	ldr	r2, [pc, #100]	@ (8002cac <HAL_ADC_ConfigChannel+0x238>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d123      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x21e>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d003      	beq.n	8002c5a <HAL_ADC_ConfigChannel+0x1e6>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b11      	cmp	r3, #17
 8002c58:	d11b      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d111      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <HAL_ADC_ConfigChannel+0x23c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a10      	ldr	r2, [pc, #64]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x240>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	0c9a      	lsrs	r2, r3, #18
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c84:	e002      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f9      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40012300 	.word	0x40012300
 8002cac:	40012000 	.word	0x40012000
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	431bde83 	.word	0x431bde83

08002cb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cc0:	4b79      	ldr	r3, [pc, #484]	@ (8002ea8 <ADC_Init+0x1f0>)
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6859      	ldr	r1, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6859      	ldr	r1, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6899      	ldr	r1, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	4a58      	ldr	r2, [pc, #352]	@ (8002eac <ADC_Init+0x1f4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d022      	beq.n	8002d96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e00f      	b.n	8002db6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002da4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0202 	bic.w	r2, r2, #2
 8002dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6899      	ldr	r1, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7e1b      	ldrb	r3, [r3, #24]
 8002dd0:	005a      	lsls	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01b      	beq.n	8002e1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002df2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	035a      	lsls	r2, r3, #13
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e007      	b.n	8002e2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	051a      	lsls	r2, r3, #20
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6899      	ldr	r1, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e6e:	025a      	lsls	r2, r3, #9
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	029a      	lsls	r2, r3, #10
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40012300 	.word	0x40012300
 8002eac:	0f000001 	.word	0x0f000001

08002eb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d13c      	bne.n	8002f44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d12b      	bne.n	8002f3c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d127      	bne.n	8002f3c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d006      	beq.n	8002f08 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d119      	bne.n	8002f3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0220 	bic.w	r2, r2, #32
 8002f16:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7fe fc79 	bl	8001834 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f42:	e00e      	b.n	8002f62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fd85 	bl	8002a60 <HAL_ADC_ErrorCallback>
}
 8002f56:	e004      	b.n	8002f62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
}
 8002f62:	bf00      	nop
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7fe fc4d 	bl	8001818 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f7e:	bf00      	nop
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2240      	movs	r2, #64	@ 0x40
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fd5a 	bl	8002a60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fac:	bf00      	nop
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00

08002ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <__NVIC_GetPriorityGrouping+0x18>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	0a1b      	lsrs	r3, r3, #8
 8003006:	f003 0307 	and.w	r3, r3, #7
}
 800300a:	4618      	mov	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003026:	2b00      	cmp	r3, #0
 8003028:	db0b      	blt.n	8003042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4907      	ldr	r1, [pc, #28]	@ (8003050 <__NVIC_EnableIRQ+0x38>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2001      	movs	r0, #1
 800303a:	fa00 f202 	lsl.w	r2, r0, r2
 800303e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e100 	.word	0xe000e100

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	@ (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	79fb      	ldrb	r3, [r7, #7]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	@ 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	@ 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff29 	bl	8002fb4 <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317c:	f7ff ff3e 	bl	8002ffc <__NVIC_GetPriorityGrouping>
 8003180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68b9      	ldr	r1, [r7, #8]
 8003186:	6978      	ldr	r0, [r7, #20]
 8003188:	f7ff ff8e 	bl	80030a8 <NVIC_EncodePriority>
 800318c:	4602      	mov	r2, r0
 800318e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff ff5d 	bl	8003054 <__NVIC_SetPriority>
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	4603      	mov	r3, r0
 80031aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff ff31 	bl	8003018 <__NVIC_EnableIRQ>
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff ffa2 	bl	8003110 <SysTick_Config>
 80031cc:	4603      	mov	r3, r0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff fab4 	bl	8002750 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e099      	b.n	8003328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2202      	movs	r2, #2
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003214:	e00f      	b.n	8003236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003216:	f7ff fa9b 	bl	8002750 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b05      	cmp	r3, #5
 8003222:	d908      	bls.n	8003236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e078      	b.n	8003328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1e8      	bne.n	8003216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4b38      	ldr	r3, [pc, #224]	@ (8003330 <HAL_DMA_Init+0x158>)
 8003250:	4013      	ands	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800326e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800327a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a1b      	ldr	r3, [r3, #32]
 8003280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	2b04      	cmp	r3, #4
 800328e:	d107      	bne.n	80032a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	4313      	orrs	r3, r2
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f023 0307 	bic.w	r3, r3, #7
 80032b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d117      	bne.n	80032fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fa6f 	bl	80037c0 <DMA_CheckFifoParam>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2240      	movs	r2, #64	@ 0x40
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80032f6:	2301      	movs	r3, #1
 80032f8:	e016      	b.n	8003328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fa26 	bl	8003754 <DMA_CalcBaseAndBitshift>
 8003308:	4603      	mov	r3, r0
 800330a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003310:	223f      	movs	r2, #63	@ 0x3f
 8003312:	409a      	lsls	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	f010803f 	.word	0xf010803f

08003334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_DMA_Start_IT+0x26>
 8003356:	2302      	movs	r3, #2
 8003358:	e040      	b.n	80033dc <HAL_DMA_Start_IT+0xa8>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d12f      	bne.n	80033ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 f9b8 	bl	80036f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	223f      	movs	r2, #63	@ 0x3f
 800338e:	409a      	lsls	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0216 	orr.w	r2, r2, #22
 80033a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	e005      	b.n	80033da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
 80033d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033da:	7dfb      	ldrb	r3, [r7, #23]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80033f0:	4b8e      	ldr	r3, [pc, #568]	@ (800362c <HAL_DMA_IRQHandler+0x248>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a8e      	ldr	r2, [pc, #568]	@ (8003630 <HAL_DMA_IRQHandler+0x24c>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	2208      	movs	r2, #8
 8003410:	409a      	lsls	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01a      	beq.n	8003450 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	d013      	beq.n	8003450 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343c:	2208      	movs	r2, #8
 800343e:	409a      	lsls	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003454:	2201      	movs	r2, #1
 8003456:	409a      	lsls	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4013      	ands	r3, r2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003472:	2201      	movs	r2, #1
 8003474:	409a      	lsls	r2, r3
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	2204      	movs	r2, #4
 800348c:	409a      	lsls	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d012      	beq.n	80034bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00b      	beq.n	80034bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a8:	2204      	movs	r2, #4
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b4:	f043 0204 	orr.w	r2, r3, #4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	2210      	movs	r2, #16
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d043      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d03c      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	2210      	movs	r2, #16
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d018      	beq.n	8003526 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
 8003512:	e01f      	b.n	8003554 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01b      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
 8003524:	e016      	b.n	8003554 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0208 	bic.w	r2, r2, #8
 8003542:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003558:	2220      	movs	r2, #32
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 808f 	beq.w	8003684 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8087 	beq.w	8003684 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357a:	2220      	movs	r2, #32
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b05      	cmp	r3, #5
 800358c:	d136      	bne.n	80035fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0216 	bic.w	r2, r2, #22
 800359c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <HAL_DMA_IRQHandler+0x1da>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0208 	bic.w	r2, r2, #8
 80035cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d2:	223f      	movs	r2, #63	@ 0x3f
 80035d4:	409a      	lsls	r2, r3
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d07e      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	4798      	blx	r3
        }
        return;
 80035fa:	e079      	b.n	80036f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	2b00      	cmp	r3, #0
 800361e:	d031      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
 8003628:	e02c      	b.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
 800362a:	bf00      	nop
 800362c:	20000008 	.word	0x20000008
 8003630:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
 8003644:	e01e      	b.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10f      	bne.n	8003674 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0210 	bic.w	r2, r2, #16
 8003662:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003688:	2b00      	cmp	r3, #0
 800368a:	d032      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d022      	beq.n	80036de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2205      	movs	r2, #5
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d307      	bcc.n	80036cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f2      	bne.n	80036b0 <HAL_DMA_IRQHandler+0x2cc>
 80036ca:	e000      	b.n	80036ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80036f0:	bf00      	nop
    }
  }
}
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003714:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b40      	cmp	r3, #64	@ 0x40
 8003724:	d108      	bne.n	8003738 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003736:	e007      	b.n	8003748 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3b10      	subs	r3, #16
 8003764:	4a14      	ldr	r2, [pc, #80]	@ (80037b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800376e:	4a13      	ldr	r2, [pc, #76]	@ (80037bc <DMA_CalcBaseAndBitshift+0x68>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d909      	bls.n	8003796 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	659a      	str	r2, [r3, #88]	@ 0x58
 8003794:	e007      	b.n	80037a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	aaaaaaab 	.word	0xaaaaaaab
 80037bc:	080052e4 	.word	0x080052e4

080037c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11f      	bne.n	800381a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d856      	bhi.n	800388e <DMA_CheckFifoParam+0xce>
 80037e0:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <DMA_CheckFifoParam+0x28>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	0800380b 	.word	0x0800380b
 80037f0:	080037f9 	.word	0x080037f9
 80037f4:	0800388f 	.word	0x0800388f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d046      	beq.n	8003892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003808:	e043      	b.n	8003892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003812:	d140      	bne.n	8003896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003818:	e03d      	b.n	8003896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	d121      	bne.n	8003868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b03      	cmp	r3, #3
 8003828:	d837      	bhi.n	800389a <DMA_CheckFifoParam+0xda>
 800382a:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <DMA_CheckFifoParam+0x70>)
 800382c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003830:	08003841 	.word	0x08003841
 8003834:	08003847 	.word	0x08003847
 8003838:	08003841 	.word	0x08003841
 800383c:	08003859 	.word	0x08003859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e030      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d025      	beq.n	800389e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003856:	e022      	b.n	800389e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003860:	d11f      	bne.n	80038a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003866:	e01c      	b.n	80038a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d903      	bls.n	8003876 <DMA_CheckFifoParam+0xb6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003874:	e018      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      break;
 800387a:	e015      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00e      	beq.n	80038a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e00b      	b.n	80038a6 <DMA_CheckFifoParam+0xe6>
      break;
 800388e:	bf00      	nop
 8003890:	e00a      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003892:	bf00      	nop
 8003894:	e008      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 8003896:	bf00      	nop
 8003898:	e006      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389a:	bf00      	nop
 800389c:	e004      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 800389e:	bf00      	nop
 80038a0:	e002      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80038a2:	bf00      	nop
 80038a4:	e000      	b.n	80038a8 <DMA_CheckFifoParam+0xe8>
      break;
 80038a6:	bf00      	nop
    }
  } 
  
  return status; 
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	@ 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e16b      	b.n	8003bac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	f040 815a 	bne.w	8003ba6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d005      	beq.n	800390a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	2b02      	cmp	r3, #2
 8003908:	d130      	bne.n	800396c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0201 	and.w	r2, r3, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d017      	beq.n	80039a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80b4 	beq.w	8003ba6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b60      	ldr	r3, [pc, #384]	@ (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	4a5f      	ldr	r2, [pc, #380]	@ (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bc4 <HAL_GPIO_Init+0x30c>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bc8 <HAL_GPIO_Init+0x310>)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a52      	ldr	r2, [pc, #328]	@ (8003bcc <HAL_GPIO_Init+0x314>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <HAL_GPIO_Init+0x226>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a51      	ldr	r2, [pc, #324]	@ (8003bd0 <HAL_GPIO_Init+0x318>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d025      	beq.n	8003ada <HAL_GPIO_Init+0x222>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a50      	ldr	r2, [pc, #320]	@ (8003bd4 <HAL_GPIO_Init+0x31c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01f      	beq.n	8003ad6 <HAL_GPIO_Init+0x21e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4f      	ldr	r2, [pc, #316]	@ (8003bd8 <HAL_GPIO_Init+0x320>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d019      	beq.n	8003ad2 <HAL_GPIO_Init+0x21a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4e      	ldr	r2, [pc, #312]	@ (8003bdc <HAL_GPIO_Init+0x324>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_GPIO_Init+0x216>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8003be0 <HAL_GPIO_Init+0x328>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00d      	beq.n	8003aca <HAL_GPIO_Init+0x212>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8003be4 <HAL_GPIO_Init+0x32c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d007      	beq.n	8003ac6 <HAL_GPIO_Init+0x20e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4b      	ldr	r2, [pc, #300]	@ (8003be8 <HAL_GPIO_Init+0x330>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d101      	bne.n	8003ac2 <HAL_GPIO_Init+0x20a>
 8003abe:	2307      	movs	r3, #7
 8003ac0:	e00e      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	e00c      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ac6:	2306      	movs	r3, #6
 8003ac8:	e00a      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003aca:	2305      	movs	r3, #5
 8003acc:	e008      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ace:	2304      	movs	r3, #4
 8003ad0:	e006      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e004      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_GPIO_Init+0x228>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	f002 0203 	and.w	r2, r2, #3
 8003ae6:	0092      	lsls	r2, r2, #2
 8003ae8:	4093      	lsls	r3, r2
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af0:	4935      	ldr	r1, [pc, #212]	@ (8003bc8 <HAL_GPIO_Init+0x310>)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	3302      	adds	r3, #2
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003afe:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	43db      	mvns	r3, r3
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b22:	4a32      	ldr	r2, [pc, #200]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b28:	4b30      	ldr	r3, [pc, #192]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b4c:	4a27      	ldr	r2, [pc, #156]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b52:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b76:	4a1d      	ldr	r2, [pc, #116]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba0:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <HAL_GPIO_Init+0x334>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	f67f ae90 	bls.w	80038d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3724      	adds	r7, #36	@ 0x24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40021400 	.word	0x40021400
 8003be4:	40021800 	.word	0x40021800
 8003be8:	40021c00 	.word	0x40021c00
 8003bec:	40013c00 	.word	0x40013c00

08003bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	887b      	ldrh	r3, [r7, #2]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e001      	b.n	8003c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c3c:	e003      	b.n	8003c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c3e:	887b      	ldrh	r3, [r7, #2]
 8003c40:	041a      	lsls	r2, r3, #16
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	619a      	str	r2, [r3, #24]
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c6a:	4a05      	ldr	r2, [pc, #20]	@ (8003c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fb6a 	bl	800234c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40013c00 	.word	0x40013c00

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e267      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e242      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fd08 	bl	8002750 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fe fd04 	bl	8002750 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e207      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fcf4 	bl	8002750 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fcf0 	bl	8002750 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1f3      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fca9 	bl	8002750 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fe fca5 	bl	8002750 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1a8      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fc88 	bl	8002750 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fc84 	bl	8002750 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e187      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fc68 	bl	8002750 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fe fc64 	bl	8002750 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e167      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fc51 	bl	8002750 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fc4d 	bl	8002750 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e150      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7d      	ldr	r3, [pc, #500]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a7c      	ldr	r2, [pc, #496]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b77      	ldr	r3, [pc, #476]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b74      	ldr	r3, [pc, #464]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fc0d 	bl	8002750 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe fc09 	bl	8002750 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e10c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a63      	ldr	r2, [pc, #396]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b5c      	ldr	r3, [pc, #368]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a54      	ldr	r2, [pc, #336]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe fbce 	bl	8002750 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fbca 	bl	8002750 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0cb      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b49      	ldr	r3, [pc, #292]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fbb8 	bl	8002750 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fbb4 	bl	8002750 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0b5      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	4a38      	ldr	r2, [pc, #224]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a1 	beq.w	8004164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d05c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d141      	bne.n	80040ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b31      	ldr	r3, [pc, #196]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fb88 	bl	8002750 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fb84 	bl	8002750 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e087      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	491b      	ldr	r1, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fb5d 	bl	8002750 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fb59 	bl	8002750 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e05c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x416>
 80040b8:	e054      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fb46 	bl	8002750 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fb42 	bl	8002750 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x444>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e038      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_RCC_OscConfig+0x4ec>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d028      	beq.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d121      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d11a      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cc      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b68      	ldr	r3, [pc, #416]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b65      	ldr	r3, [pc, #404]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a58      	ldr	r2, [pc, #352]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a52      	ldr	r2, [pc, #328]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d044      	beq.n	8004294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d003      	beq.n	8004232 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	2b03      	cmp	r3, #3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b3f      	ldr	r3, [pc, #252]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e067      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4934      	ldr	r1, [pc, #208]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004264:	f7fe fa74 	bl	8002750 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fe fa70 	bl	8002750 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e04f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b2b      	ldr	r3, [pc, #172]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b25      	ldr	r3, [pc, #148]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20c      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 f821 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490a      	ldr	r1, [pc, #40]	@ (8004334 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f9d4 	bl	80026c8 <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
 8004334:	080052d4 	.word	0x080052d4
 8004338:	20000008 	.word	0x20000008
 800433c:	2000000c 	.word	0x2000000c

08004340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b094      	sub	sp, #80	@ 0x50
 8004346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004358:	4b79      	ldr	r3, [pc, #484]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d00d      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x40>
 8004364:	2b08      	cmp	r3, #8
 8004366:	f200 80e1 	bhi.w	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x34>
 800436e:	2b04      	cmp	r3, #4
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x3a>
 8004372:	e0db      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004378:	e0db      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437a:	4b73      	ldr	r3, [pc, #460]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x208>)
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800437e:	e0d8      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004380:	4b6f      	ldr	r3, [pc, #444]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438a:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4621      	mov	r1, r4
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	6139      	str	r1, [r7, #16]
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e4:	4659      	mov	r1, fp
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4651      	mov	r1, sl
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4651      	mov	r1, sl
 80043f4:	ebb2 0801 	subs.w	r8, r2, r1
 80043f8:	4659      	mov	r1, fp
 80043fa:	eb63 0901 	sbc.w	r9, r3, r1
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004412:	4690      	mov	r8, r2
 8004414:	4699      	mov	r9, r3
 8004416:	4623      	mov	r3, r4
 8004418:	eb18 0303 	adds.w	r3, r8, r3
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	462b      	mov	r3, r5
 8004420:	eb49 0303 	adc.w	r3, r9, r3
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004432:	4629      	mov	r1, r5
 8004434:	024b      	lsls	r3, r1, #9
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800443c:	4621      	mov	r1, r4
 800443e:	024a      	lsls	r2, r1, #9
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800444c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004450:	f7fc f9c0 	bl	80007d4 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800445c:	e058      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445e:	4b38      	ldr	r3, [pc, #224]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	2200      	movs	r2, #0
 8004466:	4618      	mov	r0, r3
 8004468:	4611      	mov	r1, r2
 800446a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
 8004474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	0159      	lsls	r1, r3, #5
 8004486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448a:	0150      	lsls	r0, r2, #5
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4641      	mov	r1, r8
 8004492:	ebb2 0a01 	subs.w	sl, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb63 0b01 	sbc.w	fp, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044b0:	ebb2 040a 	subs.w	r4, r2, sl
 80044b4:	eb63 050b 	sbc.w	r5, r3, fp
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	00eb      	lsls	r3, r5, #3
 80044c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c6:	00e2      	lsls	r2, r4, #3
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	18e3      	adds	r3, r4, r3
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb45 0303 	adc.w	r3, r5, r3
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e6:	4629      	mov	r1, r5
 80044e8:	028b      	lsls	r3, r1, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f0:	4621      	mov	r1, r4
 80044f2:	028a      	lsls	r2, r1, #10
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	f7fc f966 	bl	80007d4 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	3301      	adds	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452a:	e002      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 800452e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004534:	4618      	mov	r0, r3
 8004536:	3750      	adds	r7, #80	@ 0x50
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e041      	b.n	80045e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd ffae 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f000 fad8 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e041      	b.n	8004680 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f839 	bl	8004688 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f000 fa89 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <HAL_TIM_PWM_Start+0x24>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e022      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d109      	bne.n	80046da <HAL_TIM_PWM_Start+0x3e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	bf14      	ite	ne
 80046d2:	2301      	movne	r3, #1
 80046d4:	2300      	moveq	r3, #0
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	e015      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d109      	bne.n	80046f4 <HAL_TIM_PWM_Start+0x58>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	bf14      	ite	ne
 80046ec:	2301      	movne	r3, #1
 80046ee:	2300      	moveq	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e008      	b.n	8004706 <HAL_TIM_PWM_Start+0x6a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07c      	b.n	8004808 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0x82>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800471c:	e013      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0x92>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800472c:	e00b      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Start+0xa2>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800473c:	e003      	b.n	8004746 <HAL_TIM_PWM_Start+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	6839      	ldr	r1, [r7, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fce6 	bl	8005120 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2d      	ldr	r2, [pc, #180]	@ (8004810 <HAL_TIM_PWM_Start+0x174>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_PWM_Start+0xcc>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a2c      	ldr	r2, [pc, #176]	@ (8004814 <HAL_TIM_PWM_Start+0x178>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_TIM_PWM_Start+0xd0>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_TIM_PWM_Start+0xd2>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_TIM_PWM_Start+0x174>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d01d      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <HAL_TIM_PWM_Start+0x17c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <HAL_TIM_PWM_Start+0x180>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <HAL_TIM_PWM_Start+0x184>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a16      	ldr	r2, [pc, #88]	@ (8004814 <HAL_TIM_PWM_Start+0x178>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_TIM_PWM_Start+0x188>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x136>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a16      	ldr	r2, [pc, #88]	@ (8004828 <HAL_TIM_PWM_Start+0x18c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d111      	bne.n	80047f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d010      	beq.n	8004806 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	e007      	b.n	8004806 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40010000 	.word	0x40010000
 8004814:	40010400 	.word	0x40010400
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40014000 	.word	0x40014000
 8004828:	40001800 	.word	0x40001800

0800482c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004846:	2302      	movs	r3, #2
 8004848:	e0ae      	b.n	80049a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b0c      	cmp	r3, #12
 8004856:	f200 809f 	bhi.w	8004998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800485a:	a201      	add	r2, pc, #4	@ (adr r2, 8004860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800485c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004860:	08004895 	.word	0x08004895
 8004864:	08004999 	.word	0x08004999
 8004868:	08004999 	.word	0x08004999
 800486c:	08004999 	.word	0x08004999
 8004870:	080048d5 	.word	0x080048d5
 8004874:	08004999 	.word	0x08004999
 8004878:	08004999 	.word	0x08004999
 800487c:	08004999 	.word	0x08004999
 8004880:	08004917 	.word	0x08004917
 8004884:	08004999 	.word	0x08004999
 8004888:	08004999 	.word	0x08004999
 800488c:	08004999 	.word	0x08004999
 8004890:	08004957 	.word	0x08004957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f9f6 	bl	8004c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0208 	orr.w	r2, r2, #8
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e064      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68b9      	ldr	r1, [r7, #8]
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fa46 	bl	8004d6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6999      	ldr	r1, [r3, #24]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	021a      	lsls	r2, r3, #8
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	619a      	str	r2, [r3, #24]
      break;
 8004914:	e043      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa9b 	bl	8004e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	69da      	ldr	r2, [r3, #28]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f042 0208 	orr.w	r2, r2, #8
 8004930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0204 	bic.w	r2, r2, #4
 8004940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69d9      	ldr	r1, [r3, #28]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	430a      	orrs	r2, r1
 8004952:	61da      	str	r2, [r3, #28]
      break;
 8004954:	e023      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 faef 	bl	8004f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	021a      	lsls	r2, r3, #8
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	61da      	str	r2, [r3, #28]
      break;
 8004996:	e002      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3718      	adds	r7, #24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIM_ConfigClockSource+0x1c>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e0b4      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x186>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80049ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0xd4>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x172>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b70      	cmp	r3, #112	@ 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0xa6>
 8004a20:	2b70      	cmp	r3, #112	@ 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a24:	2b60      	cmp	r3, #96	@ 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x11a>
 8004a28:	2b60      	cmp	r3, #96	@ 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a2c:	2b50      	cmp	r3, #80	@ 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xfa>
 8004a30:	2b50      	cmp	r3, #80	@ 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x13a>
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	f000 fb3b 	bl	80050e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a94:	f000 fb24 	bl	80050e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fa98 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	@ 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 faf1 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fab7 	bl	800504a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	@ 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fae1 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fa78 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	@ 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fad1 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fac8 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a43      	ldr	r2, [pc, #268]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a40      	ldr	r2, [pc, #256]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3e      	ldr	r2, [pc, #248]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a32      	ldr	r2, [pc, #200]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2f      	ldr	r2, [pc, #188]	@ (8004c64 <TIM_Base_SetConfig+0x124>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2e      	ldr	r2, [pc, #184]	@ (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a2b      	ldr	r2, [pc, #172]	@ (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c78 <TIM_Base_SetConfig+0x138>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	@ (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <TIM_Base_SetConfig+0x140>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a27      	ldr	r2, [pc, #156]	@ (8004c84 <TIM_Base_SetConfig+0x144>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a26      	ldr	r2, [pc, #152]	@ (8004c88 <TIM_Base_SetConfig+0x148>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0e      	ldr	r2, [pc, #56]	@ (8004c60 <TIM_Base_SetConfig+0x120>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xf2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <TIM_Base_SetConfig+0x130>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d103      	bne.n	8004c3a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40014400 	.word	0x40014400
 8004c7c:	40014800 	.word	0x40014800
 8004c80:	40001800 	.word	0x40001800
 8004c84:	40001c00 	.word	0x40001c00
 8004c88:	40002000 	.word	0x40002000

08004c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	f023 0201 	bic.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0303 	bic.w	r3, r3, #3
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f023 0302 	bic.w	r3, r3, #2
 8004cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a20      	ldr	r2, [pc, #128]	@ (8004d64 <TIM_OC1_SetConfig+0xd8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC1_SetConfig+0x64>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a1f      	ldr	r2, [pc, #124]	@ (8004d68 <TIM_OC1_SetConfig+0xdc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10c      	bne.n	8004d0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 0308 	bic.w	r3, r3, #8
 8004cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a15      	ldr	r2, [pc, #84]	@ (8004d64 <TIM_OC1_SetConfig+0xd8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d003      	beq.n	8004d1a <TIM_OC1_SetConfig+0x8e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a14      	ldr	r2, [pc, #80]	@ (8004d68 <TIM_OC1_SetConfig+0xdc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	621a      	str	r2, [r3, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	40010000 	.word	0x40010000
 8004d68:	40010400 	.word	0x40010400

08004d6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	f023 0210 	bic.w	r2, r3, #16
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	021b      	lsls	r3, r3, #8
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a22      	ldr	r2, [pc, #136]	@ (8004e50 <TIM_OC2_SetConfig+0xe4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC2_SetConfig+0x68>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a21      	ldr	r2, [pc, #132]	@ (8004e54 <TIM_OC2_SetConfig+0xe8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10d      	bne.n	8004df0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <TIM_OC2_SetConfig+0xe4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_OC2_SetConfig+0x94>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <TIM_OC2_SetConfig+0xe8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d113      	bne.n	8004e28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40010400 	.word	0x40010400

08004e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <TIM_OC3_SetConfig+0xe0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d003      	beq.n	8004ebe <TIM_OC3_SetConfig+0x66>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	@ (8004f3c <TIM_OC3_SetConfig+0xe4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d10d      	bne.n	8004eda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a16      	ldr	r2, [pc, #88]	@ (8004f38 <TIM_OC3_SetConfig+0xe0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d003      	beq.n	8004eea <TIM_OC3_SetConfig+0x92>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <TIM_OC3_SetConfig+0xe4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d113      	bne.n	8004f12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40010400 	.word	0x40010400

08004f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <TIM_OC4_SetConfig+0xa4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC4_SetConfig+0x68>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <TIM_OC4_SetConfig+0xa8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d109      	bne.n	8004fbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40010400 	.word	0x40010400

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	f023 0210 	bic.w	r2, r3, #16
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005074:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005086:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 031f 	and.w	r3, r3, #31
 8005132:	2201      	movs	r2, #1
 8005134:	fa02 f303 	lsl.w	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a1a      	ldr	r2, [r3, #32]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	43db      	mvns	r3, r3
 8005142:	401a      	ands	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 031f 	and.w	r3, r3, #31
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <HAL_TIMEx_MasterConfigSynchronization>:
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005180:	2302      	movs	r3, #2
 8005182:	e05a      	b.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a21      	ldr	r2, [pc, #132]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d0:	d01d      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a1d      	ldr	r2, [pc, #116]	@ (800524c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a17      	ldr	r2, [pc, #92]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a15      	ldr	r2, [pc, #84]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d10c      	bne.n	8005228 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	4313      	orrs	r3, r2
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005238:	2300      	movs	r3, #0
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40010400 	.word	0x40010400
 800525c:	40014000 	.word	0x40014000
 8005260:	40001800 	.word	0x40001800

08005264 <memset>:
 8005264:	4402      	add	r2, r0
 8005266:	4603      	mov	r3, r0
 8005268:	4293      	cmp	r3, r2
 800526a:	d100      	bne.n	800526e <memset+0xa>
 800526c:	4770      	bx	lr
 800526e:	f803 1b01 	strb.w	r1, [r3], #1
 8005272:	e7f9      	b.n	8005268 <memset+0x4>

08005274 <__libc_init_array>:
 8005274:	b570      	push	{r4, r5, r6, lr}
 8005276:	4d0d      	ldr	r5, [pc, #52]	@ (80052ac <__libc_init_array+0x38>)
 8005278:	4c0d      	ldr	r4, [pc, #52]	@ (80052b0 <__libc_init_array+0x3c>)
 800527a:	1b64      	subs	r4, r4, r5
 800527c:	10a4      	asrs	r4, r4, #2
 800527e:	2600      	movs	r6, #0
 8005280:	42a6      	cmp	r6, r4
 8005282:	d109      	bne.n	8005298 <__libc_init_array+0x24>
 8005284:	4d0b      	ldr	r5, [pc, #44]	@ (80052b4 <__libc_init_array+0x40>)
 8005286:	4c0c      	ldr	r4, [pc, #48]	@ (80052b8 <__libc_init_array+0x44>)
 8005288:	f000 f818 	bl	80052bc <_init>
 800528c:	1b64      	subs	r4, r4, r5
 800528e:	10a4      	asrs	r4, r4, #2
 8005290:	2600      	movs	r6, #0
 8005292:	42a6      	cmp	r6, r4
 8005294:	d105      	bne.n	80052a2 <__libc_init_array+0x2e>
 8005296:	bd70      	pop	{r4, r5, r6, pc}
 8005298:	f855 3b04 	ldr.w	r3, [r5], #4
 800529c:	4798      	blx	r3
 800529e:	3601      	adds	r6, #1
 80052a0:	e7ee      	b.n	8005280 <__libc_init_array+0xc>
 80052a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a6:	4798      	blx	r3
 80052a8:	3601      	adds	r6, #1
 80052aa:	e7f2      	b.n	8005292 <__libc_init_array+0x1e>
 80052ac:	080052f4 	.word	0x080052f4
 80052b0:	080052f4 	.word	0x080052f4
 80052b4:	080052f4 	.word	0x080052f4
 80052b8:	080052f8 	.word	0x080052f8

080052bc <_init>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr

080052c8 <_fini>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr
