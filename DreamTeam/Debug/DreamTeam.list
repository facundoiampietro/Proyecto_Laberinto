
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004758  08004758  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004758  08004758  00005758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004760  08004760  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004760  08004760  00005760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004764  08004764  00005764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004768  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          000001c0  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab17  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4d  00000000  00000000  00010b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  000126a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000925  00000000  00000000  00013278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021386  00000000  00000000  00013b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d057  00000000  00000000  00034f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d21e3  00000000  00000000  00041f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011415d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003178  00000000  00000000  001141a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  00117318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004728 	.word	0x08004728

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004728 	.word	0x08004728

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */	HAL_Init();
 80004f8:	f001 fb12 	bl	8001b20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fc:	f000 f916 	bl	800072c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000500:	f000 fa80 	bl	8000a04 <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa5e 	bl	80009c4 <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f97a 	bl	8000800 <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f9d8 	bl	80008c0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	497a      	ldr	r1, [pc, #488]	@ (80006fc <main+0x208>)
 8000514:	487a      	ldr	r0, [pc, #488]	@ (8000700 <main+0x20c>)
 8000516:	f001 fbdd 	bl	8001cd4 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b7a      	ldr	r3, [pc, #488]	@ (8000704 <main+0x210>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b78      	ldr	r3, [pc, #480]	@ (8000704 <main+0x210>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b77      	ldr	r3, [pc, #476]	@ (8000704 <main+0x210>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b76      	ldr	r3, [pc, #472]	@ (8000704 <main+0x210>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b75      	ldr	r3, [pc, #468]	@ (8000704 <main+0x210>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b73      	ldr	r3, [pc, #460]	@ (8000704 <main+0x210>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b72      	ldr	r3, [pc, #456]	@ (8000704 <main+0x210>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b71      	ldr	r3, [pc, #452]	@ (8000704 <main+0x210>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b70      	ldr	r3, [pc, #448]	@ (8000704 <main+0x210>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b6f      	ldr	r3, [pc, #444]	@ (8000704 <main+0x210>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b6e      	ldr	r3, [pc, #440]	@ (8000704 <main+0x210>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b6d      	ldr	r3, [pc, #436]	@ (8000704 <main+0x210>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b6c      	ldr	r3, [pc, #432]	@ (8000704 <main+0x210>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b6b      	ldr	r3, [pc, #428]	@ (8000704 <main+0x210>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b6a      	ldr	r3, [pc, #424]	@ (8000704 <main+0x210>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b69      	ldr	r3, [pc, #420]	@ (8000704 <main+0x210>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b68      	ldr	r3, [pc, #416]	@ (8000704 <main+0x210>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b66      	ldr	r3, [pc, #408]	@ (8000704 <main+0x210>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b65      	ldr	r3, [pc, #404]	@ (8000704 <main+0x210>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b64      	ldr	r3, [pc, #400]	@ (8000704 <main+0x210>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b63      	ldr	r3, [pc, #396]	@ (8000704 <main+0x210>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b62      	ldr	r3, [pc, #392]	@ (8000704 <main+0x210>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b61      	ldr	r3, [pc, #388]	@ (8000704 <main+0x210>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b60      	ldr	r3, [pc, #384]	@ (8000704 <main+0x210>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b5f      	ldr	r3, [pc, #380]	@ (8000704 <main+0x210>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 800058c:	4b5e      	ldr	r3, [pc, #376]	@ (8000708 <main+0x214>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b5d      	ldr	r3, [pc, #372]	@ (8000708 <main+0x214>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b5b      	ldr	r3, [pc, #364]	@ (8000708 <main+0x214>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b5a      	ldr	r3, [pc, #360]	@ (8000708 <main+0x214>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b59      	ldr	r3, [pc, #356]	@ (8000708 <main+0x214>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b58      	ldr	r3, [pc, #352]	@ (8000708 <main+0x214>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b56      	ldr	r3, [pc, #344]	@ (8000708 <main+0x214>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b55      	ldr	r3, [pc, #340]	@ (8000708 <main+0x214>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b54      	ldr	r3, [pc, #336]	@ (8000708 <main+0x214>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b53      	ldr	r3, [pc, #332]	@ (8000708 <main+0x214>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b51      	ldr	r3, [pc, #324]	@ (8000708 <main+0x214>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b50      	ldr	r3, [pc, #320]	@ (8000708 <main+0x214>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b4f      	ldr	r3, [pc, #316]	@ (8000708 <main+0x214>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b4e      	ldr	r3, [pc, #312]	@ (8000708 <main+0x214>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000708 <main+0x214>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000708 <main+0x214>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b4a      	ldr	r3, [pc, #296]	@ (8000708 <main+0x214>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b49      	ldr	r3, [pc, #292]	@ (8000708 <main+0x214>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b48      	ldr	r3, [pc, #288]	@ (8000708 <main+0x214>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b47      	ldr	r3, [pc, #284]	@ (8000708 <main+0x214>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b46      	ldr	r3, [pc, #280]	@ (8000708 <main+0x214>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <main+0x214>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b44      	ldr	r3, [pc, #272]	@ (8000708 <main+0x214>)
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	4842      	ldr	r0, [pc, #264]	@ (800070c <main+0x218>)
 8000602:	f002 fd5b 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	483f      	ldr	r0, [pc, #252]	@ (800070c <main+0x218>)
 800060e:	f002 fd55 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	483c      	ldr	r0, [pc, #240]	@ (800070c <main+0x218>)
 800061a:	f002 fd4f 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4839      	ldr	r0, [pc, #228]	@ (800070c <main+0x218>)
 8000626:	f002 fd49 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	4838      	ldr	r0, [pc, #224]	@ (8000710 <main+0x21c>)
 800062e:	f003 fa6b 	bl	8003b08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	4836      	ldr	r0, [pc, #216]	@ (8000710 <main+0x21c>)
 8000636:	f003 fa67 	bl	8003b08 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <main+0x220>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <main+0x220>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40


	prueba = 4; //Aca se elige que programa queremos que se realice
 800064a:	4b33      	ldr	r3, [pc, #204]	@ (8000718 <main+0x224>)
 800064c:	2204      	movs	r2, #4
 800064e:	701a      	strb	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		switch (prueba) {
 8000650:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <main+0x224>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b65      	cmp	r3, #101	@ 0x65
 8000656:	d04b      	beq.n	80006f0 <main+0x1fc>
 8000658:	2b65      	cmp	r3, #101	@ 0x65
 800065a:	dcf9      	bgt.n	8000650 <main+0x15c>
 800065c:	2b0a      	cmp	r3, #10
 800065e:	dc1d      	bgt.n	800069c <main+0x1a8>
 8000660:	2b00      	cmp	r3, #0
 8000662:	dbf5      	blt.n	8000650 <main+0x15c>
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d8f3      	bhi.n	8000650 <main+0x15c>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <main+0x17c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006a3 	.word	0x080006a3
 8000674:	080006a9 	.word	0x080006a9
 8000678:	08000651 	.word	0x08000651
 800067c:	08000651 	.word	0x08000651
 8000680:	080006af 	.word	0x080006af
 8000684:	080006b5 	.word	0x080006b5
 8000688:	080006bb 	.word	0x080006bb
 800068c:	08000651 	.word	0x08000651
 8000690:	08000651 	.word	0x08000651
 8000694:	08000651 	.word	0x08000651
 8000698:	080006dd 	.word	0x080006dd
 800069c:	2b64      	cmp	r3, #100	@ 0x64
 800069e:	d024      	beq.n	80006ea <main+0x1f6>
 80006a0:	e7d6      	b.n	8000650 <main+0x15c>

		case 0:
			prueba_avanzar();
 80006a2:	f000 fa85 	bl	8000bb0 <prueba_avanzar>
			break;
 80006a6:	e027      	b.n	80006f8 <main+0x204>

		case 1:
			prueba_giros_y_sensores();
 80006a8:	f000 fa8e 	bl	8000bc8 <prueba_giros_y_sensores>
			break;
 80006ac:	e024      	b.n	80006f8 <main+0x204>

		case 4:
			programa_principal();
 80006ae:	f000 fb61 	bl	8000d74 <programa_principal>
			break;
 80006b2:	e021      	b.n	80006f8 <main+0x204>

		case 5:
			ajuste_automatico();
 80006b4:	f000 fa1c 	bl	8000af0 <ajuste_automatico>
			break;
 80006b8:	e01e      	b.n	80006f8 <main+0x204>


		case 6:
			sensor_izq_min = 32700;
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <main+0x228>)
 80006bc:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 80006c0:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 80006c2:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <main+0x22c>)
 80006c4:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 80006c8:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <main+0x230>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 80006d0:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <main+0x234>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <main+0x224>)
 80006d8:	2205      	movs	r2, #5
 80006da:	701a      	strb	r2, [r3, #0]
		case 10:{
			TIM3->CCR3 = 0;
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <main+0x220>)
 80006de:	2200      	movs	r2, #0
 80006e0:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <main+0x220>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	641a      	str	r2, [r3, #64]	@ 0x40
		}
			break;
 80006e8:	e006      	b.n	80006f8 <main+0x204>
		case 100:
			prueba_casilla_n();
 80006ea:	f000 fae9 	bl	8000cc0 <prueba_casilla_n>
			break;
 80006ee:	e003      	b.n	80006f8 <main+0x204>

		case 101:
			prueba_post_relleno();
 80006f0:	f000 fb0c 	bl	8000d0c <prueba_post_relleno>
			break;
 80006f4:	bf00      	nop
 80006f6:	e7ab      	b.n	8000650 <main+0x15c>
		switch (prueba) {
 80006f8:	e7aa      	b.n	8000650 <main+0x15c>
 80006fa:	bf00      	nop
 80006fc:	2000014c 	.word	0x2000014c
 8000700:	20000030 	.word	0x20000030
 8000704:	20000124 	.word	0x20000124
 8000708:	20000134 	.word	0x20000134
 800070c:	40020400 	.word	0x40020400
 8000710:	200000d8 	.word	0x200000d8
 8000714:	40000400 	.word	0x40000400
 8000718:	20000145 	.word	0x20000145
 800071c:	20000002 	.word	0x20000002
 8000720:	20000004 	.word	0x20000004
 8000724:	20000148 	.word	0x20000148
 8000728:	2000014a 	.word	0x2000014a

0800072c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 ffc8 	bl	80046d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80007a0:	2332      	movs	r3, #50	@ 0x32
 80007a2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a8:	2307      	movs	r3, #7
 80007aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fc9d 	bl	80030f0 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x94>
		Error_Handler();
 80007bc:	f001 f838 	bl	8001830 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fefe 	bl	80035e0 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc2>
		Error_Handler();
 80007ea:	f001 f821 	bl	8001830 <Error_Handler>
	}
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	@ 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000812:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000814:	4a28      	ldr	r2, [pc, #160]	@ (80008b8 <MX_ADC1_Init+0xb8>)
 8000816:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000818:	4b26      	ldr	r3, [pc, #152]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800081a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800081e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000820:	4b24      	ldr	r3, [pc, #144]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000828:	2201      	movs	r2, #1
 800082a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800082e:	2201      	movs	r2, #1
 8000830:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800083a:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000842:	4a1e      	ldr	r2, [pc, #120]	@ (80008bc <MX_ADC1_Init+0xbc>)
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800084e:	2202      	movs	r2, #2
 8000850:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000854:	2201      	movs	r2, #1
 8000856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800085a:	4b16      	ldr	r3, [pc, #88]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000860:	4814      	ldr	r0, [pc, #80]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000862:	f001 f9f3 	bl	8001c4c <HAL_ADC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_ADC1_Init+0x70>
		Error_Handler();
 800086c:	f000 ffe0 	bl	8001830 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000870:	2309      	movs	r3, #9
 8000872:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000874:	2301      	movs	r3, #1
 8000876:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 8000882:	f001 fb45 	bl	8001f10 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0x90>
		Error_Handler();
 800088c:	f000 ffd0 	bl	8001830 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000890:	2308      	movs	r3, #8
 8000892:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_ADC1_Init+0xb4>)
 800089e:	f001 fb37 	bl	8001f10 <HAL_ADC_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0xac>
		Error_Handler();
 80008a8:	f000 ffc2 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000030 	.word	0x20000030
 80008b8:	40012000 	.word	0x40012000
 80008bc:	0f000001 	.word	0x0f000001

080008c0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	@ 0x38
 80008c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80008c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
 80008ec:	615a      	str	r2, [r3, #20]
 80008ee:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008f0:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <MX_TIM3_Init+0xfc>)
 80008f2:	4a33      	ldr	r2, [pc, #204]	@ (80009c0 <MX_TIM3_Init+0x100>)
 80008f4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80008f6:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <MX_TIM3_Init+0xfc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b2f      	ldr	r3, [pc, #188]	@ (80009bc <MX_TIM3_Init+0xfc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8000902:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000904:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000908:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b2c      	ldr	r3, [pc, #176]	@ (80009bc <MX_TIM3_Init+0xfc>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000910:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000916:	4829      	ldr	r0, [pc, #164]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000918:	f003 f84e 	bl	80039b8 <HAL_TIM_Base_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000922:	f000 ff85 	bl	8001830 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000926:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800092c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000930:	4619      	mov	r1, r3
 8000932:	4822      	ldr	r0, [pc, #136]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000934:	f003 fa72 	bl	8003e1c <HAL_TIM_ConfigClockSource>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x82>
		Error_Handler();
 800093e:	f000 ff77 	bl	8001830 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000942:	481e      	ldr	r0, [pc, #120]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000944:	f003 f887 	bl	8003a56 <HAL_TIM_PWM_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM3_Init+0x92>
		Error_Handler();
 800094e:	f000 ff6f 	bl	8001830 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	4619      	mov	r1, r3
 8000960:	4816      	ldr	r0, [pc, #88]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000962:	f003 fe39 	bl	80045d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800096c:	f000 ff60 	bl	8001830 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000970:	2360      	movs	r3, #96	@ 0x60
 8000972:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2208      	movs	r2, #8
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_TIM3_Init+0xfc>)
 8000988:	f003 f986 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000992:	f000 ff4d 	bl	8001830 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	220c      	movs	r2, #12
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	@ (80009bc <MX_TIM3_Init+0xfc>)
 800099e:	f003 f97b 	bl	8003c98 <HAL_TIM_PWM_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 80009a8:	f000 ff42 	bl	8001830 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <MX_TIM3_Init+0xfc>)
 80009ae:	f001 f807 	bl	80019c0 <HAL_TIM_MspPostInit>

}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	@ 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000d8 	.word	0x200000d8
 80009c0:	40000400 	.word	0x40000400

080009c4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <MX_DMA_Init+0x3c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000a00 <MX_DMA_Init+0x3c>)
 80009d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <MX_DMA_Init+0x3c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2038      	movs	r0, #56	@ 0x38
 80009ec:	f001 fe0b 	bl	8002606 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009f0:	2038      	movs	r0, #56	@ 0x38
 80009f2:	f001 fe24 	bl	800263e <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a28      	ldr	r2, [pc, #160]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b22      	ldr	r3, [pc, #136]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a5c:	f043 0304 	orr.w	r3, r3, #4
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_GPIO_Init+0xdc>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0304 	and.w	r3, r3, #4
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2108      	movs	r1, #8
 8000a72:	481c      	ldr	r0, [pc, #112]	@ (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a74:	f002 fb22 	bl	80030bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000a7e:	481a      	ldr	r0, [pc, #104]	@ (8000ae8 <MX_GPIO_Init+0xe4>)
 8000a80:	f002 fb1c 	bl	80030bc <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a84:	2308      	movs	r3, #8
 8000a86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_GPIO_Init+0xe0>)
 8000a9c:	f002 f95a 	bl	8002d54 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000aa0:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000aa4:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	@ (8000ae8 <MX_GPIO_Init+0xe4>)
 8000aba:	f002 f94b 	bl	8002d54 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8000abe:	23c0      	movs	r3, #192	@ 0xc0
 8000ac0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_GPIO_Init+0xe8>)
 8000ad2:	f002 f93f 	bl	8002d54 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3720      	adds	r7, #32
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40020800 	.word	0x40020800

08000af0 <ajuste_automatico>:

/* USER CODE BEGIN 4 */
void ajuste_automatico(void) {
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
	if (sensor_der_min == 0 || sensor_izq_min == 0){
 8000af4:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <ajuste_automatico+0xa0>)
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d003      	beq.n	8000b04 <ajuste_automatico+0x14>
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <ajuste_automatico+0xa4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d107      	bne.n	8000b14 <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <ajuste_automatico+0xa0>)
 8000b06:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b0a:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 8000b0c:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <ajuste_automatico+0xa4>)
 8000b0e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b12:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 8000b14:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <ajuste_automatico+0xa0>)
 8000b16:	881a      	ldrh	r2, [r3, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	@ (8000b98 <ajuste_automatico+0xa8>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d904      	bls.n	8000b2c <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <ajuste_automatico+0xa8>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <ajuste_automatico+0xa0>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <ajuste_automatico+0xa4>)
 8000b2e:	881a      	ldrh	r2, [r3, #0]
 8000b30:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <ajuste_automatico+0xac>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d904      	bls.n	8000b44 <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <ajuste_automatico+0xac>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <ajuste_automatico+0xa4>)
 8000b42:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 8000b44:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <ajuste_automatico+0xb0>)
 8000b46:	881a      	ldrh	r2, [r3, #0]
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <ajuste_automatico+0xa8>)
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d204      	bcs.n	8000b5c <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <ajuste_automatico+0xa8>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <ajuste_automatico+0xb0>)
 8000b5a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <ajuste_automatico+0xb4>)
 8000b5e:	881a      	ldrh	r2, [r3, #0]
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <ajuste_automatico+0xac>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d204      	bcs.n	8000b74 <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <ajuste_automatico+0xac>)
 8000b6c:	881b      	ldrh	r3, [r3, #0]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <ajuste_automatico+0xb4>)
 8000b72:	801a      	strh	r2, [r3, #0]
	}
//	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Boton_GPIO_Port, Boton_Pin)){
        contador_casillas = contador_casillas + 1 ;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <ajuste_automatico+0xb8>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <ajuste_automatico+0xb8>)
 8000b7e:	701a      	strb	r2, [r3, #0]

		prueba=4;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <ajuste_automatico+0xbc>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	701a      	strb	r2, [r3, #0]
	//	}
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000004 	.word	0x20000004
 8000b94:	20000002 	.word	0x20000002
 8000b98:	200001ce 	.word	0x200001ce
 8000b9c:	200001cc 	.word	0x200001cc
 8000ba0:	2000014a 	.word	0x2000014a
 8000ba4:	20000148 	.word	0x20000148
 8000ba8:	20000144 	.word	0x20000144
 8000bac:	20000145 	.word	0x20000145

08000bb0 <prueba_avanzar>:

void prueba_avanzar(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	correccion_avanzar();//codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000bb4:	f000 fa74 	bl	80010a0 <correccion_avanzar>
	ejecutarGiro(izquierda);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fb25 	bl	8001208 <ejecutarGiro>
	correccion_avanzar();
 8000bbe:	f000 fa6f 	bl	80010a0 <correccion_avanzar>
	while(1);
 8000bc2:	bf00      	nop
 8000bc4:	e7fd      	b.n	8000bc2 <prueba_avanzar+0x12>
	...

08000bc8 <prueba_giros_y_sensores>:
}

void prueba_giros_y_sensores(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000bcc:	f000 fa68 	bl	80010a0 <correccion_avanzar>
	if (verificar_sensor()) {
 8000bd0:	f000 fc6e 	bl	80014b0 <verificar_sensor>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d00b      	beq.n	8000bf2 <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000bda:	4b36      	ldr	r3, [pc, #216]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4a36      	ldr	r2, [pc, #216]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	4611      	mov	r1, r2
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f9db 	bl	8000fa0 <act_ubicacion>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b31      	ldr	r3, [pc, #196]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000bf0:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 8000bf2:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d121      	bne.n	8000c3e <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000bfa:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000bfe:	f001 f801 	bl	8001c04 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 fb00 	bl	8001208 <ejecutarGiro>
		orientacion_actual = oeste;
 8000c08:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000c0e:	e012      	b.n	8000c36 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000c10:	f000 fa46 	bl	80010a0 <correccion_avanzar>
			if (verificar_sensor()) {
 8000c14:	f000 fc4c 	bl	80014b0 <verificar_sensor>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00b      	beq.n	8000c36 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4a25      	ldr	r2, [pc, #148]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f9b9 	bl	8000fa0 <act_ubicacion>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c34:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b08      	cmp	r3, #8
 8000c3c:	d0e8      	beq.n	8000c10 <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b09      	cmp	r3, #9
 8000c44:	d121      	bne.n	8000c8a <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 8000c46:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c4a:	f000 ffdb 	bl	8001c04 <HAL_Delay>
		ejecutarGiro(derecha);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f000 fada 	bl	8001208 <ejecutarGiro>
		orientacion_actual = norte;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000c5a:	e012      	b.n	8000c82 <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 8000c5c:	f000 fa20 	bl	80010a0 <correccion_avanzar>
			if (verificar_sensor()) {
 8000c60:	f000 fc26 	bl	80014b0 <verificar_sensor>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000c6a:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000c70:	7812      	ldrb	r2, [r2, #0]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f993 	bl	8000fa0 <act_ubicacion>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c80:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d0e8      	beq.n	8000c5c <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13)
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <prueba_giros_y_sensores+0xec>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b0d      	cmp	r3, #13
 8000c90:	d10e      	bne.n	8000cb0 <prueba_giros_y_sensores+0xe8>
			&& (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)
 8000c92:	2140      	movs	r1, #64	@ 0x40
 8000c94:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <prueba_giros_y_sensores+0xf4>)
 8000c96:	f002 f9f9 	bl	800308c <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d107      	bne.n	8000cb0 <prueba_giros_y_sensores+0xe8>
					== GPIO_PIN_RESET)) {
		ejecutarGiro(giro_180);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f000 fab1 	bl	8001208 <ejecutarGiro>
		orientacion_actual = sur;
 8000ca6:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <prueba_giros_y_sensores+0xf0>)
 8000ca8:	2202      	movs	r2, #2
 8000caa:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000cac:	f000 f9f8 	bl	80010a0 <correccion_avanzar>
	}
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000120 	.word	0x20000120
 8000cb8:	20000121 	.word	0x20000121
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <prueba_casilla_n+0x3c>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <prueba_casilla_n+0x40>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <prueba_casilla_n+0x44>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d04 <prueba_casilla_n+0x44>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8000cdc:	4b09      	ldr	r3, [pc, #36]	@ (8000d04 <prueba_casilla_n+0x44>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //deberia dar que tiene que ir a 11
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <prueba_casilla_n+0x3c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4905      	ldr	r1, [pc, #20]	@ (8000d00 <prueba_casilla_n+0x40>)
 8000cea:	4806      	ldr	r0, [pc, #24]	@ (8000d04 <prueba_casilla_n+0x44>)
 8000cec:	f000 fd02 	bl	80016f4 <calculo_minimo_peso>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b04      	ldr	r3, [pc, #16]	@ (8000d08 <prueba_casilla_n+0x48>)
 8000cf6:	701a      	strb	r2, [r3, #0]

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000120 	.word	0x20000120
 8000d00:	20000134 	.word	0x20000134
 8000d04:	20000124 	.word	0x20000124
 8000d08:	20000000 	.word	0x20000000

08000d0c <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	ubicacion = 5;
 8000d10:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <prueba_post_relleno+0x54>)
 8000d12:	2205      	movs	r2, #5
 8000d14:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <prueba_post_relleno+0x58>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <prueba_post_relleno+0x54>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4a10      	ldr	r2, [pc, #64]	@ (8000d64 <prueba_post_relleno+0x58>)
 8000d22:	7812      	ldrb	r2, [r2, #0]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f8dc 	bl	8000ee4 <obtener_orientacion_futura>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <prueba_post_relleno+0x5c>)
 8000d32:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <prueba_post_relleno+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <prueba_post_relleno+0x60>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d68 <prueba_post_relleno+0x5c>)
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f8f9 	bl	8000f3c <obtenerGiro>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <prueba_post_relleno+0x64>)
 8000d50:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <prueba_post_relleno+0x64>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fa56 	bl	8001208 <ejecutarGiro>
	while (1);
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <prueba_post_relleno+0x50>
 8000d60:	20000120 	.word	0x20000120
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000122 	.word	0x20000122
 8000d6c:	20000121 	.word	0x20000121
 8000d70:	20000123 	.word	0x20000123

08000d74 <programa_principal>:
}

void programa_principal(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000d78:	f000 f992 	bl	80010a0 <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 8000d7c:	f000 fb98 	bl	80014b0 <verificar_sensor>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d040      	beq.n	8000e08 <programa_principal+0x94>
		contador_giros = 0;
 8000d86:	4b4c      	ldr	r3, [pc, #304]	@ (8000eb8 <programa_principal+0x144>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
		contador_casillas= contador_casillas + 1;
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ebc <programa_principal+0x148>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b49      	ldr	r3, [pc, #292]	@ (8000ebc <programa_principal+0x148>)
 8000d96:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000d98:	4b49      	ldr	r3, [pc, #292]	@ (8000ec0 <programa_principal+0x14c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	@ (8000ec4 <programa_principal+0x150>)
 8000d9e:	7812      	ldrb	r2, [r2, #0]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f8fc 	bl	8000fa0 <act_ubicacion>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b44      	ldr	r3, [pc, #272]	@ (8000ec0 <programa_principal+0x14c>)
 8000dae:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000db0:	4b43      	ldr	r3, [pc, #268]	@ (8000ec0 <programa_principal+0x14c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4944      	ldr	r1, [pc, #272]	@ (8000ec8 <programa_principal+0x154>)
 8000db8:	4844      	ldr	r0, [pc, #272]	@ (8000ecc <programa_principal+0x158>)
 8000dba:	f000 fc9b 	bl	80016f4 <calculo_minimo_peso>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <programa_principal+0x15c>)
 8000dc4:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec0 <programa_principal+0x14c>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	4a41      	ldr	r2, [pc, #260]	@ (8000ed0 <programa_principal+0x15c>)
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f887 	bl	8000ee4 <obtener_orientacion_futura>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed4 <programa_principal+0x160>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000dde:	4b39      	ldr	r3, [pc, #228]	@ (8000ec4 <programa_principal+0x150>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed4 <programa_principal+0x160>)
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f8a7 	bl	8000f3c <obtenerGiro>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <programa_principal+0x164>)
 8000df4:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000df6:	4b37      	ldr	r3, [pc, #220]	@ (8000ed4 <programa_principal+0x160>)
 8000df8:	781a      	ldrb	r2, [r3, #0]
 8000dfa:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <programa_principal+0x150>)
 8000dfc:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000dfe:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <programa_principal+0x164>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fa00 	bl	8001208 <ejecutarGiro>
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	4834      	ldr	r0, [pc, #208]	@ (8000edc <programa_principal+0x168>)
 8000e0c:	f002 f93e 	bl	800308c <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d147      	bne.n	8000ea6 <programa_principal+0x132>
		HAL_Delay(tiempo_rebotes);
 8000e16:	2014      	movs	r0, #20
 8000e18:	f000 fef4 	bl	8001c04 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8000e1c:	2140      	movs	r1, #64	@ 0x40
 8000e1e:	482f      	ldr	r0, [pc, #188]	@ (8000edc <programa_principal+0x168>)
 8000e20:	f002 f934 	bl	800308c <HAL_GPIO_ReadPin>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d13d      	bne.n	8000ea6 <programa_principal+0x132>
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <programa_principal+0x14c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	4a25      	ldr	r2, [pc, #148]	@ (8000ec4 <programa_principal+0x150>)
 8000e30:	7812      	ldrb	r2, [r2, #0]
 8000e32:	4619      	mov	r1, r3
 8000e34:	4824      	ldr	r0, [pc, #144]	@ (8000ec8 <programa_principal+0x154>)
 8000e36:	f000 fb6b 	bl	8001510 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 8000e3a:	4924      	ldr	r1, [pc, #144]	@ (8000ecc <programa_principal+0x158>)
 8000e3c:	4822      	ldr	r0, [pc, #136]	@ (8000ec8 <programa_principal+0x154>)
 8000e3e:	f000 fbb9 	bl	80015b4 <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000e42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec0 <programa_principal+0x14c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	491f      	ldr	r1, [pc, #124]	@ (8000ec8 <programa_principal+0x154>)
 8000e4a:	4820      	ldr	r0, [pc, #128]	@ (8000ecc <programa_principal+0x158>)
 8000e4c:	f000 fc52 	bl	80016f4 <calculo_minimo_peso>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <programa_principal+0x15c>)
 8000e56:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <programa_principal+0x14c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed0 <programa_principal+0x15c>)
 8000e5e:	7812      	ldrb	r2, [r2, #0]
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f83e 	bl	8000ee4 <obtener_orientacion_futura>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <programa_principal+0x160>)
 8000e6e:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <programa_principal+0x150>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	@ (8000ed4 <programa_principal+0x160>)
 8000e76:	7812      	ldrb	r2, [r2, #0]
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f85e 	bl	8000f3c <obtenerGiro>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <programa_principal+0x164>)
 8000e86:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <programa_principal+0x160>)
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <programa_principal+0x150>)
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 8000e90:	4b09      	ldr	r3, [pc, #36]	@ (8000eb8 <programa_principal+0x144>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <programa_principal+0x128>
				mini_retroceso();
 8000e98:	f000 f9a8 	bl	80011ec <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <programa_principal+0x164>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 f9b1 	bl	8001208 <ejecutarGiro>
		}
	}
	if (ubicacion == 15) {
 8000ea6:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <programa_principal+0x14c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b0f      	cmp	r3, #15
 8000eac:	d102      	bne.n	8000eb4 <programa_principal+0x140>
		prueba = 10;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <programa_principal+0x16c>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000146 	.word	0x20000146
 8000ebc:	20000144 	.word	0x20000144
 8000ec0:	20000120 	.word	0x20000120
 8000ec4:	20000121 	.word	0x20000121
 8000ec8:	20000134 	.word	0x20000134
 8000ecc:	20000124 	.word	0x20000124
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000122 	.word	0x20000122
 8000ed8:	20000123 	.word	0x20000123
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	20000145 	.word	0x20000145

08000ee4 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	460a      	mov	r2, r1
 8000eee:	71fb      	strb	r3, [r7, #7]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 8000ef4:	79ba      	ldrb	r2, [r7, #6]
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d101      	bne.n	8000f02 <obtener_orientacion_futura+0x1e>
		return oeste;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e015      	b.n	8000f2e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d101      	bne.n	8000f10 <obtener_orientacion_futura+0x2c>
		return este;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e00e      	b.n	8000f2e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	3304      	adds	r3, #4
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d101      	bne.n	8000f1e <obtener_orientacion_futura+0x3a>
		return norte;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e007      	b.n	8000f2e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000f1e:	79ba      	ldrb	r2, [r7, #6]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	3b04      	subs	r3, #4
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d101      	bne.n	8000f2c <obtener_orientacion_futura+0x48>
		return sur;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e000      	b.n	8000f2e <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000f2c:	2364      	movs	r3, #100	@ 0x64
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000f4c:	79ba      	ldrb	r2, [r7, #6]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	3304      	adds	r3, #4
 8000f54:	425a      	negs	r2, r3
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	f002 0203 	and.w	r2, r2, #3
 8000f5e:	bf58      	it	pl
 8000f60:	4253      	negpl	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d812      	bhi.n	8000f90 <obtenerGiro+0x54>
 8000f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f70 <obtenerGiro+0x34>)
 8000f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f70:	08000f81 	.word	0x08000f81
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000f8d 	.word	0x08000f8d
	case 0:
		return adelante;
 8000f80:	2300      	movs	r3, #0
 8000f82:	e006      	b.n	8000f92 <obtenerGiro+0x56>
	case 1:
		return derecha;
 8000f84:	2302      	movs	r3, #2
 8000f86:	e004      	b.n	8000f92 <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e002      	b.n	8000f92 <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <obtenerGiro+0x56>
	default:
		return 100; // Error
 8000f90:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d81a      	bhi.n	8000fec <act_ubicacion+0x4c>
 8000fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fbc <act_ubicacion+0x1c>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	08000fd5 	.word	0x08000fd5
 8000fc4:	08000fdd 	.word	0x08000fdd
 8000fc8:	08000fe5 	.word	0x08000fe5
	case 0:
		return ubicacion + 4;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	e00c      	b.n	8000fee <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	e008      	b.n	8000fee <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	e004      	b.n	8000fee <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	e000      	b.n	8000fee <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8000fec:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <promediar>:

void promediar(uint16_t *buffer) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	e012      	b.n	8001038 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	4413      	add	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3302      	adds	r3, #2
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	dde9      	ble.n	8001012 <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	091b      	lsrs	r3, r3, #4
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <promediar+0x64>)
 8001046:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <promediar+0x68>)
 8001050:	801a      	strh	r2, [r3, #0]
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200001cc 	.word	0x200001cc
 8001064:	200001ce 	.word	0x200001ce

08001068 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001072:	f7ff ffc3 	bl	8000ffc <promediar>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000014c 	.word	0x2000014c

08001084 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 800108c:	4803      	ldr	r0, [pc, #12]	@ (800109c <HAL_ADC_ConvCpltCallback+0x18>)
 800108e:	f7ff ffb5 	bl	8000ffc <promediar>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000018c 	.word	0x2000018c

080010a0 <correccion_avanzar>:
void correccion_avanzar(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <correccion_avanzar+0x54>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d809      	bhi.n	80010c6 <correccion_avanzar+0x26>
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <correccion_avanzar+0x58>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	f240 2226 	movw	r2, #550	@ 0x226
 80010bc:	4293      	cmp	r3, r2
 80010be:	d902      	bls.n	80010c6 <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 80010c0:	f000 f86c 	bl	800119c <apagar_derecha>
 80010c4:	e013      	b.n	80010ee <correccion_avanzar+0x4e>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <correccion_avanzar+0x54>)
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d909      	bls.n	80010e8 <correccion_avanzar+0x48>
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <correccion_avanzar+0x58>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f240 2225 	movw	r2, #549	@ 0x225
 80010de:	4293      	cmp	r3, r2
 80010e0:	d802      	bhi.n	80010e8 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 80010e2:	f000 f833 	bl	800114c <apagar_izquierda>
 80010e6:	e002      	b.n	80010ee <correccion_avanzar+0x4e>
	} else {
		avanzar();
 80010e8:	f000 f808 	bl	80010fc <avanzar>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001cc 	.word	0x200001cc
 80010f8:	200001ce 	.word	0x200001ce

080010fc <avanzar>:
void avanzar(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001106:	480f      	ldr	r0, [pc, #60]	@ (8001144 <avanzar+0x48>)
 8001108:	f001 ffd8 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001112:	480c      	ldr	r0, [pc, #48]	@ (8001144 <avanzar+0x48>)
 8001114:	f001 ffd2 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800111e:	4809      	ldr	r0, [pc, #36]	@ (8001144 <avanzar+0x48>)
 8001120:	f001 ffcc 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800112a:	4806      	ldr	r0, [pc, #24]	@ (8001144 <avanzar+0x48>)
 800112c:	f001 ffc6 	bl	80030bc <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <avanzar+0x4c>)
 8001132:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <avanzar+0x4c>)
 800113a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800113e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020400 	.word	0x40020400
 8001148:	40000400 	.word	0x40000400

0800114c <apagar_izquierda>:

void apagar_izquierda(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <apagar_izquierda+0x48>)
 8001158:	f001 ffb0 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001162:	480c      	ldr	r0, [pc, #48]	@ (8001194 <apagar_izquierda+0x48>)
 8001164:	f001 ffaa 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800116e:	4809      	ldr	r0, [pc, #36]	@ (8001194 <apagar_izquierda+0x48>)
 8001170:	f001 ffa4 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117a:	4806      	ldr	r0, [pc, #24]	@ (8001194 <apagar_izquierda+0x48>)
 800117c:	f001 ff9e 	bl	80030bc <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <apagar_izquierda+0x4c>)
 8001182:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001186:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <apagar_izquierda+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40020400 	.word	0x40020400
 8001198:	40000400 	.word	0x40000400

0800119c <apagar_derecha>:

void apagar_derecha(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011a6:	480f      	ldr	r0, [pc, #60]	@ (80011e4 <apagar_derecha+0x48>)
 80011a8:	f001 ff88 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <apagar_derecha+0x48>)
 80011b4:	f001 ff82 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011be:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <apagar_derecha+0x48>)
 80011c0:	f001 ff7c 	bl	80030bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <apagar_derecha+0x48>)
 80011cc:	f001 ff76 	bl	80030bc <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <apagar_derecha+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <apagar_derecha+0x4c>)
 80011d8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40000400 	.word	0x40000400

080011ec <mini_retroceso>:

void mini_retroceso(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f000 f8f9 	bl	80013e8 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 80011f6:	2002      	movs	r0, #2
 80011f8:	f000 f928 	bl	800144c <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 80011fc:	2064      	movs	r0, #100	@ 0x64
 80011fe:	f000 fd01 	bl	8001c04 <HAL_Delay>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	if (contador_giros == 0){
 8001212:	4b74      	ldr	r3, [pc, #464]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d172      	bne.n	8001300 <ejecutarGiro+0xf8>
		switch (giro) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b03      	cmp	r3, #3
 800121e:	f200 80dd 	bhi.w	80013dc <ejecutarGiro+0x1d4>
 8001222:	a201      	add	r2, pc, #4	@ (adr r2, 8001228 <ejecutarGiro+0x20>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001239 	.word	0x08001239
 800122c:	0800128d 	.word	0x0800128d
 8001230:	0800124f 	.word	0x0800124f
 8001234:	080012cb 	.word	0x080012cb
			case adelante:
				setMotorIzquierdo(avance);
 8001238:	2001      	movs	r0, #1
 800123a:	f000 f8d5 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(avance);
 800123e:	2001      	movs	r0, #1
 8001240:	f000 f904 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_muerto);
 8001244:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001248:	f000 fcdc 	bl	8001c04 <HAL_Delay>
				break;
 800124c:	e0c6      	b.n	80013dc <ejecutarGiro+0x1d4>


			case derecha:
				contador_giros = contador_giros + 1;
 800124e:	4b65      	ldr	r3, [pc, #404]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b63      	ldr	r3, [pc, #396]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001258:	701a      	strb	r2, [r3, #0]
				//setMotorIzquierdo(avance);
				//setMotorDerecho(avance);
				HAL_Delay(tiempo_muerto_avanzar);
 800125a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800125e:	f000 fcd1 	bl	8001c04 <HAL_Delay>
				setMotorIzquierdo(avance);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 f8c0 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(retroceso);
 8001268:	2002      	movs	r0, #2
 800126a:	f000 f8ef 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_giro90);
 800126e:	f240 208a 	movw	r0, #650	@ 0x28a
 8001272:	f000 fcc7 	bl	8001c04 <HAL_Delay>
				setMotorIzquierdo(avance);
 8001276:	2001      	movs	r0, #1
 8001278:	f000 f8b6 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(avance);
 800127c:	2001      	movs	r0, #1
 800127e:	f000 f8e5 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_muerto);
 8001282:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001286:	f000 fcbd 	bl	8001c04 <HAL_Delay>
				break;
 800128a:	e0a7      	b.n	80013dc <ejecutarGiro+0x1d4>


			case izquierda:
				contador_giros = contador_giros + 1;
 800128c:	4b55      	ldr	r3, [pc, #340]	@ (80013e4 <ejecutarGiro+0x1dc>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b53      	ldr	r3, [pc, #332]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001296:	701a      	strb	r2, [r3, #0]
				//setMotorIzquierdo(avance);
				//setMotorDerecho(avance);
				HAL_Delay(tiempo_muerto_avanzar);
 8001298:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800129c:	f000 fcb2 	bl	8001c04 <HAL_Delay>
				setMotorIzquierdo(retroceso);
 80012a0:	2002      	movs	r0, #2
 80012a2:	f000 f8a1 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(avance);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 f8d0 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_giro90);
 80012ac:	f240 208a 	movw	r0, #650	@ 0x28a
 80012b0:	f000 fca8 	bl	8001c04 <HAL_Delay>
				setMotorIzquierdo(avance);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 f897 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(avance);
 80012ba:	2001      	movs	r0, #1
 80012bc:	f000 f8c6 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_muerto);
 80012c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012c4:	f000 fc9e 	bl	8001c04 <HAL_Delay>
				break;
 80012c8:	e088      	b.n	80013dc <ejecutarGiro+0x1d4>

			case giro_180:
				contador_giros = contador_giros + 1;
 80012ca:	4b46      	ldr	r3, [pc, #280]	@ (80013e4 <ejecutarGiro+0x1dc>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b44      	ldr	r3, [pc, #272]	@ (80013e4 <ejecutarGiro+0x1dc>)
 80012d4:	701a      	strb	r2, [r3, #0]
				setMotorIzquierdo(avance);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f000 f886 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(retroceso);
 80012dc:	2002      	movs	r0, #2
 80012de:	f000 f8b5 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_giro180);
 80012e2:	f240 404c 	movw	r0, #1100	@ 0x44c
 80012e6:	f000 fc8d 	bl	8001c04 <HAL_Delay>
				setMotorIzquierdo(avance);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 f87c 	bl	80013e8 <setMotorIzquierdo>
				setMotorDerecho(avance);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f000 f8ab 	bl	800144c <setMotorDerecho>
				HAL_Delay(tiempo_muerto);
 80012f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012fa:	f000 fc83 	bl	8001c04 <HAL_Delay>
				break;
 80012fe:	e06d      	b.n	80013dc <ejecutarGiro+0x1d4>

			}
	}
		else
			switch (giro) {
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d86a      	bhi.n	80013dc <ejecutarGiro+0x1d4>
 8001306:	a201      	add	r2, pc, #4	@ (adr r2, 800130c <ejecutarGiro+0x104>)
 8001308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001369 	.word	0x08001369
 8001314:	08001333 	.word	0x08001333
 8001318:	080013a7 	.word	0x080013a7
				case adelante:
					setMotorIzquierdo(avance);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 f863 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(avance);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 f892 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_muerto);
 8001328:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800132c:	f000 fc6a 	bl	8001c04 <HAL_Delay>
					break;
 8001330:	e054      	b.n	80013dc <ejecutarGiro+0x1d4>


				case derecha:
					contador_giros = contador_giros + 1;
 8001332:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <ejecutarGiro+0x1dc>)
 800133c:	701a      	strb	r2, [r3, #0]
					setMotorIzquierdo(avance);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 f852 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(retroceso);
 8001344:	2002      	movs	r0, #2
 8001346:	f000 f881 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_giro90_2);
 800134a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800134e:	f000 fc59 	bl	8001c04 <HAL_Delay>
					setMotorIzquierdo(avance);
 8001352:	2001      	movs	r0, #1
 8001354:	f000 f848 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(avance);
 8001358:	2001      	movs	r0, #1
 800135a:	f000 f877 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_muerto);
 800135e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001362:	f000 fc4f 	bl	8001c04 <HAL_Delay>
					break;
 8001366:	e039      	b.n	80013dc <ejecutarGiro+0x1d4>


				case izquierda:
					contador_giros = contador_giros + 1;
 8001368:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <ejecutarGiro+0x1dc>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <ejecutarGiro+0x1dc>)
 8001372:	701a      	strb	r2, [r3, #0]
					HAL_Delay(tiempo_muerto_avanzar);
 8001374:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001378:	f000 fc44 	bl	8001c04 <HAL_Delay>
					setMotorIzquierdo(retroceso);
 800137c:	2002      	movs	r0, #2
 800137e:	f000 f833 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(avance);
 8001382:	2001      	movs	r0, #1
 8001384:	f000 f862 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_giro90_2);
 8001388:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800138c:	f000 fc3a 	bl	8001c04 <HAL_Delay>
					setMotorIzquierdo(avance);
 8001390:	2001      	movs	r0, #1
 8001392:	f000 f829 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(avance);
 8001396:	2001      	movs	r0, #1
 8001398:	f000 f858 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_muerto);
 800139c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013a0:	f000 fc30 	bl	8001c04 <HAL_Delay>
					break;
 80013a4:	e01a      	b.n	80013dc <ejecutarGiro+0x1d4>

				case giro_180:
					contador_giros = contador_giros + 1;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <ejecutarGiro+0x1dc>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <ejecutarGiro+0x1dc>)
 80013b0:	701a      	strb	r2, [r3, #0]
					setMotorIzquierdo(avance);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 f818 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(retroceso);
 80013b8:	2002      	movs	r0, #2
 80013ba:	f000 f847 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_giro180);
 80013be:	f240 404c 	movw	r0, #1100	@ 0x44c
 80013c2:	f000 fc1f 	bl	8001c04 <HAL_Delay>
					setMotorIzquierdo(avance);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 f80e 	bl	80013e8 <setMotorIzquierdo>
					setMotorDerecho(avance);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 f83d 	bl	800144c <setMotorDerecho>
					HAL_Delay(tiempo_muerto);
 80013d2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013d6:	f000 fc15 	bl	8001c04 <HAL_Delay>
					break;
 80013da:	bf00      	nop

				}


	}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000146 	.word	0x20000146

080013e8 <setMotorIzquierdo>:


void setMotorIzquierdo(uint8_t modo) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <setMotorIzquierdo+0x5c>)
 80013f4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80013f8:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d002      	beq.n	8001406 <setMotorIzquierdo+0x1e>
 8001400:	2b02      	cmp	r3, #2
 8001402:	d00d      	beq.n	8001420 <setMotorIzquierdo+0x38>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
				GPIO_PIN_RESET);
		break;
	}
}
 8001404:	e019      	b.n	800143a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800140c:	480e      	ldr	r0, [pc, #56]	@ (8001448 <setMotorIzquierdo+0x60>)
 800140e:	f001 fe55 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 8001412:	2201      	movs	r2, #1
 8001414:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001418:	480b      	ldr	r0, [pc, #44]	@ (8001448 <setMotorIzquierdo+0x60>)
 800141a:	f001 fe4f 	bl	80030bc <HAL_GPIO_WritePin>
		break;
 800141e:	e00c      	b.n	800143a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001420:	2201      	movs	r2, #1
 8001422:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <setMotorIzquierdo+0x60>)
 8001428:	f001 fe48 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001432:	4805      	ldr	r0, [pc, #20]	@ (8001448 <setMotorIzquierdo+0x60>)
 8001434:	f001 fe42 	bl	80030bc <HAL_GPIO_WritePin>
		break;
 8001438:	bf00      	nop
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40000400 	.word	0x40000400
 8001448:	40020400 	.word	0x40020400

0800144c <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <setMotorDerecho+0x5c>)
 8001458:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d002      	beq.n	800146a <setMotorDerecho+0x1e>
 8001464:	2b02      	cmp	r3, #2
 8001466:	d00d      	beq.n	8001484 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001468:	e019      	b.n	800149e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001470:	480e      	ldr	r0, [pc, #56]	@ (80014ac <setMotorDerecho+0x60>)
 8001472:	f001 fe23 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001476:	2201      	movs	r2, #1
 8001478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800147c:	480b      	ldr	r0, [pc, #44]	@ (80014ac <setMotorDerecho+0x60>)
 800147e:	f001 fe1d 	bl	80030bc <HAL_GPIO_WritePin>
		break;
 8001482:	e00c      	b.n	800149e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800148a:	4808      	ldr	r0, [pc, #32]	@ (80014ac <setMotorDerecho+0x60>)
 800148c:	f001 fe16 	bl	80030bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <setMotorDerecho+0x60>)
 8001498:	f001 fe10 	bl	80030bc <HAL_GPIO_WritePin>
		break;
 800149c:	bf00      	nop
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40000400 	.word	0x40000400
 80014ac:	40020400 	.word	0x40020400

080014b0 <verificar_sensor>:

bool verificar_sensor(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 80014b6:	2300      	movs	r3, #0
 80014b8:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 80014ba:	2180      	movs	r1, #128	@ 0x80
 80014bc:	4812      	ldr	r0, [pc, #72]	@ (8001508 <verificar_sensor+0x58>)
 80014be:	f001 fde5 	bl	800308c <HAL_GPIO_ReadPin>
 80014c2:	4603      	mov	r3, r0
 80014c4:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <verificar_sensor+0x5c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	79ba      	ldrb	r2, [r7, #6]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d015      	beq.n	80014fc <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 80014d0:	2014      	movs	r0, #20
 80014d2:	f000 fb97 	bl	8001c04 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	480b      	ldr	r0, [pc, #44]	@ (8001508 <verificar_sensor+0x58>)
 80014da:	f001 fdd7 	bl	800308c <HAL_GPIO_ReadPin>
 80014de:	4603      	mov	r3, r0
 80014e0:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 80014e2:	797a      	ldrb	r2, [r7, #5]
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d102      	bne.n	80014f0 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 80014ea:	4a08      	ldr	r2, [pc, #32]	@ (800150c <verificar_sensor+0x5c>)
 80014ec:	797b      	ldrb	r3, [r7, #5]
 80014ee:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <verificar_sensor+0x5c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <verificar_sensor+0x4c>
			pedido = true;
 80014f8:	2301      	movs	r3, #1
 80014fa:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 80014fc:	79fb      	ldrb	r3, [r7, #7]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40020800 	.word	0x40020800
 800150c:	20000006 	.word	0x20000006

08001510 <act_pared>:


uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	70fb      	strb	r3, [r7, #3]
 800151c:	4613      	mov	r3, r2
 800151e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001520:	78bb      	ldrb	r3, [r7, #2]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d83a      	bhi.n	800159c <act_pared+0x8c>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <act_pared+0x1c>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001555 	.word	0x08001555
 8001534:	0800156d 	.word	0x0800156d
 8001538:	08001585 	.word	0x08001585
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781a      	ldrb	r2, [r3, #0]
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	440b      	add	r3, r1
 800154a:	f042 0208 	orr.w	r2, r2, #8
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
		break;
 8001552:	e025      	b.n	80015a0 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	781a      	ldrb	r2, [r3, #0]
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	440b      	add	r3, r1
 8001562:	f042 0204 	orr.w	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]
		break;
 800156a:	e019      	b.n	80015a0 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	440b      	add	r3, r1
 800157a:	f042 0202 	orr.w	r2, r2, #2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
		break;
 8001582:	e00d      	b.n	80015a0 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	781a      	ldrb	r2, [r3, #0]
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	440b      	add	r3, r1
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	b2d2      	uxtb	r2, r2
 8001598:	701a      	strb	r2, [r3, #0]
		break;
 800159a:	e001      	b.n	80015a0 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 800159c:	2300      	movs	r3, #0
 800159e:	e003      	b.n	80015a8 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <act_pesos>:

void act_pesos(uint8_t * pared , uint8_t * peso) {
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 8; j++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	e08b      	b.n	80016dc <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros-1; i++) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	e081      	b.n	80016ce <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 80015ca:	2364      	movs	r3, #100	@ 0x64
 80015cc:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b0b      	cmp	r3, #11
 80015d2:	dc15      	bgt.n	8001600 <act_pesos+0x4c>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10d      	bne.n	8001600 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3304      	adds	r3, #4
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	7dfa      	ldrb	r2, [r7, #23]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d905      	bls.n	8001600 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	3304      	adds	r3, #4
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d01e      	beq.n	8001644 <act_pesos+0x90>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d01b      	beq.n	8001644 <act_pesos+0x90>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2b0b      	cmp	r3, #11
 8001610:	d018      	beq.n	8001644 <act_pesos+0x90>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d015      	beq.n	8001644 <act_pesos+0x90>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10d      	bne.n	8001644 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3301      	adds	r3, #1
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	7dfa      	ldrb	r2, [r7, #23]
 8001634:	429a      	cmp	r2, r3
 8001636:	d905      	bls.n	8001644 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	dd15      	ble.n	8001676 <act_pesos+0xc2>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3b04      	subs	r3, #4
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	7dfa      	ldrb	r2, [r7, #23]
 8001666:	429a      	cmp	r2, r3
 8001668:	d905      	bls.n	8001676 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b04      	subs	r3, #4
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d119      	bne.n	80016ba <act_pesos+0x106>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d016      	beq.n	80016ba <act_pesos+0x106>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d013      	beq.n	80016ba <act_pesos+0x106>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b08      	cmp	r3, #8
 8001696:	d010      	beq.n	80016ba <act_pesos+0x106>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d00d      	beq.n	80016ba <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	7dfa      	ldrb	r2, [r7, #23]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d905      	bls.n	80016ba <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	7dfa      	ldrb	r2, [r7, #23]
 80016c2:	3201      	adds	r2, #1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros-1; i++) {
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3301      	adds	r3, #1
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b0e      	cmp	r3, #14
 80016d2:	f77f af7a 	ble.w	80015ca <act_pesos+0x16>
	for (int j = 0; j < 8; j++) {
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3301      	adds	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b07      	cmp	r3, #7
 80016e0:	f77f af70 	ble.w	80015c4 <act_pesos+0x10>
				}
	}
}
 80016e4:	bf00      	nop
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t * peso,	uint8_t * pared, uint8_t ubicacion) {
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 8001702:	230f      	movs	r3, #15
 8001704:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0)
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	3304      	adds	r3, #4
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	7dfa      	ldrb	r2, [r7, #23]
 8001712:	429a      	cmp	r2, r3
 8001714:	d915      	bls.n	8001742 <calculo_minimo_peso+0x4e>
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10d      	bne.n	8001742 <calculo_minimo_peso+0x4e>
			&& (ubicacion + 4 < cant_casilleros))) {
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b0b      	cmp	r3, #11
 800172a:	d80a      	bhi.n	8001742 <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	3304      	adds	r3, #4
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	3304      	adds	r3, #4
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <calculo_minimo_peso+0x138>)
 8001740:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0)
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	3301      	adds	r3, #1
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	7dfa      	ldrb	r2, [r7, #23]
 800174e:	429a      	cmp	r2, r3
 8001750:	d91e      	bls.n	8001790 <calculo_minimo_peso+0x9c>
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <calculo_minimo_peso+0x9c>
			&& !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d013      	beq.n	8001790 <calculo_minimo_peso+0x9c>
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b07      	cmp	r3, #7
 800176c:	d010      	beq.n	8001790 <calculo_minimo_peso+0x9c>
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b0b      	cmp	r3, #11
 8001772:	d00d      	beq.n	8001790 <calculo_minimo_peso+0x9c>
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	d00a      	beq.n	8001790 <calculo_minimo_peso+0x9c>
					|| ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
		minimo_peso = peso[ubicacion + 1];
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	3301      	adds	r3, #1
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3301      	adds	r3, #1
 800178a:	b2da      	uxtb	r2, r3
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <calculo_minimo_peso+0x138>)
 800178e:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	3b04      	subs	r3, #4
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	7dfa      	ldrb	r2, [r7, #23]
 800179c:	429a      	cmp	r2, r3
 800179e:	d915      	bls.n	80017cc <calculo_minimo_peso+0xd8>
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <calculo_minimo_peso+0xd8>
			&& (4 <= ubicacion))) {
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d90a      	bls.n	80017cc <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	3b04      	subs	r3, #4
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	3b04      	subs	r3, #4
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <calculo_minimo_peso+0x138>)
 80017ca:	701a      	strb	r2, [r3, #0]

	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	7dfa      	ldrb	r2, [r7, #23]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d91e      	bls.n	800181a <calculo_minimo_peso+0x126>
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d116      	bne.n	800181a <calculo_minimo_peso+0x126>
			&& !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d013      	beq.n	800181a <calculo_minimo_peso+0x126>
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b07      	cmp	r3, #7
 80017f6:	d010      	beq.n	800181a <calculo_minimo_peso+0x126>
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b0b      	cmp	r3, #11
 80017fc:	d00d      	beq.n	800181a <calculo_minimo_peso+0x126>
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d00a      	beq.n	800181a <calculo_minimo_peso+0x126>
					|| ubicacion == 15))) {
		minimo_peso = peso[ubicacion - 1];
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	3b01      	subs	r3, #1
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	3b01      	subs	r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <calculo_minimo_peso+0x138>)
 8001818:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 800181a:	4b04      	ldr	r3, [pc, #16]	@ (800182c <calculo_minimo_peso+0x138>)
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	4618      	mov	r0, r3
 8001820:	371c      	adds	r7, #28
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000

08001830 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <Error_Handler+0x8>

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_MspInit+0x4c>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <HAL_MspInit+0x4c>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_MspInit+0x4c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800187a:	2007      	movs	r0, #7
 800187c:	f000 feb8 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001968 <HAL_ADC_MspInit+0xdc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d158      	bne.n	8001960 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b27      	ldr	r3, [pc, #156]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a26      	ldr	r2, [pc, #152]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b24      	ldr	r3, [pc, #144]	@ (800196c <HAL_ADC_MspInit+0xe0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 80018e6:	2303      	movs	r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ea:	2303      	movs	r3, #3
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	481d      	ldr	r0, [pc, #116]	@ (8001970 <HAL_ADC_MspInit+0xe4>)
 80018fa:	f001 fa2b 	bl	8002d54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001900:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_ADC_MspInit+0xec>)
 8001902:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001916:	4b17      	ldr	r3, [pc, #92]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001918:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800191c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001920:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001924:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001926:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800192c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800192e:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001934:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001936:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001938:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800193c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800193e:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001944:	480b      	ldr	r0, [pc, #44]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001946:	f000 fe95 	bl	8002674 <HAL_DMA_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001950:	f7ff ff6e 	bl	8001830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a07      	ldr	r2, [pc, #28]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
 800195a:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <HAL_ADC_MspInit+0xe8>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	@ 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40012000 	.word	0x40012000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020400 	.word	0x40020400
 8001974:	20000078 	.word	0x20000078
 8001978:	40026410 	.word	0x40026410

0800197c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <HAL_TIM_Base_MspInit+0x3c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10d      	bne.n	80019aa <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_TIM_Base_MspInit+0x40>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_TIM_Base_MspInit+0x40>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6413      	str	r3, [r2, #64]	@ 0x40
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <HAL_TIM_Base_MspInit+0x40>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40000400 	.word	0x40000400
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <HAL_TIM_MspPostInit+0x68>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d11e      	bne.n	8001a20 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_TIM_MspPostInit+0x6c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a10      	ldr	r2, [pc, #64]	@ (8001a2c <HAL_TIM_MspPostInit+0x6c>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <HAL_TIM_MspPostInit+0x6c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 80019fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <HAL_TIM_MspPostInit+0x70>)
 8001a1c:	f001 f99a 	bl	8002d54 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a20:	bf00      	nop
 8001a22:	3720      	adds	r7, #32
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40000400 	.word	0x40000400
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020800 	.word	0x40020800

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f89b 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a98:	4802      	ldr	r0, [pc, #8]	@ (8001aa4 <DMA2_Stream0_IRQHandler+0x10>)
 8001a9a:	f000 fef1 	bl	8002880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000078 	.word	0x20000078

08001aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <SystemInit+0x20>)
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ab2:	4a05      	ldr	r2, [pc, #20]	@ (8001ac8 <SystemInit+0x20>)
 8001ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b04 <LoopFillZerobss+0xe>
 8001ad0:	f7ff ffea 	bl	8001aa8 <SystemInit>
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <LoopFillZerobss+0x12>)
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <LoopFillZerobss+0x16>)
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <LoopFillZerobss+0x1a>)
 8001ada:	2300      	movs	r3, #0
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:
 8001ade:	58d4      	ldr	r4, [r2, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:
 8001ae4:	18c4      	adds	r4, r0, r3
 8001ae6:	428c      	cmp	r4, r1
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <LoopFillZerobss+0x1e>)
 8001aec:	4c0a      	ldr	r4, [pc, #40]	@ (8001b18 <LoopFillZerobss+0x22>)
 8001aee:	2300      	movs	r3, #0
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:
 8001af6:	42a2      	cmp	r2, r4
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>
 8001afa:	f002 fdf1 	bl	80046e0 <__libc_init_array>
 8001afe:	f7fe fcf9 	bl	80004f4 <main>
 8001b02:	4770      	bx	lr
 8001b04:	20020000 	.word	0x20020000
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000014 	.word	0x20000014
 8001b10:	08004768 	.word	0x08004768
 8001b14:	20000014 	.word	0x20000014
 8001b18:	200001d4 	.word	0x200001d4

08001b1c <ADC_IRQHandler>:
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	@ (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 fd51 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f808 	bl	8001b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fe72 	bl	800183c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0x54>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_InitTick+0x58>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fd69 	bl	800265a <HAL_SYSTICK_Config>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e00e      	b.n	8001bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b0f      	cmp	r3, #15
 8001b96:	d80a      	bhi.n	8001bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba0:	f000 fd31 	bl	8002606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba4:	4a06      	ldr	r2, [pc, #24]	@ (8001bc0 <HAL_InitTick+0x5c>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000010 	.word	0x20000010
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000010 	.word	0x20000010
 8001be8:	200001d0 	.word	0x200001d0

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	200001d0 	.word	0x200001d0

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000010 	.word	0x20000010

08001c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e033      	b.n	8001cca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fe0e 	bl	800188c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c92:	f023 0302 	bic.w	r3, r3, #2
 8001c96:	f043 0202 	orr.w	r2, r3, #2
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fa58 	bl	8002154 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cba:	e001      	b.n	8001cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x22>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0eb      	b.n	8001ece <HAL_ADC_Start_DMA+0x1fa>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d018      	beq.n	8001d3e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed8 <HAL_ADC_Start_DMA+0x204>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_ADC_Start_DMA+0x208>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0c9a      	lsrs	r2, r3, #18
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001d30:	e002      	b.n	8001d38 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f9      	bne.n	8001d32 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d4c:	d107      	bne.n	8001d5e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	f040 80a3 	bne.w	8001eb4 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d76:	f023 0301 	bic.w	r3, r3, #1
 8001d7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dac:	d106      	bne.n	8001dbc <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db2:	f023 0206 	bic.w	r2, r3, #6
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dba:	e002      	b.n	8001dc2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dca:	4b45      	ldr	r3, [pc, #276]	@ (8001ee0 <HAL_ADC_Start_DMA+0x20c>)
 8001dcc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dd2:	4a44      	ldr	r2, [pc, #272]	@ (8001ee4 <HAL_ADC_Start_DMA+0x210>)
 8001dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dda:	4a43      	ldr	r2, [pc, #268]	@ (8001ee8 <HAL_ADC_Start_DMA+0x214>)
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de2:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <HAL_ADC_Start_DMA+0x218>)
 8001de4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001dee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001dfe:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	334c      	adds	r3, #76	@ 0x4c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f000 fcd6 	bl	80027d0 <HAL_DMA_Start_IT>
 8001e24:	4603      	mov	r3, r0
 8001e26:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d12a      	bne.n	8001e8a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef0 <HAL_ADC_Start_DMA+0x21c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d015      	beq.n	8001e6a <HAL_ADC_Start_DMA+0x196>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <HAL_ADC_Start_DMA+0x220>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_Start_DMA+0x180>
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_ADC_Start_DMA+0x20c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_ADC_Start_DMA+0x224>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d136      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_ADC_Start_DMA+0x20c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d130      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d129      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e020      	b.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a18      	ldr	r2, [pc, #96]	@ (8001ef0 <HAL_ADC_Start_DMA+0x21c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11b      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d114      	bne.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	e00b      	b.n	8001ecc <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f043 0210 	orr.w	r2, r3, #16
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3720      	adds	r7, #32
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	0800234d 	.word	0x0800234d
 8001ee8:	08002407 	.word	0x08002407
 8001eec:	08002423 	.word	0x08002423
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	40012100 	.word	0x40012100
 8001ef8:	40012200 	.word	0x40012200

08001efc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1c>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e105      	b.n	8002138 <HAL_ADC_ConfigChannel+0x228>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d925      	bls.n	8001f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68d9      	ldr	r1, [r3, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4403      	add	r3, r0
 8001f7a:	3b1e      	subs	r3, #30
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e022      	b.n	8001fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4403      	add	r3, r0
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d824      	bhi.n	8002020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b05      	subs	r3, #5
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b05      	subs	r3, #5
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	@ 0x34
 800201e:	e04c      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d824      	bhi.n	8002072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	@ 0x23
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43da      	mvns	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	400a      	ands	r2, r1
 8002048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b23      	subs	r3, #35	@ 0x23
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002070:	e023      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b41      	subs	r3, #65	@ 0x41
 8002084:	221f      	movs	r2, #31
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	400a      	ands	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b41      	subs	r3, #65	@ 0x41
 80020ae:	fa00 f203 	lsl.w	r2, r0, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ba:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <HAL_ADC_ConfigChannel+0x234>)
 80020bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a21      	ldr	r2, [pc, #132]	@ (8002148 <HAL_ADC_ConfigChannel+0x238>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1cc>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d105      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a19      	ldr	r2, [pc, #100]	@ (8002148 <HAL_ADC_ConfigChannel+0x238>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d123      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b10      	cmp	r3, #16
 80020ec:	d003      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x1e6>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b11      	cmp	r3, #17
 80020f4:	d11b      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d111      	bne.n	800212e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_ADC_ConfigChannel+0x23c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a10      	ldr	r2, [pc, #64]	@ (8002150 <HAL_ADC_ConfigChannel+0x240>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9a      	lsrs	r2, r3, #18
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	40012300 	.word	0x40012300
 8002148:	40012000 	.word	0x40012000
 800214c:	20000008 	.word	0x20000008
 8002150:	431bde83 	.word	0x431bde83

08002154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800215c:	4b79      	ldr	r3, [pc, #484]	@ (8002344 <ADC_Init+0x1f0>)
 800215e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	431a      	orrs	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	021a      	lsls	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80021ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6899      	ldr	r1, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	4a58      	ldr	r2, [pc, #352]	@ (8002348 <ADC_Init+0x1f4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d022      	beq.n	8002232 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6899      	ldr	r1, [r3, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800221c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6899      	ldr	r1, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	e00f      	b.n	8002252 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002250:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0202 	bic.w	r2, r2, #2
 8002260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
 800226c:	005a      	lsls	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01b      	beq.n	80022b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800228e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800229e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	3b01      	subs	r3, #1
 80022ac:	035a      	lsls	r2, r3, #13
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	e007      	b.n	80022c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80022d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	3b01      	subs	r3, #1
 80022e4:	051a      	lsls	r2, r3, #20
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80022fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800230a:	025a      	lsls	r2, r3, #9
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	029a      	lsls	r2, r3, #10
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	609a      	str	r2, [r3, #8]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40012300 	.word	0x40012300
 8002348:	0f000001 	.word	0x0f000001

0800234c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002358:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002362:	2b00      	cmp	r3, #0
 8002364:	d13c      	bne.n	80023e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d12b      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002384:	2b00      	cmp	r3, #0
 8002386:	d127      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d006      	beq.n	80023a4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d119      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0220 	bic.w	r2, r2, #32
 80023b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7fe fe53 	bl	8001084 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023de:	e00e      	b.n	80023fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fd85 	bl	8001efc <HAL_ADC_ErrorCallback>
}
 80023f2:	e004      	b.n	80023fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
}
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b084      	sub	sp, #16
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7fe fe27 	bl	8001068 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800242e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff fd5a 	bl	8001efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	@ (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	@ (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	@ (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	@ (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	@ (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	@ 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	@ 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff29 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff3e 	bl	8002498 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff8e 	bl	8002544 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5d 	bl	80024f0 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff31 	bl	80024b4 <__NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffa2 	bl	80025ac <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff fab4 	bl	8001bec <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e099      	b.n	80027c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b0:	e00f      	b.n	80026d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b2:	f7ff fa9b 	bl	8001bec <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b05      	cmp	r3, #5
 80026be:	d908      	bls.n	80026d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e078      	b.n	80027c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1e8      	bne.n	80026b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <HAL_DMA_Init+0x158>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800270a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002716:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2b04      	cmp	r3, #4
 800272a:	d107      	bne.n	800273c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	4313      	orrs	r3, r2
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	4313      	orrs	r3, r2
 800275c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	2b04      	cmp	r3, #4
 8002764:	d117      	bne.n	8002796 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 fa6f 	bl	8002c5c <DMA_CheckFifoParam>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002792:	2301      	movs	r3, #1
 8002794:	e016      	b.n	80027c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa26 	bl	8002bf0 <DMA_CalcBaseAndBitshift>
 80027a4:	4603      	mov	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	223f      	movs	r2, #63	@ 0x3f
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	f010803f 	.word	0xf010803f

080027d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DMA_Start_IT+0x26>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e040      	b.n	8002878 <HAL_DMA_Start_IT+0xa8>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d12f      	bne.n	800286a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f9b8 	bl	8002b94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002828:	223f      	movs	r2, #63	@ 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0216 	orr.w	r2, r2, #22
 800283e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	e005      	b.n	8002876 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002876:	7dfb      	ldrb	r3, [r7, #23]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800288c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ac8 <HAL_DMA_IRQHandler+0x248>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a8e      	ldr	r2, [pc, #568]	@ (8002acc <HAL_DMA_IRQHandler+0x24c>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028aa:	2208      	movs	r2, #8
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	2208      	movs	r2, #8
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f0:	2201      	movs	r2, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002926:	2204      	movs	r2, #4
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002944:	2204      	movs	r2, #4
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295c:	2210      	movs	r2, #16
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d043      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03c      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800297a:	2210      	movs	r2, #16
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d018      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
 80029ae:	e01f      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e016      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0208 	bic.w	r2, r2, #8
 80029de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f4:	2220      	movs	r2, #32
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 808f 	beq.w	8002b20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8087 	beq.w	8002b20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a16:	2220      	movs	r2, #32
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d136      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0216 	bic.w	r2, r2, #22
 8002a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x1da>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0208 	bic.w	r2, r2, #8
 8002a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a6e:	223f      	movs	r2, #63	@ 0x3f
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d07e      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
        }
        return;
 8002a96:	e079      	b.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01d      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10d      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d031      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e02c      	b.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
 8002ac6:	bf00      	nop
 8002ac8:	20000008 	.word	0x20000008
 8002acc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e01e      	b.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10f      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0210 	bic.w	r2, r2, #16
 8002afe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d032      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2205      	movs	r2, #5
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d307      	bcc.n	8002b68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f2      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x2cc>
 8002b66:	e000      	b.n	8002b6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
 8002b8a:	e000      	b.n	8002b8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b8c:	bf00      	nop
    }
  }
}
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b40      	cmp	r3, #64	@ 0x40
 8002bc0:	d108      	bne.n	8002bd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bd2:	e007      	b.n	8002be4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	3b10      	subs	r3, #16
 8002c00:	4a14      	ldr	r2, [pc, #80]	@ (8002c54 <DMA_CalcBaseAndBitshift+0x64>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c0a:	4a13      	ldr	r2, [pc, #76]	@ (8002c58 <DMA_CalcBaseAndBitshift+0x68>)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d909      	bls.n	8002c32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	1d1a      	adds	r2, r3, #4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c30:	e007      	b.n	8002c42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	aaaaaaab 	.word	0xaaaaaaab
 8002c58:	08004750 	.word	0x08004750

08002c5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11f      	bne.n	8002cb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d856      	bhi.n	8002d2a <DMA_CheckFifoParam+0xce>
 8002c7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c84 <DMA_CheckFifoParam+0x28>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002ca7 	.word	0x08002ca7
 8002c8c:	08002c95 	.word	0x08002c95
 8002c90:	08002d2b 	.word	0x08002d2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d046      	beq.n	8002d2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca4:	e043      	b.n	8002d2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cae:	d140      	bne.n	8002d32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e03d      	b.n	8002d32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cbe:	d121      	bne.n	8002d04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d837      	bhi.n	8002d36 <DMA_CheckFifoParam+0xda>
 8002cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002ccc <DMA_CheckFifoParam+0x70>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002ce3 	.word	0x08002ce3
 8002cd4:	08002cdd 	.word	0x08002cdd
 8002cd8:	08002cf5 	.word	0x08002cf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce0:	e030      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d025      	beq.n	8002d3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf2:	e022      	b.n	8002d3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cfc:	d11f      	bne.n	8002d3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d02:	e01c      	b.n	8002d3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d903      	bls.n	8002d12 <DMA_CheckFifoParam+0xb6>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d003      	beq.n	8002d18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d10:	e018      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      break;
 8002d16:	e015      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00e      	beq.n	8002d42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      break;
 8002d28:	e00b      	b.n	8002d42 <DMA_CheckFifoParam+0xe6>
      break;
 8002d2a:	bf00      	nop
 8002d2c:	e00a      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d2e:	bf00      	nop
 8002d30:	e008      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d32:	bf00      	nop
 8002d34:	e006      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d36:	bf00      	nop
 8002d38:	e004      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e002      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d3e:	bf00      	nop
 8002d40:	e000      	b.n	8002d44 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
    }
  } 
  
  return status; 
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop

08002d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
 8002d6e:	e16b      	b.n	8003048 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d70:	2201      	movs	r2, #1
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	f040 815a 	bne.w	8003042 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d005      	beq.n	8002da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d130      	bne.n	8002e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	2203      	movs	r2, #3
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0201 	and.w	r2, r3, #1
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d017      	beq.n	8002e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2203      	movs	r2, #3
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0303 	and.w	r3, r3, #3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d123      	bne.n	8002e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	08da      	lsrs	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3208      	adds	r2, #8
 8002e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	220f      	movs	r2, #15
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	08da      	lsrs	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3208      	adds	r2, #8
 8002e92:	69b9      	ldr	r1, [r7, #24]
 8002e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0203 	and.w	r2, r3, #3
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b4 	beq.w	8003042 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b60      	ldr	r3, [pc, #384]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	4a5f      	ldr	r2, [pc, #380]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eea:	4b5d      	ldr	r3, [pc, #372]	@ (8003060 <HAL_GPIO_Init+0x30c>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8003064 <HAL_GPIO_Init+0x310>)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	3302      	adds	r3, #2
 8002efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	220f      	movs	r2, #15
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a52      	ldr	r2, [pc, #328]	@ (8003068 <HAL_GPIO_Init+0x314>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <HAL_GPIO_Init+0x226>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a51      	ldr	r2, [pc, #324]	@ (800306c <HAL_GPIO_Init+0x318>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d025      	beq.n	8002f76 <HAL_GPIO_Init+0x222>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	@ (8003070 <HAL_GPIO_Init+0x31c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01f      	beq.n	8002f72 <HAL_GPIO_Init+0x21e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4f      	ldr	r2, [pc, #316]	@ (8003074 <HAL_GPIO_Init+0x320>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d019      	beq.n	8002f6e <HAL_GPIO_Init+0x21a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4e      	ldr	r2, [pc, #312]	@ (8003078 <HAL_GPIO_Init+0x324>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <HAL_GPIO_Init+0x216>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4d      	ldr	r2, [pc, #308]	@ (800307c <HAL_GPIO_Init+0x328>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00d      	beq.n	8002f66 <HAL_GPIO_Init+0x212>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4c      	ldr	r2, [pc, #304]	@ (8003080 <HAL_GPIO_Init+0x32c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <HAL_GPIO_Init+0x20e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a4b      	ldr	r2, [pc, #300]	@ (8003084 <HAL_GPIO_Init+0x330>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_GPIO_Init+0x20a>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e00e      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f5e:	2308      	movs	r3, #8
 8002f60:	e00c      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f62:	2306      	movs	r3, #6
 8002f64:	e00a      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f66:	2305      	movs	r3, #5
 8002f68:	e008      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	e006      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e004      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_GPIO_Init+0x228>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	f002 0203 	and.w	r2, r2, #3
 8002f82:	0092      	lsls	r2, r2, #2
 8002f84:	4093      	lsls	r3, r2
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f8c:	4935      	ldr	r1, [pc, #212]	@ (8003064 <HAL_GPIO_Init+0x310>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	3302      	adds	r3, #2
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fbe:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fc4:	4b30      	ldr	r3, [pc, #192]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe8:	4a27      	ldr	r2, [pc, #156]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fee:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <HAL_GPIO_Init+0x334>)
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003018:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_GPIO_Init+0x334>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800303c:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <HAL_GPIO_Init+0x334>)
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b0f      	cmp	r3, #15
 800304c:	f67f ae90 	bls.w	8002d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop
 8003054:	3724      	adds	r7, #36	@ 0x24
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40013800 	.word	0x40013800
 8003068:	40020000 	.word	0x40020000
 800306c:	40020400 	.word	0x40020400
 8003070:	40020800 	.word	0x40020800
 8003074:	40020c00 	.word	0x40020c00
 8003078:	40021000 	.word	0x40021000
 800307c:	40021400 	.word	0x40021400
 8003080:	40021800 	.word	0x40021800
 8003084:	40021c00 	.word	0x40021c00
 8003088:	40013c00 	.word	0x40013c00

0800308c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691a      	ldr	r2, [r3, #16]
 800309c:	887b      	ldrh	r3, [r7, #2]
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e001      	b.n	80030ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_RCC_OscConfig>:
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_OscConfig+0x12>
 80030fe:	2301      	movs	r3, #1
 8003100:	e267      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d075      	beq.n	80031fa <HAL_RCC_OscConfig+0x10a>
 800310e:	4b88      	ldr	r3, [pc, #544]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d00c      	beq.n	8003134 <HAL_RCC_OscConfig+0x44>
 800311a:	4b85      	ldr	r3, [pc, #532]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b08      	cmp	r3, #8
 8003124:	d112      	bne.n	800314c <HAL_RCC_OscConfig+0x5c>
 8003126:	4b82      	ldr	r3, [pc, #520]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800312e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003132:	d10b      	bne.n	800314c <HAL_RCC_OscConfig+0x5c>
 8003134:	4b7e      	ldr	r3, [pc, #504]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05b      	beq.n	80031f8 <HAL_RCC_OscConfig+0x108>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d157      	bne.n	80031f8 <HAL_RCC_OscConfig+0x108>
 8003148:	2301      	movs	r3, #1
 800314a:	e242      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003154:	d106      	bne.n	8003164 <HAL_RCC_OscConfig+0x74>
 8003156:	4b76      	ldr	r3, [pc, #472]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a75      	ldr	r2, [pc, #468]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e01d      	b.n	80031a0 <HAL_RCC_OscConfig+0xb0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x98>
 800316e:	4b70      	ldr	r3, [pc, #448]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a6f      	ldr	r2, [pc, #444]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	4b6d      	ldr	r3, [pc, #436]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6c      	ldr	r2, [pc, #432]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0xb0>
 8003188:	4b69      	ldr	r3, [pc, #420]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a68      	ldr	r2, [pc, #416]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b66      	ldr	r3, [pc, #408]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a65      	ldr	r2, [pc, #404]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d013      	beq.n	80031d0 <HAL_RCC_OscConfig+0xe0>
 80031a8:	f7fe fd20 	bl	8001bec <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0xd2>
 80031b0:	f7fe fd1c 	bl	8001bec <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	@ 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xd2>
 80031be:	2303      	movs	r3, #3
 80031c0:	e207      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80031c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCC_OscConfig+0xc0>
 80031ce:	e014      	b.n	80031fa <HAL_RCC_OscConfig+0x10a>
 80031d0:	f7fe fd0c 	bl	8001bec <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0xfa>
 80031d8:	f7fe fd08 	bl	8001bec <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0xfa>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e1f3      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80031ea:	4b51      	ldr	r3, [pc, #324]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f0      	bne.n	80031d8 <HAL_RCC_OscConfig+0xe8>
 80031f6:	e000      	b.n	80031fa <HAL_RCC_OscConfig+0x10a>
 80031f8:	bf00      	nop
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d063      	beq.n	80032ce <HAL_RCC_OscConfig+0x1de>
 8003206:	4b4a      	ldr	r3, [pc, #296]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00b      	beq.n	800322a <HAL_RCC_OscConfig+0x13a>
 8003212:	4b47      	ldr	r3, [pc, #284]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b08      	cmp	r3, #8
 800321c:	d11c      	bne.n	8003258 <HAL_RCC_OscConfig+0x168>
 800321e:	4b44      	ldr	r3, [pc, #272]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <HAL_RCC_OscConfig+0x168>
 800322a:	4b41      	ldr	r3, [pc, #260]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_RCC_OscConfig+0x152>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d001      	beq.n	8003242 <HAL_RCC_OscConfig+0x152>
 800323e:	2301      	movs	r3, #1
 8003240:	e1c7      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003242:	4b3b      	ldr	r3, [pc, #236]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4937      	ldr	r1, [pc, #220]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
 8003256:	e03a      	b.n	80032ce <HAL_RCC_OscConfig+0x1de>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_OscConfig+0x1b2>
 8003260:	4b34      	ldr	r3, [pc, #208]	@ (8003334 <HAL_RCC_OscConfig+0x244>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f7fe fcc1 	bl	8001bec <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x190>
 800326e:	f7fe fcbd 	bl	8001bec <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x190>
 800327c:	2303      	movs	r3, #3
 800327e:	e1a8      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003280:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x17e>
 800328c:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	4925      	ldr	r1, [pc, #148]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
 80032a0:	e015      	b.n	80032ce <HAL_RCC_OscConfig+0x1de>
 80032a2:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_RCC_OscConfig+0x244>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f7fe fca0 	bl	8001bec <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x1d2>
 80032b0:	f7fe fc9c 	bl	8001bec <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x1d2>
 80032be:	2303      	movs	r3, #3
 80032c0:	e187      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80032c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1c0>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d036      	beq.n	8003348 <HAL_RCC_OscConfig+0x258>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_RCC_OscConfig+0x220>
 80032e2:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <HAL_RCC_OscConfig+0x248>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	f7fe fc80 	bl	8001bec <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x212>
 80032f0:	f7fe fc7c 	bl	8001bec <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x212>
 80032fe:	2303      	movs	r3, #3
 8003300:	e167      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003302:	4b0b      	ldr	r3, [pc, #44]	@ (8003330 <HAL_RCC_OscConfig+0x240>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x200>
 800330e:	e01b      	b.n	8003348 <HAL_RCC_OscConfig+0x258>
 8003310:	4b09      	ldr	r3, [pc, #36]	@ (8003338 <HAL_RCC_OscConfig+0x248>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	f7fe fc69 	bl	8001bec <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]
 800331c:	e00e      	b.n	800333c <HAL_RCC_OscConfig+0x24c>
 800331e:	f7fe fc65 	bl	8001bec <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d907      	bls.n	800333c <HAL_RCC_OscConfig+0x24c>
 800332c:	2303      	movs	r3, #3
 800332e:	e150      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003330:	40023800 	.word	0x40023800
 8003334:	42470000 	.word	0x42470000
 8003338:	42470e80 	.word	0x42470e80
 800333c:	4b88      	ldr	r3, [pc, #544]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800333e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ea      	bne.n	800331e <HAL_RCC_OscConfig+0x22e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8097 	beq.w	8003484 <HAL_RCC_OscConfig+0x394>
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
 800335a:	4b81      	ldr	r3, [pc, #516]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10f      	bne.n	8003386 <HAL_RCC_OscConfig+0x296>
 8003366:	2300      	movs	r3, #0
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	4b7d      	ldr	r3, [pc, #500]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	4a7c      	ldr	r2, [pc, #496]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	@ 0x40
 8003376:	4b7a      	ldr	r3, [pc, #488]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	2301      	movs	r3, #1
 8003384:	75fb      	strb	r3, [r7, #23]
 8003386:	4b77      	ldr	r3, [pc, #476]	@ (8003564 <HAL_RCC_OscConfig+0x474>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338e:	2b00      	cmp	r3, #0
 8003390:	d118      	bne.n	80033c4 <HAL_RCC_OscConfig+0x2d4>
 8003392:	4b74      	ldr	r3, [pc, #464]	@ (8003564 <HAL_RCC_OscConfig+0x474>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a73      	ldr	r2, [pc, #460]	@ (8003564 <HAL_RCC_OscConfig+0x474>)
 8003398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	f7fe fc25 	bl	8001bec <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
 80033a6:	f7fe fc21 	bl	8001bec <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x2c8>
 80033b4:	2303      	movs	r3, #3
 80033b6:	e10c      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80033b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003564 <HAL_RCC_OscConfig+0x474>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x2b6>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <HAL_RCC_OscConfig+0x2ea>
 80033cc:	4b64      	ldr	r3, [pc, #400]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d0:	4a63      	ldr	r2, [pc, #396]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d8:	e01c      	b.n	8003414 <HAL_RCC_OscConfig+0x324>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0x30c>
 80033e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0x324>
 80033fc:	4b58      	ldr	r3, [pc, #352]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003400:	4a57      	ldr	r2, [pc, #348]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003402:	f023 0301 	bic.w	r3, r3, #1
 8003406:	6713      	str	r3, [r2, #112]	@ 0x70
 8003408:	4b55      	ldr	r3, [pc, #340]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	4a54      	ldr	r2, [pc, #336]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800340e:	f023 0304 	bic.w	r3, r3, #4
 8003412:	6713      	str	r3, [r2, #112]	@ 0x70
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d015      	beq.n	8003448 <HAL_RCC_OscConfig+0x358>
 800341c:	f7fe fbe6 	bl	8001bec <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]
 8003422:	e00a      	b.n	800343a <HAL_RCC_OscConfig+0x34a>
 8003424:	f7fe fbe2 	bl	8001bec <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x34a>
 8003436:	2303      	movs	r3, #3
 8003438:	e0cb      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 800343a:	4b49      	ldr	r3, [pc, #292]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ee      	beq.n	8003424 <HAL_RCC_OscConfig+0x334>
 8003446:	e014      	b.n	8003472 <HAL_RCC_OscConfig+0x382>
 8003448:	f7fe fbd0 	bl	8001bec <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]
 800344e:	e00a      	b.n	8003466 <HAL_RCC_OscConfig+0x376>
 8003450:	f7fe fbcc 	bl	8001bec <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800345e:	4293      	cmp	r3, r2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x376>
 8003462:	2303      	movs	r3, #3
 8003464:	e0b5      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003466:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1ee      	bne.n	8003450 <HAL_RCC_OscConfig+0x360>
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCC_OscConfig+0x394>
 8003478:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	4a38      	ldr	r2, [pc, #224]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003482:	6413      	str	r3, [r2, #64]	@ 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80a1 	beq.w	80035d0 <HAL_RCC_OscConfig+0x4e0>
 800348e:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d05c      	beq.n	8003554 <HAL_RCC_OscConfig+0x464>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d141      	bne.n	8003526 <HAL_RCC_OscConfig+0x436>
 80034a2:	4b31      	ldr	r3, [pc, #196]	@ (8003568 <HAL_RCC_OscConfig+0x478>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f7fe fba0 	bl	8001bec <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x3d2>
 80034b0:	f7fe fb9c 	bl	8001bec <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x3d2>
 80034be:	2303      	movs	r3, #3
 80034c0:	e087      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80034c2:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f0      	bne.n	80034b0 <HAL_RCC_OscConfig+0x3c0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	019b      	lsls	r3, r3, #6
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	085b      	lsrs	r3, r3, #1
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	491b      	ldr	r1, [pc, #108]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	604b      	str	r3, [r1, #4]
 80034f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003568 <HAL_RCC_OscConfig+0x478>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	f7fe fb75 	bl	8001bec <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x428>
 8003506:	f7fe fb71 	bl	8001bec <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x428>
 8003514:	2303      	movs	r3, #3
 8003516:	e05c      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x416>
 8003524:	e054      	b.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
 8003526:	4b10      	ldr	r3, [pc, #64]	@ (8003568 <HAL_RCC_OscConfig+0x478>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f7fe fb5e 	bl	8001bec <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x456>
 8003534:	f7fe fb5a 	bl	8001bec <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x456>
 8003542:	2303      	movs	r3, #3
 8003544:	e045      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <HAL_RCC_OscConfig+0x470>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x444>
 8003552:	e03d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x47c>
 800355c:	2301      	movs	r3, #1
 800355e:	e038      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 8003560:	40023800 	.word	0x40023800
 8003564:	40007000 	.word	0x40007000
 8003568:	42470060 	.word	0x42470060
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <HAL_RCC_OscConfig+0x4ec>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d028      	beq.n	80035cc <HAL_RCC_OscConfig+0x4dc>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	429a      	cmp	r2, r3
 8003586:	d121      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	429a      	cmp	r2, r3
 8003594:	d11a      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035a2:	0192      	lsls	r2, r2, #6
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d111      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b2:	085b      	lsrs	r3, r3, #1
 80035b4:	3b01      	subs	r3, #1
 80035b6:	041b      	lsls	r3, r3, #16
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d107      	bne.n	80035cc <HAL_RCC_OscConfig+0x4dc>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4e0>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	2300      	movs	r3, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800

080035e0 <HAL_RCC_ClockConfig>:
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_ClockConfig+0x14>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0cc      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 80035f4:	4b68      	ldr	r3, [pc, #416]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d90c      	bls.n	800361c <HAL_RCC_ClockConfig+0x3c>
 8003602:	4b65      	ldr	r3, [pc, #404]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	4b63      	ldr	r3, [pc, #396]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x3c>
 8003618:	2301      	movs	r3, #1
 800361a:	e0b8      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_ClockConfig+0x8a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x60>
 8003634:	4b59      	ldr	r3, [pc, #356]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a58      	ldr	r2, [pc, #352]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800363e:	6093      	str	r3, [r2, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x78>
 800364c:	4b53      	ldr	r3, [pc, #332]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a52      	ldr	r2, [pc, #328]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003656:	6093      	str	r3, [r2, #8]
 8003658:	4b50      	ldr	r3, [pc, #320]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	494d      	ldr	r1, [pc, #308]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d044      	beq.n	8003700 <HAL_RCC_ClockConfig+0x120>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d107      	bne.n	800368e <HAL_RCC_ClockConfig+0xae>
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d119      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
 800368a:	2301      	movs	r3, #1
 800368c:	e07f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d003      	beq.n	800369e <HAL_RCC_ClockConfig+0xbe>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d107      	bne.n	80036ae <HAL_RCC_ClockConfig+0xce>
 800369e:	4b3f      	ldr	r3, [pc, #252]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e06f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 80036ae:	4b3b      	ldr	r3, [pc, #236]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_RCC_ClockConfig+0xde>
 80036ba:	2301      	movs	r3, #1
 80036bc:	e067      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 80036be:	4b37      	ldr	r3, [pc, #220]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 0203 	bic.w	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4934      	ldr	r1, [pc, #208]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	608b      	str	r3, [r1, #8]
 80036d0:	f7fe fa8c 	bl	8001bec <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_ClockConfig+0x10e>
 80036d8:	f7fe fa88 	bl	8001bec <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_ClockConfig+0x10e>
 80036ea:	2303      	movs	r3, #3
 80036ec:	e04f      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 80036ee:	4b2b      	ldr	r3, [pc, #172]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 020c 	and.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d1eb      	bne.n	80036d8 <HAL_RCC_ClockConfig+0xf8>
 8003700:	4b25      	ldr	r3, [pc, #148]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d20c      	bcs.n	8003728 <HAL_RCC_ClockConfig+0x148>
 800370e:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x148>
 8003724:	2301      	movs	r3, #1
 8003726:	e032      	b.n	800378e <HAL_RCC_ClockConfig+0x1ae>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d008      	beq.n	8003746 <HAL_RCC_ClockConfig+0x166>
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	4916      	ldr	r1, [pc, #88]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d009      	beq.n	8003766 <HAL_RCC_ClockConfig+0x186>
 8003752:	4b12      	ldr	r3, [pc, #72]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	490e      	ldr	r1, [pc, #56]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
 8003766:	f000 f821 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800376a:	4602      	mov	r2, r0
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <HAL_RCC_ClockConfig+0x1bc>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	490a      	ldr	r1, [pc, #40]	@ (80037a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003778:	5ccb      	ldrb	r3, [r1, r3]
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a09      	ldr	r2, [pc, #36]	@ (80037a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b09      	ldr	r3, [pc, #36]	@ (80037a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe f9ec 	bl	8001b64 <HAL_InitTick>
 800378c:	2300      	movs	r3, #0
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023c00 	.word	0x40023c00
 800379c:	40023800 	.word	0x40023800
 80037a0:	08004740 	.word	0x08004740
 80037a4:	20000008 	.word	0x20000008
 80037a8:	2000000c 	.word	0x2000000c

080037ac <HAL_RCC_GetSysClockFreq>:
 80037ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b0:	b094      	sub	sp, #80	@ 0x50
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	2300      	movs	r3, #0
 80037b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b8:	2300      	movs	r3, #0
 80037ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037bc:	2300      	movs	r3, #0
 80037be:	643b      	str	r3, [r7, #64]	@ 0x40
 80037c0:	2300      	movs	r3, #0
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c4:	4b79      	ldr	r3, [pc, #484]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d00d      	beq.n	80037ec <HAL_RCC_GetSysClockFreq+0x40>
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	f200 80e1 	bhi.w	8003998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_RCC_GetSysClockFreq+0x34>
 80037da:	2b04      	cmp	r3, #4
 80037dc:	d003      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037de:	e0db      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037e0:	4b73      	ldr	r3, [pc, #460]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e4:	e0db      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1f2>
 80037e6:	4b73      	ldr	r3, [pc, #460]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80037e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ea:	e0d8      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1f2>
 80037ec:	4b6f      	ldr	r3, [pc, #444]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	4b6d      	ldr	r3, [pc, #436]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d063      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x11e>
 8003802:	4b6a      	ldr	r3, [pc, #424]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	2200      	movs	r2, #0
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800380c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003814:	633b      	str	r3, [r7, #48]	@ 0x30
 8003816:	2300      	movs	r3, #0
 8003818:	637b      	str	r3, [r7, #52]	@ 0x34
 800381a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800381e:	4622      	mov	r2, r4
 8003820:	462b      	mov	r3, r5
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003830:	0150      	lsls	r0, r2, #5
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4621      	mov	r1, r4
 8003838:	1a51      	subs	r1, r2, r1
 800383a:	6139      	str	r1, [r7, #16]
 800383c:	4629      	mov	r1, r5
 800383e:	eb63 0301 	sbc.w	r3, r3, r1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003850:	4659      	mov	r1, fp
 8003852:	018b      	lsls	r3, r1, #6
 8003854:	4651      	mov	r1, sl
 8003856:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800385a:	4651      	mov	r1, sl
 800385c:	018a      	lsls	r2, r1, #6
 800385e:	4651      	mov	r1, sl
 8003860:	ebb2 0801 	subs.w	r8, r2, r1
 8003864:	4659      	mov	r1, fp
 8003866:	eb63 0901 	sbc.w	r9, r3, r1
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003876:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800387a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800387e:	4690      	mov	r8, r2
 8003880:	4699      	mov	r9, r3
 8003882:	4623      	mov	r3, r4
 8003884:	eb18 0303 	adds.w	r3, r8, r3
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	462b      	mov	r3, r5
 800388c:	eb49 0303 	adc.w	r3, r9, r3
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800389e:	4629      	mov	r1, r5
 80038a0:	024b      	lsls	r3, r1, #9
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038a8:	4621      	mov	r1, r4
 80038aa:	024a      	lsls	r2, r1, #9
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b2:	2200      	movs	r2, #0
 80038b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038bc:	f7fc fc84 	bl	80001c8 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	e058      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x1d0>
 80038ca:	4b38      	ldr	r3, [pc, #224]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	2200      	movs	r2, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	4611      	mov	r1, r2
 80038d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038da:	623b      	str	r3, [r7, #32]
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	f04f 0000 	mov.w	r0, #0
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	0159      	lsls	r1, r3, #5
 80038f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f6:	0150      	lsls	r0, r2, #5
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4641      	mov	r1, r8
 80038fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb63 0b01 	sbc.w	fp, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003914:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003918:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800391c:	ebb2 040a 	subs.w	r4, r2, sl
 8003920:	eb63 050b 	sbc.w	r5, r3, fp
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	00eb      	lsls	r3, r5, #3
 800392e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003932:	00e2      	lsls	r2, r4, #3
 8003934:	4614      	mov	r4, r2
 8003936:	461d      	mov	r5, r3
 8003938:	4643      	mov	r3, r8
 800393a:	18e3      	adds	r3, r4, r3
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	464b      	mov	r3, r9
 8003940:	eb45 0303 	adc.w	r3, r5, r3
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003952:	4629      	mov	r1, r5
 8003954:	028b      	lsls	r3, r1, #10
 8003956:	4621      	mov	r1, r4
 8003958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800395c:	4621      	mov	r1, r4
 800395e:	028a      	lsls	r2, r1, #10
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	61fa      	str	r2, [r7, #28]
 800396c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003970:	f7fc fc2a 	bl	80001c8 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4613      	mov	r3, r2
 800397a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800397c:	4b0b      	ldr	r3, [pc, #44]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x200>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	643b      	str	r3, [r7, #64]	@ 0x40
 800398c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800398e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x1f2>
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800399a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800399c:	bf00      	nop
 800399e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039a0:	4618      	mov	r0, r3
 80039a2:	3750      	adds	r7, #80	@ 0x50
 80039a4:	46bd      	mov	sp, r7
 80039a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <HAL_TIM_Base_Init>:
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fd ffcc 	bl	800197c <HAL_TIM_Base_MspInit>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 fad8 	bl	8003fac <TIM_Base_SetConfig>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_PWM_Init>:
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_TIM_PWM_Init+0x12>
 8003a64:	2301      	movs	r3, #1
 8003a66:	e041      	b.n	8003aec <HAL_TIM_PWM_Init+0x96>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_TIM_PWM_Init+0x2c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f839 	bl	8003af4 <HAL_TIM_PWM_MspInit>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f000 fa89 	bl	8003fac <TIM_Base_SetConfig>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003aea:	2300      	movs	r3, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_PWM_MspInit>:
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_PWM_Start>:
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x24>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e022      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d109      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x3e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	bf14      	ite	ne
 8003b3e:	2301      	movne	r3, #1
 8003b40:	2300      	moveq	r3, #0
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	e015      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d109      	bne.n	8003b60 <HAL_TIM_PWM_Start+0x58>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	bf14      	ite	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	2300      	moveq	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e008      	b.n	8003b72 <HAL_TIM_PWM_Start+0x6a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_TIM_PWM_Start+0x72>
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07c      	b.n	8003c74 <HAL_TIM_PWM_Start+0x16c>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0x82>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b88:	e013      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0x92>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xa2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ba8:	e003      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xaa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fce6 	bl	800458c <TIM_CCxChannelCmd>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8003c7c <HAL_TIM_PWM_Start+0x174>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_PWM_Start+0xcc>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2c      	ldr	r2, [pc, #176]	@ (8003c80 <HAL_TIM_PWM_Start+0x178>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_PWM_Start+0xd0>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_PWM_Start+0xd2>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_TIM_PWM_Start+0xe6>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a22      	ldr	r2, [pc, #136]	@ (8003c7c <HAL_TIM_PWM_Start+0x174>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c00:	d01d      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a1f      	ldr	r2, [pc, #124]	@ (8003c84 <HAL_TIM_PWM_Start+0x17c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	@ (8003c88 <HAL_TIM_PWM_Start+0x180>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003c8c <HAL_TIM_PWM_Start+0x184>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a16      	ldr	r2, [pc, #88]	@ (8003c80 <HAL_TIM_PWM_Start+0x178>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <HAL_TIM_PWM_Start+0x188>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x136>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a16      	ldr	r2, [pc, #88]	@ (8003c94 <HAL_TIM_PWM_Start+0x18c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d111      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x15a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	60fb      	str	r3, [r7, #12]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d010      	beq.n	8003c72 <HAL_TIM_PWM_Start+0x16a>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e007      	b.n	8003c72 <HAL_TIM_PWM_Start+0x16a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010400 	.word	0x40010400
 8003c84:	40000400 	.word	0x40000400
 8003c88:	40000800 	.word	0x40000800
 8003c8c:	40000c00 	.word	0x40000c00
 8003c90:	40014000 	.word	0x40014000
 8003c94:	40001800 	.word	0x40001800

08003c98 <HAL_TIM_PWM_ConfigChannel>:
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0ae      	b.n	8003e14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	f200 809f 	bhi.w	8003e04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d01 	.word	0x08003d01
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e05 	.word	0x08003e05
 8003cd8:	08003e05 	.word	0x08003e05
 8003cdc:	08003d41 	.word	0x08003d41
 8003ce0:	08003e05 	.word	0x08003e05
 8003ce4:	08003e05 	.word	0x08003e05
 8003ce8:	08003e05 	.word	0x08003e05
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003e05 	.word	0x08003e05
 8003cf4:	08003e05 	.word	0x08003e05
 8003cf8:	08003e05 	.word	0x08003e05
 8003cfc:	08003dc3 	.word	0x08003dc3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68b9      	ldr	r1, [r7, #8]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f9f6 	bl	80040f8 <TIM_OC1_SetConfig>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0208 	orr.w	r2, r2, #8
 8003d1a:	619a      	str	r2, [r3, #24]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699a      	ldr	r2, [r3, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0204 	bic.w	r2, r2, #4
 8003d2a:	619a      	str	r2, [r3, #24]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6999      	ldr	r1, [r3, #24]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691a      	ldr	r2, [r3, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	619a      	str	r2, [r3, #24]
 8003d3e:	e064      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa46 	bl	80041d8 <TIM_OC2_SetConfig>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5a:	619a      	str	r2, [r3, #24]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6a:	619a      	str	r2, [r3, #24]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6999      	ldr	r1, [r3, #24]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	021a      	lsls	r2, r3, #8
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	619a      	str	r2, [r3, #24]
 8003d80:	e043      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68b9      	ldr	r1, [r7, #8]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fa9b 	bl	80042c4 <TIM_OC3_SetConfig>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0208 	orr.w	r2, r2, #8
 8003d9c:	61da      	str	r2, [r3, #28]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	61da      	str	r2, [r3, #28]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69d9      	ldr	r1, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	61da      	str	r2, [r3, #28]
 8003dc0:	e023      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 faef 	bl	80043ac <TIM_OC4_SetConfig>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ddc:	61da      	str	r2, [r3, #28]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69d9      	ldr	r1, [r3, #28]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	021a      	lsls	r2, r3, #8
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	61da      	str	r2, [r3, #28]
 8003e02:	e002      	b.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003e04:	2301      	movs	r3, #1
 8003e06:	75fb      	strb	r3, [r7, #23]
 8003e08:	bf00      	nop
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003e12:	7dfb      	ldrb	r3, [r7, #23]
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_ConfigClockSource>:
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	2300      	movs	r3, #0
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_TIM_ConfigClockSource+0x1c>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e0b4      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x186>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xd4>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7e:	f000 8086 	beq.w	8003f8e <HAL_TIM_ConfigClockSource+0x172>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b70      	cmp	r3, #112	@ 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xa6>
 8003e8c:	2b70      	cmp	r3, #112	@ 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b60      	cmp	r3, #96	@ 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x11a>
 8003e94:	2b60      	cmp	r3, #96	@ 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b50      	cmp	r3, #80	@ 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xfa>
 8003e9c:	2b50      	cmp	r3, #80	@ 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b40      	cmp	r3, #64	@ 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x13a>
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b30      	cmp	r3, #48	@ 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f000 fb3b 	bl	800454c <TIM_ETR_SetConfig>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	e04f      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f000 fb24 	bl	800454c <TIM_ETR_SetConfig>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	e03c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fa98 	bl	8004458 <TIM_TI1_ConfigInputStage>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	@ 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 faf1 	bl	8004516 <TIM_ITRx_SetConfig>
 8003f34:	e02c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fab7 	bl	80044b6 <TIM_TI2_ConfigInputStage>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	@ 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fae1 	bl	8004516 <TIM_ITRx_SetConfig>
 8003f54:	e01c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fa78 	bl	8004458 <TIM_TI1_ConfigInputStage>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	@ 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fad1 	bl	8004516 <TIM_ITRx_SetConfig>
 8003f74:	e00c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 fac8 	bl	8004516 <TIM_ITRx_SetConfig>
 8003f86:	e003      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x174>
 8003f8e:	bf00      	nop
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <TIM_Base_SetConfig>:
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a43      	ldr	r2, [pc, #268]	@ (80040cc <TIM_Base_SetConfig+0x120>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d013      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a40      	ldr	r2, [pc, #256]	@ (80040d0 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3f      	ldr	r2, [pc, #252]	@ (80040d4 <TIM_Base_SetConfig+0x128>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3e      	ldr	r2, [pc, #248]	@ (80040d8 <TIM_Base_SetConfig+0x12c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3d      	ldr	r2, [pc, #244]	@ (80040dc <TIM_Base_SetConfig+0x130>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d108      	bne.n	8003ffe <TIM_Base_SetConfig+0x52>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a32      	ldr	r2, [pc, #200]	@ (80040cc <TIM_Base_SetConfig+0x120>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d027      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2f      	ldr	r2, [pc, #188]	@ (80040d0 <TIM_Base_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d023      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2e      	ldr	r2, [pc, #184]	@ (80040d4 <TIM_Base_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <TIM_Base_SetConfig+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2c      	ldr	r2, [pc, #176]	@ (80040dc <TIM_Base_SetConfig+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d017      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a2b      	ldr	r2, [pc, #172]	@ (80040e0 <TIM_Base_SetConfig+0x134>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d013      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <TIM_Base_SetConfig+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00f      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a29      	ldr	r2, [pc, #164]	@ (80040e8 <TIM_Base_SetConfig+0x13c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00b      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a28      	ldr	r2, [pc, #160]	@ (80040ec <TIM_Base_SetConfig+0x140>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a27      	ldr	r2, [pc, #156]	@ (80040f0 <TIM_Base_SetConfig+0x144>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a26      	ldr	r2, [pc, #152]	@ (80040f4 <TIM_Base_SetConfig+0x148>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d108      	bne.n	8004070 <TIM_Base_SetConfig+0xc4>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	629a      	str	r2, [r3, #40]	@ 0x28
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a0e      	ldr	r2, [pc, #56]	@ (80040cc <TIM_Base_SetConfig+0x120>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0xf2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a10      	ldr	r2, [pc, #64]	@ (80040dc <TIM_Base_SetConfig+0x130>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d103      	bne.n	80040a6 <TIM_Base_SetConfig+0xfa>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f043 0204 	orr.w	r2, r3, #4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	615a      	str	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800
 80040ec:	40001800 	.word	0x40001800
 80040f0:	40001c00 	.word	0x40001c00
 80040f4:	40002000 	.word	0x40002000

080040f8 <TIM_OC1_SetConfig>:
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	f023 0201 	bic.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	621a      	str	r2, [r3, #32]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0303 	bic.w	r3, r3, #3
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f023 0302 	bic.w	r3, r3, #2
 8004140:	617b      	str	r3, [r7, #20]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a20      	ldr	r2, [pc, #128]	@ (80041d0 <TIM_OC1_SetConfig+0xd8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC1_SetConfig+0x64>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a1f      	ldr	r2, [pc, #124]	@ (80041d4 <TIM_OC1_SetConfig+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10c      	bne.n	8004176 <TIM_OC1_SetConfig+0x7e>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0308 	bic.w	r3, r3, #8
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a15      	ldr	r2, [pc, #84]	@ (80041d0 <TIM_OC1_SetConfig+0xd8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_OC1_SetConfig+0x8e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a14      	ldr	r2, [pc, #80]	@ (80041d4 <TIM_OC1_SetConfig+0xdc>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d111      	bne.n	80041aa <TIM_OC1_SetConfig+0xb2>
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	619a      	str	r2, [r3, #24]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400

080041d8 <TIM_OC2_SetConfig>:
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f023 0210 	bic.w	r2, r3, #16
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a22      	ldr	r2, [pc, #136]	@ (80042bc <TIM_OC2_SetConfig+0xe4>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC2_SetConfig+0x68>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a21      	ldr	r2, [pc, #132]	@ (80042c0 <TIM_OC2_SetConfig+0xe8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <TIM_OC2_SetConfig+0x84>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <TIM_OC2_SetConfig+0xe4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0x94>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a16      	ldr	r2, [pc, #88]	@ (80042c0 <TIM_OC2_SetConfig+0xe8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xbc>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40010400 	.word	0x40010400

080042c4 <TIM_OC3_SetConfig>:
 80042c4:	b480      	push	{r7}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	621a      	str	r2, [r3, #32]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	021b      	lsls	r3, r3, #8
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a21      	ldr	r2, [pc, #132]	@ (80043a4 <TIM_OC3_SetConfig+0xe0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d003      	beq.n	800432a <TIM_OC3_SetConfig+0x66>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <TIM_OC3_SetConfig+0xe4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d10d      	bne.n	8004346 <TIM_OC3_SetConfig+0x82>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004330:	617b      	str	r3, [r7, #20]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	021b      	lsls	r3, r3, #8
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_OC3_SetConfig+0xe0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_OC3_SetConfig+0x92>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <TIM_OC3_SetConfig+0xe4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d113      	bne.n	800437e <TIM_OC3_SetConfig+0xba>
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	605a      	str	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	61da      	str	r2, [r3, #28]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40010000 	.word	0x40010000
 80043a8:	40010400 	.word	0x40010400

080043ac <TIM_OC4_SetConfig>:
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043f6:	613b      	str	r3, [r7, #16]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	031b      	lsls	r3, r3, #12
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <TIM_OC4_SetConfig+0xa4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_OC4_SetConfig+0x68>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a11      	ldr	r2, [pc, #68]	@ (8004454 <TIM_OC4_SetConfig+0xa8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d109      	bne.n	8004428 <TIM_OC4_SetConfig+0x7c>
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	61da      	str	r2, [r3, #28]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_TI1_ConfigInputStage>:
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	f023 0201 	bic.w	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	621a      	str	r2, [r3, #32]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	011b      	lsls	r3, r3, #4
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 030a 	bic.w	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	619a      	str	r2, [r3, #24]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	621a      	str	r2, [r3, #32]
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <TIM_TI2_ConfigInputStage>:
 80044b6:	b480      	push	{r7}
 80044b8:	b087      	sub	sp, #28
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	607a      	str	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f023 0210 	bic.w	r2, r3, #16
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	621a      	str	r2, [r3, #32]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	619a      	str	r2, [r3, #24]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <TIM_ITRx_SetConfig>:
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	f043 0307 	orr.w	r3, r3, #7
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	bf00      	nop
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <TIM_ETR_SetConfig>:
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	431a      	orrs	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <TIM_CCxChannelCmd>:
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	f003 031f 	and.w	r3, r3, #31
 800459e:	2201      	movs	r2, #1
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	401a      	ands	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1a      	ldr	r2, [r3, #32]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_TIMEx_MasterConfigSynchronization>:
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e05a      	b.n	80046a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a21      	ldr	r2, [pc, #132]	@ (80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463c:	d01d      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1d      	ldr	r2, [pc, #116]	@ (80046b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1b      	ldr	r2, [pc, #108]	@ (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1a      	ldr	r2, [pc, #104]	@ (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a15      	ldr	r2, [pc, #84]	@ (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d10c      	bne.n	8004694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80046a4:	2300      	movs	r3, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40001800 	.word	0x40001800

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <__libc_init_array>:
 80046e0:	b570      	push	{r4, r5, r6, lr}
 80046e2:	4d0d      	ldr	r5, [pc, #52]	@ (8004718 <__libc_init_array+0x38>)
 80046e4:	4c0d      	ldr	r4, [pc, #52]	@ (800471c <__libc_init_array+0x3c>)
 80046e6:	1b64      	subs	r4, r4, r5
 80046e8:	10a4      	asrs	r4, r4, #2
 80046ea:	2600      	movs	r6, #0
 80046ec:	42a6      	cmp	r6, r4
 80046ee:	d109      	bne.n	8004704 <__libc_init_array+0x24>
 80046f0:	4d0b      	ldr	r5, [pc, #44]	@ (8004720 <__libc_init_array+0x40>)
 80046f2:	4c0c      	ldr	r4, [pc, #48]	@ (8004724 <__libc_init_array+0x44>)
 80046f4:	f000 f818 	bl	8004728 <_init>
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	2600      	movs	r6, #0
 80046fe:	42a6      	cmp	r6, r4
 8004700:	d105      	bne.n	800470e <__libc_init_array+0x2e>
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	f855 3b04 	ldr.w	r3, [r5], #4
 8004708:	4798      	blx	r3
 800470a:	3601      	adds	r6, #1
 800470c:	e7ee      	b.n	80046ec <__libc_init_array+0xc>
 800470e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004712:	4798      	blx	r3
 8004714:	3601      	adds	r6, #1
 8004716:	e7f2      	b.n	80046fe <__libc_init_array+0x1e>
 8004718:	08004760 	.word	0x08004760
 800471c:	08004760 	.word	0x08004760
 8004720:	08004760 	.word	0x08004760
 8004724:	08004764 	.word	0x08004764

08004728 <_init>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	bf00      	nop
 800472c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800472e:	bc08      	pop	{r3}
 8004730:	469e      	mov	lr, r3
 8004732:	4770      	bx	lr

08004734 <_fini>:
 8004734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004736:	bf00      	nop
 8004738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473a:	bc08      	pop	{r3}
 800473c:	469e      	mov	lr, r3
 800473e:	4770      	bx	lr
