
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d6c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ef4  08004ef4  00005ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f0c  08004f0c  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f14  08004f14  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004f1c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          000001d0  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001e4  200001e4  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac45  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4a  00000000  00000000  00010c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  000127d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093d  00000000  00000000  000133c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213c8  00000000  00000000  00013d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d13d  00000000  00000000  000350cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d239b  00000000  00000000  0004220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001145a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032ec  00000000  00000000  001145e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000092  00000000  00000000  001178d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004edc 	.word	0x08004edc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004edc 	.word	0x08004edc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b988 	b.w	8000afc <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	468e      	mov	lr, r1
 800080c:	4604      	mov	r4, r0
 800080e:	4688      	mov	r8, r1
 8000810:	2b00      	cmp	r3, #0
 8000812:	d14a      	bne.n	80008aa <__udivmoddi4+0xa6>
 8000814:	428a      	cmp	r2, r1
 8000816:	4617      	mov	r7, r2
 8000818:	d962      	bls.n	80008e0 <__udivmoddi4+0xdc>
 800081a:	fab2 f682 	clz	r6, r2
 800081e:	b14e      	cbz	r6, 8000834 <__udivmoddi4+0x30>
 8000820:	f1c6 0320 	rsb	r3, r6, #32
 8000824:	fa01 f806 	lsl.w	r8, r1, r6
 8000828:	fa20 f303 	lsr.w	r3, r0, r3
 800082c:	40b7      	lsls	r7, r6
 800082e:	ea43 0808 	orr.w	r8, r3, r8
 8000832:	40b4      	lsls	r4, r6
 8000834:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000838:	fa1f fc87 	uxth.w	ip, r7
 800083c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000840:	0c23      	lsrs	r3, r4, #16
 8000842:	fb0e 8811 	mls	r8, lr, r1, r8
 8000846:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800084a:	fb01 f20c 	mul.w	r2, r1, ip
 800084e:	429a      	cmp	r2, r3
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x62>
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	f101 30ff 	add.w	r0, r1, #4294967295
 8000858:	f080 80ea 	bcs.w	8000a30 <__udivmoddi4+0x22c>
 800085c:	429a      	cmp	r2, r3
 800085e:	f240 80e7 	bls.w	8000a30 <__udivmoddi4+0x22c>
 8000862:	3902      	subs	r1, #2
 8000864:	443b      	add	r3, r7
 8000866:	1a9a      	subs	r2, r3, r2
 8000868:	b2a3      	uxth	r3, r4
 800086a:	fbb2 f0fe 	udiv	r0, r2, lr
 800086e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000872:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000876:	fb00 fc0c 	mul.w	ip, r0, ip
 800087a:	459c      	cmp	ip, r3
 800087c:	d909      	bls.n	8000892 <__udivmoddi4+0x8e>
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	f100 32ff 	add.w	r2, r0, #4294967295
 8000884:	f080 80d6 	bcs.w	8000a34 <__udivmoddi4+0x230>
 8000888:	459c      	cmp	ip, r3
 800088a:	f240 80d3 	bls.w	8000a34 <__udivmoddi4+0x230>
 800088e:	443b      	add	r3, r7
 8000890:	3802      	subs	r0, #2
 8000892:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000896:	eba3 030c 	sub.w	r3, r3, ip
 800089a:	2100      	movs	r1, #0
 800089c:	b11d      	cbz	r5, 80008a6 <__udivmoddi4+0xa2>
 800089e:	40f3      	lsrs	r3, r6
 80008a0:	2200      	movs	r2, #0
 80008a2:	e9c5 3200 	strd	r3, r2, [r5]
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d905      	bls.n	80008ba <__udivmoddi4+0xb6>
 80008ae:	b10d      	cbz	r5, 80008b4 <__udivmoddi4+0xb0>
 80008b0:	e9c5 0100 	strd	r0, r1, [r5]
 80008b4:	2100      	movs	r1, #0
 80008b6:	4608      	mov	r0, r1
 80008b8:	e7f5      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008ba:	fab3 f183 	clz	r1, r3
 80008be:	2900      	cmp	r1, #0
 80008c0:	d146      	bne.n	8000950 <__udivmoddi4+0x14c>
 80008c2:	4573      	cmp	r3, lr
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xc8>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 8105 	bhi.w	8000ad6 <__udivmoddi4+0x2d2>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	4690      	mov	r8, r2
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e5      	beq.n	80008a6 <__udivmoddi4+0xa2>
 80008da:	e9c5 4800 	strd	r4, r8, [r5]
 80008de:	e7e2      	b.n	80008a6 <__udivmoddi4+0xa2>
 80008e0:	2a00      	cmp	r2, #0
 80008e2:	f000 8090 	beq.w	8000a06 <__udivmoddi4+0x202>
 80008e6:	fab2 f682 	clz	r6, r2
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	f040 80a4 	bne.w	8000a38 <__udivmoddi4+0x234>
 80008f0:	1a8a      	subs	r2, r1, r2
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f8:	b280      	uxth	r0, r0
 80008fa:	b2bc      	uxth	r4, r7
 80008fc:	2101      	movs	r1, #1
 80008fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000902:	fb0e 221c 	mls	r2, lr, ip, r2
 8000906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800090a:	fb04 f20c 	mul.w	r2, r4, ip
 800090e:	429a      	cmp	r2, r3
 8000910:	d907      	bls.n	8000922 <__udivmoddi4+0x11e>
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000918:	d202      	bcs.n	8000920 <__udivmoddi4+0x11c>
 800091a:	429a      	cmp	r2, r3
 800091c:	f200 80e0 	bhi.w	8000ae0 <__udivmoddi4+0x2dc>
 8000920:	46c4      	mov	ip, r8
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	fbb3 f2fe 	udiv	r2, r3, lr
 8000928:	fb0e 3312 	mls	r3, lr, r2, r3
 800092c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000930:	fb02 f404 	mul.w	r4, r2, r4
 8000934:	429c      	cmp	r4, r3
 8000936:	d907      	bls.n	8000948 <__udivmoddi4+0x144>
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	f102 30ff 	add.w	r0, r2, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x142>
 8000940:	429c      	cmp	r4, r3
 8000942:	f200 80ca 	bhi.w	8000ada <__udivmoddi4+0x2d6>
 8000946:	4602      	mov	r2, r0
 8000948:	1b1b      	subs	r3, r3, r4
 800094a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800094e:	e7a5      	b.n	800089c <__udivmoddi4+0x98>
 8000950:	f1c1 0620 	rsb	r6, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 f706 	lsr.w	r7, r2, r6
 800095a:	431f      	orrs	r7, r3
 800095c:	fa0e f401 	lsl.w	r4, lr, r1
 8000960:	fa20 f306 	lsr.w	r3, r0, r6
 8000964:	fa2e fe06 	lsr.w	lr, lr, r6
 8000968:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	fa1f fc87 	uxth.w	ip, r7
 8000976:	fbbe f0f9 	udiv	r0, lr, r9
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000980:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000984:	fb00 fe0c 	mul.w	lr, r0, ip
 8000988:	45a6      	cmp	lr, r4
 800098a:	fa02 f201 	lsl.w	r2, r2, r1
 800098e:	d909      	bls.n	80009a4 <__udivmoddi4+0x1a0>
 8000990:	193c      	adds	r4, r7, r4
 8000992:	f100 3aff 	add.w	sl, r0, #4294967295
 8000996:	f080 809c 	bcs.w	8000ad2 <__udivmoddi4+0x2ce>
 800099a:	45a6      	cmp	lr, r4
 800099c:	f240 8099 	bls.w	8000ad2 <__udivmoddi4+0x2ce>
 80009a0:	3802      	subs	r0, #2
 80009a2:	443c      	add	r4, r7
 80009a4:	eba4 040e 	sub.w	r4, r4, lr
 80009a8:	fa1f fe83 	uxth.w	lr, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80009bc:	45a4      	cmp	ip, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1ce>
 80009c0:	193c      	adds	r4, r7, r4
 80009c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80009c6:	f080 8082 	bcs.w	8000ace <__udivmoddi4+0x2ca>
 80009ca:	45a4      	cmp	ip, r4
 80009cc:	d97f      	bls.n	8000ace <__udivmoddi4+0x2ca>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	443c      	add	r4, r7
 80009d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009d6:	eba4 040c 	sub.w	r4, r4, ip
 80009da:	fba0 ec02 	umull	lr, ip, r0, r2
 80009de:	4564      	cmp	r4, ip
 80009e0:	4673      	mov	r3, lr
 80009e2:	46e1      	mov	r9, ip
 80009e4:	d362      	bcc.n	8000aac <__udivmoddi4+0x2a8>
 80009e6:	d05f      	beq.n	8000aa8 <__udivmoddi4+0x2a4>
 80009e8:	b15d      	cbz	r5, 8000a02 <__udivmoddi4+0x1fe>
 80009ea:	ebb8 0203 	subs.w	r2, r8, r3
 80009ee:	eb64 0409 	sbc.w	r4, r4, r9
 80009f2:	fa04 f606 	lsl.w	r6, r4, r6
 80009f6:	fa22 f301 	lsr.w	r3, r2, r1
 80009fa:	431e      	orrs	r6, r3
 80009fc:	40cc      	lsrs	r4, r1
 80009fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000a02:	2100      	movs	r1, #0
 8000a04:	e74f      	b.n	80008a6 <__udivmoddi4+0xa2>
 8000a06:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a0a:	0c01      	lsrs	r1, r0, #16
 8000a0c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a10:	b280      	uxth	r0, r0
 8000a12:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a16:	463b      	mov	r3, r7
 8000a18:	4638      	mov	r0, r7
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	46b8      	mov	r8, r7
 8000a1e:	46be      	mov	lr, r7
 8000a20:	2620      	movs	r6, #32
 8000a22:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a26:	eba2 0208 	sub.w	r2, r2, r8
 8000a2a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a2e:	e766      	b.n	80008fe <__udivmoddi4+0xfa>
 8000a30:	4601      	mov	r1, r0
 8000a32:	e718      	b.n	8000866 <__udivmoddi4+0x62>
 8000a34:	4610      	mov	r0, r2
 8000a36:	e72c      	b.n	8000892 <__udivmoddi4+0x8e>
 8000a38:	f1c6 0220 	rsb	r2, r6, #32
 8000a3c:	fa2e f302 	lsr.w	r3, lr, r2
 8000a40:	40b7      	lsls	r7, r6
 8000a42:	40b1      	lsls	r1, r6
 8000a44:	fa20 f202 	lsr.w	r2, r0, r2
 8000a48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a52:	b2bc      	uxth	r4, r7
 8000a54:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a5e:	fb08 f904 	mul.w	r9, r8, r4
 8000a62:	40b0      	lsls	r0, r6
 8000a64:	4589      	cmp	r9, r1
 8000a66:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a6a:	b280      	uxth	r0, r0
 8000a6c:	d93e      	bls.n	8000aec <__udivmoddi4+0x2e8>
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a74:	d201      	bcs.n	8000a7a <__udivmoddi4+0x276>
 8000a76:	4589      	cmp	r9, r1
 8000a78:	d81f      	bhi.n	8000aba <__udivmoddi4+0x2b6>
 8000a7a:	eba1 0109 	sub.w	r1, r1, r9
 8000a7e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a82:	fb09 f804 	mul.w	r8, r9, r4
 8000a86:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a90:	4542      	cmp	r2, r8
 8000a92:	d229      	bcs.n	8000ae8 <__udivmoddi4+0x2e4>
 8000a94:	18ba      	adds	r2, r7, r2
 8000a96:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a9a:	d2c4      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000a9c:	4542      	cmp	r2, r8
 8000a9e:	d2c2      	bcs.n	8000a26 <__udivmoddi4+0x222>
 8000aa0:	f1a9 0102 	sub.w	r1, r9, #2
 8000aa4:	443a      	add	r2, r7
 8000aa6:	e7be      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aa8:	45f0      	cmp	r8, lr
 8000aaa:	d29d      	bcs.n	80009e8 <__udivmoddi4+0x1e4>
 8000aac:	ebbe 0302 	subs.w	r3, lr, r2
 8000ab0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ab4:	3801      	subs	r0, #1
 8000ab6:	46e1      	mov	r9, ip
 8000ab8:	e796      	b.n	80009e8 <__udivmoddi4+0x1e4>
 8000aba:	eba7 0909 	sub.w	r9, r7, r9
 8000abe:	4449      	add	r1, r9
 8000ac0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ac4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ac8:	fb09 f804 	mul.w	r8, r9, r4
 8000acc:	e7db      	b.n	8000a86 <__udivmoddi4+0x282>
 8000ace:	4673      	mov	r3, lr
 8000ad0:	e77f      	b.n	80009d2 <__udivmoddi4+0x1ce>
 8000ad2:	4650      	mov	r0, sl
 8000ad4:	e766      	b.n	80009a4 <__udivmoddi4+0x1a0>
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	e6fd      	b.n	80008d6 <__udivmoddi4+0xd2>
 8000ada:	443b      	add	r3, r7
 8000adc:	3a02      	subs	r2, #2
 8000ade:	e733      	b.n	8000948 <__udivmoddi4+0x144>
 8000ae0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ae4:	443b      	add	r3, r7
 8000ae6:	e71c      	b.n	8000922 <__udivmoddi4+0x11e>
 8000ae8:	4649      	mov	r1, r9
 8000aea:	e79c      	b.n	8000a26 <__udivmoddi4+0x222>
 8000aec:	eba1 0109 	sub.w	r1, r1, r9
 8000af0:	46c4      	mov	ip, r8
 8000af2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000af6:	fb09 f804 	mul.w	r8, r9, r4
 8000afa:	e7c4      	b.n	8000a86 <__udivmoddi4+0x282>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b04:	f001 fbce 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b08:	f000 f916 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0c:	f000 fa80 	bl	8001010 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b10:	f000 fa5e 	bl	8000fd0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b14:	f000 f97a 	bl	8000e0c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000b18:	f000 f9d8 	bl	8000ecc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000b1c:	2240      	movs	r2, #64	@ 0x40
 8000b1e:	497a      	ldr	r1, [pc, #488]	@ (8000d08 <main+0x208>)
 8000b20:	487a      	ldr	r0, [pc, #488]	@ (8000d0c <main+0x20c>)
 8000b22:	f001 fc99 	bl	8002458 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000b26:	4b7a      	ldr	r3, [pc, #488]	@ (8000d10 <main+0x210>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000b2c:	4b78      	ldr	r3, [pc, #480]	@ (8000d10 <main+0x210>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	739a      	strb	r2, [r3, #14]
 8000b32:	4b77      	ldr	r3, [pc, #476]	@ (8000d10 <main+0x210>)
 8000b34:	7b9a      	ldrb	r2, [r3, #14]
 8000b36:	4b76      	ldr	r3, [pc, #472]	@ (8000d10 <main+0x210>)
 8000b38:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000b3a:	4b75      	ldr	r3, [pc, #468]	@ (8000d10 <main+0x210>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	735a      	strb	r2, [r3, #13]
 8000b40:	4b73      	ldr	r3, [pc, #460]	@ (8000d10 <main+0x210>)
 8000b42:	7b5a      	ldrb	r2, [r3, #13]
 8000b44:	4b72      	ldr	r3, [pc, #456]	@ (8000d10 <main+0x210>)
 8000b46:	729a      	strb	r2, [r3, #10]
 8000b48:	4b71      	ldr	r3, [pc, #452]	@ (8000d10 <main+0x210>)
 8000b4a:	7a9a      	ldrb	r2, [r3, #10]
 8000b4c:	4b70      	ldr	r3, [pc, #448]	@ (8000d10 <main+0x210>)
 8000b4e:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000b50:	4b6f      	ldr	r3, [pc, #444]	@ (8000d10 <main+0x210>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	731a      	strb	r2, [r3, #12]
 8000b56:	4b6e      	ldr	r3, [pc, #440]	@ (8000d10 <main+0x210>)
 8000b58:	7b1a      	ldrb	r2, [r3, #12]
 8000b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d10 <main+0x210>)
 8000b5c:	725a      	strb	r2, [r3, #9]
 8000b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8000d10 <main+0x210>)
 8000b60:	7a5a      	ldrb	r2, [r3, #9]
 8000b62:	4b6b      	ldr	r3, [pc, #428]	@ (8000d10 <main+0x210>)
 8000b64:	719a      	strb	r2, [r3, #6]
 8000b66:	4b6a      	ldr	r3, [pc, #424]	@ (8000d10 <main+0x210>)
 8000b68:	799a      	ldrb	r2, [r3, #6]
 8000b6a:	4b69      	ldr	r3, [pc, #420]	@ (8000d10 <main+0x210>)
 8000b6c:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000b6e:	4b68      	ldr	r3, [pc, #416]	@ (8000d10 <main+0x210>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	721a      	strb	r2, [r3, #8]
 8000b74:	4b66      	ldr	r3, [pc, #408]	@ (8000d10 <main+0x210>)
 8000b76:	7a1a      	ldrb	r2, [r3, #8]
 8000b78:	4b65      	ldr	r3, [pc, #404]	@ (8000d10 <main+0x210>)
 8000b7a:	715a      	strb	r2, [r3, #5]
 8000b7c:	4b64      	ldr	r3, [pc, #400]	@ (8000d10 <main+0x210>)
 8000b7e:	795a      	ldrb	r2, [r3, #5]
 8000b80:	4b63      	ldr	r3, [pc, #396]	@ (8000d10 <main+0x210>)
 8000b82:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000b84:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <main+0x210>)
 8000b86:	2205      	movs	r2, #5
 8000b88:	711a      	strb	r2, [r3, #4]
 8000b8a:	4b61      	ldr	r3, [pc, #388]	@ (8000d10 <main+0x210>)
 8000b8c:	791a      	ldrb	r2, [r3, #4]
 8000b8e:	4b60      	ldr	r3, [pc, #384]	@ (8000d10 <main+0x210>)
 8000b90:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000b92:	4b5f      	ldr	r3, [pc, #380]	@ (8000d10 <main+0x210>)
 8000b94:	2206      	movs	r2, #6
 8000b96:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000b98:	4b5e      	ldr	r3, [pc, #376]	@ (8000d14 <main+0x214>)
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8000d14 <main+0x214>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	709a      	strb	r2, [r3, #2]
 8000ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8000d14 <main+0x214>)
 8000ba6:	789a      	ldrb	r2, [r3, #2]
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	@ (8000d14 <main+0x214>)
 8000baa:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000bac:	4b59      	ldr	r3, [pc, #356]	@ (8000d14 <main+0x214>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000bb2:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <main+0x214>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	72da      	strb	r2, [r3, #11]
 8000bb8:	4b56      	ldr	r3, [pc, #344]	@ (8000d14 <main+0x214>)
 8000bba:	7ada      	ldrb	r2, [r3, #11]
 8000bbc:	4b55      	ldr	r3, [pc, #340]	@ (8000d14 <main+0x214>)
 8000bbe:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000bc0:	4b54      	ldr	r3, [pc, #336]	@ (8000d14 <main+0x214>)
 8000bc2:	2209      	movs	r2, #9
 8000bc4:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000bc6:	4b53      	ldr	r3, [pc, #332]	@ (8000d14 <main+0x214>)
 8000bc8:	2208      	movs	r2, #8
 8000bca:	735a      	strb	r2, [r3, #13]
 8000bcc:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <main+0x214>)
 8000bce:	7b5a      	ldrb	r2, [r3, #13]
 8000bd0:	4b50      	ldr	r3, [pc, #320]	@ (8000d14 <main+0x214>)
 8000bd2:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000d14 <main+0x214>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000bda:	4b4e      	ldr	r3, [pc, #312]	@ (8000d14 <main+0x214>)
 8000bdc:	2204      	movs	r2, #4
 8000bde:	721a      	strb	r2, [r3, #8]
 8000be0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d14 <main+0x214>)
 8000be2:	7a1a      	ldrb	r2, [r3, #8]
 8000be4:	4b4b      	ldr	r3, [pc, #300]	@ (8000d14 <main+0x214>)
 8000be6:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000be8:	4b4a      	ldr	r3, [pc, #296]	@ (8000d14 <main+0x214>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	729a      	strb	r2, [r3, #10]
 8000bee:	4b49      	ldr	r3, [pc, #292]	@ (8000d14 <main+0x214>)
 8000bf0:	7a9a      	ldrb	r2, [r3, #10]
 8000bf2:	4b48      	ldr	r3, [pc, #288]	@ (8000d14 <main+0x214>)
 8000bf4:	725a      	strb	r2, [r3, #9]
 8000bf6:	4b47      	ldr	r3, [pc, #284]	@ (8000d14 <main+0x214>)
 8000bf8:	7a5a      	ldrb	r2, [r3, #9]
 8000bfa:	4b46      	ldr	r3, [pc, #280]	@ (8000d14 <main+0x214>)
 8000bfc:	719a      	strb	r2, [r3, #6]
 8000bfe:	4b45      	ldr	r3, [pc, #276]	@ (8000d14 <main+0x214>)
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b44      	ldr	r3, [pc, #272]	@ (8000d14 <main+0x214>)
 8000c04:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0c:	4842      	ldr	r0, [pc, #264]	@ (8000d18 <main+0x218>)
 8000c0e:	f002 fe17 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c18:	483f      	ldr	r0, [pc, #252]	@ (8000d18 <main+0x218>)
 8000c1a:	f002 fe11 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c24:	483c      	ldr	r0, [pc, #240]	@ (8000d18 <main+0x218>)
 8000c26:	f002 fe0b 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c30:	4839      	ldr	r0, [pc, #228]	@ (8000d18 <main+0x218>)
 8000c32:	f002 fe05 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000c36:	2108      	movs	r1, #8
 8000c38:	4838      	ldr	r0, [pc, #224]	@ (8000d1c <main+0x21c>)
 8000c3a:	f003 fb3f 	bl	80042bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000c3e:	210c      	movs	r1, #12
 8000c40:	4836      	ldr	r0, [pc, #216]	@ (8000d1c <main+0x21c>)
 8000c42:	f003 fb3b 	bl	80042bc <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000c46:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <main+0x220>)
 8000c48:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c4c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000c4e:	4b34      	ldr	r3, [pc, #208]	@ (8000d20 <main+0x220>)
 8000c50:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 4; //Aca se elige que programa queremos que se realice
 8000c56:	4b33      	ldr	r3, [pc, #204]	@ (8000d24 <main+0x224>)
 8000c58:	2204      	movs	r2, #4
 8000c5a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (prueba) {
 8000c5c:	4b31      	ldr	r3, [pc, #196]	@ (8000d24 <main+0x224>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b65      	cmp	r3, #101	@ 0x65
 8000c62:	d04b      	beq.n	8000cfc <main+0x1fc>
 8000c64:	2b65      	cmp	r3, #101	@ 0x65
 8000c66:	dcf9      	bgt.n	8000c5c <main+0x15c>
 8000c68:	2b0a      	cmp	r3, #10
 8000c6a:	dc1d      	bgt.n	8000ca8 <main+0x1a8>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dbf5      	blt.n	8000c5c <main+0x15c>
 8000c70:	2b0a      	cmp	r3, #10
 8000c72:	d8f3      	bhi.n	8000c5c <main+0x15c>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <main+0x17c>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000caf 	.word	0x08000caf
 8000c80:	08000cb5 	.word	0x08000cb5
 8000c84:	08000c5d 	.word	0x08000c5d
 8000c88:	08000c5d 	.word	0x08000c5d
 8000c8c:	08000cbb 	.word	0x08000cbb
 8000c90:	08000cc1 	.word	0x08000cc1
 8000c94:	08000cc7 	.word	0x08000cc7
 8000c98:	08000c5d 	.word	0x08000c5d
 8000c9c:	08000c5d 	.word	0x08000c5d
 8000ca0:	08000c5d 	.word	0x08000c5d
 8000ca4:	08000ce9 	.word	0x08000ce9
 8000ca8:	2b64      	cmp	r3, #100	@ 0x64
 8000caa:	d024      	beq.n	8000cf6 <main+0x1f6>
 8000cac:	e7d6      	b.n	8000c5c <main+0x15c>

		case 0:
			prueba_avanzar();
 8000cae:	f000 fb3d 	bl	800132c <prueba_avanzar>
			break;
 8000cb2:	e027      	b.n	8000d04 <main+0x204>

		case 1:
			prueba_giros_y_sensores();
 8000cb4:	f000 fb46 	bl	8001344 <prueba_giros_y_sensores>
			break;
 8000cb8:	e024      	b.n	8000d04 <main+0x204>

		case 4:
			programa_principal();
 8000cba:	f000 fc19 	bl	80014f0 <programa_principal>
			break;
 8000cbe:	e021      	b.n	8000d04 <main+0x204>

		case 5:
			ajuste_automatico();
 8000cc0:	f000 fa72 	bl	80011a8 <ajuste_automatico>
			break;
 8000cc4:	e01e      	b.n	8000d04 <main+0x204>


		case 6:
			sensor_izq_min = 32700;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <main+0x228>)
 8000cc8:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000ccc:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <main+0x22c>)
 8000cd0:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000cd4:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <main+0x230>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <main+0x234>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <main+0x224>)
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	701a      	strb	r2, [r3, #0]
		case 10:{
			TIM3->CCR3 = 0;
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <main+0x220>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000cee:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <main+0x220>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	@ 0x40

		}
			break;
 8000cf4:	e006      	b.n	8000d04 <main+0x204>
		case 100:
			prueba_casilla_n();
 8000cf6:	f000 fba1 	bl	800143c <prueba_casilla_n>
			break;
 8000cfa:	e003      	b.n	8000d04 <main+0x204>

		case 101:
			prueba_post_relleno();
 8000cfc:	f000 fbc4 	bl	8001488 <prueba_post_relleno>
			break;
 8000d00:	bf00      	nop
 8000d02:	e7ab      	b.n	8000c5c <main+0x15c>
		switch (prueba) {
 8000d04:	e7aa      	b.n	8000c5c <main+0x15c>
 8000d06:	bf00      	nop
 8000d08:	2000015c 	.word	0x2000015c
 8000d0c:	20000030 	.word	0x20000030
 8000d10:	20000124 	.word	0x20000124
 8000d14:	20000134 	.word	0x20000134
 8000d18:	40020400 	.word	0x40020400
 8000d1c:	200000d8 	.word	0x200000d8
 8000d20:	40000400 	.word	0x40000400
 8000d24:	20000145 	.word	0x20000145
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000004 	.word	0x20000004
 8000d30:	20000148 	.word	0x20000148
 8000d34:	2000014a 	.word	0x2000014a

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b094      	sub	sp, #80	@ 0x50
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 0320 	add.w	r3, r7, #32
 8000d42:	2230      	movs	r2, #48	@ 0x30
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f004 f89c 	bl	8004e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	4b28      	ldr	r3, [pc, #160]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d64:	4a27      	ldr	r2, [pc, #156]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6c:	4b25      	ldr	r3, [pc, #148]	@ (8000e04 <SystemClock_Config+0xcc>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b22      	ldr	r3, [pc, #136]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a21      	ldr	r2, [pc, #132]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <SystemClock_Config+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da0:	2302      	movs	r3, #2
 8000da2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da8:	2308      	movs	r3, #8
 8000daa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000dac:	2332      	movs	r3, #50	@ 0x32
 8000dae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db4:	2307      	movs	r3, #7
 8000db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fd71 	bl	80038a4 <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000dc8:	f001 f8ee 	bl	8001fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ddc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f002 ffd2 	bl	8003d94 <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000df6:	f001 f8d7 	bl	8001fa8 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3750      	adds	r7, #80	@ 0x50
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e20:	4a28      	ldr	r2, [pc, #160]	@ (8000ec4 <MX_ADC1_Init+0xb8>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e24:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b24      	ldr	r3, [pc, #144]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ec8 <MX_ADC1_Init+0xbc>)
 8000e50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e66:	4b16      	ldr	r3, [pc, #88]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	4814      	ldr	r0, [pc, #80]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e6e:	f001 faaf 	bl	80023d0 <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e78:	f001 f896 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000e8e:	f001 fc01 	bl	8002694 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e98:	f001 f886 	bl	8001fa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_ADC1_Init+0xb4>)
 8000eaa:	f001 fbf3 	bl	8002694 <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000eb4:	f001 f878 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000030 	.word	0x20000030
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08e      	sub	sp, #56	@ 0x38
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	f107 0320 	add.w	r3, r7, #32
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
 8000ef8:	615a      	str	r2, [r3, #20]
 8000efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efc:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000efe:	4a33      	ldr	r2, [pc, #204]	@ (8000fcc <MX_TIM3_Init+0x100>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f02:	4b31      	ldr	r3, [pc, #196]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f10:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000f14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f22:	4829      	ldr	r0, [pc, #164]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f24:	f003 f922 	bl	800416c <HAL_TIM_Base_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f2e:	f001 f83b 	bl	8001fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4822      	ldr	r0, [pc, #136]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f40:	f003 fb46 	bl	80045d0 <HAL_TIM_ConfigClockSource>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f4a:	f001 f82d 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f4e:	481e      	ldr	r0, [pc, #120]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f50:	f003 f95b 	bl	800420a <HAL_TIM_PWM_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f5a:	f001 f825 	bl	8001fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4816      	ldr	r0, [pc, #88]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f6e:	f003 ff0d 	bl	8004d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f78:	f001 f816 	bl	8001fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	2360      	movs	r3, #96	@ 0x60
 8000f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2208      	movs	r2, #8
 8000f90:	4619      	mov	r1, r3
 8000f92:	480d      	ldr	r0, [pc, #52]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000f94:	f003 fa5a 	bl	800444c <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f9e:	f001 f803 	bl	8001fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	220c      	movs	r2, #12
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000faa:	f003 fa4f 	bl	800444c <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000fb4:	f000 fff8 	bl	8001fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <MX_TIM3_Init+0xfc>)
 8000fba:	f001 f8bd 	bl	8002138 <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	@ 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000d8 	.word	0x200000d8
 8000fcc:	40000400 	.word	0x40000400

08000fd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <MX_DMA_Init+0x3c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2038      	movs	r0, #56	@ 0x38
 8000ff8:	f001 fec7 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ffc:	2038      	movs	r0, #56	@ 0x38
 8000ffe:	f001 fee0 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b59      	ldr	r3, [pc, #356]	@ (8001190 <MX_GPIO_Init+0x180>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b56      	ldr	r3, [pc, #344]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b52      	ldr	r3, [pc, #328]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a51      	ldr	r2, [pc, #324]	@ (8001190 <MX_GPIO_Init+0x180>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b4f      	ldr	r3, [pc, #316]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b4b      	ldr	r3, [pc, #300]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a4a      	ldr	r2, [pc, #296]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001068:	f043 0302 	orr.w	r3, r3, #2
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b48      	ldr	r3, [pc, #288]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b44      	ldr	r3, [pc, #272]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a43      	ldr	r2, [pc, #268]	@ (8001190 <MX_GPIO_Init+0x180>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <MX_GPIO_Init+0x180>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <MX_GPIO_Init+0x180>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a3c      	ldr	r2, [pc, #240]	@ (8001190 <MX_GPIO_Init+0x180>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <MX_GPIO_Init+0x180>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2108      	movs	r1, #8
 80010b6:	4837      	ldr	r0, [pc, #220]	@ (8001194 <MX_GPIO_Init+0x184>)
 80010b8:	f002 fbc2 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80010c2:	4835      	ldr	r0, [pc, #212]	@ (8001198 <MX_GPIO_Init+0x188>)
 80010c4:	f002 fbbc 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80010ce:	4833      	ldr	r0, [pc, #204]	@ (800119c <MX_GPIO_Init+0x18c>)
 80010d0:	f002 fbb6 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80010d4:	2308      	movs	r3, #8
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	482a      	ldr	r0, [pc, #168]	@ (8001194 <MX_GPIO_Init+0x184>)
 80010ec:	f002 f9f4 	bl	80034d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : boton_Pin */
  GPIO_InitStruct.Pin = boton_Pin;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <MX_GPIO_Init+0x190>)
 8001104:	f002 f9e8 	bl	80034d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
  GPIO_InitStruct.Pin = m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin;
 8001108:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	481d      	ldr	r0, [pc, #116]	@ (8001198 <MX_GPIO_Init+0x188>)
 8001122:	f002 f9d9 	bl	80034d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin;
 8001126:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	4817      	ldr	r0, [pc, #92]	@ (800119c <MX_GPIO_Init+0x18c>)
 8001140:	f002 f9ca 	bl	80034d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor_frontal_Pin */
  GPIO_InitStruct.Pin = sensor_frontal_Pin;
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor_frontal_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0x194>)
 800115a:	f002 f9bd 	bl	80034d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensor_linea_Pin */
  GPIO_InitStruct.Pin = sensor_linea_Pin;
 800115e:	2380      	movs	r3, #128	@ 0x80
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensor_linea_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <MX_GPIO_Init+0x194>)
 8001172:	f002 f9b1 	bl	80034d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2017      	movs	r0, #23
 800117c:	f001 fe05 	bl	8002d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001180:	2017      	movs	r0, #23
 8001182:	f001 fe1e 	bl	8002dc2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40021000 	.word	0x40021000
 8001198:	40020400 	.word	0x40020400
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020800 	.word	0x40020800

080011a8 <ajuste_automatico>:

/* USER CODE BEGIN 4 */
void ajuste_automatico(void) {
 80011a8:	b5b0      	push	{r4, r5, r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80011ac:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <ajuste_automatico+0x160>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <ajuste_automatico+0x14>
 80011b4:	4b55      	ldr	r3, [pc, #340]	@ (800130c <ajuste_automatico+0x164>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d107      	bne.n	80011cc <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80011bc:	4b52      	ldr	r3, [pc, #328]	@ (8001308 <ajuste_automatico+0x160>)
 80011be:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011c2:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80011c4:	4b51      	ldr	r3, [pc, #324]	@ (800130c <ajuste_automatico+0x164>)
 80011c6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011ca:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80011cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001308 <ajuste_automatico+0x160>)
 80011ce:	881a      	ldrh	r2, [r3, #0]
 80011d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001310 <ajuste_automatico+0x168>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d904      	bls.n	80011e4 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 80011da:	4b4d      	ldr	r3, [pc, #308]	@ (8001310 <ajuste_automatico+0x168>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <ajuste_automatico+0x160>)
 80011e2:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 80011e4:	4b49      	ldr	r3, [pc, #292]	@ (800130c <ajuste_automatico+0x164>)
 80011e6:	881a      	ldrh	r2, [r3, #0]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001314 <ajuste_automatico+0x16c>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d904      	bls.n	80011fc <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 80011f2:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <ajuste_automatico+0x16c>)
 80011f4:	881b      	ldrh	r3, [r3, #0]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b44      	ldr	r3, [pc, #272]	@ (800130c <ajuste_automatico+0x164>)
 80011fa:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 80011fc:	4b46      	ldr	r3, [pc, #280]	@ (8001318 <ajuste_automatico+0x170>)
 80011fe:	881a      	ldrh	r2, [r3, #0]
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <ajuste_automatico+0x168>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	429a      	cmp	r2, r3
 8001208:	d204      	bcs.n	8001214 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800120a:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <ajuste_automatico+0x168>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <ajuste_automatico+0x170>)
 8001212:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001214:	4b41      	ldr	r3, [pc, #260]	@ (800131c <ajuste_automatico+0x174>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b3e      	ldr	r3, [pc, #248]	@ (8001314 <ajuste_automatico+0x16c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29b      	uxth	r3, r3
 800121e:	429a      	cmp	r2, r3
 8001220:	d204      	bcs.n	800122c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001222:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <ajuste_automatico+0x16c>)
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <ajuste_automatico+0x174>)
 800122a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_RESET) {
 800122c:	2101      	movs	r1, #1
 800122e:	483c      	ldr	r0, [pc, #240]	@ (8001320 <ajuste_automatico+0x178>)
 8001230:	f002 faee 	bl	8003810 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d159      	bne.n	80012ee <ajuste_automatico+0x146>
		HAL_Delay(40);
 800123a:	2028      	movs	r0, #40	@ 0x28
 800123c:	f001 f8a4 	bl	8002388 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_RESET) {
 8001240:	2101      	movs	r1, #1
 8001242:	4837      	ldr	r0, [pc, #220]	@ (8001320 <ajuste_automatico+0x178>)
 8001244:	f002 fae4 	bl	8003810 <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d14f      	bne.n	80012ee <ajuste_automatico+0x146>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <ajuste_automatico+0x170>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fa34 	bl	80006c0 <__aeabi_i2d>
 8001258:	a327      	add	r3, pc, #156	@ (adr r3, 80012f8 <ajuste_automatico+0x150>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7fe ffb3 	bl	80001c8 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4614      	mov	r4, r2
 8001268:	461d      	mov	r5, r3
 800126a:	4b27      	ldr	r3, [pc, #156]	@ (8001308 <ajuste_automatico+0x160>)
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fa26 	bl	80006c0 <__aeabi_i2d>
 8001274:	a322      	add	r3, pc, #136	@ (adr r3, 8001300 <ajuste_automatico+0x158>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7fe ffa5 	bl	80001c8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f8cf 	bl	8000428 <__adddf3>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fa7f 	bl	8000794 <__aeabi_d2uiz>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <ajuste_automatico+0x17c>)
 800129c:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 800129e:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <ajuste_automatico+0x174>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fa0c 	bl	80006c0 <__aeabi_i2d>
 80012a8:	a313      	add	r3, pc, #76	@ (adr r3, 80012f8 <ajuste_automatico+0x150>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7fe ff8b 	bl	80001c8 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <ajuste_automatico+0x164>)
 80012bc:	881b      	ldrh	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f9fe 	bl	80006c0 <__aeabi_i2d>
 80012c4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001300 <ajuste_automatico+0x158>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	f7fe ff7d 	bl	80001c8 <__aeabi_dmul>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7ff f8a7 	bl	8000428 <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fa57 	bl	8000794 <__aeabi_d2uiz>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <ajuste_automatico+0x180>)
 80012ec:	801a      	strh	r2, [r3, #0]
		}
	}
}
 80012ee:	bf00      	nop
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	9999999a 	.word	0x9999999a
 80012fc:	3fd99999 	.word	0x3fd99999
 8001300:	33333333 	.word	0x33333333
 8001304:	3fe33333 	.word	0x3fe33333
 8001308:	20000004 	.word	0x20000004
 800130c:	20000002 	.word	0x20000002
 8001310:	200001de 	.word	0x200001de
 8001314:	200001dc 	.word	0x200001dc
 8001318:	2000014a 	.word	0x2000014a
 800131c:	20000148 	.word	0x20000148
 8001320:	40020000 	.word	0x40020000
 8001324:	2000014e 	.word	0x2000014e
 8001328:	2000014c 	.word	0x2000014c

0800132c <prueba_avanzar>:
	ejecutarGiro(izquierda);
	correccion_avanzar();
	while (1)
		;
}
void prueba_avanzar(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	correccion_avanzar();//codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8001330:	f000 fa6e 	bl	8001810 <correccion_avanzar>
	ejecutarGiro(izquierda);
 8001334:	2001      	movs	r0, #1
 8001336:	f000 fb31 	bl	800199c <ejecutarGiro>
	correccion_avanzar();
 800133a:	f000 fa69 	bl	8001810 <correccion_avanzar>
	while(1);
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <prueba_avanzar+0x12>
	...

08001344 <prueba_giros_y_sensores>:
}

void prueba_giros_y_sensores(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8001348:	f000 fa62 	bl	8001810 <correccion_avanzar>
	if (verificar_sensor()) {
 800134c:	f000 fc28 	bl	8001ba0 <verificar_sensor>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001356:	4b36      	ldr	r3, [pc, #216]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	4a36      	ldr	r2, [pc, #216]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f9d5 	bl	8001710 <act_ubicacion>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 800136c:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b08      	cmp	r3, #8
 8001374:	d121      	bne.n	80013ba <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8001376:	f44f 7016 	mov.w	r0, #600	@ 0x258
 800137a:	f001 f805 	bl	8002388 <HAL_Delay>
		ejecutarGiro(izquierda);
 800137e:	2001      	movs	r0, #1
 8001380:	f000 fb0c 	bl	800199c <ejecutarGiro>
		orientacion_actual = oeste;
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 8001386:	2203      	movs	r2, #3
 8001388:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 800138a:	e012      	b.n	80013b2 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 800138c:	f000 fa40 	bl	8001810 <correccion_avanzar>
			if (verificar_sensor()) {
 8001390:	f000 fc06 	bl	8001ba0 <verificar_sensor>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 800139a:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4a25      	ldr	r2, [pc, #148]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 80013a0:	7812      	ldrb	r2, [r2, #0]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f9b3 	bl	8001710 <act_ubicacion>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 80013b0:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 80013b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d0e8      	beq.n	800138c <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 80013ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b09      	cmp	r3, #9
 80013c0:	d121      	bne.n	8001406 <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 80013c2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80013c6:	f000 ffdf 	bl	8002388 <HAL_Delay>
		ejecutarGiro(derecha);
 80013ca:	2002      	movs	r0, #2
 80013cc:	f000 fae6 	bl	800199c <ejecutarGiro>
		orientacion_actual = norte;
 80013d0:	4b18      	ldr	r3, [pc, #96]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 80013d6:	e012      	b.n	80013fe <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 80013d8:	f000 fa1a 	bl	8001810 <correccion_avanzar>
			if (verificar_sensor()) {
 80013dc:	f000 fbe0 	bl	8001ba0 <verificar_sensor>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80013e6:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f000 f98d 	bl	8001710 <act_ubicacion>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 80013fc:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b09      	cmp	r3, #9
 8001404:	d0e8      	beq.n	80013d8 <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)) {
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <prueba_giros_y_sensores+0xec>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b0d      	cmp	r3, #13
 800140c:	d10e      	bne.n	800142c <prueba_giros_y_sensores+0xe8>
 800140e:	2140      	movs	r1, #64	@ 0x40
 8001410:	4809      	ldr	r0, [pc, #36]	@ (8001438 <prueba_giros_y_sensores+0xf4>)
 8001412:	f002 f9fd 	bl	8003810 <HAL_GPIO_ReadPin>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d107      	bne.n	800142c <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 fabd 	bl	800199c <ejecutarGiro>
		orientacion_actual = sur;
 8001422:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <prueba_giros_y_sensores+0xf0>)
 8001424:	2202      	movs	r2, #2
 8001426:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8001428:	f000 f9f2 	bl	8001810 <correccion_avanzar>
	}
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000120 	.word	0x20000120
 8001434:	20000121 	.word	0x20000121
 8001438:	40020800 	.word	0x40020800

0800143c <prueba_casilla_n>:

void prueba_casilla_n(void) {
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <prueba_casilla_n+0x3c>)
 8001442:	2207      	movs	r2, #7
 8001444:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 8001446:	4b0d      	ldr	r3, [pc, #52]	@ (800147c <prueba_casilla_n+0x40>)
 8001448:	2201      	movs	r2, #1
 800144a:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <prueba_casilla_n+0x44>)
 800144e:	2201      	movs	r2, #1
 8001450:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <prueba_casilla_n+0x44>)
 8001454:	2203      	movs	r2, #3
 8001456:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <prueba_casilla_n+0x44>)
 800145a:	2203      	movs	r2, #3
 800145c:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //deberia dar que tiene que ir a 11
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <prueba_casilla_n+0x3c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4905      	ldr	r1, [pc, #20]	@ (800147c <prueba_casilla_n+0x40>)
 8001466:	4806      	ldr	r0, [pc, #24]	@ (8001480 <prueba_casilla_n+0x44>)
 8001468:	f000 fcbc 	bl	8001de4 <calculo_minimo_peso>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <prueba_casilla_n+0x48>)
 8001472:	701a      	strb	r2, [r3, #0]

}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000120 	.word	0x20000120
 800147c:	20000134 	.word	0x20000134
 8001480:	20000124 	.word	0x20000124
 8001484:	20000000 	.word	0x20000000

08001488 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	ubicacion = 5;
 800148c:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <prueba_post_relleno+0x54>)
 800148e:	2205      	movs	r2, #5
 8001490:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <prueba_post_relleno+0x58>)
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8001498:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <prueba_post_relleno+0x54>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <prueba_post_relleno+0x58>)
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 f8d6 	bl	8001654 <obtener_orientacion_futura>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <prueba_post_relleno+0x5c>)
 80014ae:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <prueba_post_relleno+0x60>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <prueba_post_relleno+0x60>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4a0a      	ldr	r2, [pc, #40]	@ (80014e4 <prueba_post_relleno+0x5c>)
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f8f3 	bl	80016ac <obtenerGiro>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <prueba_post_relleno+0x64>)
 80014cc:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 80014ce:	4b07      	ldr	r3, [pc, #28]	@ (80014ec <prueba_post_relleno+0x64>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fa62 	bl	800199c <ejecutarGiro>
	while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <prueba_post_relleno+0x50>
 80014dc:	20000120 	.word	0x20000120
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000122 	.word	0x20000122
 80014e8:	20000121 	.word	0x20000121
 80014ec:	20000123 	.word	0x20000123

080014f0 <programa_principal>:
		;
}

void programa_principal(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	correccion_avanzar();
 80014f4:	f000 f98c 	bl	8001810 <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 80014f8:	f000 fb52 	bl	8001ba0 <verificar_sensor>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d040      	beq.n	8001584 <programa_principal+0x94>
		contador_giros = 0;
 8001502:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <programa_principal+0x134>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 8001508:	4b47      	ldr	r3, [pc, #284]	@ (8001628 <programa_principal+0x138>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	4b45      	ldr	r3, [pc, #276]	@ (8001628 <programa_principal+0x138>)
 8001512:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001514:	4b45      	ldr	r3, [pc, #276]	@ (800162c <programa_principal+0x13c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4a45      	ldr	r2, [pc, #276]	@ (8001630 <programa_principal+0x140>)
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f8f6 	bl	8001710 <act_ubicacion>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	4b40      	ldr	r3, [pc, #256]	@ (800162c <programa_principal+0x13c>)
 800152a:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 800152c:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <programa_principal+0x13c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4940      	ldr	r1, [pc, #256]	@ (8001634 <programa_principal+0x144>)
 8001534:	4840      	ldr	r0, [pc, #256]	@ (8001638 <programa_principal+0x148>)
 8001536:	f000 fc55 	bl	8001de4 <calculo_minimo_peso>
 800153a:	4603      	mov	r3, r0
 800153c:	461a      	mov	r2, r3
 800153e:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <programa_principal+0x14c>)
 8001540:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <programa_principal+0x13c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4a3d      	ldr	r2, [pc, #244]	@ (800163c <programa_principal+0x14c>)
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f881 	bl	8001654 <obtener_orientacion_futura>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <programa_principal+0x150>)
 8001558:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800155a:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <programa_principal+0x140>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4a38      	ldr	r2, [pc, #224]	@ (8001640 <programa_principal+0x150>)
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f8a1 	bl	80016ac <obtenerGiro>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <programa_principal+0x154>)
 8001570:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001572:	4b33      	ldr	r3, [pc, #204]	@ (8001640 <programa_principal+0x150>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <programa_principal+0x140>)
 8001578:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 800157a:	4b32      	ldr	r3, [pc, #200]	@ (8001644 <programa_principal+0x154>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fa0c 	bl	800199c <ejecutarGiro>
	}
	if (solicitud_actualizar == 1) {
 8001584:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <programa_principal+0x158>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d13a      	bne.n	8001602 <programa_principal+0x112>
		act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <programa_principal+0x13c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <programa_principal+0x140>)
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4827      	ldr	r0, [pc, #156]	@ (8001634 <programa_principal+0x144>)
 8001598:	f000 fb32 	bl	8001c00 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 800159c:	4926      	ldr	r1, [pc, #152]	@ (8001638 <programa_principal+0x148>)
 800159e:	4825      	ldr	r0, [pc, #148]	@ (8001634 <programa_principal+0x144>)
 80015a0:	f000 fb80 	bl	8001ca4 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 80015a4:	4b21      	ldr	r3, [pc, #132]	@ (800162c <programa_principal+0x13c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4922      	ldr	r1, [pc, #136]	@ (8001634 <programa_principal+0x144>)
 80015ac:	4822      	ldr	r0, [pc, #136]	@ (8001638 <programa_principal+0x148>)
 80015ae:	f000 fc19 	bl	8001de4 <calculo_minimo_peso>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <programa_principal+0x14c>)
 80015b8:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <programa_principal+0x13c>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4a1f      	ldr	r2, [pc, #124]	@ (800163c <programa_principal+0x14c>)
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f845 	bl	8001654 <obtener_orientacion_futura>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <programa_principal+0x150>)
 80015d0:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80015d2:	4b17      	ldr	r3, [pc, #92]	@ (8001630 <programa_principal+0x140>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001640 <programa_principal+0x150>)
 80015d8:	7812      	ldrb	r2, [r2, #0]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 f865 	bl	80016ac <obtenerGiro>
 80015e2:	4603      	mov	r3, r0
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b17      	ldr	r3, [pc, #92]	@ (8001644 <programa_principal+0x154>)
 80015e8:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <programa_principal+0x150>)
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <programa_principal+0x140>)
 80015f0:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <programa_principal+0x154>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f9d0 	bl	800199c <ejecutarGiro>
		solicitud_actualizar = 0;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <programa_principal+0x158>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	}
	if (filtrado == 1) {
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <programa_principal+0x15c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d101      	bne.n	8001610 <programa_principal+0x120>
		filtrado_pared();
 800160c:	f000 fc88 	bl	8001f20 <filtrado_pared>
	}

	if (ubicacion == 15) {
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <programa_principal+0x13c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d102      	bne.n	800161e <programa_principal+0x12e>
		prueba = 10;
 8001618:	4b0d      	ldr	r3, [pc, #52]	@ (8001650 <programa_principal+0x160>)
 800161a:	220a      	movs	r2, #10
 800161c:	701a      	strb	r2, [r3, #0]
	}
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000146 	.word	0x20000146
 8001628:	20000144 	.word	0x20000144
 800162c:	20000120 	.word	0x20000120
 8001630:	20000121 	.word	0x20000121
 8001634:	20000134 	.word	0x20000134
 8001638:	20000124 	.word	0x20000124
 800163c:	20000000 	.word	0x20000000
 8001640:	20000122 	.word	0x20000122
 8001644:	20000123 	.word	0x20000123
 8001648:	20000158 	.word	0x20000158
 800164c:	20000159 	.word	0x20000159
 8001650:	20000145 	.word	0x20000145

08001654 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	460a      	mov	r2, r1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	4613      	mov	r3, r2
 8001662:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 8001664:	79ba      	ldrb	r2, [r7, #6]
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	3301      	adds	r3, #1
 800166a:	429a      	cmp	r2, r3
 800166c:	d101      	bne.n	8001672 <obtener_orientacion_futura+0x1e>
		return oeste;
 800166e:	2303      	movs	r3, #3
 8001670:	e015      	b.n	800169e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8001672:	79ba      	ldrb	r2, [r7, #6]
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	3b01      	subs	r3, #1
 8001678:	429a      	cmp	r2, r3
 800167a:	d101      	bne.n	8001680 <obtener_orientacion_futura+0x2c>
		return este;
 800167c:	2301      	movs	r3, #1
 800167e:	e00e      	b.n	800169e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8001680:	79ba      	ldrb	r2, [r7, #6]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	3304      	adds	r3, #4
 8001686:	429a      	cmp	r2, r3
 8001688:	d101      	bne.n	800168e <obtener_orientacion_futura+0x3a>
		return norte;
 800168a:	2300      	movs	r3, #0
 800168c:	e007      	b.n	800169e <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 800168e:	79ba      	ldrb	r2, [r7, #6]
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	3b04      	subs	r3, #4
 8001694:	429a      	cmp	r2, r3
 8001696:	d101      	bne.n	800169c <obtener_orientacion_futura+0x48>
		return sur;
 8001698:	2302      	movs	r3, #2
 800169a:	e000      	b.n	800169e <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 800169c:	2364      	movs	r3, #100	@ 0x64
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 80016bc:	79ba      	ldrb	r2, [r7, #6]
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	3304      	adds	r3, #4
 80016c4:	425a      	negs	r2, r3
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	f002 0203 	and.w	r2, r2, #3
 80016ce:	bf58      	it	pl
 80016d0:	4253      	negpl	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d812      	bhi.n	8001700 <obtenerGiro+0x54>
 80016da:	a201      	add	r2, pc, #4	@ (adr r2, 80016e0 <obtenerGiro+0x34>)
 80016dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e0:	080016f1 	.word	0x080016f1
 80016e4:	080016f5 	.word	0x080016f5
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	080016fd 	.word	0x080016fd
	case 0:
		return adelante;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e006      	b.n	8001702 <obtenerGiro+0x56>
	case 1:
		return derecha;
 80016f4:	2302      	movs	r3, #2
 80016f6:	e004      	b.n	8001702 <obtenerGiro+0x56>
	case 2:
		return giro_180;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e002      	b.n	8001702 <obtenerGiro+0x56>
	case 3:
		return izquierda;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <obtenerGiro+0x56>
	default:
		return 100; // Error
 8001700:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop

08001710 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b03      	cmp	r3, #3
 8001724:	d81a      	bhi.n	800175c <act_ubicacion+0x4c>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <act_ubicacion+0x1c>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	08001745 	.word	0x08001745
 8001734:	0800174d 	.word	0x0800174d
 8001738:	08001755 	.word	0x08001755
	case 0:
		return ubicacion + 4;
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	3304      	adds	r3, #4
 8001740:	b2db      	uxtb	r3, r3
 8001742:	e00c      	b.n	800175e <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	3b01      	subs	r3, #1
 8001748:	b2db      	uxtb	r3, r3
 800174a:	e008      	b.n	800175e <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	3b04      	subs	r3, #4
 8001750:	b2db      	uxtb	r3, r3
 8001752:	e004      	b.n	800175e <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	3301      	adds	r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e000      	b.n	800175e <act_ubicacion+0x4e>
	default:
		return 100; // Error
 800175c:	2364      	movs	r3, #100	@ 0x64
	}
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop

0800176c <promediar>:

void promediar(uint16_t *buffer) {
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e012      	b.n	80017a8 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4413      	add	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3302      	adds	r3, #2
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4413      	add	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	dde9      	ble.n	8001782 <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <promediar+0x64>)
 80017b6:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <promediar+0x68>)
 80017c0:	801a      	strh	r2, [r3, #0]
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	200001dc 	.word	0x200001dc
 80017d4:	200001de 	.word	0x200001de

080017d8 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80017e2:	f7ff ffc3 	bl	800176c <promediar>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000015c 	.word	0x2000015c

080017f4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <HAL_ADC_ConvCpltCallback+0x18>)
 80017fe:	f7ff ffb5 	bl	800176c <promediar>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	2000019c 	.word	0x2000019c

08001810 <correccion_avanzar>:
void correccion_avanzar(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001814:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <correccion_avanzar+0x54>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29a      	uxth	r2, r3
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <correccion_avanzar+0x58>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d209      	bcs.n	8001836 <correccion_avanzar+0x26>
 8001822:	4b12      	ldr	r3, [pc, #72]	@ (800186c <correccion_avanzar+0x5c>)
 8001824:	881a      	ldrh	r2, [r3, #0]
 8001826:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <correccion_avanzar+0x60>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	429a      	cmp	r2, r3
 800182e:	d202      	bcs.n	8001836 <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8001830:	f000 f870 	bl	8001914 <apagar_derecha>
 8001834:	e013      	b.n	800185e <correccion_avanzar+0x4e>
	} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <correccion_avanzar+0x58>)
 8001838:	881a      	ldrh	r2, [r3, #0]
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <correccion_avanzar+0x54>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	429a      	cmp	r2, r3
 8001842:	d209      	bcs.n	8001858 <correccion_avanzar+0x48>
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <correccion_avanzar+0x60>)
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <correccion_avanzar+0x5c>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d202      	bcs.n	8001858 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8001852:	f000 f837 	bl	80018c4 <apagar_izquierda>
 8001856:	e002      	b.n	800185e <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8001858:	f000 f80c 	bl	8001874 <avanzar>
	}
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200001dc 	.word	0x200001dc
 8001868:	2000014c 	.word	0x2000014c
 800186c:	2000014e 	.word	0x2000014e
 8001870:	200001de 	.word	0x200001de

08001874 <avanzar>:
void avanzar(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800187e:	480f      	ldr	r0, [pc, #60]	@ (80018bc <avanzar+0x48>)
 8001880:	f001 ffde 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800188a:	480c      	ldr	r0, [pc, #48]	@ (80018bc <avanzar+0x48>)
 800188c:	f001 ffd8 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001896:	4809      	ldr	r0, [pc, #36]	@ (80018bc <avanzar+0x48>)
 8001898:	f001 ffd2 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800189c:	2201      	movs	r2, #1
 800189e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a2:	4806      	ldr	r0, [pc, #24]	@ (80018bc <avanzar+0x48>)
 80018a4:	f001 ffcc 	bl	8003840 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <avanzar+0x4c>)
 80018aa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 80018b0:	4b03      	ldr	r3, [pc, #12]	@ (80018c0 <avanzar+0x4c>)
 80018b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018b6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40000400 	.word	0x40000400

080018c4 <apagar_izquierda>:

void apagar_izquierda(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018ce:	480f      	ldr	r0, [pc, #60]	@ (800190c <apagar_izquierda+0x48>)
 80018d0:	f001 ffb6 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018da:	480c      	ldr	r0, [pc, #48]	@ (800190c <apagar_izquierda+0x48>)
 80018dc:	f001 ffb0 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018e6:	4809      	ldr	r0, [pc, #36]	@ (800190c <apagar_izquierda+0x48>)
 80018e8:	f001 ffaa 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <apagar_izquierda+0x48>)
 80018f4:	f001 ffa4 	bl	8003840 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <apagar_izquierda+0x4c>)
 80018fa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80018fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <apagar_izquierda+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020400 	.word	0x40020400
 8001910:	40000400 	.word	0x40000400

08001914 <apagar_derecha>:

void apagar_derecha(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800191e:	480f      	ldr	r0, [pc, #60]	@ (800195c <apagar_derecha+0x48>)
 8001920:	f001 ff8e 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800192a:	480c      	ldr	r0, [pc, #48]	@ (800195c <apagar_derecha+0x48>)
 800192c:	f001 ff88 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <apagar_derecha+0x48>)
 8001938:	f001 ff82 	bl	8003840 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001942:	4806      	ldr	r0, [pc, #24]	@ (800195c <apagar_derecha+0x48>)
 8001944:	f001 ff7c 	bl	8003840 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <apagar_derecha+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <apagar_derecha+0x4c>)
 8001950:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40020400 	.word	0x40020400
 8001960:	40000400 	.word	0x40000400

08001964 <mini_retroceso>:

void mini_retroceso(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001968:	2002      	movs	r0, #2
 800196a:	f000 f8b5 	bl	8001ad8 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 800196e:	2002      	movs	r0, #2
 8001970:	f000 f8e4 	bl	8001b3c <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001974:	2064      	movs	r0, #100	@ 0x64
 8001976:	f000 fd07 	bl	8002388 <HAL_Delay>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <mini_avance>:
void mini_avance(void) {
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001982:	2001      	movs	r0, #1
 8001984:	f000 f8a8 	bl	8001ad8 <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001988:	2001      	movs	r0, #1
 800198a:	f000 f8d7 	bl	8001b3c <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 800198e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001992:	f000 fcf9 	bl	8002388 <HAL_Delay>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	f200 808f 	bhi.w	8001acc <ejecutarGiro+0x130>
 80019ae:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <ejecutarGiro+0x18>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	080019c5 	.word	0x080019c5
 80019b8:	08001a37 	.word	0x08001a37
 80019bc:	080019cb 	.word	0x080019cb
 80019c0:	08001aa7 	.word	0x08001aa7
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 80019c4:	f7ff ffdb 	bl	800197e <mini_avance>
		break;
 80019c8:	e080      	b.n	8001acc <ejecutarGiro+0x130>
	case derecha:
		if (contador_giros == 0) {
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <ejecutarGiro+0x138>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11c      	bne.n	8001a0c <ejecutarGiro+0x70>
			contador_giros = contador_giros + 1;
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <ejecutarGiro+0x138>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <ejecutarGiro+0x138>)
 80019dc:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 f87a 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f000 f8a9 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 80019ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80019ee:	f000 fccb 	bl	8002388 <HAL_Delay>
			setMotorIzquierdo(avance);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f000 f870 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 80019f8:	2002      	movs	r0, #2
 80019fa:	f000 f89f 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 80019fe:	f240 208a 	movw	r0, #650	@ 0x28a
 8001a02:	f000 fcc1 	bl	8002388 <HAL_Delay>
			mini_avance();
 8001a06:	f7ff ffba 	bl	800197e <mini_avance>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001a0a:	e05f      	b.n	8001acc <ejecutarGiro+0x130>
			contador_giros = contador_giros + 1;
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a16:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001a18:	f7ff ffa4 	bl	8001964 <mini_retroceso>
			setMotorIzquierdo(avance);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f000 f85b 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001a22:	2002      	movs	r0, #2
 8001a24:	f000 f88a 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001a28:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001a2c:	f000 fcac 	bl	8002388 <HAL_Delay>
			mini_avance();
 8001a30:	f7ff ffa5 	bl	800197e <mini_avance>
		break;
 8001a34:	e04a      	b.n	8001acc <ejecutarGiro+0x130>
	case izquierda:
		if (contador_giros == 0) {
 8001a36:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d11c      	bne.n	8001a78 <ejecutarGiro+0xdc>
			contador_giros = contador_giros + 1;
 8001a3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a48:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 f844 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a50:	2001      	movs	r0, #1
 8001a52:	f000 f873 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001a56:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a5a:	f000 fc95 	bl	8002388 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f000 f83a 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f869 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 8001a6a:	f240 208a 	movw	r0, #650	@ 0x28a
 8001a6e:	f000 fc8b 	bl	8002388 <HAL_Delay>
			mini_avance();
 8001a72:	f7ff ff84 	bl	800197e <mini_avance>
			setMotorIzquierdo(retroceso);
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			mini_avance();
		}
		break;
 8001a76:	e029      	b.n	8001acc <ejecutarGiro+0x130>
			contador_giros = contador_giros + 1;
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001a82:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001a84:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a88:	f000 fc7e 	bl	8002388 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001a8c:	2002      	movs	r0, #2
 8001a8e:	f000 f823 	bl	8001ad8 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f000 f852 	bl	8001b3c <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001a98:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001a9c:	f000 fc74 	bl	8002388 <HAL_Delay>
			mini_avance();
 8001aa0:	f7ff ff6d 	bl	800197e <mini_avance>
		break;
 8001aa4:	e012      	b.n	8001acc <ejecutarGiro+0x130>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <ejecutarGiro+0x138>)
 8001ab0:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 f810 	bl	8001ad8 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001ab8:	2002      	movs	r0, #2
 8001aba:	f000 f83f 	bl	8001b3c <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001abe:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001ac2:	f000 fc61 	bl	8002388 <HAL_Delay>
		mini_avance();
 8001ac6:	f7ff ff5a 	bl	800197e <mini_avance>
		break;
 8001aca:	bf00      	nop

	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000146 	.word	0x20000146

08001ad8 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <setMotorIzquierdo+0x5c>)
 8001ae4:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d002      	beq.n	8001af6 <setMotorIzquierdo+0x1e>
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d00d      	beq.n	8001b10 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001af4:	e019      	b.n	8001b2a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afc:	480e      	ldr	r0, [pc, #56]	@ (8001b38 <setMotorIzquierdo+0x60>)
 8001afe:	f001 fe9f 	bl	8003840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001b02:	2201      	movs	r2, #1
 8001b04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <setMotorIzquierdo+0x60>)
 8001b0a:	f001 fe99 	bl	8003840 <HAL_GPIO_WritePin>
		break;
 8001b0e:	e00c      	b.n	8001b2a <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b16:	4808      	ldr	r0, [pc, #32]	@ (8001b38 <setMotorIzquierdo+0x60>)
 8001b18:	f001 fe92 	bl	8003840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b22:	4805      	ldr	r0, [pc, #20]	@ (8001b38 <setMotorIzquierdo+0x60>)
 8001b24:	f001 fe8c 	bl	8003840 <HAL_GPIO_WritePin>
		break;
 8001b28:	bf00      	nop
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40020400 	.word	0x40020400

08001b3c <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <setMotorDerecho+0x5c>)
 8001b48:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d002      	beq.n	8001b5a <setMotorDerecho+0x1e>
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d00d      	beq.n	8001b74 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001b58:	e019      	b.n	8001b8e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <setMotorDerecho+0x60>)
 8001b62:	f001 fe6d 	bl	8003840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001b66:	2201      	movs	r2, #1
 8001b68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b6c:	480b      	ldr	r0, [pc, #44]	@ (8001b9c <setMotorDerecho+0x60>)
 8001b6e:	f001 fe67 	bl	8003840 <HAL_GPIO_WritePin>
		break;
 8001b72:	e00c      	b.n	8001b8e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b7a:	4808      	ldr	r0, [pc, #32]	@ (8001b9c <setMotorDerecho+0x60>)
 8001b7c:	f001 fe60 	bl	8003840 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <setMotorDerecho+0x60>)
 8001b88:	f001 fe5a 	bl	8003840 <HAL_GPIO_WritePin>
		break;
 8001b8c:	bf00      	nop
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40020400 	.word	0x40020400

08001ba0 <verificar_sensor>:

bool verificar_sensor(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001baa:	2180      	movs	r1, #128	@ 0x80
 8001bac:	4812      	ldr	r0, [pc, #72]	@ (8001bf8 <verificar_sensor+0x58>)
 8001bae:	f001 fe2f 	bl	8003810 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <verificar_sensor+0x5c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	79ba      	ldrb	r2, [r7, #6]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d015      	beq.n	8001bec <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001bc0:	2014      	movs	r0, #20
 8001bc2:	f000 fbe1 	bl	8002388 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	480b      	ldr	r0, [pc, #44]	@ (8001bf8 <verificar_sensor+0x58>)
 8001bca:	f001 fe21 	bl	8003810 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 8001bd2:	797a      	ldrb	r2, [r7, #5]
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d102      	bne.n	8001be0 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 8001bda:	4a08      	ldr	r2, [pc, #32]	@ (8001bfc <verificar_sensor+0x5c>)
 8001bdc:	797b      	ldrb	r3, [r7, #5]
 8001bde:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <verificar_sensor+0x5c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <verificar_sensor+0x4c>
			pedido = true;
 8001be8:	2301      	movs	r3, #1
 8001bea:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	20000006 	.word	0x20000006

08001c00 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d83a      	bhi.n	8001c8c <act_pared+0x8c>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <act_pared+0x1c>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c45 	.word	0x08001c45
 8001c24:	08001c5d 	.word	0x08001c5d
 8001c28:	08001c75 	.word	0x08001c75
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	440b      	add	r3, r1
 8001c3a:	f042 0208 	orr.w	r2, r2, #8
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
		break;
 8001c42:	e025      	b.n	8001c90 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	440b      	add	r3, r1
 8001c52:	f042 0204 	orr.w	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
		break;
 8001c5a:	e019      	b.n	8001c90 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	781a      	ldrb	r2, [r3, #0]
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	440b      	add	r3, r1
 8001c6a:	f042 0202 	orr.w	r2, r2, #2
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e00d      	b.n	8001c90 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	440b      	add	r3, r1
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
		break;
 8001c8a:	e001      	b.n	8001c90 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	e003      	b.n	8001c98 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b087      	sub	sp, #28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e08b      	b.n	8001dcc <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e081      	b.n	8001dbe <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001cba:	2364      	movs	r3, #100	@ 0x64
 8001cbc:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b0b      	cmp	r3, #11
 8001cc2:	dc15      	bgt.n	8001cf0 <act_pesos+0x4c>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10d      	bne.n	8001cf0 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	7dfa      	ldrb	r2, [r7, #23]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d905      	bls.n	8001cf0 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d01e      	beq.n	8001d34 <act_pesos+0x90>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b07      	cmp	r3, #7
 8001cfa:	d01b      	beq.n	8001d34 <act_pesos+0x90>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b0b      	cmp	r3, #11
 8001d00:	d018      	beq.n	8001d34 <act_pesos+0x90>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d015      	beq.n	8001d34 <act_pesos+0x90>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	7dfa      	ldrb	r2, [r7, #23]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d905      	bls.n	8001d34 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	dd15      	ble.n	8001d66 <act_pesos+0xc2>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10d      	bne.n	8001d66 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3b04      	subs	r3, #4
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	7dfa      	ldrb	r2, [r7, #23]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d905      	bls.n	8001d66 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	3b04      	subs	r3, #4
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d119      	bne.n	8001daa <act_pesos+0x106>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d016      	beq.n	8001daa <act_pesos+0x106>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d013      	beq.n	8001daa <act_pesos+0x106>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d010      	beq.n	8001daa <act_pesos+0x106>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b0c      	cmp	r3, #12
 8001d8c:	d00d      	beq.n	8001daa <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	7dfa      	ldrb	r2, [r7, #23]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d905      	bls.n	8001daa <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	7dfa      	ldrb	r2, [r7, #23]
 8001db2:	3201      	adds	r2, #1
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b0e      	cmp	r3, #14
 8001dc2:	f77f af7a 	ble.w	8001cba <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b0e      	cmp	r3, #14
 8001dd0:	f77f af70 	ble.w	8001cb4 <act_pesos+0x10>
		}
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	371c      	adds	r7, #28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion) {
 8001de4:	b480      	push	{r7}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	4613      	mov	r3, r2
 8001df0:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 8001df2:	230f      	movs	r3, #15
 8001df4:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	7dfa      	ldrb	r2, [r7, #23]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d915      	bls.n	8001e32 <calculo_minimo_peso+0x4e>
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10d      	bne.n	8001e32 <calculo_minimo_peso+0x4e>
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b0b      	cmp	r3, #11
 8001e1a:	d80a      	bhi.n	8001e32 <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4413      	add	r3, r2
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <calculo_minimo_peso+0x138>)
 8001e30:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	3301      	adds	r3, #1
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d91e      	bls.n	8001e80 <calculo_minimo_peso+0x9c>
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d116      	bne.n	8001e80 <calculo_minimo_peso+0x9c>
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d013      	beq.n	8001e80 <calculo_minimo_peso+0x9c>
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b07      	cmp	r3, #7
 8001e5c:	d010      	beq.n	8001e80 <calculo_minimo_peso+0x9c>
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b0b      	cmp	r3, #11
 8001e62:	d00d      	beq.n	8001e80 <calculo_minimo_peso+0x9c>
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	2b0f      	cmp	r3, #15
 8001e68:	d00a      	beq.n	8001e80 <calculo_minimo_peso+0x9c>
		minimo_peso = peso[ubicacion + 1];
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b27      	ldr	r3, [pc, #156]	@ (8001f1c <calculo_minimo_peso+0x138>)
 8001e7e:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001e80:	79fb      	ldrb	r3, [r7, #7]
 8001e82:	3b04      	subs	r3, #4
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	7dfa      	ldrb	r2, [r7, #23]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d915      	bls.n	8001ebc <calculo_minimo_peso+0xd8>
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10d      	bne.n	8001ebc <calculo_minimo_peso+0xd8>
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d90a      	bls.n	8001ebc <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	3b04      	subs	r3, #4
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	3b04      	subs	r3, #4
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <calculo_minimo_peso+0x138>)
 8001eba:	701a      	strb	r2, [r3, #0]

	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	7dfa      	ldrb	r2, [r7, #23]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d91e      	bls.n	8001f0a <calculo_minimo_peso+0x126>
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d116      	bne.n	8001f0a <calculo_minimo_peso+0x126>
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d013      	beq.n	8001f0a <calculo_minimo_peso+0x126>
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b07      	cmp	r3, #7
 8001ee6:	d010      	beq.n	8001f0a <calculo_minimo_peso+0x126>
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	2b0b      	cmp	r3, #11
 8001eec:	d00d      	beq.n	8001f0a <calculo_minimo_peso+0x126>
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d00a      	beq.n	8001f0a <calculo_minimo_peso+0x126>
		minimo_peso = peso[ubicacion - 1];
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <calculo_minimo_peso+0x138>)
 8001f08:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 8001f0a:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <calculo_minimo_peso+0x138>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000000 	.word	0x20000000

08001f20 <filtrado_pared>:
void filtrado_pared(void) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 8001f26:	f000 fa23 	bl	8002370 <HAL_GetTick>
 8001f2a:	6078      	str	r0, [r7, #4]
	if (tiempo_rebotes <= (tiempo_actual - tiempo_inicio)) {
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <filtrado_pared+0x3c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b1d      	cmp	r3, #29
 8001f36:	d90c      	bls.n	8001f52 <filtrado_pared+0x32>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8001f38:	2140      	movs	r1, #64	@ 0x40
 8001f3a:	4809      	ldr	r0, [pc, #36]	@ (8001f60 <filtrado_pared+0x40>)
 8001f3c:	f001 fc68 	bl	8003810 <HAL_GPIO_ReadPin>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <filtrado_pared+0x32>

}


*/
			solicitud_actualizar = 1;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <filtrado_pared+0x44>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
			interrupcion_pared = 0;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <filtrado_pared+0x48>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000154 	.word	0x20000154
 8001f60:	40020800 	.word	0x40020800
 8001f64:	20000158 	.word	0x20000158
 8001f68:	20000150 	.word	0x20000150

08001f6c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == sensor_frontal_Pin) && (filtrado == 0)) {
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b40      	cmp	r3, #64	@ 0x40
 8001f7a:	d10c      	bne.n	8001f96 <HAL_GPIO_EXTI_Callback+0x2a>
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <HAL_GPIO_EXTI_Callback+0x2a>
		tiempo_inicio = HAL_GetTick();
 8001f86:	f000 f9f3 	bl	8002370 <HAL_GetTick>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a05      	ldr	r2, [pc, #20]	@ (8001fa4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001f8e:	6013      	str	r3, [r2, #0]
		filtrado = 1;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
	}
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000159 	.word	0x20000159
 8001fa4:	20000154 	.word	0x20000154

08001fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fac:	b672      	cpsid	i
}
 8001fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <Error_Handler+0x8>

08001fb4 <HAL_MspInit>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f000 febe 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_ADC_MspInit>:
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	@ 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2f      	ldr	r2, [pc, #188]	@ (80020e0 <HAL_ADC_MspInit+0xdc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d158      	bne.n	80020d8 <HAL_ADC_MspInit+0xd4>
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a2d      	ldr	r2, [pc, #180]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_ADC_MspInit+0xe0>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2303      	movs	r3, #3
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2303      	movs	r3, #3
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	f107 0314 	add.w	r3, r7, #20
 800206e:	4619      	mov	r1, r3
 8002070:	481d      	ldr	r0, [pc, #116]	@ (80020e8 <HAL_ADC_MspInit+0xe4>)
 8002072:	f001 fa31 	bl	80034d8 <HAL_GPIO_Init>
 8002076:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 8002078:	4a1d      	ldr	r2, [pc, #116]	@ (80020f0 <HAL_ADC_MspInit+0xec>)
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 800207e:	2200      	movs	r2, #0
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 8002090:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002094:	611a      	str	r2, [r3, #16]
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 8002098:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800209c:	615a      	str	r2, [r3, #20]
 800209e:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ac:	61da      	str	r2, [r3, #28]
 80020ae:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020b4:	621a      	str	r2, [r3, #32]
 80020b6:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80020bc:	480b      	ldr	r0, [pc, #44]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020be:	f000 fe9b 	bl	8002df8 <HAL_DMA_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_ADC_MspInit+0xc8>
 80020c8:	f7ff ff6e 	bl	8001fa8 <Error_Handler>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80020d2:	4a06      	ldr	r2, [pc, #24]	@ (80020ec <HAL_ADC_MspInit+0xe8>)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80020d8:	bf00      	nop
 80020da:	3728      	adds	r7, #40	@ 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40012000 	.word	0x40012000
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400
 80020ec:	20000078 	.word	0x20000078
 80020f0:	40026410 	.word	0x40026410

080020f4 <HAL_TIM_Base_MspInit>:
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <HAL_TIM_Base_MspInit+0x3c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10d      	bne.n	8002122 <HAL_TIM_Base_MspInit+0x2e>
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6413      	str	r3, [r2, #64]	@ 0x40
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <HAL_TIM_Base_MspInit+0x40>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40000400 	.word	0x40000400
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_TIM_MspPostInit>:
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <HAL_TIM_MspPostInit+0x68>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11e      	bne.n	8002198 <HAL_TIM_MspPostInit+0x60>
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	4a10      	ldr	r2, [pc, #64]	@ (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	@ 0x30
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_TIM_MspPostInit+0x6c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	2302      	movs	r3, #2
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	2300      	movs	r3, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	2302      	movs	r3, #2
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4619      	mov	r1, r3
 8002192:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <HAL_TIM_MspPostInit+0x70>)
 8002194:	f001 f9a0 	bl	80034d8 <HAL_GPIO_Init>
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020800 	.word	0x40020800

080021ac <NMI_Handler>:
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	bf00      	nop
 80021b2:	e7fd      	b.n	80021b0 <NMI_Handler+0x4>

080021b4 <HardFault_Handler>:
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	bf00      	nop
 80021ba:	e7fd      	b.n	80021b8 <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <MemManage_Handler+0x4>

080021c4 <BusFault_Handler>:
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	bf00      	nop
 80021d2:	e7fd      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d4 <SVC_Handler>:
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <DebugMon_Handler>:
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <PendSV_Handler>:
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <SysTick_Handler>:
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
 8002202:	f000 f8a1 	bl	8002348 <HAL_IncTick>
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}

0800220a <EXTI9_5_IRQHandler>:
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
 800220e:	2040      	movs	r0, #64	@ 0x40
 8002210:	f001 fb30 	bl	8003874 <HAL_GPIO_EXTI_IRQHandler>
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}

08002218 <DMA2_Stream0_IRQHandler>:
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <DMA2_Stream0_IRQHandler+0x10>)
 800221e:	f000 fef1 	bl	8003004 <HAL_DMA_IRQHandler>
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000078 	.word	0x20000078

0800222c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <Reset_Handler>:
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002288 <LoopFillZerobss+0xe>
 8002254:	f7ff ffea 	bl	800222c <SystemInit>
 8002258:	480c      	ldr	r0, [pc, #48]	@ (800228c <LoopFillZerobss+0x12>)
 800225a:	490d      	ldr	r1, [pc, #52]	@ (8002290 <LoopFillZerobss+0x16>)
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <LoopFillZerobss+0x1a>)
 800225e:	2300      	movs	r3, #0
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:
 8002262:	58d4      	ldr	r4, [r2, r3]
 8002264:	50c4      	str	r4, [r0, r3]
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:
 8002268:	18c4      	adds	r4, r0, r3
 800226a:	428c      	cmp	r4, r1
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <LoopFillZerobss+0x1e>)
 8002270:	4c0a      	ldr	r4, [pc, #40]	@ (800229c <LoopFillZerobss+0x22>)
 8002272:	2300      	movs	r3, #0
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:
 800227a:	42a2      	cmp	r2, r4
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>
 800227e:	f002 fe09 	bl	8004e94 <__libc_init_array>
 8002282:	f7fe fc3d 	bl	8000b00 <main>
 8002286:	4770      	bx	lr
 8002288:	20020000 	.word	0x20020000
 800228c:	20000000 	.word	0x20000000
 8002290:	20000014 	.word	0x20000014
 8002294:	08004f1c 	.word	0x08004f1c
 8002298:	20000014 	.word	0x20000014
 800229c:	200001e4 	.word	0x200001e4

080022a0 <ADC_IRQHandler>:
 80022a0:	e7fe      	b.n	80022a0 <ADC_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_Init+0x40>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_Init+0x40>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <HAL_Init+0x40>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 fd51 	bl	8002d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f808 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff fe6c 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 fd69 	bl	8002dde <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 fd31 	bl	8002d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000008 	.word	0x20000008
 8002340:	20000010 	.word	0x20000010
 8002344:	2000000c 	.word	0x2000000c

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000010 	.word	0x20000010
 800236c:	200001e0 	.word	0x200001e0

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200001e0 	.word	0x200001e0

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffde 	bl	8002370 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000010 	.word	0x20000010

080023d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e033      	b.n	800244e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fe08 	bl	8002004 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002416:	f023 0302 	bic.w	r3, r3, #2
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fa58 	bl	80028d8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
 800243e:	e001      	b.n	8002444 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADC_Start_DMA+0x22>
 8002476:	2302      	movs	r3, #2
 8002478:	e0eb      	b.n	8002652 <HAL_ADC_Start_DMA+0x1fa>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d018      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024a0:	4b6e      	ldr	r3, [pc, #440]	@ (800265c <HAL_ADC_Start_DMA+0x204>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_ADC_Start_DMA+0x208>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d107      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	f040 80a3 	bne.w	8002638 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800251c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002530:	d106      	bne.n	8002540 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	f023 0206 	bic.w	r2, r3, #6
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
 800253e:	e002      	b.n	8002546 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800254e:	4b45      	ldr	r3, [pc, #276]	@ (8002664 <HAL_ADC_Start_DMA+0x20c>)
 8002550:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002556:	4a44      	ldr	r2, [pc, #272]	@ (8002668 <HAL_ADC_Start_DMA+0x210>)
 8002558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255e:	4a43      	ldr	r2, [pc, #268]	@ (800266c <HAL_ADC_Start_DMA+0x214>)
 8002560:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	4a42      	ldr	r2, [pc, #264]	@ (8002670 <HAL_ADC_Start_DMA+0x218>)
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002572:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002582:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002592:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	334c      	adds	r3, #76	@ 0x4c
 800259e:	4619      	mov	r1, r3
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f000 fcd6 	bl	8002f54 <HAL_DMA_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d12a      	bne.n	800260e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_ADC_Start_DMA+0x21c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d015      	beq.n	80025ee <HAL_ADC_Start_DMA+0x196>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <HAL_ADC_Start_DMA+0x220>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_Start_DMA+0x180>
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_ADC_Start_DMA+0x20c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a27      	ldr	r2, [pc, #156]	@ (800267c <HAL_ADC_Start_DMA+0x224>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d136      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
 80025e2:	4b20      	ldr	r3, [pc, #128]	@ (8002664 <HAL_ADC_Start_DMA+0x20c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d130      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d129      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e020      	b.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a18      	ldr	r2, [pc, #96]	@ (8002674 <HAL_ADC_Start_DMA+0x21c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d11b      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d114      	bne.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002634:	609a      	str	r2, [r3, #8]
 8002636:	e00b      	b.n	8002650 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002650:	7ffb      	ldrb	r3, [r7, #31]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000008 	.word	0x20000008
 8002660:	431bde83 	.word	0x431bde83
 8002664:	40012300 	.word	0x40012300
 8002668:	08002ad1 	.word	0x08002ad1
 800266c:	08002b8b 	.word	0x08002b8b
 8002670:	08002ba7 	.word	0x08002ba7
 8002674:	40012000 	.word	0x40012000
 8002678:	40012100 	.word	0x40012100
 800267c:	40012200 	.word	0x40012200

08002680 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x1c>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e105      	b.n	80028bc <HAL_ADC_ConfigChannel+0x228>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d925      	bls.n	800270c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68d9      	ldr	r1, [r3, #12]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	3b1e      	subs	r3, #30
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43da      	mvns	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	400a      	ands	r2, r1
 80026e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68d9      	ldr	r1, [r3, #12]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	4618      	mov	r0, r3
 80026f8:	4603      	mov	r3, r0
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4403      	add	r3, r0
 80026fe:	3b1e      	subs	r3, #30
 8002700:	409a      	lsls	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	e022      	b.n	8002752 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	2207      	movs	r2, #7
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	400a      	ands	r2, r1
 800272e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6919      	ldr	r1, [r3, #16]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	4603      	mov	r3, r0
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	4403      	add	r3, r0
 8002748:	409a      	lsls	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d824      	bhi.n	80027a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	3b05      	subs	r3, #5
 800276c:	221f      	movs	r2, #31
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43da      	mvns	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	400a      	ands	r2, r1
 800277a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4618      	mov	r0, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	3b05      	subs	r3, #5
 8002796:	fa00 f203 	lsl.w	r2, r0, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80027a2:	e04c      	b.n	800283e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	d824      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	3b23      	subs	r3, #35	@ 0x23
 80027be:	221f      	movs	r2, #31
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b23      	subs	r3, #35	@ 0x23
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027f4:	e023      	b.n	800283e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b41      	subs	r3, #65	@ 0x41
 8002808:	221f      	movs	r2, #31
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	400a      	ands	r2, r1
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	4618      	mov	r0, r3
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	3b41      	subs	r3, #65	@ 0x41
 8002832:	fa00 f203 	lsl.w	r2, r0, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_ADC_ConfigChannel+0x234>)
 8002840:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a21      	ldr	r2, [pc, #132]	@ (80028cc <HAL_ADC_ConfigChannel+0x238>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d109      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1cc>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b12      	cmp	r3, #18
 8002852:	d105      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_ADC_ConfigChannel+0x238>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d123      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x21e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b10      	cmp	r3, #16
 8002870:	d003      	beq.n	800287a <HAL_ADC_ConfigChannel+0x1e6>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b11      	cmp	r3, #17
 8002878:	d11b      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b10      	cmp	r3, #16
 800288c:	d111      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a10      	ldr	r2, [pc, #64]	@ (80028d4 <HAL_ADC_ConfigChannel+0x240>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	0c9a      	lsrs	r2, r3, #18
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028a4:	e002      	b.n	80028ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40012300 	.word	0x40012300
 80028cc:	40012000 	.word	0x40012000
 80028d0:	20000008 	.word	0x20000008
 80028d4:	431bde83 	.word	0x431bde83

080028d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028e0:	4b79      	ldr	r3, [pc, #484]	@ (8002ac8 <ADC_Init+0x1f0>)
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800290c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6859      	ldr	r1, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	021a      	lsls	r2, r3, #8
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002930:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	4a58      	ldr	r2, [pc, #352]	@ (8002acc <ADC_Init+0x1f4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d022      	beq.n	80029b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800297e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e00f      	b.n	80029d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029d4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0202 	bic.w	r2, r2, #2
 80029e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6899      	ldr	r1, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	7e1b      	ldrb	r3, [r3, #24]
 80029f0:	005a      	lsls	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a12:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	035a      	lsls	r2, r3, #13
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	e007      	b.n	8002a4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	051a      	lsls	r2, r3, #20
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6899      	ldr	r1, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a8e:	025a      	lsls	r2, r3, #9
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6899      	ldr	r1, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	029a      	lsls	r2, r3, #10
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40012300 	.word	0x40012300
 8002acc:	0f000001 	.word	0x0f000001

08002ad0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d13c      	bne.n	8002b64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d12b      	bne.n	8002b5c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d127      	bne.n	8002b5c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d119      	bne.n	8002b5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0220 	bic.w	r2, r2, #32
 8002b36:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f7fe fe49 	bl	80017f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b62:	e00e      	b.n	8002b82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fd85 	bl	8002680 <HAL_ADC_ErrorCallback>
}
 8002b76:	e004      	b.n	8002b82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7fe fe1d 	bl	80017d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2240      	movs	r2, #64	@ 0x40
 8002bb8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f043 0204 	orr.w	r2, r3, #4
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fd5a 	bl	8002680 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be4:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c06:	4a04      	ldr	r2, [pc, #16]	@ (8002c18 <__NVIC_SetPriorityGrouping+0x44>)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60d3      	str	r3, [r2, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c20:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <__NVIC_GetPriorityGrouping+0x18>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0307 	and.w	r3, r3, #7
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	db0b      	blt.n	8002c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	f003 021f 	and.w	r2, r3, #31
 8002c50:	4907      	ldr	r1, [pc, #28]	@ (8002c70 <__NVIC_EnableIRQ+0x38>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	2001      	movs	r0, #1
 8002c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	@ (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	@ (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	@ 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	@ 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d40:	d301      	bcc.n	8002d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d42:	2301      	movs	r3, #1
 8002d44:	e00f      	b.n	8002d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <SysTick_Config+0x40>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4e:	210f      	movs	r1, #15
 8002d50:	f04f 30ff 	mov.w	r0, #4294967295
 8002d54:	f7ff ff8e 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <SysTick_Config+0x40>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5e:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <SysTick_Config+0x40>)
 8002d60:	2207      	movs	r2, #7
 8002d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	e000e010 	.word	0xe000e010

08002d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7ff ff29 	bl	8002bd4 <__NVIC_SetPriorityGrouping>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b086      	sub	sp, #24
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d9c:	f7ff ff3e 	bl	8002c1c <__NVIC_GetPriorityGrouping>
 8002da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	68b9      	ldr	r1, [r7, #8]
 8002da6:	6978      	ldr	r0, [r7, #20]
 8002da8:	f7ff ff8e 	bl	8002cc8 <NVIC_EncodePriority>
 8002dac:	4602      	mov	r2, r0
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff5d 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff31 	bl	8002c38 <__NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffa2 	bl	8002d30 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e04:	f7ff fab4 	bl	8002370 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e099      	b.n	8002f48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e34:	e00f      	b.n	8002e56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e36:	f7ff fa9b 	bl	8002370 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d908      	bls.n	8002e56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e078      	b.n	8002f48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e8      	bne.n	8002e36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	4b38      	ldr	r3, [pc, #224]	@ (8002f50 <HAL_DMA_Init+0x158>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d107      	bne.n	8002ec0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d117      	bne.n	8002f1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eee:	697a      	ldr	r2, [r7, #20]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 fa6f 	bl	80033e0 <DMA_CheckFifoParam>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2240      	movs	r2, #64	@ 0x40
 8002f0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f16:	2301      	movs	r3, #1
 8002f18:	e016      	b.n	8002f48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fa26 	bl	8003374 <DMA_CalcBaseAndBitshift>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	223f      	movs	r2, #63	@ 0x3f
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	f010803f 	.word	0xf010803f

08002f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_Start_IT+0x26>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e040      	b.n	8002ffc <HAL_DMA_Start_IT+0xa8>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d12f      	bne.n	8002fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f9b8 	bl	8003318 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fac:	223f      	movs	r2, #63	@ 0x3f
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0216 	orr.w	r2, r2, #22
 8002fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d007      	beq.n	8002fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
 8002fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e005      	b.n	8002ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003010:	4b8e      	ldr	r3, [pc, #568]	@ (800324c <HAL_DMA_IRQHandler+0x248>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a8e      	ldr	r2, [pc, #568]	@ (8003250 <HAL_DMA_IRQHandler+0x24c>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0a9b      	lsrs	r3, r3, #10
 800301c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302e:	2208      	movs	r2, #8
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01a      	beq.n	8003070 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2208      	movs	r2, #8
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d012      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00b      	beq.n	80030a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2204      	movs	r2, #4
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d012      	beq.n	80030dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c8:	2204      	movs	r2, #4
 80030ca:	409a      	lsls	r2, r3
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	2210      	movs	r2, #16
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d043      	beq.n	8003174 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d03c      	beq.n	8003174 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fe:	2210      	movs	r2, #16
 8003100:	409a      	lsls	r2, r3
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d018      	beq.n	8003146 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d108      	bne.n	8003134 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d024      	beq.n	8003174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	4798      	blx	r3
 8003132:	e01f      	b.n	8003174 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
 8003144:	e016      	b.n	8003174 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d107      	bne.n	8003164 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0208 	bic.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003178:	2220      	movs	r2, #32
 800317a:	409a      	lsls	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 808f 	beq.w	80032a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8087 	beq.w	80032a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800319a:	2220      	movs	r2, #32
 800319c:	409a      	lsls	r2, r3
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	d136      	bne.n	800321c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0216 	bic.w	r2, r2, #22
 80031bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <HAL_DMA_IRQHandler+0x1da>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0208 	bic.w	r2, r2, #8
 80031ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	223f      	movs	r2, #63	@ 0x3f
 80031f4:	409a      	lsls	r2, r3
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	2b00      	cmp	r3, #0
 8003210:	d07e      	beq.n	8003310 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	4798      	blx	r3
        }
        return;
 800321a:	e079      	b.n	8003310 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10d      	bne.n	8003254 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	2b00      	cmp	r3, #0
 800323e:	d031      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e02c      	b.n	80032a4 <HAL_DMA_IRQHandler+0x2a0>
 800324a:	bf00      	nop
 800324c:	20000008 	.word	0x20000008
 8003250:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d023      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e01e      	b.n	80032a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10f      	bne.n	8003294 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0210 	bic.w	r2, r2, #16
 8003282:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d032      	beq.n	8003312 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d022      	beq.n	80032fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2205      	movs	r2, #5
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	3301      	adds	r3, #1
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d307      	bcc.n	80032ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f2      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x2cc>
 80032ea:	e000      	b.n	80032ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e000      	b.n	8003312 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003310:	bf00      	nop
    }
  }
}
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003334:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b40      	cmp	r3, #64	@ 0x40
 8003344:	d108      	bne.n	8003358 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003356:	e007      	b.n	8003368 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
}
 8003368:	bf00      	nop
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	3b10      	subs	r3, #16
 8003384:	4a14      	ldr	r2, [pc, #80]	@ (80033d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800338e:	4a13      	ldr	r2, [pc, #76]	@ (80033dc <DMA_CalcBaseAndBitshift+0x68>)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d909      	bls.n	80033b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033aa:	f023 0303 	bic.w	r3, r3, #3
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b4:	e007      	b.n	80033c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	aaaaaaab 	.word	0xaaaaaaab
 80033dc:	08004f04 	.word	0x08004f04

080033e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11f      	bne.n	800343a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b03      	cmp	r3, #3
 80033fe:	d856      	bhi.n	80034ae <DMA_CheckFifoParam+0xce>
 8003400:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <DMA_CheckFifoParam+0x28>)
 8003402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003406:	bf00      	nop
 8003408:	08003419 	.word	0x08003419
 800340c:	0800342b 	.word	0x0800342b
 8003410:	08003419 	.word	0x08003419
 8003414:	080034af 	.word	0x080034af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d046      	beq.n	80034b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003428:	e043      	b.n	80034b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003432:	d140      	bne.n	80034b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003438:	e03d      	b.n	80034b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003442:	d121      	bne.n	8003488 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d837      	bhi.n	80034ba <DMA_CheckFifoParam+0xda>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <DMA_CheckFifoParam+0x70>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003461 	.word	0x08003461
 8003454:	08003467 	.word	0x08003467
 8003458:	08003461 	.word	0x08003461
 800345c:	08003479 	.word	0x08003479
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
      break;
 8003464:	e030      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d025      	beq.n	80034be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003476:	e022      	b.n	80034be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003480:	d11f      	bne.n	80034c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003486:	e01c      	b.n	80034c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d903      	bls.n	8003496 <DMA_CheckFifoParam+0xb6>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b03      	cmp	r3, #3
 8003492:	d003      	beq.n	800349c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003494:	e018      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      break;
 800349a:	e015      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      break;
 80034ac:	e00b      	b.n	80034c6 <DMA_CheckFifoParam+0xe6>
      break;
 80034ae:	bf00      	nop
 80034b0:	e00a      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e008      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e006      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <DMA_CheckFifoParam+0xe8>
      break;
 80034c6:	bf00      	nop
    }
  } 
  
  return status; 
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop

080034d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	@ 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	e16b      	b.n	80037cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034f4:	2201      	movs	r2, #1
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	429a      	cmp	r2, r3
 800350e:	f040 815a 	bne.w	80037c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b01      	cmp	r3, #1
 800351c:	d005      	beq.n	800352a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003526:	2b02      	cmp	r3, #2
 8003528:	d130      	bne.n	800358c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	2203      	movs	r2, #3
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4313      	orrs	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003560:	2201      	movs	r2, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 0201 	and.w	r2, r3, #1
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	2b03      	cmp	r3, #3
 8003596:	d017      	beq.n	80035c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	2203      	movs	r2, #3
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0303 	and.w	r3, r3, #3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d123      	bne.n	800361c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	08da      	lsrs	r2, r3, #3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3208      	adds	r2, #8
 80035dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	08da      	lsrs	r2, r3, #3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3208      	adds	r2, #8
 8003616:	69b9      	ldr	r1, [r7, #24]
 8003618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	2203      	movs	r2, #3
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4013      	ands	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f003 0203 	and.w	r2, r3, #3
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80b4 	beq.w	80037c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	4b60      	ldr	r3, [pc, #384]	@ (80037e4 <HAL_GPIO_Init+0x30c>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	4a5f      	ldr	r2, [pc, #380]	@ (80037e4 <HAL_GPIO_Init+0x30c>)
 8003668:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800366c:	6453      	str	r3, [r2, #68]	@ 0x44
 800366e:	4b5d      	ldr	r3, [pc, #372]	@ (80037e4 <HAL_GPIO_Init+0x30c>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003672:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800367a:	4a5b      	ldr	r2, [pc, #364]	@ (80037e8 <HAL_GPIO_Init+0x310>)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	089b      	lsrs	r3, r3, #2
 8003680:	3302      	adds	r3, #2
 8003682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	220f      	movs	r2, #15
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4013      	ands	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_GPIO_Init+0x314>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d02b      	beq.n	80036fe <HAL_GPIO_Init+0x226>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a51      	ldr	r2, [pc, #324]	@ (80037f0 <HAL_GPIO_Init+0x318>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d025      	beq.n	80036fa <HAL_GPIO_Init+0x222>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a50      	ldr	r2, [pc, #320]	@ (80037f4 <HAL_GPIO_Init+0x31c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01f      	beq.n	80036f6 <HAL_GPIO_Init+0x21e>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	@ (80037f8 <HAL_GPIO_Init+0x320>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d019      	beq.n	80036f2 <HAL_GPIO_Init+0x21a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	@ (80037fc <HAL_GPIO_Init+0x324>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <HAL_GPIO_Init+0x216>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003800 <HAL_GPIO_Init+0x328>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00d      	beq.n	80036ea <HAL_GPIO_Init+0x212>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003804 <HAL_GPIO_Init+0x32c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d007      	beq.n	80036e6 <HAL_GPIO_Init+0x20e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <HAL_GPIO_Init+0x330>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_GPIO_Init+0x20a>
 80036de:	2307      	movs	r3, #7
 80036e0:	e00e      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036e2:	2308      	movs	r3, #8
 80036e4:	e00c      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036e6:	2306      	movs	r3, #6
 80036e8:	e00a      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036ea:	2305      	movs	r3, #5
 80036ec:	e008      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036ee:	2304      	movs	r3, #4
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036f2:	2303      	movs	r3, #3
 80036f4:	e004      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x228>
 80036fe:	2300      	movs	r3, #0
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f002 0203 	and.w	r2, r2, #3
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4093      	lsls	r3, r2
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4313      	orrs	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003710:	4935      	ldr	r1, [pc, #212]	@ (80037e8 <HAL_GPIO_Init+0x310>)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_GPIO_Init+0x334>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003742:	4a32      	ldr	r2, [pc, #200]	@ (800380c <HAL_GPIO_Init+0x334>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003748:	4b30      	ldr	r3, [pc, #192]	@ (800380c <HAL_GPIO_Init+0x334>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800376c:	4a27      	ldr	r2, [pc, #156]	@ (800380c <HAL_GPIO_Init+0x334>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003772:	4b26      	ldr	r3, [pc, #152]	@ (800380c <HAL_GPIO_Init+0x334>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003796:	4a1d      	ldr	r2, [pc, #116]	@ (800380c <HAL_GPIO_Init+0x334>)
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_GPIO_Init+0x334>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037c0:	4a12      	ldr	r2, [pc, #72]	@ (800380c <HAL_GPIO_Init+0x334>)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3301      	adds	r3, #1
 80037ca:	61fb      	str	r3, [r7, #28]
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b0f      	cmp	r3, #15
 80037d0:	f67f ae90 	bls.w	80034f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3724      	adds	r7, #36	@ 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40013800 	.word	0x40013800
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40020400 	.word	0x40020400
 80037f4:	40020800 	.word	0x40020800
 80037f8:	40020c00 	.word	0x40020c00
 80037fc:	40021000 	.word	0x40021000
 8003800:	40021400 	.word	0x40021400
 8003804:	40021800 	.word	0x40021800
 8003808:	40021c00 	.word	0x40021c00
 800380c:	40013c00 	.word	0x40013c00

08003810 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	887b      	ldrh	r3, [r7, #2]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e001      	b.n	8003832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
 800384c:	4613      	mov	r3, r2
 800384e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003850:	787b      	ldrb	r3, [r7, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800385c:	e003      	b.n	8003866 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800385e:	887b      	ldrh	r3, [r7, #2]
 8003860:	041a      	lsls	r2, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	619a      	str	r2, [r3, #24]
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	4013      	ands	r3, r2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d006      	beq.n	8003898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800388a:	4a05      	ldr	r2, [pc, #20]	@ (80038a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fb6a 	bl	8001f6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40013c00 	.word	0x40013c00

080038a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e267      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d075      	beq.n	80039ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038c2:	4b88      	ldr	r3, [pc, #544]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4b85      	ldr	r3, [pc, #532]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4b82      	ldr	r3, [pc, #520]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038e6:	d10b      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05b      	beq.n	80039ac <HAL_RCC_OscConfig+0x108>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d157      	bne.n	80039ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e242      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x74>
 800390a:	4b76      	ldr	r3, [pc, #472]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a75      	ldr	r2, [pc, #468]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x98>
 8003922:	4b70      	ldr	r3, [pc, #448]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a6f      	ldr	r2, [pc, #444]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6c      	ldr	r2, [pc, #432]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 800393c:	4b69      	ldr	r3, [pc, #420]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a68      	ldr	r2, [pc, #416]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b66      	ldr	r3, [pc, #408]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a65      	ldr	r2, [pc, #404]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fd08 	bl	8002370 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003964:	f7fe fd04 	bl	8002370 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	@ 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e207      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b5b      	ldr	r3, [pc, #364]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xc0>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fcf4 	bl	8002370 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fcf0 	bl	8002370 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	@ 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1f3      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0xe8>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b47      	ldr	r3, [pc, #284]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b44      	ldr	r3, [pc, #272]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b41      	ldr	r3, [pc, #260]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1c7      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4937      	ldr	r1, [pc, #220]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b34      	ldr	r3, [pc, #208]	@ (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fca9 	bl	8002370 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fe fca5 	bl	8002370 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e1a8      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b28      	ldr	r3, [pc, #160]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4925      	ldr	r1, [pc, #148]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b24      	ldr	r3, [pc, #144]	@ (8003ae8 <HAL_RCC_OscConfig+0x244>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fc88 	bl	8002370 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fc84 	bl	8002370 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e187      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d036      	beq.n	8003afc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_RCC_OscConfig+0x248>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fc68 	bl	8002370 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fe fc64 	bl	8002370 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e167      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x200>
 8003ac2:	e01b      	b.n	8003afc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b09      	ldr	r3, [pc, #36]	@ (8003aec <HAL_RCC_OscConfig+0x248>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fc51 	bl	8002370 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e00e      	b.n	8003af0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fc4d 	bl	8002370 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d907      	bls.n	8003af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e150      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	42470000 	.word	0x42470000
 8003aec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	4b88      	ldr	r3, [pc, #544]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003af2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ea      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8097 	beq.w	8003c38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b0e:	4b81      	ldr	r3, [pc, #516]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	4a7c      	ldr	r2, [pc, #496]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3a:	4b77      	ldr	r3, [pc, #476]	@ (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d118      	bne.n	8003b78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b46:	4b74      	ldr	r3, [pc, #464]	@ (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a73      	ldr	r2, [pc, #460]	@ (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b52:	f7fe fc0d 	bl	8002370 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5a:	f7fe fc09 	bl	8002370 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e10c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d18 <HAL_RCC_OscConfig+0x474>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2ea>
 8003b80:	4b64      	ldr	r3, [pc, #400]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a63      	ldr	r2, [pc, #396]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b8c:	e01c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b05      	cmp	r3, #5
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x30c>
 8003b96:	4b5f      	ldr	r3, [pc, #380]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bae:	e00b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x324>
 8003bb0:	4b58      	ldr	r3, [pc, #352]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb4:	4a57      	ldr	r2, [pc, #348]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bbc:	4b55      	ldr	r3, [pc, #340]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc0:	4a54      	ldr	r2, [pc, #336]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 0304 	bic.w	r3, r3, #4
 8003bc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d015      	beq.n	8003bfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd0:	f7fe fbce 	bl	8002370 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fbca 	bl	8002370 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e0cb      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bee:	4b49      	ldr	r3, [pc, #292]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x334>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfc:	f7fe fbb8 	bl	8002370 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fe fbb4 	bl	8002370 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0b5      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d105      	bne.n	8003c38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c2c:	4b39      	ldr	r3, [pc, #228]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	4a38      	ldr	r2, [pc, #224]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a1 	beq.w	8003d84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c42:	4b34      	ldr	r3, [pc, #208]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d05c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d141      	bne.n	8003cda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c56:	4b31      	ldr	r3, [pc, #196]	@ (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fb88 	bl	8002370 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c64:	f7fe fb84 	bl	8002370 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e087      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	4b27      	ldr	r3, [pc, #156]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	019b      	lsls	r3, r3, #6
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	041b      	lsls	r3, r3, #16
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	491b      	ldr	r1, [pc, #108]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cac:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fb5d 	bl	8002370 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe fb59 	bl	8002370 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e05c      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ccc:	4b11      	ldr	r3, [pc, #68]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x416>
 8003cd8:	e054      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe fb46 	bl	8002370 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fe fb42 	bl	8002370 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e045      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x444>
 8003d06:	e03d      	b.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e038      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <HAL_RCC_OscConfig+0x4ec>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d121      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d11a      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d111      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0cc      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90c      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b65      	ldr	r3, [pc, #404]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d044      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b3f      	ldr	r3, [pc, #252]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3b      	ldr	r3, [pc, #236]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e067      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b37      	ldr	r3, [pc, #220]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4934      	ldr	r1, [pc, #208]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7fe fa74 	bl	8002370 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7fe fa70 	bl	8002370 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b25      	ldr	r3, [pc, #148]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20c      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	@ (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b12      	ldr	r3, [pc, #72]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f821 	bl	8003f60 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	@ (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	@ (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe f9d4 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	08004ef4 	.word	0x08004ef4
 8003f58:	20000008 	.word	0x20000008
 8003f5c:	2000000c 	.word	0x2000000c

08003f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f64:	b094      	sub	sp, #80	@ 0x50
 8003f66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f78:	4b79      	ldr	r3, [pc, #484]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d00d      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x40>
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	f200 80e1 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_RCC_GetSysClockFreq+0x34>
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f92:	e0db      	b.n	800414c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f94:	4b73      	ldr	r3, [pc, #460]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f98:	e0db      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f9a:	4b73      	ldr	r3, [pc, #460]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f9e:	e0d8      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fa8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003faa:	4b6d      	ldr	r3, [pc, #436]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d063      	beq.n	800407e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fca:	2300      	movs	r3, #0
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	6139      	str	r1, [r7, #16]
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004004:	4659      	mov	r1, fp
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4651      	mov	r1, sl
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4651      	mov	r1, sl
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4651      	mov	r1, sl
 8004014:	ebb2 0801 	subs.w	r8, r2, r1
 8004018:	4659      	mov	r1, fp
 800401a:	eb63 0901 	sbc.w	r9, r3, r1
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800402a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800402e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4623      	mov	r3, r4
 8004038:	eb18 0303 	adds.w	r3, r8, r3
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	462b      	mov	r3, r5
 8004040:	eb49 0303 	adc.w	r3, r9, r3
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004052:	4629      	mov	r1, r5
 8004054:	024b      	lsls	r3, r1, #9
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800405c:	4621      	mov	r1, r4
 800405e:	024a      	lsls	r2, r1, #9
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800406a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800406c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004070:	f7fc fbb0 	bl	80007d4 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800407c:	e058      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407e:	4b38      	ldr	r3, [pc, #224]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	099b      	lsrs	r3, r3, #6
 8004084:	2200      	movs	r2, #0
 8004086:	4618      	mov	r0, r3
 8004088:	4611      	mov	r1, r2
 800408a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	2300      	movs	r3, #0
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
 8004094:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004098:	4642      	mov	r2, r8
 800409a:	464b      	mov	r3, r9
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	0159      	lsls	r1, r3, #5
 80040a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040aa:	0150      	lsls	r0, r2, #5
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4641      	mov	r1, r8
 80040b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040d0:	ebb2 040a 	subs.w	r4, r2, sl
 80040d4:	eb63 050b 	sbc.w	r5, r3, fp
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004106:	4629      	mov	r1, r5
 8004108:	028b      	lsls	r3, r1, #10
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004110:	4621      	mov	r1, r4
 8004112:	028a      	lsls	r2, r1, #10
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800411a:	2200      	movs	r2, #0
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004124:	f7fc fb56 	bl	80007d4 <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x200>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	0c1b      	lsrs	r3, r3, #16
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	3301      	adds	r3, #1
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004140:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800414a:	e002      	b.n	8004152 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x204>)
 800414e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004150:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004154:	4618      	mov	r0, r3
 8004156:	3750      	adds	r7, #80	@ 0x50
 8004158:	46bd      	mov	sp, r7
 800415a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415e:	bf00      	nop
 8004160:	40023800 	.word	0x40023800
 8004164:	00f42400 	.word	0x00f42400
 8004168:	007a1200 	.word	0x007a1200

0800416c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e041      	b.n	8004202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd ffae 	bl	80020f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3304      	adds	r3, #4
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f000 fad8 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e041      	b.n	80042a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f839 	bl	80042a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f000 fa89 	bl	8004760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_TIM_PWM_Start+0x24>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e022      	b.n	8004326 <HAL_TIM_PWM_Start+0x6a>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d109      	bne.n	80042fa <HAL_TIM_PWM_Start+0x3e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	e015      	b.n	8004326 <HAL_TIM_PWM_Start+0x6a>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d109      	bne.n	8004314 <HAL_TIM_PWM_Start+0x58>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	bf14      	ite	ne
 800430c:	2301      	movne	r3, #1
 800430e:	2300      	moveq	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e008      	b.n	8004326 <HAL_TIM_PWM_Start+0x6a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07c      	b.n	8004428 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <HAL_TIM_PWM_Start+0x82>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800433c:	e013      	b.n	8004366 <HAL_TIM_PWM_Start+0xaa>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b04      	cmp	r3, #4
 8004342:	d104      	bne.n	800434e <HAL_TIM_PWM_Start+0x92>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800434c:	e00b      	b.n	8004366 <HAL_TIM_PWM_Start+0xaa>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d104      	bne.n	800435e <HAL_TIM_PWM_Start+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	e003      	b.n	8004366 <HAL_TIM_PWM_Start+0xaa>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2201      	movs	r2, #1
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fce6 	bl	8004d40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2d      	ldr	r2, [pc, #180]	@ (8004430 <HAL_TIM_PWM_Start+0x174>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_PWM_Start+0xcc>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2c      	ldr	r2, [pc, #176]	@ (8004434 <HAL_TIM_PWM_Start+0x178>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <HAL_TIM_PWM_Start+0xd0>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_TIM_PWM_Start+0xd2>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_TIM_PWM_Start+0x174>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d022      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043b4:	d01d      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_TIM_PWM_Start+0x17c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d018      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <HAL_TIM_PWM_Start+0x180>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <HAL_TIM_PWM_Start+0x184>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00e      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a16      	ldr	r2, [pc, #88]	@ (8004434 <HAL_TIM_PWM_Start+0x178>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <HAL_TIM_PWM_Start+0x188>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d004      	beq.n	80043f2 <HAL_TIM_PWM_Start+0x136>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a16      	ldr	r2, [pc, #88]	@ (8004448 <HAL_TIM_PWM_Start+0x18c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d111      	bne.n	8004416 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2b06      	cmp	r3, #6
 8004402:	d010      	beq.n	8004426 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f042 0201 	orr.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004414:	e007      	b.n	8004426 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40014000 	.word	0x40014000
 8004448:	40001800 	.word	0x40001800

0800444c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004466:	2302      	movs	r3, #2
 8004468:	e0ae      	b.n	80045c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f200 809f 	bhi.w	80045b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800447a:	a201      	add	r2, pc, #4	@ (adr r2, 8004480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	080044b5 	.word	0x080044b5
 8004484:	080045b9 	.word	0x080045b9
 8004488:	080045b9 	.word	0x080045b9
 800448c:	080045b9 	.word	0x080045b9
 8004490:	080044f5 	.word	0x080044f5
 8004494:	080045b9 	.word	0x080045b9
 8004498:	080045b9 	.word	0x080045b9
 800449c:	080045b9 	.word	0x080045b9
 80044a0:	08004537 	.word	0x08004537
 80044a4:	080045b9 	.word	0x080045b9
 80044a8:	080045b9 	.word	0x080045b9
 80044ac:	080045b9 	.word	0x080045b9
 80044b0:	08004577 	.word	0x08004577
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f9f6 	bl	80048ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0208 	orr.w	r2, r2, #8
 80044ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0204 	bic.w	r2, r2, #4
 80044de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	619a      	str	r2, [r3, #24]
      break;
 80044f2:	e064      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa46 	bl	800498c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	021a      	lsls	r2, r3, #8
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	619a      	str	r2, [r3, #24]
      break;
 8004534:	e043      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fa9b 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0208 	orr.w	r2, r2, #8
 8004550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0204 	bic.w	r2, r2, #4
 8004560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69d9      	ldr	r1, [r3, #28]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	61da      	str	r2, [r3, #28]
      break;
 8004574:	e023      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 faef 	bl	8004b60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	021a      	lsls	r2, r3, #8
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]
      break;
 80045b6:	e002      	b.n	80045be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	75fb      	strb	r3, [r7, #23]
      break;
 80045bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_TIM_ConfigClockSource+0x1c>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e0b4      	b.n	8004756 <HAL_TIM_ConfigClockSource+0x186>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800460a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004624:	d03e      	beq.n	80046a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462a:	f200 8087 	bhi.w	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	f000 8086 	beq.w	8004742 <HAL_TIM_ConfigClockSource+0x172>
 8004636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463a:	d87f      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800463c:	2b70      	cmp	r3, #112	@ 0x70
 800463e:	d01a      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xa6>
 8004640:	2b70      	cmp	r3, #112	@ 0x70
 8004642:	d87b      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004644:	2b60      	cmp	r3, #96	@ 0x60
 8004646:	d050      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0x11a>
 8004648:	2b60      	cmp	r3, #96	@ 0x60
 800464a:	d877      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800464c:	2b50      	cmp	r3, #80	@ 0x50
 800464e:	d03c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0xfa>
 8004650:	2b50      	cmp	r3, #80	@ 0x50
 8004652:	d873      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004654:	2b40      	cmp	r3, #64	@ 0x40
 8004656:	d058      	beq.n	800470a <HAL_TIM_ConfigClockSource+0x13a>
 8004658:	2b40      	cmp	r3, #64	@ 0x40
 800465a:	d86f      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800465c:	2b30      	cmp	r3, #48	@ 0x30
 800465e:	d064      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004660:	2b30      	cmp	r3, #48	@ 0x30
 8004662:	d86b      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b20      	cmp	r3, #32
 8004666:	d060      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d867      	bhi.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d05c      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004670:	2b10      	cmp	r3, #16
 8004672:	d05a      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	e062      	b.n	800473c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004686:	f000 fb3b 	bl	8004d00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
      break;
 80046a2:	e04f      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046b4:	f000 fb24 	bl	8004d00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046c6:	609a      	str	r2, [r3, #8]
      break;
 80046c8:	e03c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	461a      	mov	r2, r3
 80046d8:	f000 fa98 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2150      	movs	r1, #80	@ 0x50
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 faf1 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 80046e8:	e02c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	461a      	mov	r2, r3
 80046f8:	f000 fab7 	bl	8004c6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2160      	movs	r1, #96	@ 0x60
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fae1 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 8004708:	e01c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fa78 	bl	8004c0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2140      	movs	r1, #64	@ 0x40
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fad1 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 8004728:	e00c      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4619      	mov	r1, r3
 8004734:	4610      	mov	r0, r2
 8004736:	f000 fac8 	bl	8004cca <TIM_ITRx_SetConfig>
      break;
 800473a:	e003      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e000      	b.n	8004744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004754:	7bfb      	ldrb	r3, [r7, #15]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a43      	ldr	r2, [pc, #268]	@ (8004880 <TIM_Base_SetConfig+0x120>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d013      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477e:	d00f      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a40      	ldr	r2, [pc, #256]	@ (8004884 <TIM_Base_SetConfig+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a3f      	ldr	r2, [pc, #252]	@ (8004888 <TIM_Base_SetConfig+0x128>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a3e      	ldr	r2, [pc, #248]	@ (800488c <TIM_Base_SetConfig+0x12c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0x40>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a3d      	ldr	r2, [pc, #244]	@ (8004890 <TIM_Base_SetConfig+0x130>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a32      	ldr	r2, [pc, #200]	@ (8004880 <TIM_Base_SetConfig+0x120>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d02b      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c0:	d027      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004884 <TIM_Base_SetConfig+0x124>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d023      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004888 <TIM_Base_SetConfig+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01f      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <TIM_Base_SetConfig+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d01b      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	@ (8004890 <TIM_Base_SetConfig+0x130>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d017      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004894 <TIM_Base_SetConfig+0x134>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d013      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <TIM_Base_SetConfig+0x138>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00f      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a29      	ldr	r2, [pc, #164]	@ (800489c <TIM_Base_SetConfig+0x13c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00b      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a28      	ldr	r2, [pc, #160]	@ (80048a0 <TIM_Base_SetConfig+0x140>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a27      	ldr	r2, [pc, #156]	@ (80048a4 <TIM_Base_SetConfig+0x144>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d003      	beq.n	8004812 <TIM_Base_SetConfig+0xb2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <TIM_Base_SetConfig+0x148>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d108      	bne.n	8004824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a0e      	ldr	r2, [pc, #56]	@ (8004880 <TIM_Base_SetConfig+0x120>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0xf2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <TIM_Base_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d103      	bne.n	800485a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	691a      	ldr	r2, [r3, #16]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f043 0204 	orr.w	r2, r3, #4
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40010400 	.word	0x40010400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800
 80048a0:	40001800 	.word	0x40001800
 80048a4:	40001c00 	.word	0x40001c00
 80048a8:	40002000 	.word	0x40002000

080048ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0201 	bic.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0303 	bic.w	r3, r3, #3
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 0302 	bic.w	r3, r3, #2
 80048f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a20      	ldr	r2, [pc, #128]	@ (8004984 <TIM_OC1_SetConfig+0xd8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_OC1_SetConfig+0x64>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <TIM_OC1_SetConfig+0xdc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d10c      	bne.n	800492a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0308 	bic.w	r3, r3, #8
 8004916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a15      	ldr	r2, [pc, #84]	@ (8004984 <TIM_OC1_SetConfig+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_OC1_SetConfig+0x8e>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a14      	ldr	r2, [pc, #80]	@ (8004988 <TIM_OC1_SetConfig+0xdc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d111      	bne.n	800495e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40010000 	.word	0x40010000
 8004988:	40010400 	.word	0x40010400

0800498c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0210 	bic.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0320 	bic.w	r3, r3, #32
 80049d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a22      	ldr	r2, [pc, #136]	@ (8004a70 <TIM_OC2_SetConfig+0xe4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d003      	beq.n	80049f4 <TIM_OC2_SetConfig+0x68>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a21      	ldr	r2, [pc, #132]	@ (8004a74 <TIM_OC2_SetConfig+0xe8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a17      	ldr	r2, [pc, #92]	@ (8004a70 <TIM_OC2_SetConfig+0xe4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d003      	beq.n	8004a20 <TIM_OC2_SetConfig+0x94>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <TIM_OC2_SetConfig+0xe8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d113      	bne.n	8004a48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40010000 	.word	0x40010000
 8004a74:	40010400 	.word	0x40010400

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0303 	bic.w	r3, r3, #3
 8004aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a21      	ldr	r2, [pc, #132]	@ (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_OC3_SetConfig+0x66>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a20      	ldr	r2, [pc, #128]	@ (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10d      	bne.n	8004afa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a16      	ldr	r2, [pc, #88]	@ (8004b58 <TIM_OC3_SetConfig+0xe0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d003      	beq.n	8004b0a <TIM_OC3_SetConfig+0x92>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <TIM_OC3_SetConfig+0xe4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d113      	bne.n	8004b32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40010400 	.word	0x40010400

08004b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004baa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	031b      	lsls	r3, r3, #12
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a12      	ldr	r2, [pc, #72]	@ (8004c04 <TIM_OC4_SetConfig+0xa4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d003      	beq.n	8004bc8 <TIM_OC4_SetConfig+0x68>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a11      	ldr	r2, [pc, #68]	@ (8004c08 <TIM_OC4_SetConfig+0xa8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d109      	bne.n	8004bdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	019b      	lsls	r3, r3, #6
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	621a      	str	r2, [r3, #32]
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400

08004c0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0201 	bic.w	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f023 030a 	bic.w	r3, r3, #10
 8004c48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b087      	sub	sp, #28
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f023 0210 	bic.w	r2, r3, #16
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	031b      	lsls	r3, r3, #12
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ca6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ce0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f043 0307 	orr.w	r3, r3, #7
 8004cec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b087      	sub	sp, #28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2201      	movs	r2, #1
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	401a      	ands	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1a      	ldr	r2, [r3, #32]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	fa01 f303 	lsl.w	r3, r1, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_TIMEx_MasterConfigSynchronization>:
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e05a      	b.n	8004e5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60bb      	str	r3, [r7, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a21      	ldr	r2, [pc, #132]	@ (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d022      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d01d      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d018      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1b      	ldr	r2, [pc, #108]	@ (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00e      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a18      	ldr	r2, [pc, #96]	@ (8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d009      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a17      	ldr	r2, [pc, #92]	@ (8004e7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d004      	beq.n	8004e2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d10c      	bne.n	8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40001800 	.word	0x40001800

08004e84 <memset>:
 8004e84:	4402      	add	r2, r0
 8004e86:	4603      	mov	r3, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <memset+0xa>
 8004e8c:	4770      	bx	lr
 8004e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e92:	e7f9      	b.n	8004e88 <memset+0x4>

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	@ (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	@ (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f000 f818 	bl	8004edc <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	08004f14 	.word	0x08004f14
 8004ed0:	08004f14 	.word	0x08004f14
 8004ed4:	08004f14 	.word	0x08004f14
 8004ed8:	08004f18 	.word	0x08004f18

08004edc <_init>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr

08004ee8 <_fini>:
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	bf00      	nop
 8004eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eee:	bc08      	pop	{r3}
 8004ef0:	469e      	mov	lr, r3
 8004ef2:	4770      	bx	lr
