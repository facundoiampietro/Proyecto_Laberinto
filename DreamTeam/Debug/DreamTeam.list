
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042fc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004484  08004484  00005484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800449c  0800449c  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a4  080044a4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080044ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000001bc  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa9f  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b65  00000000  00000000  00010adf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  00012648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000919  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021368  00000000  00000000  00013b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cf99  00000000  00000000  00034e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20b8  00000000  00000000  00041e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113eda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003130  00000000  00000000  00113f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00117050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800446c 	.word	0x0800446c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800446c 	.word	0x0800446c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f8:	f001 f9b4 	bl	8001864 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fc:	f000 f8da 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000500:	f000 fa44 	bl	800098c <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa22 	bl	800094c <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f93e 	bl	8000788 <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f99c 	bl	8000848 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	4960      	ldr	r1, [pc, #384]	@ (8000694 <main+0x1a0>)
 8000514:	4860      	ldr	r0, [pc, #384]	@ (8000698 <main+0x1a4>)
 8000516:	f001 fa7f 	bl	8001a18 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b60      	ldr	r3, [pc, #384]	@ (800069c <main+0x1a8>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b5e      	ldr	r3, [pc, #376]	@ (800069c <main+0x1a8>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <main+0x1a8>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b5c      	ldr	r3, [pc, #368]	@ (800069c <main+0x1a8>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b5b      	ldr	r3, [pc, #364]	@ (800069c <main+0x1a8>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b59      	ldr	r3, [pc, #356]	@ (800069c <main+0x1a8>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b58      	ldr	r3, [pc, #352]	@ (800069c <main+0x1a8>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b57      	ldr	r3, [pc, #348]	@ (800069c <main+0x1a8>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b56      	ldr	r3, [pc, #344]	@ (800069c <main+0x1a8>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b55      	ldr	r3, [pc, #340]	@ (800069c <main+0x1a8>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b54      	ldr	r3, [pc, #336]	@ (800069c <main+0x1a8>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <main+0x1a8>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b52      	ldr	r3, [pc, #328]	@ (800069c <main+0x1a8>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b51      	ldr	r3, [pc, #324]	@ (800069c <main+0x1a8>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b50      	ldr	r3, [pc, #320]	@ (800069c <main+0x1a8>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <main+0x1a8>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b4e      	ldr	r3, [pc, #312]	@ (800069c <main+0x1a8>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <main+0x1a8>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b4b      	ldr	r3, [pc, #300]	@ (800069c <main+0x1a8>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b4a      	ldr	r3, [pc, #296]	@ (800069c <main+0x1a8>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b49      	ldr	r3, [pc, #292]	@ (800069c <main+0x1a8>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b48      	ldr	r3, [pc, #288]	@ (800069c <main+0x1a8>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b47      	ldr	r3, [pc, #284]	@ (800069c <main+0x1a8>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b46      	ldr	r3, [pc, #280]	@ (800069c <main+0x1a8>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b45      	ldr	r3, [pc, #276]	@ (800069c <main+0x1a8>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 800058c:	4b44      	ldr	r3, [pc, #272]	@ (80006a0 <main+0x1ac>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b43      	ldr	r3, [pc, #268]	@ (80006a0 <main+0x1ac>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b41      	ldr	r3, [pc, #260]	@ (80006a0 <main+0x1ac>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b40      	ldr	r3, [pc, #256]	@ (80006a0 <main+0x1ac>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b3f      	ldr	r3, [pc, #252]	@ (80006a0 <main+0x1ac>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b3e      	ldr	r3, [pc, #248]	@ (80006a0 <main+0x1ac>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b3c      	ldr	r3, [pc, #240]	@ (80006a0 <main+0x1ac>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b3b      	ldr	r3, [pc, #236]	@ (80006a0 <main+0x1ac>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b3a      	ldr	r3, [pc, #232]	@ (80006a0 <main+0x1ac>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b39      	ldr	r3, [pc, #228]	@ (80006a0 <main+0x1ac>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b37      	ldr	r3, [pc, #220]	@ (80006a0 <main+0x1ac>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b36      	ldr	r3, [pc, #216]	@ (80006a0 <main+0x1ac>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <main+0x1ac>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b34      	ldr	r3, [pc, #208]	@ (80006a0 <main+0x1ac>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b32      	ldr	r3, [pc, #200]	@ (80006a0 <main+0x1ac>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <main+0x1ac>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b30      	ldr	r3, [pc, #192]	@ (80006a0 <main+0x1ac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b2f      	ldr	r3, [pc, #188]	@ (80006a0 <main+0x1ac>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <main+0x1ac>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <main+0x1ac>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <main+0x1ac>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <main+0x1ac>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b2a      	ldr	r3, [pc, #168]	@ (80006a0 <main+0x1ac>)
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	4828      	ldr	r0, [pc, #160]	@ (80006a4 <main+0x1b0>)
 8000602:	f002 fbfd 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	4825      	ldr	r0, [pc, #148]	@ (80006a4 <main+0x1b0>)
 800060e:	f002 fbf7 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4822      	ldr	r0, [pc, #136]	@ (80006a4 <main+0x1b0>)
 800061a:	f002 fbf1 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	481f      	ldr	r0, [pc, #124]	@ (80006a4 <main+0x1b0>)
 8000626:	f002 fbeb 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	481e      	ldr	r0, [pc, #120]	@ (80006a8 <main+0x1b4>)
 800062e:	f003 f90d 	bl	800384c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	481c      	ldr	r0, [pc, #112]	@ (80006a8 <main+0x1b4>)
 8000636:	f003 f909 	bl	800384c <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0x1b8>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <main+0x1b8>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba=0; //Aca se elige que programa queremos que se realice
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <main+0x1bc>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		switch (prueba) {
 8000650:	4b17      	ldr	r3, [pc, #92]	@ (80006b0 <main+0x1bc>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d81b      	bhi.n	8000690 <main+0x19c>
 8000658:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <main+0x16c>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	0800067b 	.word	0x0800067b
 8000668:	08000681 	.word	0x08000681
 800066c:	08000687 	.word	0x08000687
 8000670:	0800068d 	.word	0x0800068d
		    case 0:
		        prueba_avanzar();
 8000674:	f000 fa00 	bl	8000a78 <prueba_avanzar>
		        break;
 8000678:	e00b      	b.n	8000692 <main+0x19e>
		    case 1:
		        prueba_giros_y_sensores();
 800067a:	f000 fa03 	bl	8000a84 <prueba_giros_y_sensores>
		        break;
 800067e:	e008      	b.n	8000692 <main+0x19e>
		    case 2:
		        prueba_casilla_n();
 8000680:	f000 fa7c 	bl	8000b7c <prueba_casilla_n>
		        break;
 8000684:	e005      	b.n	8000692 <main+0x19e>
		    case 3:
		    	prueba_post_relleno();
 8000686:	f000 fabd 	bl	8000c04 <prueba_post_relleno>
		        break;
 800068a:	e002      	b.n	8000692 <main+0x19e>
			case 4:	
				programa_principal();
 800068c:	f000 faee 	bl	8000c6c <programa_principal>
		    default:
		        
		        break;
 8000690:	bf00      	nop
		switch (prueba) {
 8000692:	e7dd      	b.n	8000650 <main+0x15c>
 8000694:	20000144 	.word	0x20000144
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000120 	.word	0x20000120
 80006a0:	20000130 	.word	0x20000130
 80006a4:	40020400 	.word	0x40020400
 80006a8:	200000d4 	.word	0x200000d4
 80006ac:	40000400 	.word	0x40000400
 80006b0:	20000140 	.word	0x20000140

080006b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fea6 	bl	8004414 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	@ (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	@ (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	@ (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	@ (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000728:	2332      	movs	r3, #50	@ 0x32
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fb7b 	bl	8002e34 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
		Error_Handler();
 8000744:	f000 ff16 	bl	8001574 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f002 fddc 	bl	8003324 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
		Error_Handler();
 8000772:	f000 feff 	bl	8001574 <Error_Handler>
	}
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800078e:	463b      	mov	r3, r7
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_ADC1_Init+0xb4>)
 800079c:	4a28      	ldr	r2, [pc, #160]	@ (8000840 <MX_ADC1_Init+0xb8>)
 800079e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80007ae:	4b23      	ldr	r3, [pc, #140]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000844 <MX_ADC1_Init+0xbc>)
 80007cc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80007da:	4b18      	ldr	r3, [pc, #96]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007dc:	2201      	movs	r2, #1
 80007de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007e8:	4814      	ldr	r0, [pc, #80]	@ (800083c <MX_ADC1_Init+0xb4>)
 80007ea:	f001 f8d1 	bl	8001990 <HAL_ADC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80007f4:	f000 febe 	bl	8001574 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80007f8:	2309      	movs	r3, #9
 80007fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <MX_ADC1_Init+0xb4>)
 800080a:	f001 fa23 	bl	8001c54 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000814:	f000 feae 	bl	8001574 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000818:	2308      	movs	r3, #8
 800081a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_ADC1_Init+0xb4>)
 8000826:	f001 fa15 	bl	8001c54 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000830:	f000 fea0 	bl	8001574 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000002c 	.word	0x2000002c
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b08e      	sub	sp, #56	@ 0x38
 800084c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800084e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800085c:	f107 0320 	add.w	r3, r7, #32
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
 8000874:	615a      	str	r2, [r3, #20]
 8000876:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000878:	4b32      	ldr	r3, [pc, #200]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800087a:	4a33      	ldr	r2, [pc, #204]	@ (8000948 <MX_TIM3_Init+0x100>)
 800087c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800087e:	4b31      	ldr	r3, [pc, #196]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000884:	4b2f      	ldr	r3, [pc, #188]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 800088a:	4b2e      	ldr	r3, [pc, #184]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800088c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000890:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b2c      	ldr	r3, [pc, #176]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b2a      	ldr	r3, [pc, #168]	@ (8000944 <MX_TIM3_Init+0xfc>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800089e:	4829      	ldr	r0, [pc, #164]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008a0:	f002 ff2c 	bl	80036fc <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x66>
		Error_Handler();
 80008aa:	f000 fe63 	bl	8001574 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4822      	ldr	r0, [pc, #136]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008bc:	f003 f950 	bl	8003b60 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x82>
		Error_Handler();
 80008c6:	f000 fe55 	bl	8001574 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008cc:	f002 ff65 	bl	800379a <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM3_Init+0x92>
		Error_Handler();
 80008d6:	f000 fe4d 	bl	8001574 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	4816      	ldr	r0, [pc, #88]	@ (8000944 <MX_TIM3_Init+0xfc>)
 80008ea:	f003 fd17 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80008f4:	f000 fe3e 	bl	8001574 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	@ 0x60
 80008fa:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2208      	movs	r2, #8
 800090c:	4619      	mov	r1, r3
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000910:	f003 f864 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800091a:	f000 fe2b 	bl	8001574 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	220c      	movs	r2, #12
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000926:	f003 f859 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000930:	f000 fe20 	bl	8001574 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <MX_TIM3_Init+0xfc>)
 8000936:	f000 fee5 	bl	8001704 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3738      	adds	r7, #56	@ 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000d4 	.word	0x200000d4
 8000948:	40000400 	.word	0x40000400

0800094c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a0b      	ldr	r2, [pc, #44]	@ (8000988 <MX_DMA_Init+0x3c>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <MX_DMA_Init+0x3c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	2038      	movs	r0, #56	@ 0x38
 8000974:	f001 fce9 	bl	800234a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000978:	2038      	movs	r0, #56	@ 0x38
 800097a:	f001 fd02 	bl	8002382 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	4b30      	ldr	r3, [pc, #192]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009ac:	f043 0310 	orr.w	r3, r3, #16
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009e4:	f043 0304 	orr.w	r3, r3, #4
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <MX_GPIO_Init+0xdc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0304 	and.w	r3, r3, #4
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2108      	movs	r1, #8
 80009fa:	481c      	ldr	r0, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0xe0>)
 80009fc:	f002 fa00 	bl	8002e00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000a06:	481a      	ldr	r0, [pc, #104]	@ (8000a70 <MX_GPIO_Init+0xe4>)
 8000a08:	f002 f9fa 	bl	8002e00 <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <MX_GPIO_Init+0xe0>)
 8000a24:	f002 f838 	bl	8002a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000a28:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a2c:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <MX_GPIO_Init+0xe4>)
 8000a42:	f002 f829 	bl	8002a98 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8000a46:	23c0      	movs	r3, #192	@ 0xc0
 8000a48:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_GPIO_Init+0xe8>)
 8000a5a:	f002 f81d 	bl	8002a98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a5e:	bf00      	nop
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800

08000a78 <prueba_avanzar>:

/* USER CODE BEGIN 4 */
void prueba_avanzar (void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000a7c:	f000 fa6c 	bl	8000f58 <correccion_avanzar>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <prueba_giros_y_sensores>:

void prueba_giros_y_sensores (void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000a88:	f000 fa66 	bl	8000f58 <correccion_avanzar>
	if (verificar_sensor()) {
 8000a8c:	f000 fbb2 	bl	80011f4 <verificar_sensor>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00b      	beq.n	8000aae <prueba_giros_y_sensores+0x2a>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000a96:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4a36      	ldr	r2, [pc, #216]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000a9c:	7812      	ldrb	r2, [r2, #0]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f9d9 	bl	8000e58 <act_ubicacion>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b31      	ldr	r3, [pc, #196]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000aac:	701a      	strb	r2, [r3, #0]
			}
	if (ubicacion == 8) {
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d121      	bne.n	8000afa <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000ab6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000aba:	f000 ff45 	bl	8001948 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 faf0 	bl	80010a4 <ejecutarGiro>
		orientacion_actual = oeste;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000aca:	e012      	b.n	8000af2 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000acc:	f000 fa44 	bl	8000f58 <correccion_avanzar>
			if (verificar_sensor()) {
 8000ad0:	f000 fb90 	bl	80011f4 <verificar_sensor>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00b      	beq.n	8000af2 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000ada:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4a25      	ldr	r2, [pc, #148]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f9b7 	bl	8000e58 <act_ubicacion>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000af0:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000af2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b08      	cmp	r3, #8
 8000af8:	d0e8      	beq.n	8000acc <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000afa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b09      	cmp	r3, #9
 8000b00:	d121      	bne.n	8000b46 <prueba_giros_y_sensores+0xc2>
			HAL_Delay(600);
 8000b02:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b06:	f000 ff1f 	bl	8001948 <HAL_Delay>
			ejecutarGiro(derecha);
 8000b0a:	2002      	movs	r0, #2
 8000b0c:	f000 faca 	bl	80010a4 <ejecutarGiro>
			orientacion_actual = norte;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
			while ((ubicacion == 9)) {
 8000b16:	e012      	b.n	8000b3e <prueba_giros_y_sensores+0xba>
				correccion_avanzar();
 8000b18:	f000 fa1e 	bl	8000f58 <correccion_avanzar>
				if (verificar_sensor()) {
 8000b1c:	f000 fb6a 	bl	80011f4 <verificar_sensor>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d00b      	beq.n	8000b3e <prueba_giros_y_sensores+0xba>
					ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f000 f991 	bl	8000e58 <act_ubicacion>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b3c:	701a      	strb	r2, [r3, #0]
			while ((ubicacion == 9)) {
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b09      	cmp	r3, #9
 8000b44:	d0e8      	beq.n	8000b18 <prueba_giros_y_sensores+0x94>
				}
			}
		}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)){
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <prueba_giros_y_sensores+0xec>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b0d      	cmp	r3, #13
 8000b4c:	d10e      	bne.n	8000b6c <prueba_giros_y_sensores+0xe8>
 8000b4e:	2140      	movs	r1, #64	@ 0x40
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <prueba_giros_y_sensores+0xf4>)
 8000b52:	f002 f93d 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d107      	bne.n	8000b6c <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 faa1 	bl	80010a4 <ejecutarGiro>
		orientacion_actual = sur;
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <prueba_giros_y_sensores+0xf0>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000b68:	f000 f9f6 	bl	8000f58 <correccion_avanzar>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000000 	.word	0x20000000
 8000b74:	20000001 	.word	0x20000001
 8000b78:	40020800 	.word	0x40020800

08000b7c <prueba_casilla_n>:


void prueba_casilla_n(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
    ubicacion= 5 ; //elegir ubicacion
 8000b80:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000b82:	2205      	movs	r2, #5
 8000b84:	701a      	strb	r2, [r3, #0]
    pared[5]= 13  ; //tiene parede en frente, izq y der
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000b88:	220d      	movs	r2, #13
 8000b8a:	715a      	strb	r2, [r3, #5]
    peso[9] = 3 ;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	725a      	strb	r2, [r3, #9]
    peso[6] =3  ;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	719a      	strb	r2, [r3, #6]
    peso[4] =5  ;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	711a      	strb	r2, [r3, #4]
    peso[1] = 5 ;   //asignarles pesos arbitrarios para ver si cumple con que vaya al menor 
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	705a      	strb	r2, [r3, #1]
    casilla_n= calculo_minimo_peso(peso, pared , ubicacion); //deberia dar que tiene que ir a 1
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4913      	ldr	r1, [pc, #76]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bae:	f000 fc43 	bl	8001438 <calculo_minimo_peso>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <prueba_casilla_n+0x84>)
 8000bb8:	701a      	strb	r2, [r3, #0]
       
    //comentar el de arriba o el de abajo
    ubicacion= 7 ; //elegir ubicacion
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	701a      	strb	r2, [r3, #0]
    pared[7]= 1  ; //tiene parede en frente, izq y der
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	71da      	strb	r2, [r3, #7]
    peso[11] = 1 ;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	72da      	strb	r2, [r3, #11]
    peso[6] =3  ;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bce:	2203      	movs	r2, #3
 8000bd0:	719a      	strb	r2, [r3, #6]
    peso[3] =3  ; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor 
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000bd4:	2203      	movs	r2, #3
 8000bd6:	70da      	strb	r2, [r3, #3]
    casilla_n= calculo_minimo_peso(peso, pared , ubicacion); //deberia dar que tiene que ir a 11
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <prueba_casilla_n+0x78>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4906      	ldr	r1, [pc, #24]	@ (8000bf8 <prueba_casilla_n+0x7c>)
 8000be0:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <prueba_casilla_n+0x80>)
 8000be2:	f000 fc29 	bl	8001438 <calculo_minimo_peso>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <prueba_casilla_n+0x84>)
 8000bec:	701a      	strb	r2, [r3, #0]

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000130 	.word	0x20000130
 8000bfc:	20000120 	.word	0x20000120
 8000c00:	20000002 	.word	0x20000002

08000c04 <prueba_post_relleno>:

void prueba_post_relleno (void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
    ubicacion= 5 ;
 8000c08:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <prueba_post_relleno+0x54>)
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	701a      	strb	r2, [r3, #0]
    casilla_n = 1 ;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <prueba_post_relleno+0x58>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
    orientacion_futura =obtener_orientacion_futura(ubicacion,casilla_n); //deberia dar SUR
 8000c14:	4b10      	ldr	r3, [pc, #64]	@ (8000c58 <prueba_post_relleno+0x54>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <prueba_post_relleno+0x58>)
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f8bc 	bl	8000d9c <obtener_orientacion_futura>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <prueba_post_relleno+0x5c>)
 8000c2a:	701a      	strb	r2, [r3, #0]
    orientacion_actual= norte;
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <prueba_post_relleno+0x60>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    giro= obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <prueba_post_relleno+0x60>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <prueba_post_relleno+0x5c>)
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f8d9 	bl	8000df4 <obtenerGiro>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <prueba_post_relleno+0x64>)
 8000c48:	701a      	strb	r2, [r3, #0]
    ejecutarGiro(giro); //tendria que girar 180 xD
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <prueba_post_relleno+0x64>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 fa28 	bl	80010a4 <ejecutarGiro>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000002 	.word	0x20000002
 8000c60:	2000011c 	.word	0x2000011c
 8000c64:	20000001 	.word	0x20000001
 8000c68:	2000011d 	.word	0x2000011d

08000c6c <programa_principal>:


void programa_principal (void) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000c70:	f000 f972 	bl	8000f58 <correccion_avanzar>

	if ((HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)){
 8000c74:	2140      	movs	r1, #64	@ 0x40
 8000c76:	4841      	ldr	r0, [pc, #260]	@ (8000d7c <programa_principal+0x110>)
 8000c78:	f002 f8aa 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d137      	bne.n	8000cf2 <programa_principal+0x86>
		act_pared(pared, ubicacion, orientacion_actual);  //primero actualiza la pared encontrada
 8000c82:	4b3f      	ldr	r3, [pc, #252]	@ (8000d80 <programa_principal+0x114>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	4a3f      	ldr	r2, [pc, #252]	@ (8000d84 <programa_principal+0x118>)
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	483e      	ldr	r0, [pc, #248]	@ (8000d88 <programa_principal+0x11c>)
 8000c8e:	f000 fae1 	bl	8001254 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 8000c92:	493e      	ldr	r1, [pc, #248]	@ (8000d8c <programa_principal+0x120>)
 8000c94:	483c      	ldr	r0, [pc, #240]	@ (8000d88 <programa_principal+0x11c>)
 8000c96:	f000 fb2f 	bl	80012f8 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000c9a:	4b39      	ldr	r3, [pc, #228]	@ (8000d80 <programa_principal+0x114>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4939      	ldr	r1, [pc, #228]	@ (8000d88 <programa_principal+0x11c>)
 8000ca2:	483a      	ldr	r0, [pc, #232]	@ (8000d8c <programa_principal+0x120>)
 8000ca4:	f000 fbc8 	bl	8001438 <calculo_minimo_peso>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <programa_principal+0x124>)
 8000cae:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000cb0:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <programa_principal+0x114>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4a36      	ldr	r2, [pc, #216]	@ (8000d90 <programa_principal+0x124>)
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f86e 	bl	8000d9c <obtener_orientacion_futura>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b33      	ldr	r3, [pc, #204]	@ (8000d94 <programa_principal+0x128>)
 8000cc6:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000d84 <programa_principal+0x118>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a31      	ldr	r2, [pc, #196]	@ (8000d94 <programa_principal+0x128>)
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f88e 	bl	8000df4 <obtenerGiro>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <programa_principal+0x12c>)
 8000cde:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <programa_principal+0x128>)
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <programa_principal+0x118>)
 8000ce6:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d98 <programa_principal+0x12c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f9d9 	bl	80010a4 <ejecutarGiro>
		}
	if (!verificar_sensor()) { //cambio de casilla
 8000cf2:	f000 fa7f 	bl	80011f4 <verificar_sensor>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f083 0301 	eor.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d039      	beq.n	8000d76 <programa_principal+0x10a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000d02:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <programa_principal+0x114>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	4a1f      	ldr	r2, [pc, #124]	@ (8000d84 <programa_principal+0x118>)
 8000d08:	7812      	ldrb	r2, [r2, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 f8a3 	bl	8000e58 <act_ubicacion>
 8000d12:	4603      	mov	r3, r0
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <programa_principal+0x114>)
 8000d18:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <programa_principal+0x114>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4919      	ldr	r1, [pc, #100]	@ (8000d88 <programa_principal+0x11c>)
 8000d22:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <programa_principal+0x120>)
 8000d24:	f000 fb88 	bl	8001438 <calculo_minimo_peso>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <programa_principal+0x124>)
 8000d2e:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <programa_principal+0x114>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4a16      	ldr	r2, [pc, #88]	@ (8000d90 <programa_principal+0x124>)
 8000d36:	7812      	ldrb	r2, [r2, #0]
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f82e 	bl	8000d9c <obtener_orientacion_futura>
 8000d40:	4603      	mov	r3, r0
 8000d42:	461a      	mov	r2, r3
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <programa_principal+0x128>)
 8000d46:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000d48:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <programa_principal+0x118>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4a11      	ldr	r2, [pc, #68]	@ (8000d94 <programa_principal+0x128>)
 8000d4e:	7812      	ldrb	r2, [r2, #0]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f84e 	bl	8000df4 <obtenerGiro>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <programa_principal+0x12c>)
 8000d5e:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <programa_principal+0x128>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <programa_principal+0x118>)
 8000d66:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <programa_principal+0x12c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f999 	bl	80010a4 <ejecutarGiro>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000d72:	b662      	cpsie	i
}
 8000d74:	bf00      	nop
		__enable_irq();
	}
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	20000000 	.word	0x20000000
 8000d84:	20000001 	.word	0x20000001
 8000d88:	20000130 	.word	0x20000130
 8000d8c:	20000120 	.word	0x20000120
 8000d90:	20000002 	.word	0x20000002
 8000d94:	2000011c 	.word	0x2000011c
 8000d98:	2000011d 	.word	0x2000011d

08000d9c <obtener_orientacion_futura>:
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
	while (1);
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	460a      	mov	r2, r1
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion + 1)
 8000dac:	79ba      	ldrb	r2, [r7, #6]
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	3301      	adds	r3, #1
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d101      	bne.n	8000dba <obtener_orientacion_futura+0x1e>
		return oeste;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e015      	b.n	8000de6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000dba:	79ba      	ldrb	r2, [r7, #6]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d101      	bne.n	8000dc8 <obtener_orientacion_futura+0x2c>
		return este;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e00e      	b.n	8000de6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d101      	bne.n	8000dd6 <obtener_orientacion_futura+0x3a>
		return norte;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e007      	b.n	8000de6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000dd6:	79ba      	ldrb	r2, [r7, #6]
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d101      	bne.n	8000de4 <obtener_orientacion_futura+0x48>
		return sur;
 8000de0:	2302      	movs	r3, #2
 8000de2:	e000      	b.n	8000de6 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000de4:	2364      	movs	r3, #100	@ 0x64
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000e04:	79ba      	ldrb	r2, [r7, #6]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	425a      	negs	r2, r3
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	f002 0203 	and.w	r2, r2, #3
 8000e16:	bf58      	it	pl
 8000e18:	4253      	negpl	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d812      	bhi.n	8000e48 <obtenerGiro+0x54>
 8000e22:	a201      	add	r2, pc, #4	@ (adr r2, 8000e28 <obtenerGiro+0x34>)
 8000e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e3d 	.word	0x08000e3d
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e45 	.word	0x08000e45
	case 0:
		return adelante;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	e006      	b.n	8000e4a <obtenerGiro+0x56>
	case 1:
		return derecha;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	e004      	b.n	8000e4a <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e002      	b.n	8000e4a <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <obtenerGiro+0x56>
	default:
		return 100; // Error
 8000e48:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	4613      	mov	r3, r2
 8000e66:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8000e68:	79bb      	ldrb	r3, [r7, #6]
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d81a      	bhi.n	8000ea4 <act_ubicacion+0x4c>
 8000e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e74 <act_ubicacion+0x1c>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08000e8d 	.word	0x08000e8d
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000e9d 	.word	0x08000e9d
	case 0:
		return ubicacion + 4;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	3304      	adds	r3, #4
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	e00c      	b.n	8000ea6 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	e008      	b.n	8000ea6 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	3b04      	subs	r3, #4
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	e004      	b.n	8000ea6 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	e000      	b.n	8000ea6 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8000ea4:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <promediar>:

void promediar(uint16_t *buffer) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	e012      	b.n	8000ef0 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	dde9      	ble.n	8000eca <promediar+0x16>
	}
// Dividimos las sumas para obtener el promedio
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <promediar+0x64>)
 8000efe:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <promediar+0x68>)
 8000f08:	801a      	strh	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200001c4 	.word	0x200001c4
 8000f1c:	200001c6 	.word	0x200001c6

08000f20 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000f2a:	f7ff ffc3 	bl	8000eb4 <promediar>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000144 	.word	0x20000144

08000f3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8000f44:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f46:	f7ff ffb5 	bl	8000eb4 <promediar>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000184 	.word	0x20000184

08000f58 <correccion_avanzar>:
void correccion_avanzar(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <correccion_avanzar+0x54>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	f240 2225 	movw	r2, #549	@ 0x225
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d809      	bhi.n	8000f7e <correccion_avanzar+0x26>
 8000f6a:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <correccion_avanzar+0x58>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f240 2226 	movw	r2, #550	@ 0x226
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d902      	bls.n	8000f7e <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8000f78:	f000 f86c 	bl	8001054 <apagar_derecha>
 8000f7c:	e013      	b.n	8000fa6 <correccion_avanzar+0x4e>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <correccion_avanzar+0x54>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	f240 2226 	movw	r2, #550	@ 0x226
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d909      	bls.n	8000fa0 <correccion_avanzar+0x48>
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <correccion_avanzar+0x58>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	f240 2225 	movw	r2, #549	@ 0x225
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d802      	bhi.n	8000fa0 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8000f9a:	f000 f833 	bl	8001004 <apagar_izquierda>
 8000f9e:	e002      	b.n	8000fa6 <correccion_avanzar+0x4e>
	} else {
		avanzar();
 8000fa0:	f000 f808 	bl	8000fb4 <avanzar>
	}

}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200001c4 	.word	0x200001c4
 8000fb0:	200001c6 	.word	0x200001c6

08000fb4 <avanzar>:
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
	HAL_Delay(tiempo_mini);
}
void avanzar(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fbe:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <avanzar+0x48>)
 8000fc0:	f001 ff1e 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fca:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <avanzar+0x48>)
 8000fcc:	f001 ff18 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <avanzar+0x48>)
 8000fd8:	f001 ff12 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe2:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <avanzar+0x48>)
 8000fe4:	f001 ff0c 	bl	8002e00 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <avanzar+0x4c>)
 8000fea:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000ff0:	4b03      	ldr	r3, [pc, #12]	@ (8001000 <avanzar+0x4c>)
 8000ff2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40000400 	.word	0x40000400

08001004 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100e:	480f      	ldr	r0, [pc, #60]	@ (800104c <apagar_izquierda+0x48>)
 8001010:	f001 fef6 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800101a:	480c      	ldr	r0, [pc, #48]	@ (800104c <apagar_izquierda+0x48>)
 800101c:	f001 fef0 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <apagar_izquierda+0x48>)
 8001028:	f001 feea 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <apagar_izquierda+0x48>)
 8001034:	f001 fee4 	bl	8002e00 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <apagar_izquierda+0x4c>)
 800103a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <apagar_izquierda+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40020400 	.word	0x40020400
 8001050:	40000400 	.word	0x40000400

08001054 <apagar_derecha>:

void apagar_derecha(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105e:	480f      	ldr	r0, [pc, #60]	@ (800109c <apagar_derecha+0x48>)
 8001060:	f001 fece 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800106a:	480c      	ldr	r0, [pc, #48]	@ (800109c <apagar_derecha+0x48>)
 800106c:	f001 fec8 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001076:	4809      	ldr	r0, [pc, #36]	@ (800109c <apagar_derecha+0x48>)
 8001078:	f001 fec2 	bl	8002e00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <apagar_derecha+0x48>)
 8001084:	f001 febc 	bl	8002e00 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <apagar_derecha+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <apagar_derecha+0x4c>)
 8001090:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40020400 	.word	0x40020400
 80010a0:	40000400 	.word	0x40000400

080010a4 <ejecutarGiro>:
void ejecutarGiro(uint8_t giro) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d837      	bhi.n	8001124 <ejecutarGiro+0x80>
 80010b4:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <ejecutarGiro+0x18>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010f9 	.word	0x080010f9
 80010c4:	080010e3 	.word	0x080010e3
 80010c8:	0800110f 	.word	0x0800110f
	case adelante:
		setMotorIzquierdo(avance);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 f82d 	bl	800112c <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 f85c 	bl	8001190 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 80010d8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010dc:	f000 fc34 	bl	8001948 <HAL_Delay>
		break;
 80010e0:	e020      	b.n	8001124 <ejecutarGiro+0x80>

	case derecha:
		setMotorIzquierdo(avance);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f822 	bl	800112c <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f000 f851 	bl	8001190 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 80010ee:	f240 2067 	movw	r0, #615	@ 0x267
 80010f2:	f000 fc29 	bl	8001948 <HAL_Delay>
		break;
 80010f6:	e015      	b.n	8001124 <ejecutarGiro+0x80>

	case izquierda:
		setMotorIzquierdo(retroceso);
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 f817 	bl	800112c <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 f846 	bl	8001190 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 8001104:	f240 2067 	movw	r0, #615	@ 0x267
 8001108:	f000 fc1e 	bl	8001948 <HAL_Delay>
		break;
 800110c:	e00a      	b.n	8001124 <ejecutarGiro+0x80>

	case giro_180:
		setMotorIzquierdo(avance);
 800110e:	2001      	movs	r0, #1
 8001110:	f000 f80c 	bl	800112c <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 f83b 	bl	8001190 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 800111a:	f240 404c 	movw	r0, #1100	@ 0x44c
 800111e:	f000 fc13 	bl	8001948 <HAL_Delay>
		break;
 8001122:	bf00      	nop

	}
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <setMotorIzquierdo+0x5c>)
 8001138:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800113c:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d002      	beq.n	800114a <setMotorIzquierdo+0x1e>
 8001144:	2b02      	cmp	r3, #2
 8001146:	d00d      	beq.n	8001164 <setMotorIzquierdo+0x38>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
				GPIO_PIN_RESET);
		break;
	}
}
 8001148:	e019      	b.n	800117e <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001150:	480e      	ldr	r0, [pc, #56]	@ (800118c <setMotorIzquierdo+0x60>)
 8001152:	f001 fe55 	bl	8002e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 8001156:	2201      	movs	r2, #1
 8001158:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800115c:	480b      	ldr	r0, [pc, #44]	@ (800118c <setMotorIzquierdo+0x60>)
 800115e:	f001 fe4f 	bl	8002e00 <HAL_GPIO_WritePin>
		break;
 8001162:	e00c      	b.n	800117e <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin,
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800116a:	4808      	ldr	r0, [pc, #32]	@ (800118c <setMotorIzquierdo+0x60>)
 800116c:	f001 fe48 	bl	8002e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin,
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <setMotorIzquierdo+0x60>)
 8001178:	f001 fe42 	bl	8002e00 <HAL_GPIO_WritePin>
		break;
 800117c:	bf00      	nop
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40000400 	.word	0x40000400
 800118c:	40020400 	.word	0x40020400

08001190 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <setMotorDerecho+0x5c>)
 800119c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d002      	beq.n	80011ae <setMotorDerecho+0x1e>
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d00d      	beq.n	80011c8 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 80011ac:	e019      	b.n	80011e2 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011b4:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <setMotorDerecho+0x60>)
 80011b6:	f001 fe23 	bl	8002e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80011ba:	2201      	movs	r2, #1
 80011bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c0:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <setMotorDerecho+0x60>)
 80011c2:	f001 fe1d 	bl	8002e00 <HAL_GPIO_WritePin>
		break;
 80011c6:	e00c      	b.n	80011e2 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ce:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <setMotorDerecho+0x60>)
 80011d0:	f001 fe16 	bl	8002e00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011da:	4805      	ldr	r0, [pc, #20]	@ (80011f0 <setMotorDerecho+0x60>)
 80011dc:	f001 fe10 	bl	8002e00 <HAL_GPIO_WritePin>
		break;
 80011e0:	bf00      	nop
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40000400 	.word	0x40000400
 80011f0:	40020400 	.word	0x40020400

080011f4 <verificar_sensor>:

bool verificar_sensor(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
// Se crean variables para lecturas intermedias
	GPIO_PinState lectura1, lectura2;
// Se crea una variable booleana para indicar si hay un pedido
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
// Se lee el estado del botón
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 80011fe:	2180      	movs	r1, #128	@ 0x80
 8001200:	4812      	ldr	r0, [pc, #72]	@ (800124c <verificar_sensor+0x58>)
 8001202:	f001 fde5 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8001206:	4603      	mov	r3, r0
 8001208:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <verificar_sensor+0x5c>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	79ba      	ldrb	r2, [r7, #6]
 8001210:	429a      	cmp	r2, r3
 8001212:	d015      	beq.n	8001240 <verificar_sensor+0x4c>
// Se espera un tiempo para filtrar los rebotes
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001214:	2014      	movs	r0, #20
 8001216:	f000 fb97 	bl	8001948 <HAL_Delay>
// Se lee nuevamente el estado del botón
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	480b      	ldr	r0, [pc, #44]	@ (800124c <verificar_sensor+0x58>)
 800121e:	f001 fdd7 	bl	8002dd0 <HAL_GPIO_ReadPin>
 8001222:	4603      	mov	r3, r0
 8001224:	717b      	strb	r3, [r7, #5]
// Si ambas lecturas son iguales, se considera una lectura válida
		if (lectura2 == lectura1)
 8001226:	797a      	ldrb	r2, [r7, #5]
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	429a      	cmp	r2, r3
 800122c:	d102      	bne.n	8001234 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 800122e:	4a08      	ldr	r2, [pc, #32]	@ (8001250 <verificar_sensor+0x5c>)
 8001230:	797b      	ldrb	r3, [r7, #5]
 8001232:	7013      	strb	r3, [r2, #0]
// Si el botón pasó de liberado a pulsado (1-->0), hubo un pedido de cambio de estado
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <verificar_sensor+0x5c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <verificar_sensor+0x4c>
			pedido = true;
 800123c:	2301      	movs	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 8001240:	79fb      	ldrb	r3, [r7, #7]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40020800 	.word	0x40020800
 8001250:	20000003 	.word	0x20000003

08001254 <act_pared>:

uint8_t act_pared(uint8_t * pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
 8001260:	4613      	mov	r3, r2
 8001262:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001264:	78bb      	ldrb	r3, [r7, #2]
 8001266:	2b03      	cmp	r3, #3
 8001268:	d83a      	bhi.n	80012e0 <act_pared+0x8c>
 800126a:	a201      	add	r2, pc, #4	@ (adr r2, 8001270 <act_pared+0x1c>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	08001281 	.word	0x08001281
 8001274:	08001299 	.word	0x08001299
 8001278:	080012b1 	.word	0x080012b1
 800127c:	080012c9 	.word	0x080012c9
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	781a      	ldrb	r2, [r3, #0]
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	440b      	add	r3, r1
 800128e:	f042 0208 	orr.w	r2, r2, #8
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	701a      	strb	r2, [r3, #0]
		break;
 8001296:	e025      	b.n	80012e4 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001298:	78fb      	ldrb	r3, [r7, #3]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	440b      	add	r3, r1
 80012a6:	f042 0204 	orr.w	r2, r2, #4
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
		break;
 80012ae:	e019      	b.n	80012e4 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	781a      	ldrb	r2, [r3, #0]
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	440b      	add	r3, r1
 80012be:	f042 0202 	orr.w	r2, r2, #2
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	701a      	strb	r2, [r3, #0]
		break;
 80012c6:	e00d      	b.n	80012e4 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	440b      	add	r3, r1
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	701a      	strb	r2, [r3, #0]
		break;
 80012de:	e001      	b.n	80012e4 <act_pared+0x90>
	default:
		return 100; // Orientación no válida
 80012e0:	2364      	movs	r3, #100	@ 0x64
 80012e2:	e003      	b.n	80012ec <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <act_pesos>:

void act_pesos(uint8_t * pared , uint8_t * peso) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 4; j++) {
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	e08b      	b.n	8001420 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros-1; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	e081      	b.n	8001412 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 800130e:	2364      	movs	r3, #100	@ 0x64
 8001310:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b0b      	cmp	r3, #11
 8001316:	dc15      	bgt.n	8001344 <act_pesos+0x4c>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10d      	bne.n	8001344 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	3304      	adds	r3, #4
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	7dfa      	ldrb	r2, [r7, #23]
 8001334:	429a      	cmp	r2, r3
 8001336:	d905      	bls.n	8001344 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3304      	adds	r3, #4
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d01e      	beq.n	8001388 <act_pesos+0x90>
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b07      	cmp	r3, #7
 800134e:	d01b      	beq.n	8001388 <act_pesos+0x90>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b0b      	cmp	r3, #11
 8001354:	d018      	beq.n	8001388 <act_pesos+0x90>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d015      	beq.n	8001388 <act_pesos+0x90>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d10d      	bne.n	8001388 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	4413      	add	r3, r2
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	7dfa      	ldrb	r2, [r7, #23]
 8001378:	429a      	cmp	r2, r3
 800137a:	d905      	bls.n	8001388 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b03      	cmp	r3, #3
 800138c:	dd15      	ble.n	80013ba <act_pesos+0xc2>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10d      	bne.n	80013ba <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b04      	subs	r3, #4
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	7dfa      	ldrb	r2, [r7, #23]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d905      	bls.n	80013ba <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3b04      	subs	r3, #4
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <act_pesos+0x106>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d016      	beq.n	80013fe <act_pesos+0x106>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b04      	cmp	r3, #4
 80013d4:	d013      	beq.n	80013fe <act_pesos+0x106>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d010      	beq.n	80013fe <act_pesos+0x106>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b0c      	cmp	r3, #12
 80013e0:	d00d      	beq.n	80013fe <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7dfa      	ldrb	r2, [r7, #23]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d905      	bls.n	80013fe <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	4413      	add	r3, r2
 8001404:	7dfa      	ldrb	r2, [r7, #23]
 8001406:	3201      	adds	r2, #1
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros-1; i++) {
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b0e      	cmp	r3, #14
 8001416:	f77f af7a 	ble.w	800130e <act_pesos+0x16>
	for (int j = 0; j < 4; j++) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	3301      	adds	r3, #1
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b03      	cmp	r3, #3
 8001424:	f77f af70 	ble.w	8001308 <act_pesos+0x10>
				}
	}
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t * peso, uint8_t * pared, uint8_t ubicacion) {
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	4613      	mov	r3, r2
 8001444:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 8001446:	230f      	movs	r3, #15
 8001448:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	3304      	adds	r3, #4
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	7dfa      	ldrb	r2, [r7, #23]
 8001456:	429a      	cmp	r2, r3
 8001458:	d915      	bls.n	8001486 <calculo_minimo_peso+0x4e>
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	4413      	add	r3, r2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10d      	bne.n	8001486 <calculo_minimo_peso+0x4e>
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b0b      	cmp	r3, #11
 800146e:	d80a      	bhi.n	8001486 <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	3304      	adds	r3, #4
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3304      	adds	r3, #4
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b3b      	ldr	r3, [pc, #236]	@ (8001570 <calculo_minimo_peso+0x138>)
 8001484:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0)&& (!(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15)))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	3301      	adds	r3, #1
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4413      	add	r3, r2
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	7dfa      	ldrb	r2, [r7, #23]
 8001492:	429a      	cmp	r2, r3
 8001494:	d91e      	bls.n	80014d4 <calculo_minimo_peso+0x9c>
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d116      	bne.n	80014d4 <calculo_minimo_peso+0x9c>
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d013      	beq.n	80014d4 <calculo_minimo_peso+0x9c>
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d010      	beq.n	80014d4 <calculo_minimo_peso+0x9c>
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	d00d      	beq.n	80014d4 <calculo_minimo_peso+0x9c>
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d00a      	beq.n	80014d4 <calculo_minimo_peso+0x9c>
		minimo_peso = peso[ubicacion + 1];
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3301      	adds	r3, #1
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <calculo_minimo_peso+0x138>)
 80014d2:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3b04      	subs	r3, #4
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	7dfa      	ldrb	r2, [r7, #23]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d915      	bls.n	8001510 <calculo_minimo_peso+0xd8>
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <calculo_minimo_peso+0xd8>
			&& (4 <= ubicacion))) {
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d90a      	bls.n	8001510 <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3b04      	subs	r3, #4
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	3b04      	subs	r3, #4
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <calculo_minimo_peso+0x138>)
 800150e:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && (!(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12)))) {
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	3b01      	subs	r3, #1
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	7dfa      	ldrb	r2, [r7, #23]
 800151c:	429a      	cmp	r2, r3
 800151e:	d91e      	bls.n	800155e <calculo_minimo_peso+0x126>
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d116      	bne.n	800155e <calculo_minimo_peso+0x126>
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d013      	beq.n	800155e <calculo_minimo_peso+0x126>
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d010      	beq.n	800155e <calculo_minimo_peso+0x126>
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	2b08      	cmp	r3, #8
 8001540:	d00d      	beq.n	800155e <calculo_minimo_peso+0x126>
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b0c      	cmp	r3, #12
 8001546:	d00a      	beq.n	800155e <calculo_minimo_peso+0x126>
		minimo_peso = peso[ubicacion - 1];
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3b01      	subs	r3, #1
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3b01      	subs	r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	@ (8001570 <calculo_minimo_peso+0x138>)
 800155c:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 800155e:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <calculo_minimo_peso+0x138>)
 8001560:	781b      	ldrb	r3, [r3, #0]
}
 8001562:	4618      	mov	r0, r3
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	20000002 	.word	0x20000002

08001574 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <Error_Handler+0x8>

08001580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a0f      	ldr	r2, [pc, #60]	@ (80015cc <HAL_MspInit+0x4c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b0d      	ldr	r3, [pc, #52]	@ (80015cc <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_MspInit+0x4c>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015be:	2007      	movs	r0, #7
 80015c0:	f000 feb8 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800

080015d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a2f      	ldr	r2, [pc, #188]	@ (80016ac <HAL_ADC_MspInit+0xdc>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d158      	bne.n	80016a4 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	4b2e      	ldr	r3, [pc, #184]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a2d      	ldr	r2, [pc, #180]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	4a26      	ldr	r2, [pc, #152]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	@ 0x30
 800161e:	4b24      	ldr	r3, [pc, #144]	@ (80016b0 <HAL_ADC_MspInit+0xe0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 800162a:	2303      	movs	r3, #3
 800162c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800162e:	2303      	movs	r3, #3
 8001630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	481d      	ldr	r0, [pc, #116]	@ (80016b4 <HAL_ADC_MspInit+0xe4>)
 800163e:	f001 fa2b 	bl	8002a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001642:	4b1d      	ldr	r3, [pc, #116]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001644:	4a1d      	ldr	r2, [pc, #116]	@ (80016bc <HAL_ADC_MspInit+0xec>)
 8001646:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800165c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001660:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001662:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001664:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001668:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800166c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001670:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001678:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800167c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001680:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001688:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800168a:	f000 fe95 	bl	80023b8 <HAL_DMA_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001694:	f7ff ff6e 	bl	8001574 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a07      	ldr	r2, [pc, #28]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38
 800169e:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_ADC_MspInit+0xe8>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	@ 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40012000 	.word	0x40012000
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020400 	.word	0x40020400
 80016b8:	20000074 	.word	0x20000074
 80016bc:	40026410 	.word	0x40026410

080016c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <HAL_TIM_Base_MspInit+0x3c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10d      	bne.n	80016ee <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <HAL_TIM_Base_MspInit+0x40>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80016ee:	bf00      	nop
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	40000400 	.word	0x40000400
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a12      	ldr	r2, [pc, #72]	@ (800176c <HAL_TIM_MspPostInit+0x68>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11e      	bne.n	8001764 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_TIM_MspPostInit+0x6c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <HAL_TIM_MspPostInit+0x6c>)
 8001730:	f043 0304 	orr.w	r3, r3, #4
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <HAL_TIM_MspPostInit+0x6c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 8001742:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001754:	2302      	movs	r3, #2
 8001756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <HAL_TIM_MspPostInit+0x70>)
 8001760:	f001 f99a 	bl	8002a98 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40000400 	.word	0x40000400
 8001770:	40023800 	.word	0x40023800
 8001774:	40020800 	.word	0x40020800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f89b 	bl	8001908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <DMA2_Stream0_IRQHandler+0x10>)
 80017de:	f000 fef1 	bl	80025c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000074 	.word	0x20000074

080017ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	@ (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001810:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001848 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001814:	f7ff ffea 	bl	80017ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001818:	480c      	ldr	r0, [pc, #48]	@ (800184c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181a:	490d      	ldr	r1, [pc, #52]	@ (8001850 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001820:	e002      	b.n	8001828 <LoopCopyDataInit>

08001822 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001822:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001824:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001826:	3304      	adds	r3, #4

08001828 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001828:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800182c:	d3f9      	bcc.n	8001822 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001830:	4c0a      	ldr	r4, [pc, #40]	@ (800185c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001834:	e001      	b.n	800183a <LoopFillZerobss>

08001836 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001836:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001838:	3204      	adds	r2, #4

0800183a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800183c:	d3fb      	bcc.n	8001836 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183e:	f002 fdf1 	bl	8004424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001842:	f7fe fe57 	bl	80004f4 <main>
  bx  lr    
 8001846:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800184c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001850:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001854:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 8001858:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800185c:	200001cc 	.word	0x200001cc

08001860 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001860:	e7fe      	b.n	8001860 <ADC_IRQHandler>
	...

08001864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001868:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0d      	ldr	r2, [pc, #52]	@ (80018a4 <HAL_Init+0x40>)
 800186e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001872:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <HAL_Init+0x40>)
 800187a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800187e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <HAL_Init+0x40>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800188a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188c:	2003      	movs	r0, #3
 800188e:	f000 fd51 	bl	8002334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001892:	2000      	movs	r0, #0
 8001894:	f000 f808 	bl	80018a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001898:	f7ff fe72 	bl	8001580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023c00 	.word	0x40023c00

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b0:	4b12      	ldr	r3, [pc, #72]	@ (80018fc <HAL_InitTick+0x54>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_InitTick+0x58>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018be:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fd69 	bl	800239e <HAL_SYSTICK_Config>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00e      	b.n	80018f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d80a      	bhi.n	80018f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f000 fd31 	bl	800234a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e8:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <HAL_InitTick+0x5c>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	e000      	b.n	80018f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000004 	.word	0x20000004
 8001900:	2000000c 	.word	0x2000000c
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000000c 	.word	0x2000000c
 800192c:	200001c8 	.word	0x200001c8

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200001c8 	.word	0x200001c8

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c

08001990 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e033      	b.n	8001a0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff fe0e 	bl	80015d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d118      	bne.n	8001a00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	f043 0202 	orr.w	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa58 	bl	8001e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019fe:	e001      	b.n	8001a04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_Start_DMA+0x22>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e0eb      	b.n	8001c12 <HAL_ADC_Start_DMA+0x1fa>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d018      	beq.n	8001a82 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a60:	4b6e      	ldr	r3, [pc, #440]	@ (8001c1c <HAL_ADC_Start_DMA+0x204>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6e      	ldr	r2, [pc, #440]	@ (8001c20 <HAL_ADC_Start_DMA+0x208>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	0c9a      	lsrs	r2, r3, #18
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a90:	d107      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 80a3 	bne.w	8001bf8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001adc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	f023 0206 	bic.w	r2, r3, #6
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b0e:	4b45      	ldr	r3, [pc, #276]	@ (8001c24 <HAL_ADC_Start_DMA+0x20c>)
 8001b10:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b16:	4a44      	ldr	r2, [pc, #272]	@ (8001c28 <HAL_ADC_Start_DMA+0x210>)
 8001b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1e:	4a43      	ldr	r2, [pc, #268]	@ (8001c2c <HAL_ADC_Start_DMA+0x214>)
 8001b20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b26:	4a42      	ldr	r2, [pc, #264]	@ (8001c30 <HAL_ADC_Start_DMA+0x218>)
 8001b28:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001b32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001b42:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b52:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	334c      	adds	r3, #76	@ 0x4c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f000 fcd6 	bl	8002514 <HAL_DMA_Start_IT>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 031f 	and.w	r3, r3, #31
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12a      	bne.n	8001bce <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c34 <HAL_ADC_Start_DMA+0x21c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d015      	beq.n	8001bae <HAL_ADC_Start_DMA+0x196>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a2c      	ldr	r2, [pc, #176]	@ (8001c38 <HAL_ADC_Start_DMA+0x220>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d105      	bne.n	8001b98 <HAL_ADC_Start_DMA+0x180>
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_ADC_Start_DMA+0x20c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00a      	beq.n	8001bae <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a27      	ldr	r2, [pc, #156]	@ (8001c3c <HAL_ADC_Start_DMA+0x224>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d136      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_ADC_Start_DMA+0x20c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d130      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d129      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e020      	b.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	@ (8001c34 <HAL_ADC_Start_DMA+0x21c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d11b      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d114      	bne.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	e00b      	b.n	8001c10 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f043 0210 	orr.w	r2, r3, #16
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000004 	.word	0x20000004
 8001c20:	431bde83 	.word	0x431bde83
 8001c24:	40012300 	.word	0x40012300
 8001c28:	08002091 	.word	0x08002091
 8001c2c:	0800214b 	.word	0x0800214b
 8001c30:	08002167 	.word	0x08002167
 8001c34:	40012000 	.word	0x40012000
 8001c38:	40012100 	.word	0x40012100
 8001c3c:	40012200 	.word	0x40012200

08001c40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ADC_ConfigChannel+0x1c>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e105      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x228>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	d925      	bls.n	8001ccc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68d9      	ldr	r1, [r3, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	3b1e      	subs	r3, #30
 8001c96:	2207      	movs	r2, #7
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	400a      	ands	r2, r1
 8001ca4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68d9      	ldr	r1, [r3, #12]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4403      	add	r3, r0
 8001cbe:	3b1e      	subs	r3, #30
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	e022      	b.n	8001d12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	400a      	ands	r2, r1
 8001cee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	4618      	mov	r0, r3
 8001d02:	4603      	mov	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4403      	add	r3, r0
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d824      	bhi.n	8001d64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b05      	subs	r3, #5
 8001d2c:	221f      	movs	r2, #31
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b05      	subs	r3, #5
 8001d56:	fa00 f203 	lsl.w	r2, r0, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d62:	e04c      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d824      	bhi.n	8001db6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3b23      	subs	r3, #35	@ 0x23
 8001d7e:	221f      	movs	r2, #31
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43da      	mvns	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	3b23      	subs	r3, #35	@ 0x23
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001db4:	e023      	b.n	8001dfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b41      	subs	r3, #65	@ 0x41
 8001dc8:	221f      	movs	r2, #31
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b41      	subs	r3, #65	@ 0x41
 8001df2:	fa00 f203 	lsl.w	r2, r0, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <HAL_ADC_ConfigChannel+0x234>)
 8001e00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a21      	ldr	r2, [pc, #132]	@ (8001e8c <HAL_ADC_ConfigChannel+0x238>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d109      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1cc>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b12      	cmp	r3, #18
 8001e12:	d105      	bne.n	8001e20 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <HAL_ADC_ConfigChannel+0x238>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d123      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b10      	cmp	r3, #16
 8001e30:	d003      	beq.n	8001e3a <HAL_ADC_ConfigChannel+0x1e6>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b11      	cmp	r3, #17
 8001e38:	d11b      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b10      	cmp	r3, #16
 8001e4c:	d111      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_ADC_ConfigChannel+0x23c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <HAL_ADC_ConfigChannel+0x240>)
 8001e54:	fba2 2303 	umull	r2, r3, r2, r3
 8001e58:	0c9a      	lsrs	r2, r3, #18
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e64:	e002      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40012300 	.word	0x40012300
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	20000004 	.word	0x20000004
 8001e94:	431bde83 	.word	0x431bde83

08001e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea0:	4b79      	ldr	r3, [pc, #484]	@ (8002088 <ADC_Init+0x1f0>)
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6859      	ldr	r1, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	021a      	lsls	r2, r3, #8
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6899      	ldr	r1, [r3, #8]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2a:	4a58      	ldr	r2, [pc, #352]	@ (800208c <ADC_Init+0x1f4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	e00f      	b.n	8001f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0202 	bic.w	r2, r2, #2
 8001fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6899      	ldr	r1, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7e1b      	ldrb	r3, [r3, #24]
 8001fb0:	005a      	lsls	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d01b      	beq.n	8001ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685a      	ldr	r2, [r3, #4]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6859      	ldr	r1, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	035a      	lsls	r2, r3, #13
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	e007      	b.n	800200c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800200a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800201a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	3b01      	subs	r3, #1
 8002028:	051a      	lsls	r2, r3, #20
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6899      	ldr	r1, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800204e:	025a      	lsls	r2, r3, #9
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6899      	ldr	r1, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	029a      	lsls	r2, r3, #10
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	40012300 	.word	0x40012300
 800208c:	0f000001 	.word	0x0f000001

08002090 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13c      	bne.n	8002124 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d12b      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d127      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d119      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0220 	bic.w	r2, r2, #32
 80020f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7fe ff0d 	bl	8000f3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002122:	e00e      	b.n	8002142 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fd85 	bl	8001c40 <HAL_ADC_ErrorCallback>
}
 8002136:	e004      	b.n	8002142 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4798      	blx	r3
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002156:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7fe fee1 	bl	8000f20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002172:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f043 0204 	orr.w	r2, r3, #4
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff fd5a 	bl	8001c40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	@ (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	db0a      	blt.n	800225e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	490c      	ldr	r1, [pc, #48]	@ (8002280 <__NVIC_SetPriority+0x4c>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	0112      	lsls	r2, r2, #4
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	440b      	add	r3, r1
 8002258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800225c:	e00a      	b.n	8002274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <__NVIC_SetPriority+0x50>)
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3b04      	subs	r3, #4
 800226c:	0112      	lsls	r2, r2, #4
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	440b      	add	r3, r1
 8002272:	761a      	strb	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f1c3 0307 	rsb	r3, r3, #7
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	bf28      	it	cs
 80022a6:	2304      	movcs	r3, #4
 80022a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d902      	bls.n	80022b8 <NVIC_EncodePriority+0x30>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b03      	subs	r3, #3
 80022b6:	e000      	b.n	80022ba <NVIC_EncodePriority+0x32>
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	f04f 32ff 	mov.w	r2, #4294967295
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	401a      	ands	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	43d9      	mvns	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	4313      	orrs	r3, r2
         );
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3724      	adds	r7, #36	@ 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002300:	d301      	bcc.n	8002306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002302:	2301      	movs	r3, #1
 8002304:	e00f      	b.n	8002326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002306:	4a0a      	ldr	r2, [pc, #40]	@ (8002330 <SysTick_Config+0x40>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3b01      	subs	r3, #1
 800230c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800230e:	210f      	movs	r1, #15
 8002310:	f04f 30ff 	mov.w	r0, #4294967295
 8002314:	f7ff ff8e 	bl	8002234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002318:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <SysTick_Config+0x40>)
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800231e:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <SysTick_Config+0x40>)
 8002320:	2207      	movs	r2, #7
 8002322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	e000e010 	.word	0xe000e010

08002334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff29 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	4603      	mov	r3, r0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800235c:	f7ff ff3e 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff8e 	bl	8002288 <NVIC_EncodePriority>
 800236c:	4602      	mov	r2, r0
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff5d 	bl	8002234 <__NVIC_SetPriority>
}
 800237a:	bf00      	nop
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff31 	bl	80021f8 <__NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ffa2 	bl	80022f0 <SysTick_Config>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff fab4 	bl	8001930 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e099      	b.n	8002508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f4:	e00f      	b.n	8002416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023f6:	f7ff fa9b 	bl	8001930 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b05      	cmp	r3, #5
 8002402:	d908      	bls.n	8002416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2220      	movs	r2, #32
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e078      	b.n	8002508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e8      	bne.n	80023f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	4b38      	ldr	r3, [pc, #224]	@ (8002510 <HAL_DMA_Init+0x158>)
 8002430:	4013      	ands	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800244e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800245a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4313      	orrs	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246c:	2b04      	cmp	r3, #4
 800246e:	d107      	bne.n	8002480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	4313      	orrs	r3, r2
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f023 0307 	bic.w	r3, r3, #7
 8002496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	4313      	orrs	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d117      	bne.n	80024da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fa6f 	bl	80029a0 <DMA_CheckFifoParam>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d008      	beq.n	80024da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2240      	movs	r2, #64	@ 0x40
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80024d6:	2301      	movs	r3, #1
 80024d8:	e016      	b.n	8002508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa26 	bl	8002934 <DMA_CalcBaseAndBitshift>
 80024e8:	4603      	mov	r3, r0
 80024ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	223f      	movs	r2, #63	@ 0x3f
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	f010803f 	.word	0xf010803f

08002514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_DMA_Start_IT+0x26>
 8002536:	2302      	movs	r3, #2
 8002538:	e040      	b.n	80025bc <HAL_DMA_Start_IT+0xa8>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d12f      	bne.n	80025ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2202      	movs	r2, #2
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 f9b8 	bl	80028d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256c:	223f      	movs	r2, #63	@ 0x3f
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0216 	orr.w	r2, r2, #22
 8002582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d007      	beq.n	800259c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0208 	orr.w	r2, r2, #8
 800259a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e005      	b.n	80025ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
 80025b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d0:	4b8e      	ldr	r3, [pc, #568]	@ (800280c <HAL_DMA_IRQHandler+0x248>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a8e      	ldr	r2, [pc, #568]	@ (8002810 <HAL_DMA_IRQHandler+0x24c>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	0a9b      	lsrs	r3, r3, #10
 80025dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ee:	2208      	movs	r2, #8
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01a      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0204 	bic.w	r2, r2, #4
 8002616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	2208      	movs	r2, #8
 800261e:	409a      	lsls	r2, r3
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	2201      	movs	r2, #1
 8002636:	409a      	lsls	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00b      	beq.n	8002666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	2201      	movs	r2, #1
 8002654:	409a      	lsls	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800266a:	2204      	movs	r2, #4
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002688:	2204      	movs	r2, #4
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002694:	f043 0204 	orr.w	r2, r3, #4
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	2210      	movs	r2, #16
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d043      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03c      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026be:	2210      	movs	r2, #16
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d024      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	4798      	blx	r3
 80026f2:	e01f      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d01b      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
 8002704:	e016      	b.n	8002734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0208 	bic.w	r2, r2, #8
 8002722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	2220      	movs	r2, #32
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 808f 	beq.w	8002864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8087 	beq.w	8002864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275a:	2220      	movs	r2, #32
 800275c:	409a      	lsls	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b05      	cmp	r3, #5
 800276c:	d136      	bne.n	80027dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800278c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	2b00      	cmp	r3, #0
 8002794:	d103      	bne.n	800279e <HAL_DMA_IRQHandler+0x1da>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d007      	beq.n	80027ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0208 	bic.w	r2, r2, #8
 80027ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	223f      	movs	r2, #63	@ 0x3f
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d07e      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	4798      	blx	r3
        }
        return;
 80027da:	e079      	b.n	80028d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d031      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	4798      	blx	r3
 8002808:	e02c      	b.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
 800280a:	bf00      	nop
 800280c:	20000004 	.word	0x20000004
 8002810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d023      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
 8002824:	e01e      	b.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10f      	bne.n	8002854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0210 	bic.w	r2, r2, #16
 8002842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002868:	2b00      	cmp	r3, #0
 800286a:	d032      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d022      	beq.n	80028be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2205      	movs	r2, #5
 800287c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3301      	adds	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d307      	bcc.n	80028ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f2      	bne.n	8002890 <HAL_DMA_IRQHandler+0x2cc>
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d005      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
 80028ce:	e000      	b.n	80028d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028d0:	bf00      	nop
    }
  }
}
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80028f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b40      	cmp	r3, #64	@ 0x40
 8002904:	d108      	bne.n	8002918 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002916:	e007      	b.n	8002928 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	60da      	str	r2, [r3, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	3b10      	subs	r3, #16
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <DMA_CalcBaseAndBitshift+0x64>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800294e:	4a13      	ldr	r2, [pc, #76]	@ (800299c <DMA_CalcBaseAndBitshift+0x68>)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d909      	bls.n	8002976 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	1d1a      	adds	r2, r3, #4
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	659a      	str	r2, [r3, #88]	@ 0x58
 8002974:	e007      	b.n	8002986 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	aaaaaaab 	.word	0xaaaaaaab
 800299c:	08004494 	.word	0x08004494

080029a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11f      	bne.n	80029fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d856      	bhi.n	8002a6e <DMA_CheckFifoParam+0xce>
 80029c0:	a201      	add	r2, pc, #4	@ (adr r2, 80029c8 <DMA_CheckFifoParam+0x28>)
 80029c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c6:	bf00      	nop
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029eb 	.word	0x080029eb
 80029d0:	080029d9 	.word	0x080029d9
 80029d4:	08002a6f 	.word	0x08002a6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d046      	beq.n	8002a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e8:	e043      	b.n	8002a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029f2:	d140      	bne.n	8002a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f8:	e03d      	b.n	8002a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a02:	d121      	bne.n	8002a48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d837      	bhi.n	8002a7a <DMA_CheckFifoParam+0xda>
 8002a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a10 <DMA_CheckFifoParam+0x70>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a27 	.word	0x08002a27
 8002a18:	08002a21 	.word	0x08002a21
 8002a1c:	08002a39 	.word	0x08002a39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      break;
 8002a24:	e030      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d025      	beq.n	8002a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a36:	e022      	b.n	8002a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a40:	d11f      	bne.n	8002a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a46:	e01c      	b.n	8002a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d903      	bls.n	8002a56 <DMA_CheckFifoParam+0xb6>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d003      	beq.n	8002a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a54:	e018      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
      break;
 8002a5a:	e015      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00e      	beq.n	8002a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e00b      	b.n	8002a86 <DMA_CheckFifoParam+0xe6>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e00a      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e008      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e006      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <DMA_CheckFifoParam+0xe8>
      break;
 8002a86:	bf00      	nop
    }
  } 
  
  return status; 
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop

08002a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e16b      	b.n	8002d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	f040 815a 	bne.w	8002d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d005      	beq.n	8002aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d130      	bne.n	8002b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 0201 	and.w	r2, r3, #1
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d017      	beq.n	8002b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d123      	bne.n	8002bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	08da      	lsrs	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3208      	adds	r2, #8
 8002b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	220f      	movs	r2, #15
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43db      	mvns	r3, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	69b9      	ldr	r1, [r7, #24]
 8002bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	2203      	movs	r2, #3
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0203 	and.w	r2, r3, #3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80b4 	beq.w	8002d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b60      	ldr	r3, [pc, #384]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	4a5f      	ldr	r2, [pc, #380]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8002da4 <HAL_GPIO_Init+0x30c>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002da8 <HAL_GPIO_Init+0x310>)
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	3302      	adds	r3, #2
 8002c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	220f      	movs	r2, #15
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a52      	ldr	r2, [pc, #328]	@ (8002dac <HAL_GPIO_Init+0x314>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d02b      	beq.n	8002cbe <HAL_GPIO_Init+0x226>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a51      	ldr	r2, [pc, #324]	@ (8002db0 <HAL_GPIO_Init+0x318>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d025      	beq.n	8002cba <HAL_GPIO_Init+0x222>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a50      	ldr	r2, [pc, #320]	@ (8002db4 <HAL_GPIO_Init+0x31c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01f      	beq.n	8002cb6 <HAL_GPIO_Init+0x21e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	@ (8002db8 <HAL_GPIO_Init+0x320>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d019      	beq.n	8002cb2 <HAL_GPIO_Init+0x21a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	@ (8002dbc <HAL_GPIO_Init+0x324>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <HAL_GPIO_Init+0x216>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc0 <HAL_GPIO_Init+0x328>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00d      	beq.n	8002caa <HAL_GPIO_Init+0x212>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc4 <HAL_GPIO_Init+0x32c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x20e>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	@ (8002dc8 <HAL_GPIO_Init+0x330>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d101      	bne.n	8002ca2 <HAL_GPIO_Init+0x20a>
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	e00e      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	e00c      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	e00a      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002caa:	2305      	movs	r3, #5
 8002cac:	e008      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cae:	2304      	movs	r3, #4
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x228>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f002 0203 	and.w	r2, r2, #3
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd0:	4935      	ldr	r1, [pc, #212]	@ (8002da8 <HAL_GPIO_Init+0x310>)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cde:	4b3b      	ldr	r3, [pc, #236]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d02:	4a32      	ldr	r2, [pc, #200]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d08:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d2c:	4a27      	ldr	r2, [pc, #156]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d32:	4b26      	ldr	r3, [pc, #152]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d80:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <HAL_GPIO_Init+0x334>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b0f      	cmp	r3, #15
 8002d90:	f67f ae90 	bls.w	8002ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40013800 	.word	0x40013800
 8002dac:	40020000 	.word	0x40020000
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	40013c00 	.word	0x40013c00

08002dd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e001      	b.n	8002df2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e267      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d075      	beq.n	8002f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b85      	ldr	r3, [pc, #532]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e242      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x74>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0x98>
 8002eb2:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6c      	ldr	r2, [pc, #432]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xb0>
 8002ecc:	4b69      	ldr	r3, [pc, #420]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a68      	ldr	r2, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fd20 	bl	8001930 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fd1c 	bl	8001930 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e207      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b5b      	ldr	r3, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fd0c 	bl	8001930 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fd08 	bl	8001930 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	@ 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1f3      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b51      	ldr	r3, [pc, #324]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1c7      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7fe fcc1 	bl	8001930 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fcbd 	bl	8001930 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1a8      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x244>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fca0 	bl	8001930 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fc9c 	bl	8001930 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e187      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fc80 	bl	8001930 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe fc7c 	bl	8001930 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e167      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x240>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x200>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x248>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fc69 	bl	8001930 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7fe fc65 	bl	8001930 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e150      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b81      	ldr	r3, [pc, #516]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7d      	ldr	r3, [pc, #500]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a7c      	ldr	r2, [pc, #496]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b7a      	ldr	r3, [pc, #488]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b77      	ldr	r3, [pc, #476]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b74      	ldr	r3, [pc, #464]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a73      	ldr	r2, [pc, #460]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7fe fc25 	bl	8001930 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7fe fc21 	bl	8001930 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e10c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6a      	ldr	r3, [pc, #424]	@ (80032a8 <HAL_RCC_OscConfig+0x474>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x2ea>
 8003110:	4b64      	ldr	r3, [pc, #400]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a63      	ldr	r2, [pc, #396]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x30c>
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a5e      	ldr	r2, [pc, #376]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
 8003132:	4b5c      	ldr	r3, [pc, #368]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	4a5b      	ldr	r2, [pc, #364]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	@ 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x324>
 8003140:	4b58      	ldr	r3, [pc, #352]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a57      	ldr	r2, [pc, #348]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a54      	ldr	r2, [pc, #336]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe fbe6 	bl	8001930 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7fe fbe2 	bl	8001930 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0cb      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b49      	ldr	r3, [pc, #292]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x334>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318c:	f7fe fbd0 	bl	8001930 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7fe fbcc 	bl	8001930 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0b5      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b39      	ldr	r3, [pc, #228]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	4a38      	ldr	r2, [pc, #224]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a1 	beq.w	8003314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b34      	ldr	r3, [pc, #208]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d05c      	beq.n	8003298 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d141      	bne.n	800326a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fba0 	bl	8001930 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fb9c 	bl	8001930 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e087      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b27      	ldr	r3, [pc, #156]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	491b      	ldr	r1, [pc, #108]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800323c:	4b1b      	ldr	r3, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003242:	f7fe fb75 	bl	8001930 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324a:	f7fe fb71 	bl	8001930 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e05c      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x416>
 8003268:	e054      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fb5e 	bl	8001930 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fb5a 	bl	8001930 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e045      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x444>
 8003296:	e03d      	b.n	8003314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d107      	bne.n	80032b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e038      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	40007000 	.word	0x40007000
 80032ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x4ec>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d028      	beq.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d121      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11a      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e0:	4013      	ands	r3, r2
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	429a      	cmp	r2, r3
 800330e:	d001      	beq.n	8003314 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0cc      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b68      	ldr	r3, [pc, #416]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d90c      	bls.n	8003360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b65      	ldr	r3, [pc, #404]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b63      	ldr	r3, [pc, #396]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b8      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d020      	beq.n	80033ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003382:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003390:	4b53      	ldr	r3, [pc, #332]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a52      	ldr	r2, [pc, #328]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800339a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800339c:	4b50      	ldr	r3, [pc, #320]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	494d      	ldr	r1, [pc, #308]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d044      	beq.n	8003444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	4b47      	ldr	r3, [pc, #284]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d119      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e07f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e2:	4b3f      	ldr	r3, [pc, #252]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e06f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b3b      	ldr	r3, [pc, #236]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e067      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003402:	4b37      	ldr	r3, [pc, #220]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4934      	ldr	r1, [pc, #208]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003414:	f7fe fa8c 	bl	8001930 <HAL_GetTick>
 8003418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341a:	e00a      	b.n	8003432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341c:	f7fe fa88 	bl	8001930 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04f      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 020c 	and.w	r2, r3, #12
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	429a      	cmp	r2, r3
 8003442:	d1eb      	bne.n	800341c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003444:	4b25      	ldr	r3, [pc, #148]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d20c      	bcs.n	800346c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003452:	4b22      	ldr	r3, [pc, #136]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800345a:	4b20      	ldr	r3, [pc, #128]	@ (80034dc <HAL_RCC_ClockConfig+0x1b8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003478:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	4916      	ldr	r1, [pc, #88]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003496:	4b12      	ldr	r3, [pc, #72]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	490e      	ldr	r1, [pc, #56]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034aa:	f000 f821 	bl	80034f0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	490a      	ldr	r1, [pc, #40]	@ (80034e4 <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	4a09      	ldr	r2, [pc, #36]	@ (80034e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034c6:	4b09      	ldr	r3, [pc, #36]	@ (80034ec <HAL_RCC_ClockConfig+0x1c8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe f9ec 	bl	80018a8 <HAL_InitTick>

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023c00 	.word	0x40023c00
 80034e0:	40023800 	.word	0x40023800
 80034e4:	08004484 	.word	0x08004484
 80034e8:	20000004 	.word	0x20000004
 80034ec:	20000008 	.word	0x20000008

080034f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b094      	sub	sp, #80	@ 0x50
 80034f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003508:	4b79      	ldr	r3, [pc, #484]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
 8003510:	2b08      	cmp	r3, #8
 8003512:	d00d      	beq.n	8003530 <HAL_RCC_GetSysClockFreq+0x40>
 8003514:	2b08      	cmp	r3, #8
 8003516:	f200 80e1 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x34>
 800351e:	2b04      	cmp	r3, #4
 8003520:	d003      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x3a>
 8003522:	e0db      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003524:	4b73      	ldr	r3, [pc, #460]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003528:	e0db      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352a:	4b73      	ldr	r3, [pc, #460]	@ (80036f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800352e:	e0d8      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003530:	4b6f      	ldr	r3, [pc, #444]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353a:	4b6d      	ldr	r3, [pc, #436]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b6a      	ldr	r3, [pc, #424]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003550:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	633b      	str	r3, [r7, #48]	@ 0x30
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	@ 0x34
 800355e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	f04f 0000 	mov.w	r0, #0
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	0159      	lsls	r1, r3, #5
 8003570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003574:	0150      	lsls	r0, r2, #5
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4621      	mov	r1, r4
 800357c:	1a51      	subs	r1, r2, r1
 800357e:	6139      	str	r1, [r7, #16]
 8003580:	4629      	mov	r1, r5
 8003582:	eb63 0301 	sbc.w	r3, r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	018b      	lsls	r3, r1, #6
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800359e:	4651      	mov	r1, sl
 80035a0:	018a      	lsls	r2, r1, #6
 80035a2:	4651      	mov	r1, sl
 80035a4:	ebb2 0801 	subs.w	r8, r2, r1
 80035a8:	4659      	mov	r1, fp
 80035aa:	eb63 0901 	sbc.w	r9, r3, r1
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035c2:	4690      	mov	r8, r2
 80035c4:	4699      	mov	r9, r3
 80035c6:	4623      	mov	r3, r4
 80035c8:	eb18 0303 	adds.w	r3, r8, r3
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	462b      	mov	r3, r5
 80035d0:	eb49 0303 	adc.w	r3, r9, r3
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035e2:	4629      	mov	r1, r5
 80035e4:	024b      	lsls	r3, r1, #9
 80035e6:	4621      	mov	r1, r4
 80035e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ec:	4621      	mov	r1, r4
 80035ee:	024a      	lsls	r2, r1, #9
 80035f0:	4610      	mov	r0, r2
 80035f2:	4619      	mov	r1, r3
 80035f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f6:	2200      	movs	r2, #0
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003600:	f7fc fde2 	bl	80001c8 <__aeabi_uldivmod>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4613      	mov	r3, r2
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800360c:	e058      	b.n	80036c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	4618      	mov	r0, r3
 8003618:	4611      	mov	r1, r2
 800361a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800361e:	623b      	str	r3, [r7, #32]
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
 8003624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003628:	4642      	mov	r2, r8
 800362a:	464b      	mov	r3, r9
 800362c:	f04f 0000 	mov.w	r0, #0
 8003630:	f04f 0100 	mov.w	r1, #0
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363a:	0150      	lsls	r0, r2, #5
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4641      	mov	r1, r8
 8003642:	ebb2 0a01 	subs.w	sl, r2, r1
 8003646:	4649      	mov	r1, r9
 8003648:	eb63 0b01 	sbc.w	fp, r3, r1
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800365c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003660:	ebb2 040a 	subs.w	r4, r2, sl
 8003664:	eb63 050b 	sbc.w	r5, r3, fp
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	464b      	mov	r3, r9
 8003684:	eb45 0303 	adc.w	r3, r5, r3
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	f04f 0300 	mov.w	r3, #0
 8003692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003696:	4629      	mov	r1, r5
 8003698:	028b      	lsls	r3, r1, #10
 800369a:	4621      	mov	r1, r4
 800369c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036a0:	4621      	mov	r1, r4
 80036a2:	028a      	lsls	r2, r1, #10
 80036a4:	4610      	mov	r0, r2
 80036a6:	4619      	mov	r1, r3
 80036a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036aa:	2200      	movs	r2, #0
 80036ac:	61bb      	str	r3, [r7, #24]
 80036ae:	61fa      	str	r2, [r7, #28]
 80036b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036b4:	f7fc fd88 	bl	80001c8 <__aeabi_uldivmod>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4613      	mov	r3, r2
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	3301      	adds	r3, #1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b05      	ldr	r3, [pc, #20]	@ (80036f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3750      	adds	r7, #80	@ 0x50
 80036e8:	46bd      	mov	sp, r7
 80036ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e041      	b.n	8003792 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd ffcc 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3304      	adds	r3, #4
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fad8 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e041      	b.n	8003830 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f839 	bl	8003838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2202      	movs	r2, #2
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3304      	adds	r3, #4
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f000 fa89 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_TIM_PWM_Start+0x24>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	e022      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b04      	cmp	r3, #4
 8003874:	d109      	bne.n	800388a <HAL_TIM_PWM_Start+0x3e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b01      	cmp	r3, #1
 8003880:	bf14      	ite	ne
 8003882:	2301      	movne	r3, #1
 8003884:	2300      	moveq	r3, #0
 8003886:	b2db      	uxtb	r3, r3
 8003888:	e015      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d109      	bne.n	80038a4 <HAL_TIM_PWM_Start+0x58>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b01      	cmp	r3, #1
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_PWM_Start+0x6a>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	bf14      	ite	ne
 80038b0:	2301      	movne	r3, #1
 80038b2:	2300      	moveq	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07c      	b.n	80039b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start+0x82>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038cc:	e013      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start+0x92>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038dc:	e00b      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b08      	cmp	r3, #8
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_PWM_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038ec:	e003      	b.n	80038f6 <HAL_TIM_PWM_Start+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2202      	movs	r2, #2
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2201      	movs	r2, #1
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fce6 	bl	80042d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <HAL_TIM_PWM_Start+0x174>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_TIM_PWM_Start+0xcc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2c      	ldr	r2, [pc, #176]	@ (80039c4 <HAL_TIM_PWM_Start+0x178>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_TIM_PWM_Start+0xd0>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_TIM_PWM_Start+0xd2>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <HAL_TIM_PWM_Start+0x174>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d022      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003944:	d01d      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1f      	ldr	r2, [pc, #124]	@ (80039c8 <HAL_TIM_PWM_Start+0x17c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d018      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <HAL_TIM_PWM_Start+0x180>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1c      	ldr	r2, [pc, #112]	@ (80039d0 <HAL_TIM_PWM_Start+0x184>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00e      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a16      	ldr	r2, [pc, #88]	@ (80039c4 <HAL_TIM_PWM_Start+0x178>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d009      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a18      	ldr	r2, [pc, #96]	@ (80039d4 <HAL_TIM_PWM_Start+0x188>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PWM_Start+0x136>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a16      	ldr	r2, [pc, #88]	@ (80039d8 <HAL_TIM_PWM_Start+0x18c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d111      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d010      	beq.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a4:	e007      	b.n	80039b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40010000 	.word	0x40010000
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40000c00 	.word	0x40000c00
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40001800 	.word	0x40001800

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0ae      	b.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	f200 809f 	bhi.w	8003b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003b49 	.word	0x08003b49
 8003a18:	08003b49 	.word	0x08003b49
 8003a1c:	08003b49 	.word	0x08003b49
 8003a20:	08003a85 	.word	0x08003a85
 8003a24:	08003b49 	.word	0x08003b49
 8003a28:	08003b49 	.word	0x08003b49
 8003a2c:	08003b49 	.word	0x08003b49
 8003a30:	08003ac7 	.word	0x08003ac7
 8003a34:	08003b49 	.word	0x08003b49
 8003a38:	08003b49 	.word	0x08003b49
 8003a3c:	08003b49 	.word	0x08003b49
 8003a40:	08003b07 	.word	0x08003b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f9f6 	bl	8003e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0208 	orr.w	r2, r2, #8
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0204 	bic.w	r2, r2, #4
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	619a      	str	r2, [r3, #24]
      break;
 8003a82:	e064      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fa46 	bl	8003f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e043      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fa9b 	bl	8004008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0208 	orr.w	r2, r2, #8
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	61da      	str	r2, [r3, #28]
      break;
 8003b04:	e023      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 faef 	bl	80040f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69d9      	ldr	r1, [r3, #28]
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	021a      	lsls	r2, r3, #8
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_TIM_ConfigClockSource+0x1c>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e0b4      	b.n	8003ce6 <HAL_TIM_ConfigClockSource+0x186>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb4:	d03e      	beq.n	8003c34 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bba:	f200 8087 	bhi.w	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc2:	f000 8086 	beq.w	8003cd2 <HAL_TIM_ConfigClockSource+0x172>
 8003bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bca:	d87f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b70      	cmp	r3, #112	@ 0x70
 8003bce:	d01a      	beq.n	8003c06 <HAL_TIM_ConfigClockSource+0xa6>
 8003bd0:	2b70      	cmp	r3, #112	@ 0x70
 8003bd2:	d87b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b60      	cmp	r3, #96	@ 0x60
 8003bd6:	d050      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x11a>
 8003bd8:	2b60      	cmp	r3, #96	@ 0x60
 8003bda:	d877      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b50      	cmp	r3, #80	@ 0x50
 8003bde:	d03c      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0xfa>
 8003be0:	2b50      	cmp	r3, #80	@ 0x50
 8003be2:	d873      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d058      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0x13a>
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d86f      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b30      	cmp	r3, #48	@ 0x30
 8003bee:	d064      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b30      	cmp	r3, #48	@ 0x30
 8003bf2:	d86b      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d060      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d867      	bhi.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d05c      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d05a      	beq.n	8003cba <HAL_TIM_ConfigClockSource+0x15a>
 8003c04:	e062      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c16:	f000 fb3b 	bl	8004290 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	609a      	str	r2, [r3, #8]
      break;
 8003c32:	e04f      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c44:	f000 fb24 	bl	8004290 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c56:	609a      	str	r2, [r3, #8]
      break;
 8003c58:	e03c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fa98 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2150      	movs	r1, #80	@ 0x50
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 faf1 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003c78:	e02c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c86:	461a      	mov	r2, r3
 8003c88:	f000 fab7 	bl	80041fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2160      	movs	r1, #96	@ 0x60
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fae1 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003c98:	e01c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f000 fa78 	bl	800419c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2140      	movs	r1, #64	@ 0x40
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fad1 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003cb8:	e00c      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4610      	mov	r0, r2
 8003cc6:	f000 fac8 	bl	800425a <TIM_ITRx_SetConfig>
      break;
 8003cca:	e003      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      break;
 8003cd0:	e000      	b.n	8003cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a43      	ldr	r2, [pc, #268]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0e:	d00f      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a40      	ldr	r2, [pc, #256]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3e      	ldr	r2, [pc, #248]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0x40>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d108      	bne.n	8003d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d50:	d027      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a2f      	ldr	r2, [pc, #188]	@ (8003e14 <TIM_Base_SetConfig+0x124>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d023      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e18 <TIM_Base_SetConfig+0x128>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d01f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <TIM_Base_SetConfig+0x12c>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d017      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2b      	ldr	r2, [pc, #172]	@ (8003e24 <TIM_Base_SetConfig+0x134>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e28 <TIM_Base_SetConfig+0x138>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00f      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <TIM_Base_SetConfig+0x13c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00b      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <TIM_Base_SetConfig+0x140>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d007      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <TIM_Base_SetConfig+0x144>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d003      	beq.n	8003da2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a26      	ldr	r2, [pc, #152]	@ (8003e38 <TIM_Base_SetConfig+0x148>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d108      	bne.n	8003db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0e      	ldr	r2, [pc, #56]	@ (8003e10 <TIM_Base_SetConfig+0x120>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d003      	beq.n	8003de2 <TIM_Base_SetConfig+0xf2>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <TIM_Base_SetConfig+0x130>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d103      	bne.n	8003dea <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40010000 	.word	0x40010000
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800
 8003e1c:	40000c00 	.word	0x40000c00
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800
 8003e30:	40001800 	.word	0x40001800
 8003e34:	40001c00 	.word	0x40001c00
 8003e38:	40002000 	.word	0x40002000

08003e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0201 	bic.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f023 0303 	bic.w	r3, r3, #3
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f023 0302 	bic.w	r3, r3, #2
 8003e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a20      	ldr	r2, [pc, #128]	@ (8003f14 <TIM_OC1_SetConfig+0xd8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d003      	beq.n	8003ea0 <TIM_OC1_SetConfig+0x64>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f18 <TIM_OC1_SetConfig+0xdc>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d10c      	bne.n	8003eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0308 	bic.w	r3, r3, #8
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a15      	ldr	r2, [pc, #84]	@ (8003f14 <TIM_OC1_SetConfig+0xd8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC1_SetConfig+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <TIM_OC1_SetConfig+0xdc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40010400 	.word	0x40010400

08003f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f023 0210 	bic.w	r2, r3, #16
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f023 0320 	bic.w	r3, r3, #32
 8003f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a22      	ldr	r2, [pc, #136]	@ (8004000 <TIM_OC2_SetConfig+0xe4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d003      	beq.n	8003f84 <TIM_OC2_SetConfig+0x68>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <TIM_OC2_SetConfig+0xe8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d10d      	bne.n	8003fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a17      	ldr	r2, [pc, #92]	@ (8004000 <TIM_OC2_SetConfig+0xe4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC2_SetConfig+0x94>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <TIM_OC2_SetConfig+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d113      	bne.n	8003fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	695b      	ldr	r3, [r3, #20]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40010000 	.word	0x40010000
 8004004:	40010400 	.word	0x40010400

08004008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a21      	ldr	r2, [pc, #132]	@ (80040e8 <TIM_OC3_SetConfig+0xe0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d003      	beq.n	800406e <TIM_OC3_SetConfig+0x66>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a20      	ldr	r2, [pc, #128]	@ (80040ec <TIM_OC3_SetConfig+0xe4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d10d      	bne.n	800408a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <TIM_OC3_SetConfig+0xe0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d003      	beq.n	800409a <TIM_OC3_SetConfig+0x92>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a15      	ldr	r2, [pc, #84]	@ (80040ec <TIM_OC3_SetConfig+0xe4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d113      	bne.n	80040c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40010400 	.word	0x40010400

080040f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800411e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800413a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	031b      	lsls	r3, r3, #12
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a12      	ldr	r2, [pc, #72]	@ (8004194 <TIM_OC4_SetConfig+0xa4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC4_SetConfig+0x68>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <TIM_OC4_SetConfig+0xa8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d109      	bne.n	800416c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800415e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	019b      	lsls	r3, r3, #6
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40010400 	.word	0x40010400

0800419c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f023 0201 	bic.w	r2, r3, #1
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 030a 	bic.w	r3, r3, #10
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f023 0210 	bic.w	r2, r3, #16
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004224:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	031b      	lsls	r3, r3, #12
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004236:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	f043 0307 	orr.w	r3, r3, #7
 800427c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	609a      	str	r2, [r3, #8]
}
 8004284:	bf00      	nop
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	021a      	lsls	r2, r3, #8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	609a      	str	r2, [r3, #8]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2201      	movs	r2, #1
 80042e4:	fa02 f303 	lsl.w	r3, r2, r3
 80042e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1a      	ldr	r2, [r3, #32]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	401a      	ands	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 031f 	and.w	r3, r3, #31
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	431a      	orrs	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e05a      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a21      	ldr	r2, [pc, #132]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d022      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004380:	d01d      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d018      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1b      	ldr	r2, [pc, #108]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d013      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1a      	ldr	r2, [pc, #104]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a18      	ldr	r2, [pc, #96]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a15      	ldr	r2, [pc, #84]	@ (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40010400 	.word	0x40010400
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <memset>:
 8004414:	4402      	add	r2, r0
 8004416:	4603      	mov	r3, r0
 8004418:	4293      	cmp	r3, r2
 800441a:	d100      	bne.n	800441e <memset+0xa>
 800441c:	4770      	bx	lr
 800441e:	f803 1b01 	strb.w	r1, [r3], #1
 8004422:	e7f9      	b.n	8004418 <memset+0x4>

08004424 <__libc_init_array>:
 8004424:	b570      	push	{r4, r5, r6, lr}
 8004426:	4d0d      	ldr	r5, [pc, #52]	@ (800445c <__libc_init_array+0x38>)
 8004428:	4c0d      	ldr	r4, [pc, #52]	@ (8004460 <__libc_init_array+0x3c>)
 800442a:	1b64      	subs	r4, r4, r5
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	2600      	movs	r6, #0
 8004430:	42a6      	cmp	r6, r4
 8004432:	d109      	bne.n	8004448 <__libc_init_array+0x24>
 8004434:	4d0b      	ldr	r5, [pc, #44]	@ (8004464 <__libc_init_array+0x40>)
 8004436:	4c0c      	ldr	r4, [pc, #48]	@ (8004468 <__libc_init_array+0x44>)
 8004438:	f000 f818 	bl	800446c <_init>
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	2600      	movs	r6, #0
 8004442:	42a6      	cmp	r6, r4
 8004444:	d105      	bne.n	8004452 <__libc_init_array+0x2e>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	f855 3b04 	ldr.w	r3, [r5], #4
 800444c:	4798      	blx	r3
 800444e:	3601      	adds	r6, #1
 8004450:	e7ee      	b.n	8004430 <__libc_init_array+0xc>
 8004452:	f855 3b04 	ldr.w	r3, [r5], #4
 8004456:	4798      	blx	r3
 8004458:	3601      	adds	r6, #1
 800445a:	e7f2      	b.n	8004442 <__libc_init_array+0x1e>
 800445c:	080044a4 	.word	0x080044a4
 8004460:	080044a4 	.word	0x080044a4
 8004464:	080044a4 	.word	0x080044a4
 8004468:	080044a8 	.word	0x080044a8

0800446c <_init>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr

08004478 <_fini>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr
