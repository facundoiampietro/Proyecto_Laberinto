
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007250  08007250  00008250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e8  080072e8  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072e8  080072e8  000082e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f0  080072f0  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f0  080072f0  000082f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080072f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          000003b4  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e99b  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f72  00000000  00000000  00017a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000199a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  0001a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000226f6  00000000  00000000  0001b331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000103b2  00000000  00000000  0003da27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8797  00000000  00000000  0004ddd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126570  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b8  00000000  00000000  001265b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a1  00000000  00000000  0012a86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007238 	.word	0x08007238

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007238 	.word	0x08007238

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bbc:	f001 ffce 	bl	8002b5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bc0:	f000 f958 	bl	8000e74 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000bc4:	f000 faec 	bl	80011a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000bc8:	f000 faca 	bl	8001160 <MX_DMA_Init>
	MX_ADC1_Init();
 8000bcc:	f000 f9bc 	bl	8000f48 <MX_ADC1_Init>
	MX_TIM3_Init();
 8000bd0:	f000 fa1a 	bl	8001008 <MX_TIM3_Init>
	MX_UART5_Init();
 8000bd4:	f000 fa9a 	bl	800110c <MX_UART5_Init>
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000bd8:	2240      	movs	r2, #64	@ 0x40
 8000bda:	4996      	ldr	r1, [pc, #600]	@ (8000e34 <main+0x27c>)
 8000bdc:	4896      	ldr	r0, [pc, #600]	@ (8000e38 <main+0x280>)
 8000bde:	f002 f897 	bl	8002d10 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 8000be2:	4b96      	ldr	r3, [pc, #600]	@ (8000e3c <main+0x284>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000be8:	4b94      	ldr	r3, [pc, #592]	@ (8000e3c <main+0x284>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	739a      	strb	r2, [r3, #14]
 8000bee:	4b93      	ldr	r3, [pc, #588]	@ (8000e3c <main+0x284>)
 8000bf0:	7b9a      	ldrb	r2, [r3, #14]
 8000bf2:	4b92      	ldr	r3, [pc, #584]	@ (8000e3c <main+0x284>)
 8000bf4:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 8000bf6:	4b91      	ldr	r3, [pc, #580]	@ (8000e3c <main+0x284>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	735a      	strb	r2, [r3, #13]
 8000bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8000e3c <main+0x284>)
 8000bfe:	7b5a      	ldrb	r2, [r3, #13]
 8000c00:	4b8e      	ldr	r3, [pc, #568]	@ (8000e3c <main+0x284>)
 8000c02:	729a      	strb	r2, [r3, #10]
 8000c04:	4b8d      	ldr	r3, [pc, #564]	@ (8000e3c <main+0x284>)
 8000c06:	7a9a      	ldrb	r2, [r3, #10]
 8000c08:	4b8c      	ldr	r3, [pc, #560]	@ (8000e3c <main+0x284>)
 8000c0a:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8000e3c <main+0x284>)
 8000c0e:	2203      	movs	r2, #3
 8000c10:	731a      	strb	r2, [r3, #12]
 8000c12:	4b8a      	ldr	r3, [pc, #552]	@ (8000e3c <main+0x284>)
 8000c14:	7b1a      	ldrb	r2, [r3, #12]
 8000c16:	4b89      	ldr	r3, [pc, #548]	@ (8000e3c <main+0x284>)
 8000c18:	725a      	strb	r2, [r3, #9]
 8000c1a:	4b88      	ldr	r3, [pc, #544]	@ (8000e3c <main+0x284>)
 8000c1c:	7a5a      	ldrb	r2, [r3, #9]
 8000c1e:	4b87      	ldr	r3, [pc, #540]	@ (8000e3c <main+0x284>)
 8000c20:	719a      	strb	r2, [r3, #6]
 8000c22:	4b86      	ldr	r3, [pc, #536]	@ (8000e3c <main+0x284>)
 8000c24:	799a      	ldrb	r2, [r3, #6]
 8000c26:	4b85      	ldr	r3, [pc, #532]	@ (8000e3c <main+0x284>)
 8000c28:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000c2a:	4b84      	ldr	r3, [pc, #528]	@ (8000e3c <main+0x284>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	721a      	strb	r2, [r3, #8]
 8000c30:	4b82      	ldr	r3, [pc, #520]	@ (8000e3c <main+0x284>)
 8000c32:	7a1a      	ldrb	r2, [r3, #8]
 8000c34:	4b81      	ldr	r3, [pc, #516]	@ (8000e3c <main+0x284>)
 8000c36:	715a      	strb	r2, [r3, #5]
 8000c38:	4b80      	ldr	r3, [pc, #512]	@ (8000e3c <main+0x284>)
 8000c3a:	795a      	ldrb	r2, [r3, #5]
 8000c3c:	4b7f      	ldr	r3, [pc, #508]	@ (8000e3c <main+0x284>)
 8000c3e:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000c40:	4b7e      	ldr	r3, [pc, #504]	@ (8000e3c <main+0x284>)
 8000c42:	2205      	movs	r2, #5
 8000c44:	711a      	strb	r2, [r3, #4]
 8000c46:	4b7d      	ldr	r3, [pc, #500]	@ (8000e3c <main+0x284>)
 8000c48:	791a      	ldrb	r2, [r3, #4]
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	@ (8000e3c <main+0x284>)
 8000c4c:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8000e3c <main+0x284>)
 8000c50:	2206      	movs	r2, #6
 8000c52:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 8000c54:	4b7a      	ldr	r3, [pc, #488]	@ (8000e40 <main+0x288>)
 8000c56:	2206      	movs	r2, #6
 8000c58:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000c5a:	4b79      	ldr	r3, [pc, #484]	@ (8000e40 <main+0x288>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	4b77      	ldr	r3, [pc, #476]	@ (8000e40 <main+0x288>)
 8000c62:	789a      	ldrb	r2, [r3, #2]
 8000c64:	4b76      	ldr	r3, [pc, #472]	@ (8000e40 <main+0x288>)
 8000c66:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 8000c68:	4b75      	ldr	r3, [pc, #468]	@ (8000e40 <main+0x288>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 8000c6e:	4b74      	ldr	r3, [pc, #464]	@ (8000e40 <main+0x288>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	72da      	strb	r2, [r3, #11]
 8000c74:	4b72      	ldr	r3, [pc, #456]	@ (8000e40 <main+0x288>)
 8000c76:	7ada      	ldrb	r2, [r3, #11]
 8000c78:	4b71      	ldr	r3, [pc, #452]	@ (8000e40 <main+0x288>)
 8000c7a:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 8000c7c:	4b70      	ldr	r3, [pc, #448]	@ (8000e40 <main+0x288>)
 8000c7e:	2209      	movs	r2, #9
 8000c80:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 8000c82:	4b6f      	ldr	r3, [pc, #444]	@ (8000e40 <main+0x288>)
 8000c84:	2208      	movs	r2, #8
 8000c86:	735a      	strb	r2, [r3, #13]
 8000c88:	4b6d      	ldr	r3, [pc, #436]	@ (8000e40 <main+0x288>)
 8000c8a:	7b5a      	ldrb	r2, [r3, #13]
 8000c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8000e40 <main+0x288>)
 8000c8e:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 8000c90:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <main+0x288>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 8000c96:	4b6a      	ldr	r3, [pc, #424]	@ (8000e40 <main+0x288>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	721a      	strb	r2, [r3, #8]
 8000c9c:	4b68      	ldr	r3, [pc, #416]	@ (8000e40 <main+0x288>)
 8000c9e:	7a1a      	ldrb	r2, [r3, #8]
 8000ca0:	4b67      	ldr	r3, [pc, #412]	@ (8000e40 <main+0x288>)
 8000ca2:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 8000ca4:	4b66      	ldr	r3, [pc, #408]	@ (8000e40 <main+0x288>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	729a      	strb	r2, [r3, #10]
 8000caa:	4b65      	ldr	r3, [pc, #404]	@ (8000e40 <main+0x288>)
 8000cac:	7a9a      	ldrb	r2, [r3, #10]
 8000cae:	4b64      	ldr	r3, [pc, #400]	@ (8000e40 <main+0x288>)
 8000cb0:	725a      	strb	r2, [r3, #9]
 8000cb2:	4b63      	ldr	r3, [pc, #396]	@ (8000e40 <main+0x288>)
 8000cb4:	7a5a      	ldrb	r2, [r3, #9]
 8000cb6:	4b62      	ldr	r3, [pc, #392]	@ (8000e40 <main+0x288>)
 8000cb8:	719a      	strb	r2, [r3, #6]
 8000cba:	4b61      	ldr	r3, [pc, #388]	@ (8000e40 <main+0x288>)
 8000cbc:	799a      	ldrb	r2, [r3, #6]
 8000cbe:	4b60      	ldr	r3, [pc, #384]	@ (8000e40 <main+0x288>)
 8000cc0:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc8:	485e      	ldr	r0, [pc, #376]	@ (8000e44 <main+0x28c>)
 8000cca:	f003 faa7 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cd4:	485b      	ldr	r0, [pc, #364]	@ (8000e44 <main+0x28c>)
 8000cd6:	f003 faa1 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce0:	4858      	ldr	r0, [pc, #352]	@ (8000e44 <main+0x28c>)
 8000ce2:	f003 fa9b 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cec:	4855      	ldr	r0, [pc, #340]	@ (8000e44 <main+0x28c>)
 8000cee:	f003 fa95 	bl	800421c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 8000cf2:	2108      	movs	r1, #8
 8000cf4:	4854      	ldr	r0, [pc, #336]	@ (8000e48 <main+0x290>)
 8000cf6:	f004 f803 	bl	8004d00 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000cfa:	210c      	movs	r1, #12
 8000cfc:	4852      	ldr	r0, [pc, #328]	@ (8000e48 <main+0x290>)
 8000cfe:	f003 ffff 	bl	8004d00 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8000d02:	4b52      	ldr	r3, [pc, #328]	@ (8000e4c <main+0x294>)
 8000d04:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000d08:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000d0a:	4b50      	ldr	r3, [pc, #320]	@ (8000e4c <main+0x294>)
 8000d0c:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 8000d10:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d18:	484d      	ldr	r0, [pc, #308]	@ (8000e50 <main+0x298>)
 8000d1a:	f003 fa7f 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d24:	484a      	ldr	r0, [pc, #296]	@ (8000e50 <main+0x298>)
 8000d26:	f003 fa79 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4847      	ldr	r0, [pc, #284]	@ (8000e50 <main+0x298>)
 8000d32:	f003 fa73 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d3c:	4844      	ldr	r0, [pc, #272]	@ (8000e50 <main+0x298>)
 8000d3e:	f003 fa6d 	bl	800421c <HAL_GPIO_WritePin>

	prueba = 6; //Aca se elige que programa queremos que se realice
 8000d42:	4b44      	ldr	r3, [pc, #272]	@ (8000e54 <main+0x29c>)
 8000d44:	2206      	movs	r2, #6
 8000d46:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (prueba) {
 8000d48:	4b42      	ldr	r3, [pc, #264]	@ (8000e54 <main+0x29c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d8fb      	bhi.n	8000d48 <main+0x190>
 8000d50:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <main+0x1a0>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d8d 	.word	0x08000d8d
 8000d5c:	08000d49 	.word	0x08000d49
 8000d60:	08000d49 	.word	0x08000d49
 8000d64:	08000d49 	.word	0x08000d49
 8000d68:	08000d93 	.word	0x08000d93
 8000d6c:	08000d99 	.word	0x08000d99
 8000d70:	08000d9f 	.word	0x08000d9f
 8000d74:	08000d49 	.word	0x08000d49
 8000d78:	08000d49 	.word	0x08000d49
 8000d7c:	08000d49 	.word	0x08000d49
 8000d80:	08000dc7 	.word	0x08000dc7
 8000d84:	08000e09 	.word	0x08000e09
 8000d88:	08000e29 	.word	0x08000e29

		case 0:
			prueba_avanzar();
 8000d8c:	f000 fc68 	bl	8001660 <prueba_avanzar>
			break;
 8000d90:	e04e      	b.n	8000e30 <main+0x278>
		case 1:

			break;

		case 4:
			programa_principal();
 8000d92:	f000 fc6f 	bl	8001674 <programa_principal>
			break;
 8000d96:	e04b      	b.n	8000e30 <main+0x278>

		case 5:
			ajuste_automatico();
 8000d98:	f000 fb9e 	bl	80014d8 <ajuste_automatico>
			break;
 8000d9c:	e048      	b.n	8000e30 <main+0x278>

		case 6:
			girando = 0;
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <main+0x2a0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
			sensor_izq_min = 32700;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e5c <main+0x2a4>)
 8000da6:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000daa:	801a      	strh	r2, [r3, #0]
			sensor_der_min = 32700;
 8000dac:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <main+0x2a8>)
 8000dae:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 8000db2:	801a      	strh	r2, [r3, #0]
			sensor_izq_max = 0;
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <main+0x2ac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	801a      	strh	r2, [r3, #0]
			sensor_der_max = 0;
 8000dba:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <main+0x2b0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	801a      	strh	r2, [r3, #0]
			prueba = 5;
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <main+0x29c>)
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	701a      	strb	r2, [r3, #0]
		case 10:
			TIM3->CCR3 = 0;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <main+0x294>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM3->CCR4 = 0;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <main+0x294>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd8:	481d      	ldr	r0, [pc, #116]	@ (8000e50 <main+0x298>)
 8000dda:	f003 fa1f 	bl	800421c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de4:	481a      	ldr	r0, [pc, #104]	@ (8000e50 <main+0x298>)
 8000de6:	f003 fa19 	bl	800421c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df0:	4817      	ldr	r0, [pc, #92]	@ (8000e50 <main+0x298>)
 8000df2:	f003 fa13 	bl	800421c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfc:	4814      	ldr	r0, [pc, #80]	@ (8000e50 <main+0x298>)
 8000dfe:	f003 fa0d 	bl	800421c <HAL_GPIO_WritePin>
			envio_llegada();
 8000e02:	f001 fc27 	bl	8002654 <envio_llegada>

			break;
 8000e06:	e013      	b.n	8000e30 <main+0x278>
		case 11:
			eliminar_repetidos(camino_solucion, contador_casillas);
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <main+0x2b4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <main+0x2b8>)
 8000e10:	f000 faa4 	bl	800135c <eliminar_repetidos>
			contador_casillas = contador_casillas - 1;
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <main+0x2b4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <main+0x2b4>)
 8000e1e:	701a      	strb	r2, [r3, #0]
			prueba = 12;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <main+0x29c>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	701a      	strb	r2, [r3, #0]
			break;
 8000e26:	e003      	b.n	8000e30 <main+0x278>
		case 12:
			de_reversa_mami();
 8000e28:	f000 fae8 	bl	80013fc <de_reversa_mami>
			break;
 8000e2c:	bf00      	nop
 8000e2e:	e78b      	b.n	8000d48 <main+0x190>
		switch (prueba) {
 8000e30:	e78a      	b.n	8000d48 <main+0x190>
 8000e32:	bf00      	nop
 8000e34:	20000244 	.word	0x20000244
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	200001dc 	.word	0x200001dc
 8000e40:	200001ec 	.word	0x200001ec
 8000e44:	40020400 	.word	0x40020400
 8000e48:	20000128 	.word	0x20000128
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	200001fd 	.word	0x200001fd
 8000e58:	20000228 	.word	0x20000228
 8000e5c:	20000002 	.word	0x20000002
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000200 	.word	0x20000200
 8000e68:	20000202 	.word	0x20000202
 8000e6c:	200001fc 	.word	0x200001fc
 8000e70:	20000208 	.word	0x20000208

08000e74 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	@ 0x50
 8000e78:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	@ 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fd5a 	bl	800693c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	@ (8000f40 <SystemClock_Config+0xcc>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea0:	4a27      	ldr	r2, [pc, #156]	@ (8000f40 <SystemClock_Config+0xcc>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <SystemClock_Config+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	@ (8000f44 <SystemClock_Config+0xd0>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000edc:	2302      	movs	r3, #2
 8000ede:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000ee8:	2332      	movs	r3, #50	@ 0x32
 8000eea:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 f9c1 	bl	8004280 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
		Error_Handler();
 8000f04:	f001 fbf8 	bl	80026f8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f14:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f18:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fc22 	bl	8004770 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xc2>
		Error_Handler();
 8000f32:	f001 fbe1 	bl	80026f8 <Error_Handler>
	}
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	@ 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f5c:	4a28      	ldr	r2, [pc, #160]	@ (8001000 <MX_ADC1_Init+0xb8>)
 8000f5e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f60:	4b26      	ldr	r3, [pc, #152]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f66:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000f74:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001004 <MX_ADC1_Init+0xbc>)
 8000f8c:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8000f94:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9a:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000fa8:	4814      	ldr	r0, [pc, #80]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000faa:	f001 fe6d 	bl	8002c88 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
		Error_Handler();
 8000fb4:	f001 fba0 	bl	80026f8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8000fb8:	2309      	movs	r3, #9
 8000fba:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000fca:	f001 ffbf 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
		Error_Handler();
 8000fd4:	f001 fb90 	bl	80026f8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_ADC1_Init+0xb4>)
 8000fe6:	f001 ffb1 	bl	8002f4c <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000ff0:	f001 fb82 	bl	80026f8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000080 	.word	0x20000080
 8001000:	40012000 	.word	0x40012000
 8001004:	0f000001 	.word	0x0f000001

08001008 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b08e      	sub	sp, #56	@ 0x38
 800100c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800100e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800101c:	f107 0320 	add.w	r3, r7, #32
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	615a      	str	r2, [r3, #20]
 8001036:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001038:	4b32      	ldr	r3, [pc, #200]	@ (8001104 <MX_TIM3_Init+0xfc>)
 800103a:	4a33      	ldr	r2, [pc, #204]	@ (8001108 <MX_TIM3_Init+0x100>)
 800103c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800103e:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <MX_TIM3_Init+0xfc>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b2f      	ldr	r3, [pc, #188]	@ (8001104 <MX_TIM3_Init+0xfc>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <MX_TIM3_Init+0xfc>)
 800104c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001050:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b2c      	ldr	r3, [pc, #176]	@ (8001104 <MX_TIM3_Init+0xfc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <MX_TIM3_Init+0xfc>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800105e:	4829      	ldr	r0, [pc, #164]	@ (8001104 <MX_TIM3_Init+0xfc>)
 8001060:	f003 fda6 	bl	8004bb0 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM3_Init+0x66>
		Error_Handler();
 800106a:	f001 fb45 	bl	80026f8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001074:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001078:	4619      	mov	r1, r3
 800107a:	4822      	ldr	r0, [pc, #136]	@ (8001104 <MX_TIM3_Init+0xfc>)
 800107c:	f003 ffca 	bl	8005014 <HAL_TIM_ConfigClockSource>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM3_Init+0x82>
		Error_Handler();
 8001086:	f001 fb37 	bl	80026f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800108a:	481e      	ldr	r0, [pc, #120]	@ (8001104 <MX_TIM3_Init+0xfc>)
 800108c:	f003 fddf 	bl	8004c4e <HAL_TIM_PWM_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM3_Init+0x92>
		Error_Handler();
 8001096:	f001 fb2f 	bl	80026f8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	4619      	mov	r1, r3
 80010a8:	4816      	ldr	r0, [pc, #88]	@ (8001104 <MX_TIM3_Init+0xfc>)
 80010aa:	f004 fb91 	bl	80057d0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM3_Init+0xb0>
		Error_Handler();
 80010b4:	f001 fb20 	bl	80026f8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2208      	movs	r2, #8
 80010cc:	4619      	mov	r1, r3
 80010ce:	480d      	ldr	r0, [pc, #52]	@ (8001104 <MX_TIM3_Init+0xfc>)
 80010d0:	f003 fede 	bl	8004e90 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM3_Init+0xd6>
		Error_Handler();
 80010da:	f001 fb0d 	bl	80026f8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	220c      	movs	r2, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <MX_TIM3_Init+0xfc>)
 80010e6:	f003 fed3 	bl	8004e90 <HAL_TIM_PWM_ConfigChannel>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0xec>
		Error_Handler();
 80010f0:	f001 fb02 	bl	80026f8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80010f4:	4803      	ldr	r0, [pc, #12]	@ (8001104 <MX_TIM3_Init+0xfc>)
 80010f6:	f001 fbc7 	bl	8002888 <HAL_TIM_MspPostInit>

}
 80010fa:	bf00      	nop
 80010fc:	3738      	adds	r7, #56	@ 0x38
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000128 	.word	0x20000128
 8001108:	40000400 	.word	0x40000400

0800110c <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	@ (800115c <MX_UART5_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800111c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <MX_UART5_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <MX_UART5_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001142:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_UART5_Init+0x4c>)
 8001144:	f004 fbc0 	bl	80058c8 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_UART5_Init+0x46>
		Error_Handler();
 800114e:	f001 fad3 	bl	80026f8 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000170 	.word	0x20000170
 800115c:	40005000 	.word	0x40005000

08001160 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <MX_DMA_Init+0x3c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <MX_DMA_Init+0x3c>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b09      	ldr	r3, [pc, #36]	@ (800119c <MX_DMA_Init+0x3c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2038      	movs	r0, #56	@ 0x38
 8001188:	f002 fa5b 	bl	8003642 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800118c:	2038      	movs	r0, #56	@ 0x38
 800118e:	f002 fa74 	bl	800367a <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800

080011a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	@ 0x28
 80011a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	4b53      	ldr	r3, [pc, #332]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b50      	ldr	r3, [pc, #320]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a4b      	ldr	r2, [pc, #300]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	4b45      	ldr	r3, [pc, #276]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a44      	ldr	r2, [pc, #272]	@ (8001308 <MX_GPIO_Init+0x168>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b42      	ldr	r3, [pc, #264]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	4b3e      	ldr	r3, [pc, #248]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a3d      	ldr	r2, [pc, #244]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <MX_GPIO_Init+0x168>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <MX_GPIO_Init+0x168>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a36      	ldr	r2, [pc, #216]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <MX_GPIO_Init+0x168>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	603b      	str	r3, [r7, #0]
 8001240:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2108      	movs	r1, #8
 8001246:	4831      	ldr	r0, [pc, #196]	@ (800130c <MX_GPIO_Init+0x16c>)
 8001248:	f002 ffe8 	bl	800421c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8001252:	482f      	ldr	r0, [pc, #188]	@ (8001310 <MX_GPIO_Init+0x170>)
 8001254:	f002 ffe2 	bl	800421c <HAL_GPIO_WritePin>
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800125e:	482d      	ldr	r0, [pc, #180]	@ (8001314 <MX_GPIO_Init+0x174>)
 8001260:	f002 ffdc 	bl	800421c <HAL_GPIO_WritePin>
	led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001264:	2308      	movs	r3, #8
 8001266:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4824      	ldr	r0, [pc, #144]	@ (800130c <MX_GPIO_Init+0x16c>)
 800127c:	f002 fe1a 	bl	8003eb4 <HAL_GPIO_Init>

	/*Configure GPIO pin : boton_Pin */
	GPIO_InitStruct.Pin = boton_Pin;
 8001280:	2301      	movs	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(boton_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4821      	ldr	r0, [pc, #132]	@ (8001318 <MX_GPIO_Init+0x178>)
 8001294:	f002 fe0e 	bl	8003eb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin;
 8001298:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800129c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	4817      	ldr	r0, [pc, #92]	@ (8001310 <MX_GPIO_Init+0x170>)
 80012b2:	f002 fdff 	bl	8003eb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
	GPIO_InitStruct.Pin = led_verde_Pin | led_naranja_Pin | led_rojo_Pin | led_azul_Pin;
 80012b6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80012ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_GPIO_Init+0x174>)
 80012d0:	f002 fdf0 	bl	8003eb4 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 80012d4:	23c0      	movs	r3, #192	@ 0xc0
 80012d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012dc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_GPIO_Init+0x17c>)
 80012ea:	f002 fde3 	bl	8003eb4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2017      	movs	r0, #23
 80012f4:	f002 f9a5 	bl	8003642 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f8:	2017      	movs	r0, #23
 80012fa:	f002 f9be 	bl	800367a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40021000 	.word	0x40021000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800

08001320 <detecte_pared_por_tiempo>:

/* USER CODE BEGIN 4 */

void detecte_pared_por_tiempo(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual_3 = HAL_GetTick();
 8001326:	f001 fc7f 	bl	8002c28 <HAL_GetTick>
 800132a:	6078      	str	r0, [r7, #4]
	if (tiempo_sin_encontrar_pared_o_linea <= (tiempo_actual_3 - tiempo_inicio_3)) {
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <detecte_pared_por_tiempo+0x30>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001338:	4293      	cmp	r3, r2
 800133a:	d905      	bls.n	8001348 <detecte_pared_por_tiempo+0x28>
		solicitud_pared = 1;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <detecte_pared_por_tiempo+0x34>)
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
		flag_pared_2 = 0;
 8001342:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <detecte_pared_por_tiempo+0x38>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2000023c 	.word	0x2000023c
 8001354:	20000230 	.word	0x20000230
 8001358:	20000241 	.word	0x20000241

0800135c <eliminar_repetidos>:

void eliminar_repetidos(uint8_t *camino_solucion, uint8_t contador_casillas) {
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < contador_casillas - 1; i++) {
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e039      	b.n	80013e2 <eliminar_repetidos+0x86>
		for (int j = i + 1; j < contador_casillas; j++) {
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	3301      	adds	r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	e02e      	b.n	80013d4 <eliminar_repetidos+0x78>
			if (camino_solucion[i] == camino_solucion[j]) {
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4413      	add	r3, r2
 800137c:	781a      	ldrb	r2, [r3, #0]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	440b      	add	r3, r1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d121      	bne.n	80013ce <eliminar_repetidos+0x72>
				// Se encontró repetido: eliminar todo entre i+1 y j inclusive
				int cantidad_a_eliminar = j - i;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	60bb      	str	r3, [r7, #8]

				for (int k = j; k < contador_casillas; k++) {
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	e00d      	b.n	80013b4 <eliminar_repetidos+0x58>
					camino_solucion[k - cantidad_a_eliminar] = camino_solucion[k];
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	441a      	add	r2, r3
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1acb      	subs	r3, r1, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	440b      	add	r3, r1
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	701a      	strb	r2, [r3, #0]
				for (int k = j; k < contador_casillas; k++) {
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbed      	blt.n	8001398 <eliminar_repetidos+0x3c>
				}

				contador_casillas = contador_casillas - cantidad_a_eliminar;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	70fb      	strb	r3, [r7, #3]
				i = -1;  // Reiniciar para volver a analizar todo desde el inicio
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	617b      	str	r3, [r7, #20]
				break;
 80013cc:	e006      	b.n	80013dc <eliminar_repetidos+0x80>
		for (int j = i + 1; j < contador_casillas; j++) {
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	78fb      	ldrb	r3, [r7, #3]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbcc      	blt.n	8001376 <eliminar_repetidos+0x1a>
	for (int i = 0; i < contador_casillas - 1; i++) {
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	3301      	adds	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dbc0      	blt.n	800136e <eliminar_repetidos+0x12>
			}
		}
	}

}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <de_reversa_mami>:

void de_reversa_mami(void) { //codigo para ir de la casilla 15 a la 0... muy chiche
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

	if (solicitud_linea == 1) { //cambio de casilla
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <de_reversa_mami+0xb0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b01      	cmp	r3, #1
 8001408:	d13f      	bne.n	800148a <de_reversa_mami+0x8e>
		contador_giros = 0;
 800140a:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <de_reversa_mami+0xb4>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8001410:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <de_reversa_mami+0xb8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <de_reversa_mami+0xbc>)
 8001416:	7812      	ldrb	r2, [r2, #0]
 8001418:	4611      	mov	r1, r2
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa9e 	bl	800195c <act_ubicacion>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <de_reversa_mami+0xb8>)
 8001426:	701a      	strb	r2, [r3, #0]
		casilla_n = camino_solucion[contador_casillas]; //calcula la casilla a la que hay q ir
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <de_reversa_mami+0xc0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b24      	ldr	r3, [pc, #144]	@ (80014c0 <de_reversa_mami+0xc4>)
 8001430:	5c9a      	ldrb	r2, [r3, r2]
 8001432:	4b24      	ldr	r3, [pc, #144]	@ (80014c4 <de_reversa_mami+0xc8>)
 8001434:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <de_reversa_mami+0xb8>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4a22      	ldr	r2, [pc, #136]	@ (80014c4 <de_reversa_mami+0xc8>)
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fa2d 	bl	80018a0 <obtener_orientacion_futura>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <de_reversa_mami+0xcc>)
 800144c:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <de_reversa_mami+0xbc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4a1d      	ldr	r2, [pc, #116]	@ (80014c8 <de_reversa_mami+0xcc>)
 8001454:	7812      	ldrb	r2, [r2, #0]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fa4d 	bl	80018f8 <obtenerGiro>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <de_reversa_mami+0xd0>)
 8001464:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001466:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <de_reversa_mami+0xcc>)
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <de_reversa_mami+0xbc>)
 800146c:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <de_reversa_mami+0xd0>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 fbc6 	bl	8001c04 <ejecutarGiro>
		contador_casillas = contador_casillas - 1;
 8001478:	4b10      	ldr	r3, [pc, #64]	@ (80014bc <de_reversa_mami+0xc0>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	b2da      	uxtb	r2, r3
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <de_reversa_mami+0xc0>)
 8001482:	701a      	strb	r2, [r3, #0]
		solicitud_linea = 0;
 8001484:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <de_reversa_mami+0xb0>)
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	}
	if (filtrado_linea == 1) {
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <de_reversa_mami+0xd4>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <de_reversa_mami+0x9c>
		filtrado_linea_funcion();
 8001494:	f001 f82e 	bl	80024f4 <filtrado_linea_funcion>
	}
	if (ubicacion == 0)
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <de_reversa_mami+0xb8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <de_reversa_mami+0xaa>
		prueba = 10;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <de_reversa_mami+0xd8>)
 80014a2:	220a      	movs	r2, #10
 80014a4:	701a      	strb	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000238 	.word	0x20000238
 80014b0:	200001fe 	.word	0x200001fe
 80014b4:	200001d8 	.word	0x200001d8
 80014b8:	200001d9 	.word	0x200001d9
 80014bc:	200001fc 	.word	0x200001fc
 80014c0:	20000208 	.word	0x20000208
 80014c4:	20000000 	.word	0x20000000
 80014c8:	200001da 	.word	0x200001da
 80014cc:	200001db 	.word	0x200001db
 80014d0:	20000239 	.word	0x20000239
 80014d4:	200001fd 	.word	0x200001fd

080014d8 <ajuste_automatico>:
void ajuste_automatico(void) {
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if ((sensor_der_min == 0) || (sensor_izq_min == 0)) {
 80014dc:	4b56      	ldr	r3, [pc, #344]	@ (8001638 <ajuste_automatico+0x160>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <ajuste_automatico+0x14>
 80014e4:	4b55      	ldr	r3, [pc, #340]	@ (800163c <ajuste_automatico+0x164>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 80014ec:	4b52      	ldr	r3, [pc, #328]	@ (8001638 <ajuste_automatico+0x160>)
 80014ee:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014f2:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 80014f4:	4b51      	ldr	r3, [pc, #324]	@ (800163c <ajuste_automatico+0x164>)
 80014f6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014fa:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 80014fc:	4b4e      	ldr	r3, [pc, #312]	@ (8001638 <ajuste_automatico+0x160>)
 80014fe:	881a      	ldrh	r2, [r3, #0]
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <ajuste_automatico+0x168>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	429a      	cmp	r2, r3
 8001508:	d904      	bls.n	8001514 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 800150a:	4b4d      	ldr	r3, [pc, #308]	@ (8001640 <ajuste_automatico+0x168>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b49      	ldr	r3, [pc, #292]	@ (8001638 <ajuste_automatico+0x160>)
 8001512:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8001514:	4b49      	ldr	r3, [pc, #292]	@ (800163c <ajuste_automatico+0x164>)
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <ajuste_automatico+0x16c>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	b29b      	uxth	r3, r3
 800151e:	429a      	cmp	r2, r3
 8001520:	d904      	bls.n	800152c <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8001522:	4b48      	ldr	r3, [pc, #288]	@ (8001644 <ajuste_automatico+0x16c>)
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	b29a      	uxth	r2, r3
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <ajuste_automatico+0x164>)
 800152a:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 800152c:	4b46      	ldr	r3, [pc, #280]	@ (8001648 <ajuste_automatico+0x170>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <ajuste_automatico+0x168>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	b29b      	uxth	r3, r3
 8001536:	429a      	cmp	r2, r3
 8001538:	d204      	bcs.n	8001544 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 800153a:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <ajuste_automatico+0x168>)
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b41      	ldr	r3, [pc, #260]	@ (8001648 <ajuste_automatico+0x170>)
 8001542:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8001544:	4b41      	ldr	r3, [pc, #260]	@ (800164c <ajuste_automatico+0x174>)
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	4b3e      	ldr	r3, [pc, #248]	@ (8001644 <ajuste_automatico+0x16c>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	429a      	cmp	r2, r3
 8001550:	d204      	bcs.n	800155c <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8001552:	4b3c      	ldr	r3, [pc, #240]	@ (8001644 <ajuste_automatico+0x16c>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b3c      	ldr	r3, [pc, #240]	@ (800164c <ajuste_automatico+0x174>)
 800155a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 800155c:	2101      	movs	r1, #1
 800155e:	483c      	ldr	r0, [pc, #240]	@ (8001650 <ajuste_automatico+0x178>)
 8001560:	f002 fe44 	bl	80041ec <HAL_GPIO_ReadPin>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d15c      	bne.n	8001624 <ajuste_automatico+0x14c>
		HAL_Delay(40);
 800156a:	2028      	movs	r0, #40	@ 0x28
 800156c:	f001 fb68 	bl	8002c40 <HAL_Delay>
		if (HAL_GPIO_ReadPin(boton_GPIO_Port, boton_Pin) == GPIO_PIN_SET) {
 8001570:	2101      	movs	r1, #1
 8001572:	4837      	ldr	r0, [pc, #220]	@ (8001650 <ajuste_automatico+0x178>)
 8001574:	f002 fe3a 	bl	80041ec <HAL_GPIO_ReadPin>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d152      	bne.n	8001624 <ajuste_automatico+0x14c>
			margen_d = ((sensor_der_max * 0.4) + (sensor_der_min * 0.6));
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <ajuste_automatico+0x170>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff f8f8 	bl	8000778 <__aeabi_i2d>
 8001588:	a327      	add	r3, pc, #156	@ (adr r3, 8001628 <ajuste_automatico+0x150>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe fe77 	bl	8000280 <__aeabi_dmul>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4614      	mov	r4, r2
 8001598:	461d      	mov	r5, r3
 800159a:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <ajuste_automatico+0x160>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f8ea 	bl	8000778 <__aeabi_i2d>
 80015a4:	a322      	add	r3, pc, #136	@ (adr r3, 8001630 <ajuste_automatico+0x158>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7fe fe69 	bl	8000280 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ff93 	bl	80004e0 <__adddf3>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff f943 	bl	800084c <__aeabi_d2uiz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <ajuste_automatico+0x17c>)
 80015cc:	801a      	strh	r2, [r3, #0]
			margen_i = ((sensor_izq_max * 0.4) + (sensor_izq_min * 0.6));
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <ajuste_automatico+0x174>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f8d0 	bl	8000778 <__aeabi_i2d>
 80015d8:	a313      	add	r3, pc, #76	@ (adr r3, 8001628 <ajuste_automatico+0x150>)
 80015da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015de:	f7fe fe4f 	bl	8000280 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4614      	mov	r4, r2
 80015e8:	461d      	mov	r5, r3
 80015ea:	4b14      	ldr	r3, [pc, #80]	@ (800163c <ajuste_automatico+0x164>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f8c2 	bl	8000778 <__aeabi_i2d>
 80015f4:	a30e      	add	r3, pc, #56	@ (adr r3, 8001630 <ajuste_automatico+0x158>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe41 	bl	8000280 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7fe ff6b 	bl	80004e0 <__adddf3>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff f91b 	bl	800084c <__aeabi_d2uiz>
 8001616:	4603      	mov	r3, r0
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <ajuste_automatico+0x180>)
 800161c:	801a      	strh	r2, [r3, #0]
			prueba = 4;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <ajuste_automatico+0x184>)
 8001620:	2204      	movs	r2, #4
 8001622:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001624:	bf00      	nop
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fd99999 	.word	0x3fd99999
 8001630:	33333333 	.word	0x33333333
 8001634:	3fe33333 	.word	0x3fe33333
 8001638:	20000004 	.word	0x20000004
 800163c:	20000002 	.word	0x20000002
 8001640:	200002c6 	.word	0x200002c6
 8001644:	200002c4 	.word	0x200002c4
 8001648:	20000202 	.word	0x20000202
 800164c:	20000200 	.word	0x20000200
 8001650:	40020000 	.word	0x40020000
 8001654:	20000206 	.word	0x20000206
 8001658:	20000204 	.word	0x20000204
 800165c:	200001fd 	.word	0x200001fd

08001660 <prueba_avanzar>:

void prueba_avanzar(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
//	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
	ejecutarGiro(izquierda);
 8001664:	2001      	movs	r0, #1
 8001666:	f000 facd 	bl	8001c04 <ejecutarGiro>
	ejecutarGiro(adelante);
 800166a:	2000      	movs	r0, #0
 800166c:	f000 faca 	bl	8001c04 <ejecutarGiro>

	while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <prueba_avanzar+0x10>

08001674 <programa_principal>:
		;
}

void programa_principal(void) {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8001678:	f000 f9f0 	bl	8001a5c <correccion_avanzar>
	girando = 0;
 800167c:	4b75      	ldr	r3, [pc, #468]	@ (8001854 <programa_principal+0x1e0>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
	flag_pared = 0; // en realidad es flag pared o linea
 8001682:	4b75      	ldr	r3, [pc, #468]	@ (8001858 <programa_principal+0x1e4>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
	if (solicitud_linea == 1) { //cambio de casilla
 8001688:	4b74      	ldr	r3, [pc, #464]	@ (800185c <programa_principal+0x1e8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d15e      	bne.n	8001750 <programa_principal+0xdc>
		flag_pared = 1;
 8001692:	4b71      	ldr	r3, [pc, #452]	@ (8001858 <programa_principal+0x1e4>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
		contador_giros = 0;
 8001698:	4b71      	ldr	r3, [pc, #452]	@ (8001860 <programa_principal+0x1ec>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 800169e:	4b71      	ldr	r3, [pc, #452]	@ (8001864 <programa_principal+0x1f0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001864 <programa_principal+0x1f0>)
 80016a8:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 80016aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001868 <programa_principal+0x1f4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4a6f      	ldr	r2, [pc, #444]	@ (800186c <programa_principal+0x1f8>)
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	4611      	mov	r1, r2
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f951 	bl	800195c <act_ubicacion>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b6a      	ldr	r3, [pc, #424]	@ (8001868 <programa_principal+0x1f4>)
 80016c0:	701a      	strb	r2, [r3, #0]
		envio_ubicacion(ubicacion, casilla_n);
 80016c2:	4b69      	ldr	r3, [pc, #420]	@ (8001868 <programa_principal+0x1f4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <programa_principal+0x1fc>)
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 ff71 	bl	80025b4 <envio_ubicacion>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 80016d2:	4b65      	ldr	r3, [pc, #404]	@ (8001868 <programa_principal+0x1f4>)
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	4b65      	ldr	r3, [pc, #404]	@ (800186c <programa_principal+0x1f8>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4966      	ldr	r1, [pc, #408]	@ (8001874 <programa_principal+0x200>)
 80016dc:	4866      	ldr	r0, [pc, #408]	@ (8001878 <programa_principal+0x204>)
 80016de:	f000 fc7b 	bl	8001fd8 <calculo_minimo_peso>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b62      	ldr	r3, [pc, #392]	@ (8001870 <programa_principal+0x1fc>)
 80016e8:	701a      	strb	r2, [r3, #0]
		envio_casilla_n(casilla_n);
 80016ea:	4b61      	ldr	r3, [pc, #388]	@ (8001870 <programa_principal+0x1fc>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 ffd2 	bl	8002698 <envio_casilla_n>
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80016f4:	4b5c      	ldr	r3, [pc, #368]	@ (8001868 <programa_principal+0x1f4>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4a5d      	ldr	r2, [pc, #372]	@ (8001870 <programa_principal+0x1fc>)
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f8ce 	bl	80018a0 <obtener_orientacion_futura>
 8001704:	4603      	mov	r3, r0
 8001706:	461a      	mov	r2, r3
 8001708:	4b5c      	ldr	r3, [pc, #368]	@ (800187c <programa_principal+0x208>)
 800170a:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 800170c:	4b57      	ldr	r3, [pc, #348]	@ (800186c <programa_principal+0x1f8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4a5a      	ldr	r2, [pc, #360]	@ (800187c <programa_principal+0x208>)
 8001712:	7812      	ldrb	r2, [r2, #0]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 f8ee 	bl	80018f8 <obtenerGiro>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b57      	ldr	r3, [pc, #348]	@ (8001880 <programa_principal+0x20c>)
 8001722:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8001724:	4b55      	ldr	r3, [pc, #340]	@ (800187c <programa_principal+0x208>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b50      	ldr	r3, [pc, #320]	@ (800186c <programa_principal+0x1f8>)
 800172a:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 800172c:	4b54      	ldr	r3, [pc, #336]	@ (8001880 <programa_principal+0x20c>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fa67 	bl	8001c04 <ejecutarGiro>
		girando = 0;
 8001736:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <programa_principal+0x1e0>)
 8001738:	2200      	movs	r2, #0
 800173a:	701a      	strb	r2, [r3, #0]
		camino_solucion[contador_casillas] = ubicacion;
 800173c:	4b49      	ldr	r3, [pc, #292]	@ (8001864 <programa_principal+0x1f0>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b49      	ldr	r3, [pc, #292]	@ (8001868 <programa_principal+0x1f4>)
 8001744:	7819      	ldrb	r1, [r3, #0]
 8001746:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <programa_principal+0x210>)
 8001748:	5499      	strb	r1, [r3, r2]
		solicitud_linea = 0;
 800174a:	4b44      	ldr	r3, [pc, #272]	@ (800185c <programa_principal+0x1e8>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
	}
	if (solicitud_pared == 1) {
 8001750:	4b4d      	ldr	r3, [pc, #308]	@ (8001888 <programa_principal+0x214>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d14b      	bne.n	80017f2 <programa_principal+0x17e>
		flag_pared = 1; // en realidad es flag pared o linea
 800175a:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <programa_principal+0x1e4>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
		girando = 1;
 8001760:	4b3c      	ldr	r3, [pc, #240]	@ (8001854 <programa_principal+0x1e0>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
		envio_pared();
 8001766:	f000 ff55 	bl	8002614 <envio_pared>
		act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 800176a:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <programa_principal+0x1f4>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4a3f      	ldr	r2, [pc, #252]	@ (800186c <programa_principal+0x1f8>)
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	483f      	ldr	r0, [pc, #252]	@ (8001874 <programa_principal+0x200>)
 8001776:	f000 fb3d 	bl	8001df4 <act_pared>
		act_pesos(pared, peso);  //luego actualiza el peso
 800177a:	493f      	ldr	r1, [pc, #252]	@ (8001878 <programa_principal+0x204>)
 800177c:	483d      	ldr	r0, [pc, #244]	@ (8001874 <programa_principal+0x200>)
 800177e:	f000 fb8b 	bl	8001e98 <act_pesos>
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8001782:	4b39      	ldr	r3, [pc, #228]	@ (8001868 <programa_principal+0x1f4>)
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	4b39      	ldr	r3, [pc, #228]	@ (800186c <programa_principal+0x1f8>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	493a      	ldr	r1, [pc, #232]	@ (8001874 <programa_principal+0x200>)
 800178c:	483a      	ldr	r0, [pc, #232]	@ (8001878 <programa_principal+0x204>)
 800178e:	f000 fc23 	bl	8001fd8 <calculo_minimo_peso>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	4b36      	ldr	r3, [pc, #216]	@ (8001870 <programa_principal+0x1fc>)
 8001798:	701a      	strb	r2, [r3, #0]
		envio_casilla_n(casilla_n);
 800179a:	4b35      	ldr	r3, [pc, #212]	@ (8001870 <programa_principal+0x1fc>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 ff7a 	bl	8002698 <envio_casilla_n>
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 80017a4:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <programa_principal+0x1f4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4a31      	ldr	r2, [pc, #196]	@ (8001870 <programa_principal+0x1fc>)
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f876 	bl	80018a0 <obtener_orientacion_futura>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b30      	ldr	r3, [pc, #192]	@ (800187c <programa_principal+0x208>)
 80017ba:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 80017bc:	4b2b      	ldr	r3, [pc, #172]	@ (800186c <programa_principal+0x1f8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <programa_principal+0x208>)
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f896 	bl	80018f8 <obtenerGiro>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001880 <programa_principal+0x20c>)
 80017d2:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 80017d4:	4b29      	ldr	r3, [pc, #164]	@ (800187c <programa_principal+0x208>)
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	4b24      	ldr	r3, [pc, #144]	@ (800186c <programa_principal+0x1f8>)
 80017da:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 80017dc:	4b28      	ldr	r3, [pc, #160]	@ (8001880 <programa_principal+0x20c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa0f 	bl	8001c04 <ejecutarGiro>
		girando = 0;
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <programa_principal+0x1e0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
		solicitud_pared = 0;
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <programa_principal+0x214>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	}
	if ((flag_pared == 0) && (flag_pared_2 == 0)) {
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <programa_principal+0x1e4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <programa_principal+0x1a2>
 80017fc:	4b23      	ldr	r3, [pc, #140]	@ (800188c <programa_principal+0x218>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d107      	bne.n	8001816 <programa_principal+0x1a2>
		tiempo_inicio_3 = HAL_GetTick();
 8001806:	f001 fa0f 	bl	8002c28 <HAL_GetTick>
 800180a:	4603      	mov	r3, r0
 800180c:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <programa_principal+0x21c>)
 800180e:	6013      	str	r3, [r2, #0]
		flag_pared_2 = 1;
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <programa_principal+0x218>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
	}
	if (flag_pared_2 == 1) {
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <programa_principal+0x218>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <programa_principal+0x1b0>
		detecte_pared_por_tiempo();
 8001820:	f7ff fd7e 	bl	8001320 <detecte_pared_por_tiempo>
	}
	if (filtrado_pared == 1) {
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <programa_principal+0x220>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <programa_principal+0x1be>
		filtrado_pared_funcion();
 800182e:	f000 fe39 	bl	80024a4 <filtrado_pared_funcion>
	}
	if (filtrado_linea == 1) {
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <programa_principal+0x224>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <programa_principal+0x1cc>
		filtrado_linea_funcion();
 800183c:	f000 fe5a 	bl	80024f4 <filtrado_linea_funcion>
	}
	if (ubicacion == 15) {
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <programa_principal+0x1f4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d102      	bne.n	800184e <programa_principal+0x1da>
		prueba = 10;
 8001848:	4b14      	ldr	r3, [pc, #80]	@ (800189c <programa_principal+0x228>)
 800184a:	220a      	movs	r2, #10
 800184c:	701a      	strb	r2, [r3, #0]
	}
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000228 	.word	0x20000228
 8001858:	20000240 	.word	0x20000240
 800185c:	20000238 	.word	0x20000238
 8001860:	200001fe 	.word	0x200001fe
 8001864:	200001fc 	.word	0x200001fc
 8001868:	200001d8 	.word	0x200001d8
 800186c:	200001d9 	.word	0x200001d9
 8001870:	20000000 	.word	0x20000000
 8001874:	200001ec 	.word	0x200001ec
 8001878:	200001dc 	.word	0x200001dc
 800187c:	200001da 	.word	0x200001da
 8001880:	200001db 	.word	0x200001db
 8001884:	20000208 	.word	0x20000208
 8001888:	20000230 	.word	0x20000230
 800188c:	20000241 	.word	0x20000241
 8001890:	2000023c 	.word	0x2000023c
 8001894:	20000231 	.word	0x20000231
 8001898:	20000239 	.word	0x20000239
 800189c:	200001fd 	.word	0x200001fd

080018a0 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	460a      	mov	r2, r1
 80018aa:	71fb      	strb	r3, [r7, #7]
 80018ac:	4613      	mov	r3, r2
 80018ae:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 80018b0:	79ba      	ldrb	r2, [r7, #6]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	3301      	adds	r3, #1
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d101      	bne.n	80018be <obtener_orientacion_futura+0x1e>
		return oeste;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e015      	b.n	80018ea <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 80018be:	79ba      	ldrb	r2, [r7, #6]
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d101      	bne.n	80018cc <obtener_orientacion_futura+0x2c>
		return este;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e00e      	b.n	80018ea <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 80018cc:	79ba      	ldrb	r2, [r7, #6]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	3304      	adds	r3, #4
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d101      	bne.n	80018da <obtener_orientacion_futura+0x3a>
		return norte;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e007      	b.n	80018ea <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 80018da:	79ba      	ldrb	r2, [r7, #6]
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	3b04      	subs	r3, #4
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d101      	bne.n	80018e8 <obtener_orientacion_futura+0x48>
		return sur;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e000      	b.n	80018ea <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 80018e8:	2364      	movs	r3, #100	@ 0x64
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8001908:	79ba      	ldrb	r2, [r7, #6]
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	3304      	adds	r3, #4
 8001910:	425a      	negs	r2, r3
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	bf58      	it	pl
 800191c:	4253      	negpl	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d812      	bhi.n	800194c <obtenerGiro+0x54>
 8001926:	a201      	add	r2, pc, #4	@ (adr r2, 800192c <obtenerGiro+0x34>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001941 	.word	0x08001941
 8001934:	08001945 	.word	0x08001945
 8001938:	08001949 	.word	0x08001949
	case 0:
		return adelante;
 800193c:	2300      	movs	r3, #0
 800193e:	e006      	b.n	800194e <obtenerGiro+0x56>
	case 1:
		return derecha;
 8001940:	2302      	movs	r3, #2
 8001942:	e004      	b.n	800194e <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8001944:	2303      	movs	r3, #3
 8001946:	e002      	b.n	800194e <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <obtenerGiro+0x56>
	default:
		return 100; // Error
 800194c:	2364      	movs	r3, #100	@ 0x64
	}
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop

0800195c <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	460a      	mov	r2, r1
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	4613      	mov	r3, r2
 800196a:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 800196c:	79bb      	ldrb	r3, [r7, #6]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d81a      	bhi.n	80019a8 <act_ubicacion+0x4c>
 8001972:	a201      	add	r2, pc, #4	@ (adr r2, 8001978 <act_ubicacion+0x1c>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	08001989 	.word	0x08001989
 800197c:	08001991 	.word	0x08001991
 8001980:	08001999 	.word	0x08001999
 8001984:	080019a1 	.word	0x080019a1
	case 0:
		return ubicacion + 4;
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3304      	adds	r3, #4
 800198c:	b2db      	uxtb	r3, r3
 800198e:	e00c      	b.n	80019aa <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	e008      	b.n	80019aa <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	3b04      	subs	r3, #4
 800199c:	b2db      	uxtb	r3, r3
 800199e:	e004      	b.n	80019aa <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	e000      	b.n	80019aa <act_ubicacion+0x4e>
	default:
		return 100; // Error
 80019a8:	2364      	movs	r3, #100	@ 0x64
	}
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <promediar>:

void promediar(uint16_t *buffer) {
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e012      	b.n	80019f4 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4413      	add	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3302      	adds	r3, #2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4413      	add	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3304      	adds	r3, #4
 80019ec:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	3301      	adds	r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	dde9      	ble.n	80019ce <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <promediar+0x64>)
 8001a02:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <promediar+0x68>)
 8001a0c:	801a      	strh	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200002c4 	.word	0x200002c4
 8001a20:	200002c6 	.word	0x200002c6

08001a24 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001a2e:	f7ff ffc3 	bl	80019b8 <promediar>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000244 	.word	0x20000244

08001a40 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8001a48:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x18>)
 8001a4a:	f7ff ffb5 	bl	80019b8 <promediar>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000284 	.word	0x20000284

08001a5c <correccion_avanzar>:
void correccion_avanzar(void) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_i) && (margen_d < sensor_der_avg)) {
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <correccion_avanzar+0x74>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad4 <correccion_avanzar+0x78>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d209      	bcs.n	8001a82 <correccion_avanzar+0x26>
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <correccion_avanzar+0x7c>)
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	4b1a      	ldr	r3, [pc, #104]	@ (8001adc <correccion_avanzar+0x80>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d202      	bcs.n	8001a82 <correccion_avanzar+0x26>
		apagar_derecha();  // apagar motor derecho
 8001a7c:	f000 f880 	bl	8001b80 <apagar_derecha>
 8001a80:	e024      	b.n	8001acc <correccion_avanzar+0x70>
	} else if ((margen_i < sensor_izq_avg) && (sensor_der_avg < margen_d)) { // avanzar con ambos motores
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <correccion_avanzar+0x78>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <correccion_avanzar+0x74>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d209      	bcs.n	8001aa4 <correccion_avanzar+0x48>
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <correccion_avanzar+0x80>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <correccion_avanzar+0x7c>)
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d202      	bcs.n	8001aa4 <correccion_avanzar+0x48>
		apagar_izquierda();  //apaga motor izquierdo
 8001a9e:	f000 f847 	bl	8001b30 <apagar_izquierda>
 8001aa2:	e013      	b.n	8001acc <correccion_avanzar+0x70>
	} else if ((sensor_izq_avg < margen_i) && (sensor_der_avg < margen_d)) {
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <correccion_avanzar+0x74>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <correccion_avanzar+0x78>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d209      	bcs.n	8001ac6 <correccion_avanzar+0x6a>
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <correccion_avanzar+0x80>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <correccion_avanzar+0x7c>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d202      	bcs.n	8001ac6 <correccion_avanzar+0x6a>
		apagar_derecha();
 8001ac0:	f000 f85e 	bl	8001b80 <apagar_derecha>
 8001ac4:	e002      	b.n	8001acc <correccion_avanzar+0x70>
	} else {
		avanzar();
 8001ac6:	f000 f80b 	bl	8001ae0 <avanzar>
	}
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002c4 	.word	0x200002c4
 8001ad4:	20000204 	.word	0x20000204
 8001ad8:	20000206 	.word	0x20000206
 8001adc:	200002c6 	.word	0x200002c6

08001ae0 <avanzar>:
void avanzar(void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aea:	480f      	ldr	r0, [pc, #60]	@ (8001b28 <avanzar+0x48>)
 8001aec:	f002 fb96 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001af6:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <avanzar+0x48>)
 8001af8:	f002 fb90 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b02:	4809      	ldr	r0, [pc, #36]	@ (8001b28 <avanzar+0x48>)
 8001b04:	f002 fb8a 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b0e:	4806      	ldr	r0, [pc, #24]	@ (8001b28 <avanzar+0x48>)
 8001b10:	f002 fb84 	bl	800421c <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001b14:	4b05      	ldr	r3, [pc, #20]	@ (8001b2c <avanzar+0x4c>)
 8001b16:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <avanzar+0x4c>)
 8001b1e:	f248 42d0 	movw	r2, #34000	@ 0x84d0
 8001b22:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40000400 	.word	0x40000400

08001b30 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b3a:	480f      	ldr	r0, [pc, #60]	@ (8001b78 <apagar_izquierda+0x48>)
 8001b3c:	f002 fb6e 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001b40:	2201      	movs	r2, #1
 8001b42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b46:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <apagar_izquierda+0x48>)
 8001b48:	f002 fb68 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b52:	4809      	ldr	r0, [pc, #36]	@ (8001b78 <apagar_izquierda+0x48>)
 8001b54:	f002 fb62 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b5e:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <apagar_izquierda+0x48>)
 8001b60:	f002 fb5c 	bl	800421c <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <apagar_izquierda+0x4c>)
 8001b66:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <apagar_izquierda+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40000400 	.word	0x40000400

08001b80 <apagar_derecha>:

void apagar_derecha(void) {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b8a:	480f      	ldr	r0, [pc, #60]	@ (8001bc8 <apagar_derecha+0x48>)
 8001b8c:	f002 fb46 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b96:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <apagar_derecha+0x48>)
 8001b98:	f002 fb40 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ba2:	4809      	ldr	r0, [pc, #36]	@ (8001bc8 <apagar_derecha+0x48>)
 8001ba4:	f002 fb3a 	bl	800421c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bae:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <apagar_derecha+0x48>)
 8001bb0:	f002 fb34 	bl	800421c <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <apagar_derecha+0x4c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001bba:	4b04      	ldr	r3, [pc, #16]	@ (8001bcc <apagar_derecha+0x4c>)
 8001bbc:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <mini_retroceso>:

void mini_retroceso(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f000 f8a9 	bl	8001d2c <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f000 f8d8 	bl	8001d90 <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 8001be0:	2064      	movs	r0, #100	@ 0x64
 8001be2:	f001 f82d 	bl	8002c40 <HAL_Delay>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}

08001bea <mini_avance>:
void mini_avance(void) {
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
	setMotorIzquierdo(avance);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 f89c 	bl	8001d2c <setMotorIzquierdo>
	setMotorDerecho(avance);
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f000 f8cb 	bl	8001d90 <setMotorDerecho>
	HAL_Delay(tiempo_muerto);
 8001bfa:	2096      	movs	r0, #150	@ 0x96
 8001bfc:	f001 f820 	bl	8002c40 <HAL_Delay>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	f200 8084 	bhi.w	8001d1e <ejecutarGiro+0x11a>
 8001c16:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <ejecutarGiro+0x18>)
 8001c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c95 	.word	0x08001c95
 8001c24:	08001c33 	.word	0x08001c33
 8001c28:	08001cf9 	.word	0x08001cf9
	case adelante:
		mini_avance(); //este es para q siga recto y no corrija mal
 8001c2c:	f7ff ffdd 	bl	8001bea <mini_avance>
		break;
 8001c30:	e075      	b.n	8001d1e <ejecutarGiro+0x11a>
	case derecha:
		if (contador_giros == 0) {
 8001c32:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <ejecutarGiro+0x6a>
			contador_giros = contador_giros + 1;
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4b39      	ldr	r3, [pc, #228]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c44:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f000 f870 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f000 f89f 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001c52:	200a      	movs	r0, #10
 8001c54:	f000 fff4 	bl	8002c40 <HAL_Delay>
			;
			setMotorIzquierdo(avance);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 f867 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f000 f896 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_der);
 8001c64:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 8001c68:	f000 ffea 	bl	8002c40 <HAL_Delay>
			setMotorIzquierdo(avance);
			setMotorDerecho(retroceso);
			HAL_Delay(tiempo_giro90_2);
//			mini_avance();
		}
		break;
 8001c6c:	e057      	b.n	8001d1e <ejecutarGiro+0x11a>
			contador_giros = contador_giros + 1;
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b2c      	ldr	r3, [pc, #176]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c78:	701a      	strb	r2, [r3, #0]
			mini_retroceso();
 8001c7a:	f7ff ffa9 	bl	8001bd0 <mini_retroceso>
			setMotorIzquierdo(avance);
 8001c7e:	2001      	movs	r0, #1
 8001c80:	f000 f854 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f000 f883 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001c8a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001c8e:	f000 ffd7 	bl	8002c40 <HAL_Delay>
		break;
 8001c92:	e044      	b.n	8001d1e <ejecutarGiro+0x11a>
	case izquierda:
		if (contador_giros == 0) {
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d119      	bne.n	8001cd0 <ejecutarGiro+0xcc>
			contador_giros = contador_giros + 1;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <ejecutarGiro+0x124>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <ejecutarGiro+0x124>)
 8001ca6:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f000 f83f 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f000 f86e 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_muerto_avanzar);
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f000 ffc3 	bl	8002c40 <HAL_Delay>

			setMotorIzquierdo(retroceso);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f000 f836 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f000 f865 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_izq);
 8001cc6:	f240 209e 	movw	r0, #670	@ 0x29e
 8001cca:	f000 ffb9 	bl	8002c40 <HAL_Delay>
			setMotorDerecho(avance);
			HAL_Delay(tiempo_giro90_2);
			/*			mini_avance();
			 */
		}
		break;
 8001cce:	e026      	b.n	8001d1e <ejecutarGiro+0x11a>
			contador_giros = contador_giros + 1;
 8001cd0:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <ejecutarGiro+0x124>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <ejecutarGiro+0x124>)
 8001cda:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 8001cdc:	200a      	movs	r0, #10
 8001cde:	f000 ffaf 	bl	8002c40 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f000 f822 	bl	8001d2c <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f000 f851 	bl	8001d90 <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001cee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8001cf2:	f000 ffa5 	bl	8002c40 <HAL_Delay>
		break;
 8001cf6:	e012      	b.n	8001d1e <ejecutarGiro+0x11a>

	case giro_180:
		contador_giros = contador_giros + 1;
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <ejecutarGiro+0x124>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <ejecutarGiro+0x124>)
 8001d02:	701a      	strb	r2, [r3, #0]
		setMotorIzquierdo(avance);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f000 f811 	bl	8001d2c <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f000 f840 	bl	8001d90 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 8001d10:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001d14:	f000 ff94 	bl	8002c40 <HAL_Delay>
		mini_avance();
 8001d18:	f7ff ff67 	bl	8001bea <mini_avance>
		break;
 8001d1c:	bf00      	nop

	}
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200001fe 	.word	0x200001fe

08001d2c <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <setMotorIzquierdo+0x5c>)
 8001d38:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d002      	beq.n	8001d4a <setMotorIzquierdo+0x1e>
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d00d      	beq.n	8001d64 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001d48:	e019      	b.n	8001d7e <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d50:	480e      	ldr	r0, [pc, #56]	@ (8001d8c <setMotorIzquierdo+0x60>)
 8001d52:	f002 fa63 	bl	800421c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <setMotorIzquierdo+0x60>)
 8001d5e:	f002 fa5d 	bl	800421c <HAL_GPIO_WritePin>
		break;
 8001d62:	e00c      	b.n	8001d7e <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d6a:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <setMotorIzquierdo+0x60>)
 8001d6c:	f002 fa56 	bl	800421c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <setMotorIzquierdo+0x60>)
 8001d78:	f002 fa50 	bl	800421c <HAL_GPIO_WritePin>
		break;
 8001d7c:	bf00      	nop
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40020400 	.word	0x40020400

08001d90 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001d9a:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <setMotorDerecho+0x5c>)
 8001d9c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001da0:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d002      	beq.n	8001dae <setMotorDerecho+0x1e>
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d00d      	beq.n	8001dc8 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001dac:	e019      	b.n	8001de2 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001dae:	2200      	movs	r2, #0
 8001db0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001db4:	480e      	ldr	r0, [pc, #56]	@ (8001df0 <setMotorDerecho+0x60>)
 8001db6:	f002 fa31 	bl	800421c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc0:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <setMotorDerecho+0x60>)
 8001dc2:	f002 fa2b 	bl	800421c <HAL_GPIO_WritePin>
		break;
 8001dc6:	e00c      	b.n	8001de2 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001dce:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <setMotorDerecho+0x60>)
 8001dd0:	f002 fa24 	bl	800421c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <setMotorDerecho+0x60>)
 8001ddc:	f002 fa1e 	bl	800421c <HAL_GPIO_WritePin>
		break;
 8001de0:	bf00      	nop
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40020400 	.word	0x40020400

08001df4 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	70fb      	strb	r3, [r7, #3]
 8001e00:	4613      	mov	r3, r2
 8001e02:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8001e04:	78bb      	ldrb	r3, [r7, #2]
 8001e06:	2b03      	cmp	r3, #3
 8001e08:	d83a      	bhi.n	8001e80 <act_pared+0x8c>
 8001e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e10 <act_pared+0x1c>)
 8001e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e10:	08001e21 	.word	0x08001e21
 8001e14:	08001e39 	.word	0x08001e39
 8001e18:	08001e51 	.word	0x08001e51
 8001e1c:	08001e69 	.word	0x08001e69
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	f042 0208 	orr.w	r2, r2, #8
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]
		break;
 8001e36:	e025      	b.n	8001e84 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	440b      	add	r3, r1
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]
		break;
 8001e4e:	e019      	b.n	8001e84 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f042 0202 	orr.w	r2, r2, #2
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]
		break;
 8001e66:	e00d      	b.n	8001e84 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	440b      	add	r3, r1
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]
		break;
 8001e7e:	e001      	b.n	8001e84 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8001e80:	2300      	movs	r3, #0
 8001e82:	e003      	b.n	8001e8c <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 15; j++) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e08b      	b.n	8001fc0 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	e081      	b.n	8001fb2 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001eae:	2364      	movs	r3, #100	@ 0x64
 8001eb0:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b0b      	cmp	r3, #11
 8001eb6:	dc15      	bgt.n	8001ee4 <act_pesos+0x4c>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	7dfa      	ldrb	r2, [r7, #23]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d905      	bls.n	8001ee4 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3304      	adds	r3, #4
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b03      	cmp	r3, #3
 8001ee8:	d01e      	beq.n	8001f28 <act_pesos+0x90>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b07      	cmp	r3, #7
 8001eee:	d01b      	beq.n	8001f28 <act_pesos+0x90>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b0b      	cmp	r3, #11
 8001ef4:	d018      	beq.n	8001f28 <act_pesos+0x90>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b0f      	cmp	r3, #15
 8001efa:	d015      	beq.n	8001f28 <act_pesos+0x90>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10d      	bne.n	8001f28 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	7dfa      	ldrb	r2, [r7, #23]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d905      	bls.n	8001f28 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	dd15      	ble.n	8001f5a <act_pesos+0xc2>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10d      	bne.n	8001f5a <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3b04      	subs	r3, #4
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	7dfa      	ldrb	r2, [r7, #23]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d905      	bls.n	8001f5a <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3b04      	subs	r3, #4
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d119      	bne.n	8001f9e <act_pesos+0x106>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <act_pesos+0x106>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d013      	beq.n	8001f9e <act_pesos+0x106>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d010      	beq.n	8001f9e <act_pesos+0x106>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d00d      	beq.n	8001f9e <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	7dfa      	ldrb	r2, [r7, #23]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d905      	bls.n	8001f9e <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	4413      	add	r3, r2
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	7dfa      	ldrb	r2, [r7, #23]
 8001fa6:	3201      	adds	r2, #1
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b0e      	cmp	r3, #14
 8001fb6:	f77f af7a 	ble.w	8001eae <act_pesos+0x16>
	for (int j = 0; j < 15; j++) {
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b0e      	cmp	r3, #14
 8001fc4:	f77f af70 	ble.w	8001ea8 <act_pesos+0x10>
		}
	}
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	4613      	mov	r3, r2
 8001fec:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 8001fee:	230f      	movs	r3, #15
 8001ff0:	75fb      	strb	r3, [r7, #23]
	if (ubicacion == 15) {
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b0f      	cmp	r3, #15
 8001ff6:	d105      	bne.n	8002004 <calculo_minimo_peso+0x2c>
		casilla_n = 15;
 8001ff8:	4b97      	ldr	r3, [pc, #604]	@ (8002258 <calculo_minimo_peso+0x280>)
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	701a      	strb	r2, [r3, #0]
		return casilla_n;
 8001ffe:	4b96      	ldr	r3, [pc, #600]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	e246      	b.n	8002492 <calculo_minimo_peso+0x4ba>
	} else
		switch (orientacion_actual) {
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	2b03      	cmp	r3, #3
 8002008:	f200 8242 	bhi.w	8002490 <calculo_minimo_peso+0x4b8>
 800200c:	a201      	add	r2, pc, #4	@ (adr r2, 8002014 <calculo_minimo_peso+0x3c>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002025 	.word	0x08002025
 8002018:	08002377 	.word	0x08002377
 800201c:	0800213f 	.word	0x0800213f
 8002020:	0800225d 	.word	0x0800225d
		case norte:
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	3304      	adds	r3, #4
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	7dfa      	ldrb	r2, [r7, #23]
 8002030:	429a      	cmp	r2, r3
 8002032:	d915      	bls.n	8002060 <calculo_minimo_peso+0x88>
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10d      	bne.n	8002060 <calculo_minimo_peso+0x88>
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	2b0b      	cmp	r3, #11
 8002048:	d80a      	bhi.n	8002060 <calculo_minimo_peso+0x88>
				minimo_peso = peso[ubicacion + 4];
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	3304      	adds	r3, #4
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	3304      	adds	r3, #4
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b7e      	ldr	r3, [pc, #504]	@ (8002258 <calculo_minimo_peso+0x280>)
 800205e:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	3301      	adds	r3, #1
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	7dfa      	ldrb	r2, [r7, #23]
 800206c:	429a      	cmp	r2, r3
 800206e:	d91e      	bls.n	80020ae <calculo_minimo_peso+0xd6>
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	4413      	add	r3, r2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d116      	bne.n	80020ae <calculo_minimo_peso+0xd6>
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	2b03      	cmp	r3, #3
 8002084:	d013      	beq.n	80020ae <calculo_minimo_peso+0xd6>
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	2b07      	cmp	r3, #7
 800208a:	d010      	beq.n	80020ae <calculo_minimo_peso+0xd6>
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b0b      	cmp	r3, #11
 8002090:	d00d      	beq.n	80020ae <calculo_minimo_peso+0xd6>
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d00a      	beq.n	80020ae <calculo_minimo_peso+0xd6>
				minimo_peso = peso[ubicacion + 1];
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	3301      	adds	r3, #1
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	3301      	adds	r3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002258 <calculo_minimo_peso+0x280>)
 80020ac:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4413      	add	r3, r2
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	7dfa      	ldrb	r2, [r7, #23]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d91e      	bls.n	80020fc <calculo_minimo_peso+0x124>
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <calculo_minimo_peso+0x124>
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d013      	beq.n	80020fc <calculo_minimo_peso+0x124>
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	2b07      	cmp	r3, #7
 80020d8:	d010      	beq.n	80020fc <calculo_minimo_peso+0x124>
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b0b      	cmp	r3, #11
 80020de:	d00d      	beq.n	80020fc <calculo_minimo_peso+0x124>
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	d00a      	beq.n	80020fc <calculo_minimo_peso+0x124>
				minimo_peso = peso[ubicacion - 1];
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b57      	ldr	r3, [pc, #348]	@ (8002258 <calculo_minimo_peso+0x280>)
 80020fa:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	3b04      	subs	r3, #4
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	7dfa      	ldrb	r2, [r7, #23]
 8002108:	429a      	cmp	r2, r3
 800210a:	d915      	bls.n	8002138 <calculo_minimo_peso+0x160>
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	4413      	add	r3, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <calculo_minimo_peso+0x160>
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d90a      	bls.n	8002138 <calculo_minimo_peso+0x160>
				minimo_peso = peso[ubicacion - 4];
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	3b04      	subs	r3, #4
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4413      	add	r3, r2
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	3b04      	subs	r3, #4
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b48      	ldr	r3, [pc, #288]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002136:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002138:	4b47      	ldr	r3, [pc, #284]	@ (8002258 <calculo_minimo_peso+0x280>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	e1a9      	b.n	8002492 <calculo_minimo_peso+0x4ba>
			break;
		case sur:
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	3b04      	subs	r3, #4
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	7dfa      	ldrb	r2, [r7, #23]
 800214a:	429a      	cmp	r2, r3
 800214c:	d915      	bls.n	800217a <calculo_minimo_peso+0x1a2>
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <calculo_minimo_peso+0x1a2>
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d90a      	bls.n	800217a <calculo_minimo_peso+0x1a2>
				minimo_peso = peso[ubicacion - 4];
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	3b04      	subs	r3, #4
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	3b04      	subs	r3, #4
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b38      	ldr	r3, [pc, #224]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002178:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	3301      	adds	r3, #1
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	7dfa      	ldrb	r2, [r7, #23]
 8002186:	429a      	cmp	r2, r3
 8002188:	d91e      	bls.n	80021c8 <calculo_minimo_peso+0x1f0>
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	4413      	add	r3, r2
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d116      	bne.n	80021c8 <calculo_minimo_peso+0x1f0>
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d013      	beq.n	80021c8 <calculo_minimo_peso+0x1f0>
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	2b07      	cmp	r3, #7
 80021a4:	d010      	beq.n	80021c8 <calculo_minimo_peso+0x1f0>
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b0b      	cmp	r3, #11
 80021aa:	d00d      	beq.n	80021c8 <calculo_minimo_peso+0x1f0>
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	d00a      	beq.n	80021c8 <calculo_minimo_peso+0x1f0>
				minimo_peso = peso[ubicacion + 1];
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	3301      	adds	r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	3301      	adds	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <calculo_minimo_peso+0x280>)
 80021c6:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	7dfa      	ldrb	r2, [r7, #23]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d91e      	bls.n	8002216 <calculo_minimo_peso+0x23e>
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d116      	bne.n	8002216 <calculo_minimo_peso+0x23e>
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d013      	beq.n	8002216 <calculo_minimo_peso+0x23e>
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	2b07      	cmp	r3, #7
 80021f2:	d010      	beq.n	8002216 <calculo_minimo_peso+0x23e>
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	2b0b      	cmp	r3, #11
 80021f8:	d00d      	beq.n	8002216 <calculo_minimo_peso+0x23e>
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d00a      	beq.n	8002216 <calculo_minimo_peso+0x23e>
				minimo_peso = peso[ubicacion - 1];
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	3b01      	subs	r3, #1
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	3b01      	subs	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002214:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	3304      	adds	r3, #4
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	7dfa      	ldrb	r2, [r7, #23]
 8002222:	429a      	cmp	r2, r3
 8002224:	d915      	bls.n	8002252 <calculo_minimo_peso+0x27a>
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <calculo_minimo_peso+0x27a>
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	2b0b      	cmp	r3, #11
 800223a:	d80a      	bhi.n	8002252 <calculo_minimo_peso+0x27a>
				minimo_peso = peso[ubicacion + 4];
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	3304      	adds	r3, #4
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	3304      	adds	r3, #4
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002250:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002252:	4b01      	ldr	r3, [pc, #4]	@ (8002258 <calculo_minimo_peso+0x280>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	e11c      	b.n	8002492 <calculo_minimo_peso+0x4ba>
 8002258:	20000000 	.word	0x20000000
			break;
		case oeste:
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	3301      	adds	r3, #1
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	7dfa      	ldrb	r2, [r7, #23]
 8002268:	429a      	cmp	r2, r3
 800226a:	d91e      	bls.n	80022aa <calculo_minimo_peso+0x2d2>
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	4413      	add	r3, r2
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d116      	bne.n	80022aa <calculo_minimo_peso+0x2d2>
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d013      	beq.n	80022aa <calculo_minimo_peso+0x2d2>
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b07      	cmp	r3, #7
 8002286:	d010      	beq.n	80022aa <calculo_minimo_peso+0x2d2>
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	2b0b      	cmp	r3, #11
 800228c:	d00d      	beq.n	80022aa <calculo_minimo_peso+0x2d2>
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d00a      	beq.n	80022aa <calculo_minimo_peso+0x2d2>
				minimo_peso = peso[ubicacion + 1];
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	3301      	adds	r3, #1
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4413      	add	r3, r2
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	3301      	adds	r3, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b7e      	ldr	r3, [pc, #504]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 80022a8:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3304      	adds	r3, #4
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	7dfa      	ldrb	r2, [r7, #23]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d915      	bls.n	80022e6 <calculo_minimo_peso+0x30e>
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10d      	bne.n	80022e6 <calculo_minimo_peso+0x30e>
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	2b0b      	cmp	r3, #11
 80022ce:	d80a      	bhi.n	80022e6 <calculo_minimo_peso+0x30e>
				minimo_peso = peso[ubicacion + 4];
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	3304      	adds	r3, #4
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	3304      	adds	r3, #4
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b6f      	ldr	r3, [pc, #444]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 80022e4:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b04      	subs	r3, #4
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	7dfa      	ldrb	r2, [r7, #23]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d915      	bls.n	8002322 <calculo_minimo_peso+0x34a>
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4413      	add	r3, r2
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10d      	bne.n	8002322 <calculo_minimo_peso+0x34a>
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d90a      	bls.n	8002322 <calculo_minimo_peso+0x34a>
				minimo_peso = peso[ubicacion - 4];
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	3b04      	subs	r3, #4
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4413      	add	r3, r2
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	3b04      	subs	r3, #4
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b60      	ldr	r3, [pc, #384]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 8002320:	701a      	strb	r2, [r3, #0]
			}

			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3b01      	subs	r3, #1
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4413      	add	r3, r2
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	7dfa      	ldrb	r2, [r7, #23]
 800232e:	429a      	cmp	r2, r3
 8002330:	d91e      	bls.n	8002370 <calculo_minimo_peso+0x398>
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	4413      	add	r3, r2
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <calculo_minimo_peso+0x398>
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d013      	beq.n	8002370 <calculo_minimo_peso+0x398>
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b07      	cmp	r3, #7
 800234c:	d010      	beq.n	8002370 <calculo_minimo_peso+0x398>
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	2b0b      	cmp	r3, #11
 8002352:	d00d      	beq.n	8002370 <calculo_minimo_peso+0x398>
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	d00a      	beq.n	8002370 <calculo_minimo_peso+0x398>
				minimo_peso = peso[ubicacion - 1];
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	3b01      	subs	r3, #1
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	3b01      	subs	r3, #1
 800236a:	b2da      	uxtb	r2, r3
 800236c:	4b4c      	ldr	r3, [pc, #304]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 800236e:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 8002370:	4b4b      	ldr	r3, [pc, #300]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	e08d      	b.n	8002492 <calculo_minimo_peso+0x4ba>
			break;
		case este:
			if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	3b01      	subs	r3, #1
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	7dfa      	ldrb	r2, [r7, #23]
 8002382:	429a      	cmp	r2, r3
 8002384:	d91e      	bls.n	80023c4 <calculo_minimo_peso+0x3ec>
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <calculo_minimo_peso+0x3ec>
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	2b03      	cmp	r3, #3
 800239a:	d013      	beq.n	80023c4 <calculo_minimo_peso+0x3ec>
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b07      	cmp	r3, #7
 80023a0:	d010      	beq.n	80023c4 <calculo_minimo_peso+0x3ec>
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	2b0b      	cmp	r3, #11
 80023a6:	d00d      	beq.n	80023c4 <calculo_minimo_peso+0x3ec>
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b0f      	cmp	r3, #15
 80023ac:	d00a      	beq.n	80023c4 <calculo_minimo_peso+0x3ec>
				minimo_peso = peso[ubicacion - 1];
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4413      	add	r3, r2
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 1;
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b37      	ldr	r3, [pc, #220]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 80023c2:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	3304      	adds	r3, #4
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	7dfa      	ldrb	r2, [r7, #23]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d915      	bls.n	8002400 <calculo_minimo_peso+0x428>
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4413      	add	r3, r2
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10d      	bne.n	8002400 <calculo_minimo_peso+0x428>
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b0b      	cmp	r3, #11
 80023e8:	d80a      	bhi.n	8002400 <calculo_minimo_peso+0x428>
				minimo_peso = peso[ubicacion + 4];
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	3304      	adds	r3, #4
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4413      	add	r3, r2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 4;
 80023f6:	79fb      	ldrb	r3, [r7, #7]
 80023f8:	3304      	adds	r3, #4
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 80023fe:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	3b04      	subs	r3, #4
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	7dfa      	ldrb	r2, [r7, #23]
 800240c:	429a      	cmp	r2, r3
 800240e:	d915      	bls.n	800243c <calculo_minimo_peso+0x464>
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <calculo_minimo_peso+0x464>
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d90a      	bls.n	800243c <calculo_minimo_peso+0x464>
				minimo_peso = peso[ubicacion - 4];
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	3b04      	subs	r3, #4
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion - 4;
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	3b04      	subs	r3, #4
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 800243a:	701a      	strb	r2, [r3, #0]
			}
			if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	3301      	adds	r3, #1
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	7dfa      	ldrb	r2, [r7, #23]
 8002448:	429a      	cmp	r2, r3
 800244a:	d91e      	bls.n	800248a <calculo_minimo_peso+0x4b2>
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <calculo_minimo_peso+0x4b2>
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d013      	beq.n	800248a <calculo_minimo_peso+0x4b2>
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b07      	cmp	r3, #7
 8002466:	d010      	beq.n	800248a <calculo_minimo_peso+0x4b2>
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b0b      	cmp	r3, #11
 800246c:	d00d      	beq.n	800248a <calculo_minimo_peso+0x4b2>
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d00a      	beq.n	800248a <calculo_minimo_peso+0x4b2>
				minimo_peso = peso[ubicacion + 1];
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	3301      	adds	r3, #1
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	75fb      	strb	r3, [r7, #23]
				casilla_n = ubicacion + 1;
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 8002488:	701a      	strb	r2, [r3, #0]
			}
			return casilla_n;
 800248a:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <calculo_minimo_peso+0x4c8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	e000      	b.n	8002492 <calculo_minimo_peso+0x4ba>
			break;
		default:
			return 100;
 8002490:	2364      	movs	r3, #100	@ 0x64
		}
}
 8002492:	4618      	mov	r0, r3
 8002494:	371c      	adds	r7, #28
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000

080024a4 <filtrado_pared_funcion>:
void filtrado_pared_funcion(void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual = HAL_GetTick();
 80024aa:	f000 fbbd 	bl	8002c28 <HAL_GetTick>
 80024ae:	6078      	str	r0, [r7, #4]
	if (200 <= (tiempo_actual - tiempo_inicio) /*&& (girando == 0)*/) {
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <filtrado_pared_funcion+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80024ba:	d90e      	bls.n	80024da <filtrado_pared_funcion+0x36>
		GPIO_PinState estado_sensor = HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port,
 80024bc:	2140      	movs	r1, #64	@ 0x40
 80024be:	480a      	ldr	r0, [pc, #40]	@ (80024e8 <filtrado_pared_funcion+0x44>)
 80024c0:	f001 fe94 	bl	80041ec <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	70fb      	strb	r3, [r7, #3]
		sensor_frontal_Pin);
		if (GPIO_PIN_RESET == estado_sensor) {
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d102      	bne.n	80024d4 <filtrado_pared_funcion+0x30>
			solicitud_pared = 1;
 80024ce:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <filtrado_pared_funcion+0x48>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
		}
		filtrado_pared = 0;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <filtrado_pared_funcion+0x4c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
	}
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000022c 	.word	0x2000022c
 80024e8:	40020800 	.word	0x40020800
 80024ec:	20000230 	.word	0x20000230
 80024f0:	20000231 	.word	0x20000231

080024f4 <filtrado_linea_funcion>:
void filtrado_linea_funcion(void) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
	uint32_t tiempo_actual_2 = HAL_GetTick();
 80024fa:	f000 fb95 	bl	8002c28 <HAL_GetTick>
 80024fe:	6078      	str	r0, [r7, #4]
	if (tiempo_rebotes <= (tiempo_actual_2 - tiempo_inicio_2)) {
 8002500:	4b0c      	ldr	r3, [pc, #48]	@ (8002534 <filtrado_linea_funcion+0x40>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b1d      	cmp	r3, #29
 800250a:	d90e      	bls.n	800252a <filtrado_linea_funcion+0x36>
		GPIO_PinState estado_sensor_2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port,
 800250c:	2180      	movs	r1, #128	@ 0x80
 800250e:	480a      	ldr	r0, [pc, #40]	@ (8002538 <filtrado_linea_funcion+0x44>)
 8002510:	f001 fe6c 	bl	80041ec <HAL_GPIO_ReadPin>
 8002514:	4603      	mov	r3, r0
 8002516:	70fb      	strb	r3, [r7, #3]
		sensor_linea_Pin);
		if (GPIO_PIN_RESET == estado_sensor_2) {
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <filtrado_linea_funcion+0x30>
			solicitud_linea = 1;
 800251e:	4b07      	ldr	r3, [pc, #28]	@ (800253c <filtrado_linea_funcion+0x48>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
		}
		filtrado_linea = 0;
 8002524:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <filtrado_linea_funcion+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	}
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000234 	.word	0x20000234
 8002538:	40020800 	.word	0x40020800
 800253c:	20000238 	.word	0x20000238
 8002540:	20000239 	.word	0x20000239

08002544 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	80fb      	strh	r3, [r7, #6]
	if ((GPIO_Pin == sensor_frontal_Pin) && (filtrado_pared == 0) && (girando == 0)) {
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b40      	cmp	r3, #64	@ 0x40
 8002552:	d110      	bne.n	8002576 <HAL_GPIO_EXTI_Callback+0x32>
 8002554:	4b12      	ldr	r3, [pc, #72]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_GPIO_EXTI_Callback+0x32>
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d107      	bne.n	8002576 <HAL_GPIO_EXTI_Callback+0x32>
		tiempo_inicio = HAL_GetTick();
 8002566:	f000 fb5f 	bl	8002c28 <HAL_GetTick>
 800256a:	4603      	mov	r3, r0
 800256c:	4a0e      	ldr	r2, [pc, #56]	@ (80025a8 <HAL_GPIO_EXTI_Callback+0x64>)
 800256e:	6013      	str	r3, [r2, #0]
		filtrado_pared = 1;
 8002570:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
	}
	if ((GPIO_Pin == sensor_linea_Pin) && (filtrado_linea == 0)) {
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b80      	cmp	r3, #128	@ 0x80
 800257a:	d10c      	bne.n	8002596 <HAL_GPIO_EXTI_Callback+0x52>
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_GPIO_EXTI_Callback+0x68>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_GPIO_EXTI_Callback+0x52>
		tiempo_inicio_2 = HAL_GetTick();
 8002586:	f000 fb4f 	bl	8002c28 <HAL_GetTick>
 800258a:	4603      	mov	r3, r0
 800258c:	4a08      	ldr	r2, [pc, #32]	@ (80025b0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800258e:	6013      	str	r3, [r2, #0]
		filtrado_linea = 1;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_GPIO_EXTI_Callback+0x68>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
	}
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000231 	.word	0x20000231
 80025a4:	20000228 	.word	0x20000228
 80025a8:	2000022c 	.word	0x2000022c
 80025ac:	20000239 	.word	0x20000239
 80025b0:	20000234 	.word	0x20000234

080025b4 <envio_ubicacion>:

void envio_ubicacion(uint8_t ubicacion, uint8_t casilla_n) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	460a      	mov	r2, r1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion) {
 80025c4:	79ba      	ldrb	r2, [r7, #6]
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d117      	bne.n	80025fc <envio_ubicacion+0x48>
		sprintf(mensaje, "%d", ubicacion);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	461a      	mov	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	@ (8002604 <envio_ubicacion+0x50>)
 80025d2:	480d      	ldr	r0, [pc, #52]	@ (8002608 <envio_ubicacion+0x54>)
 80025d4:	f004 f990 	bl	80068f8 <siprintf>
		strcat(mensaje, "\r\n");
 80025d8:	480b      	ldr	r0, [pc, #44]	@ (8002608 <envio_ubicacion+0x54>)
 80025da:	f7fd fdf9 	bl	80001d0 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <envio_ubicacion+0x54>)
 80025e4:	4413      	add	r3, r2
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <envio_ubicacion+0x58>)
 80025e8:	8811      	ldrh	r1, [r2, #0]
 80025ea:	7892      	ldrb	r2, [r2, #2]
 80025ec:	8019      	strh	r1, [r3, #0]
 80025ee:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80025f0:	2332      	movs	r3, #50	@ 0x32
 80025f2:	2220      	movs	r2, #32
 80025f4:	4904      	ldr	r1, [pc, #16]	@ (8002608 <envio_ubicacion+0x54>)
 80025f6:	4806      	ldr	r0, [pc, #24]	@ (8002610 <envio_ubicacion+0x5c>)
 80025f8:	f003 f9b6 	bl	8005968 <HAL_UART_Transmit>
	}

}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	08007250 	.word	0x08007250
 8002608:	200001b8 	.word	0x200001b8
 800260c:	08007254 	.word	0x08007254
 8002610:	20000170 	.word	0x20000170

08002614 <envio_pared>:

void envio_pared(void) {
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	af00      	add	r7, sp, #0
	strcat(mensaje, "Choque pared \r\n");
 8002618:	480b      	ldr	r0, [pc, #44]	@ (8002648 <envio_pared+0x34>)
 800261a:	f7fd fdd9 	bl	80001d0 <strlen>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	4b09      	ldr	r3, [pc, #36]	@ (8002648 <envio_pared+0x34>)
 8002624:	4413      	add	r3, r2
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <envio_pared+0x38>)
 8002628:	461c      	mov	r4, r3
 800262a:	4615      	mov	r5, r2
 800262c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262e:	6020      	str	r0, [r4, #0]
 8002630:	6061      	str	r1, [r4, #4]
 8002632:	60a2      	str	r2, [r4, #8]
 8002634:	60e3      	str	r3, [r4, #12]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 8002636:	2332      	movs	r3, #50	@ 0x32
 8002638:	2220      	movs	r2, #32
 800263a:	4903      	ldr	r1, [pc, #12]	@ (8002648 <envio_pared+0x34>)
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <envio_pared+0x3c>)
 800263e:	f003 f993 	bl	8005968 <HAL_UART_Transmit>
}
 8002642:	bf00      	nop
 8002644:	bdb0      	pop	{r4, r5, r7, pc}
 8002646:	bf00      	nop
 8002648:	200001b8 	.word	0x200001b8
 800264c:	08007258 	.word	0x08007258
 8002650:	20000170 	.word	0x20000170

08002654 <envio_llegada>:

void envio_llegada(void) {
 8002654:	b5b0      	push	{r4, r5, r7, lr}
 8002656:	af00      	add	r7, sp, #0
	strcat(mensaje, "Llegue a la meta \r\n");
 8002658:	480c      	ldr	r0, [pc, #48]	@ (800268c <envio_llegada+0x38>)
 800265a:	f7fd fdb9 	bl	80001d0 <strlen>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b0a      	ldr	r3, [pc, #40]	@ (800268c <envio_llegada+0x38>)
 8002664:	4413      	add	r3, r2
 8002666:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <envio_llegada+0x3c>)
 8002668:	461d      	mov	r5, r3
 800266a:	4614      	mov	r4, r2
 800266c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266e:	6028      	str	r0, [r5, #0]
 8002670:	6069      	str	r1, [r5, #4]
 8002672:	60aa      	str	r2, [r5, #8]
 8002674:	60eb      	str	r3, [r5, #12]
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	6128      	str	r0, [r5, #16]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 800267a:	2332      	movs	r3, #50	@ 0x32
 800267c:	2220      	movs	r2, #32
 800267e:	4903      	ldr	r1, [pc, #12]	@ (800268c <envio_llegada+0x38>)
 8002680:	4804      	ldr	r0, [pc, #16]	@ (8002694 <envio_llegada+0x40>)
 8002682:	f003 f971 	bl	8005968 <HAL_UART_Transmit>
}
 8002686:	bf00      	nop
 8002688:	bdb0      	pop	{r4, r5, r7, pc}
 800268a:	bf00      	nop
 800268c:	200001b8 	.word	0x200001b8
 8002690:	08007268 	.word	0x08007268
 8002694:	20000170 	.word	0x20000170

08002698 <envio_casilla_n>:
void envio_casilla_n(uint8_t casilla_n) {
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	sprintf(mensaje, "%d", casilla_n);
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	461a      	mov	r2, r3
 80026a6:	4910      	ldr	r1, [pc, #64]	@ (80026e8 <envio_casilla_n+0x50>)
 80026a8:	4810      	ldr	r0, [pc, #64]	@ (80026ec <envio_casilla_n+0x54>)
 80026aa:	f004 f925 	bl	80068f8 <siprintf>
	strcat(mensaje, "Siguiente casilla: \r\n");
 80026ae:	480f      	ldr	r0, [pc, #60]	@ (80026ec <envio_casilla_n+0x54>)
 80026b0:	f7fd fd8e 	bl	80001d0 <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <envio_casilla_n+0x54>)
 80026ba:	4413      	add	r3, r2
 80026bc:	4a0c      	ldr	r2, [pc, #48]	@ (80026f0 <envio_casilla_n+0x58>)
 80026be:	461d      	mov	r5, r3
 80026c0:	4614      	mov	r4, r2
 80026c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c4:	6028      	str	r0, [r5, #0]
 80026c6:	6069      	str	r1, [r5, #4]
 80026c8:	60aa      	str	r2, [r5, #8]
 80026ca:	60eb      	str	r3, [r5, #12]
 80026cc:	6820      	ldr	r0, [r4, #0]
 80026ce:	6128      	str	r0, [r5, #16]
 80026d0:	88a3      	ldrh	r3, [r4, #4]
 80026d2:	82ab      	strh	r3, [r5, #20]
	HAL_UART_Transmit(&huart5, (uint8_t*) mensaje, sizeof(mensaje), delay);
 80026d4:	2332      	movs	r3, #50	@ 0x32
 80026d6:	2220      	movs	r2, #32
 80026d8:	4904      	ldr	r1, [pc, #16]	@ (80026ec <envio_casilla_n+0x54>)
 80026da:	4806      	ldr	r0, [pc, #24]	@ (80026f4 <envio_casilla_n+0x5c>)
 80026dc:	f003 f944 	bl	8005968 <HAL_UART_Transmit>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bdb0      	pop	{r4, r5, r7, pc}
 80026e8:	08007250 	.word	0x08007250
 80026ec:	200001b8 	.word	0x200001b8
 80026f0:	0800727c 	.word	0x0800727c
 80026f4:	20000170 	.word	0x20000170

080026f8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026fc:	b672      	cpsid	i
}
 80026fe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <Error_Handler+0x8>

08002704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_MspInit+0x4c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	4a0f      	ldr	r2, [pc, #60]	@ (8002750 <HAL_MspInit+0x4c>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002718:	6453      	str	r3, [r2, #68]	@ 0x44
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <HAL_MspInit+0x4c>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_MspInit+0x4c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <HAL_MspInit+0x4c>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	@ 0x40
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <HAL_MspInit+0x4c>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002742:	2007      	movs	r0, #7
 8002744:	f000 ff72 	bl	800362c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40023800 	.word	0x40023800

08002754 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08a      	sub	sp, #40	@ 0x28
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2f      	ldr	r2, [pc, #188]	@ (8002830 <HAL_ADC_MspInit+0xdc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d158      	bne.n	8002828 <HAL_ADC_MspInit+0xd4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	4b2e      	ldr	r3, [pc, #184]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	4a2d      	ldr	r2, [pc, #180]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002784:	6453      	str	r3, [r2, #68]	@ 0x44
 8002786:	4b2b      	ldr	r3, [pc, #172]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b27      	ldr	r3, [pc, #156]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a26      	ldr	r2, [pc, #152]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b24      	ldr	r3, [pc, #144]	@ (8002834 <HAL_ADC_MspInit+0xe0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
 80027ae:	2303      	movs	r3, #3
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027b2:	2303      	movs	r3, #3
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	481d      	ldr	r0, [pc, #116]	@ (8002838 <HAL_ADC_MspInit+0xe4>)
 80027c2:	f001 fb77 	bl	8003eb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002840 <HAL_ADC_MspInit+0xec>)
 80027ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027de:	4b17      	ldr	r3, [pc, #92]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 80027f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 8002800:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002804:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002806:	4b0d      	ldr	r3, [pc, #52]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 8002808:	2200      	movs	r2, #0
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800280c:	480b      	ldr	r0, [pc, #44]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 800280e:	f000 ff4f 	bl	80036b0 <HAL_DMA_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002818:	f7ff ff6e 	bl	80026f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 8002820:	639a      	str	r2, [r3, #56]	@ 0x38
 8002822:	4a06      	ldr	r2, [pc, #24]	@ (800283c <HAL_ADC_MspInit+0xe8>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002828:	bf00      	nop
 800282a:	3728      	adds	r7, #40	@ 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40012000 	.word	0x40012000
 8002834:	40023800 	.word	0x40023800
 8002838:	40020400 	.word	0x40020400
 800283c:	200000c8 	.word	0x200000c8
 8002840:	40026410 	.word	0x40026410

08002844 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0b      	ldr	r2, [pc, #44]	@ (8002880 <HAL_TIM_Base_MspInit+0x3c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10d      	bne.n	8002872 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b0a      	ldr	r3, [pc, #40]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	4a09      	ldr	r2, [pc, #36]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6413      	str	r3, [r2, #64]	@ 0x40
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <HAL_TIM_Base_MspInit+0x40>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40000400 	.word	0x40000400
 8002884:	40023800 	.word	0x40023800

08002888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002890:	f107 030c 	add.w	r3, r7, #12
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <HAL_TIM_MspPostInit+0x68>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11e      	bne.n	80028e8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b0e      	ldr	r3, [pc, #56]	@ (80028f4 <HAL_TIM_MspPostInit+0x6c>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
 80028c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028d8:	2302      	movs	r3, #2
 80028da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	4619      	mov	r1, r3
 80028e2:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <HAL_TIM_MspPostInit+0x70>)
 80028e4:	f001 fae6 	bl	8003eb4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3720      	adds	r7, #32
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020800 	.word	0x40020800

080028fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <HAL_UART_MspInit+0xd0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d152      	bne.n	80029c4 <HAL_UART_MspInit+0xc8>
  {
    /* USER CODE BEGIN UART5_MspInit 0 */

    /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	4a2a      	ldr	r2, [pc, #168]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002928:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800292c:	6413      	str	r3, [r2, #64]	@ 0x40
 800292e:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b21      	ldr	r3, [pc, #132]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b1d      	ldr	r3, [pc, #116]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a1c      	ldr	r2, [pc, #112]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b1a      	ldr	r3, [pc, #104]	@ (80029d0 <HAL_UART_MspInit+0xd4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002980:	2303      	movs	r3, #3
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002984:	2308      	movs	r3, #8
 8002986:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4811      	ldr	r0, [pc, #68]	@ (80029d4 <HAL_UART_MspInit+0xd8>)
 8002990:	f001 fa90 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002994:	2304      	movs	r3, #4
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a0:	2303      	movs	r3, #3
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029a4:	2308      	movs	r3, #8
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	480a      	ldr	r0, [pc, #40]	@ (80029d8 <HAL_UART_MspInit+0xdc>)
 80029b0:	f001 fa80 	bl	8003eb4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	2035      	movs	r0, #53	@ 0x35
 80029ba:	f000 fe42 	bl	8003642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80029be:	2035      	movs	r0, #53	@ 0x35
 80029c0:	f000 fe5b 	bl	800367a <HAL_NVIC_EnableIRQ>

    /* USER CODE END UART5_MspInit 1 */

  }

}
 80029c4:	bf00      	nop
 80029c6:	3728      	adds	r7, #40	@ 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40005000 	.word	0x40005000
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40020800 	.word	0x40020800
 80029d8:	40020c00 	.word	0x40020c00

080029dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <NMI_Handler+0x4>

080029e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <MemManage_Handler+0x4>

080029f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <BusFault_Handler+0x4>

080029fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <UsageFault_Handler+0x4>

08002a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a32:	f000 f8e5 	bl	8002c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_frontal_Pin);
 8002a3e:	2040      	movs	r0, #64	@ 0x40
 8002a40:	f001 fc06 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(sensor_linea_Pin);
 8002a44:	2080      	movs	r0, #128	@ 0x80
 8002a46:	f001 fc03 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002a54:	4802      	ldr	r0, [pc, #8]	@ (8002a60 <UART5_IRQHandler+0x10>)
 8002a56:	f003 f813 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000170 	.word	0x20000170

08002a64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a68:	4802      	ldr	r0, [pc, #8]	@ (8002a74 <DMA2_Stream0_IRQHandler+0x10>)
 8002a6a:	f000 ffb9 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200000c8 	.word	0x200000c8

08002a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <_sbrk+0x5c>)
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <_sbrk+0x60>)
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <_sbrk+0x64>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <_sbrk+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa8:	f003 ff50 	bl	800694c <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20020000 	.word	0x20020000
 8002ad8:	00000400 	.word	0x00000400
 8002adc:	200002c8 	.word	0x200002c8
 8002ae0:	20000418 	.word	0x20000418

08002ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <SystemInit+0x20>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <SystemInit+0x20>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b0c:	f7ff ffea 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b10:	480c      	ldr	r0, [pc, #48]	@ (8002b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b12:	490d      	ldr	r1, [pc, #52]	@ (8002b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b28:	4c0a      	ldr	r4, [pc, #40]	@ (8002b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f003 ff0f 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b3a:	f7fe f83d 	bl	8000bb8 <main>
  bx  lr    
 8002b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002b4c:	080072f8 	.word	0x080072f8
  ldr r2, =_sbss
 8002b50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002b54:	20000418 	.word	0x20000418

08002b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC_IRQHandler>
	...

08002b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b60:	4b0e      	ldr	r3, [pc, #56]	@ (8002b9c <HAL_Init+0x40>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a0d      	ldr	r2, [pc, #52]	@ (8002b9c <HAL_Init+0x40>)
 8002b66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b9c <HAL_Init+0x40>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <HAL_Init+0x40>)
 8002b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a07      	ldr	r2, [pc, #28]	@ (8002b9c <HAL_Init+0x40>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f000 fd51 	bl	800362c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f000 f808 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b90:	f7ff fdb8 	bl	8002704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40023c00 	.word	0x40023c00

08002ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_InitTick+0x54>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_InitTick+0x58>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd69 	bl	8003696 <HAL_SYSTICK_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00e      	b.n	8002bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d80a      	bhi.n	8002bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f000 fd31 	bl	8003642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be0:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <HAL_InitTick+0x5c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000008 	.word	0x20000008
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	2000000c 	.word	0x2000000c

08002c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <HAL_IncTick+0x24>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	20000010 	.word	0x20000010
 8002c24:	200002cc 	.word	0x200002cc

08002c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	@ (8002c3c <HAL_GetTick+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200002cc 	.word	0x200002cc

08002c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff ffee 	bl	8002c28 <HAL_GetTick>
 8002c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d005      	beq.n	8002c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_Delay+0x44>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c66:	bf00      	nop
 8002c68:	f7ff ffde 	bl	8002c28 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d8f7      	bhi.n	8002c68 <HAL_Delay+0x28>
  {
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000010 	.word	0x20000010

08002c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e033      	b.n	8002d06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fd54 	bl	8002754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d118      	bne.n	8002cf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cce:	f023 0302 	bic.w	r3, r3, #2
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa58 	bl	8003190 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cf6:	e001      	b.n	8002cfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x22>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0eb      	b.n	8002f0a <HAL_ADC_Start_DMA+0x1fa>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d018      	beq.n	8002d7a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d58:	4b6e      	ldr	r3, [pc, #440]	@ (8002f14 <HAL_ADC_Start_DMA+0x204>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f18 <HAL_ADC_Start_DMA+0x208>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9a      	lsrs	r2, r3, #18
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002d6c:	e002      	b.n	8002d74 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d88:	d107      	bne.n	8002d9a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d98:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	f040 80a3 	bne.w	8002ef0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dd4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d106      	bne.n	8002df8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	f023 0206 	bic.w	r2, r3, #6
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002df6:	e002      	b.n	8002dfe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e06:	4b45      	ldr	r3, [pc, #276]	@ (8002f1c <HAL_ADC_Start_DMA+0x20c>)
 8002e08:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0e:	4a44      	ldr	r2, [pc, #272]	@ (8002f20 <HAL_ADC_Start_DMA+0x210>)
 8002e10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e16:	4a43      	ldr	r2, [pc, #268]	@ (8002f24 <HAL_ADC_Start_DMA+0x214>)
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	4a42      	ldr	r2, [pc, #264]	@ (8002f28 <HAL_ADC_Start_DMA+0x218>)
 8002e20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e3a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e4a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	334c      	adds	r3, #76	@ 0x4c
 8002e56:	4619      	mov	r1, r3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f000 fcd6 	bl	800380c <HAL_DMA_Start_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12a      	bne.n	8002ec6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2d      	ldr	r2, [pc, #180]	@ (8002f2c <HAL_ADC_Start_DMA+0x21c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d015      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x196>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8002f30 <HAL_ADC_Start_DMA+0x220>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d105      	bne.n	8002e90 <HAL_ADC_Start_DMA+0x180>
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_ADC_Start_DMA+0x20c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 031f 	and.w	r3, r3, #31
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a27      	ldr	r2, [pc, #156]	@ (8002f34 <HAL_ADC_Start_DMA+0x224>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d136      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
 8002e9a:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <HAL_ADC_Start_DMA+0x20c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d130      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d129      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	e020      	b.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <HAL_ADC_Start_DMA+0x21c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d11b      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d114      	bne.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	e00b      	b.n	8002f08 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000008 	.word	0x20000008
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	40012300 	.word	0x40012300
 8002f20:	08003389 	.word	0x08003389
 8002f24:	08003443 	.word	0x08003443
 8002f28:	0800345f 	.word	0x0800345f
 8002f2c:	40012000 	.word	0x40012000
 8002f30:	40012100 	.word	0x40012100
 8002f34:	40012200 	.word	0x40012200

08002f38 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e105      	b.n	8003174 <HAL_ADC_ConfigChannel+0x228>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	d925      	bls.n	8002fc4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68d9      	ldr	r1, [r3, #12]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	461a      	mov	r2, r3
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3b1e      	subs	r3, #30
 8002f8e:	2207      	movs	r2, #7
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43da      	mvns	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68d9      	ldr	r1, [r3, #12]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4403      	add	r3, r0
 8002fb6:	3b1e      	subs	r3, #30
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e022      	b.n	800300a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	2207      	movs	r2, #7
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4403      	add	r3, r0
 8003000:	409a      	lsls	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b06      	cmp	r3, #6
 8003010:	d824      	bhi.n	800305c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	3b05      	subs	r3, #5
 8003024:	221f      	movs	r2, #31
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	400a      	ands	r2, r1
 8003032:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	3b05      	subs	r3, #5
 800304e:	fa00 f203 	lsl.w	r2, r0, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	635a      	str	r2, [r3, #52]	@ 0x34
 800305a:	e04c      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b0c      	cmp	r3, #12
 8003062:	d824      	bhi.n	80030ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	3b23      	subs	r3, #35	@ 0x23
 8003076:	221f      	movs	r2, #31
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43da      	mvns	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	400a      	ands	r2, r1
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	3b23      	subs	r3, #35	@ 0x23
 80030a0:	fa00 f203 	lsl.w	r2, r0, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80030ac:	e023      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	3b41      	subs	r3, #65	@ 0x41
 80030c0:	221f      	movs	r2, #31
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	400a      	ands	r2, r1
 80030ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b41      	subs	r3, #65	@ 0x41
 80030ea:	fa00 f203 	lsl.w	r2, r0, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030f6:	4b22      	ldr	r3, [pc, #136]	@ (8003180 <HAL_ADC_ConfigChannel+0x234>)
 80030f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <HAL_ADC_ConfigChannel+0x238>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d109      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1cc>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b12      	cmp	r3, #18
 800310a:	d105      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a19      	ldr	r2, [pc, #100]	@ (8003184 <HAL_ADC_ConfigChannel+0x238>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d123      	bne.n	800316a <HAL_ADC_ConfigChannel+0x21e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d003      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x1e6>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b11      	cmp	r3, #17
 8003130:	d11b      	bne.n	800316a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b10      	cmp	r3, #16
 8003144:	d111      	bne.n	800316a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003146:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <HAL_ADC_ConfigChannel+0x23c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a10      	ldr	r2, [pc, #64]	@ (800318c <HAL_ADC_ConfigChannel+0x240>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0c9a      	lsrs	r2, r3, #18
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800315c:	e002      	b.n	8003164 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	3b01      	subs	r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40012300 	.word	0x40012300
 8003184:	40012000 	.word	0x40012000
 8003188:	20000008 	.word	0x20000008
 800318c:	431bde83 	.word	0x431bde83

08003190 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003198:	4b79      	ldr	r3, [pc, #484]	@ (8003380 <ADC_Init+0x1f0>)
 800319a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	021a      	lsls	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800320a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	4a58      	ldr	r2, [pc, #352]	@ (8003384 <ADC_Init+0x1f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d022      	beq.n	800326e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6899      	ldr	r1, [r3, #8]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	e00f      	b.n	800328e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800327c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800328c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0202 	bic.w	r2, r2, #2
 800329c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7e1b      	ldrb	r3, [r3, #24]
 80032a8:	005a      	lsls	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80032da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e6:	3b01      	subs	r3, #1
 80032e8:	035a      	lsls	r2, r3, #13
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	e007      	b.n	8003304 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003302:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	3b01      	subs	r3, #1
 8003320:	051a      	lsls	r2, r3, #20
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003346:	025a      	lsls	r2, r3, #9
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800335e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	029a      	lsls	r2, r3, #10
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012300 	.word	0x40012300
 8003384:	0f000001 	.word	0x0f000001

08003388 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d13c      	bne.n	800341c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d12b      	bne.n	8003414 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d127      	bne.n	8003414 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d119      	bne.n	8003414 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0220 	bic.w	r2, r2, #32
 80033ee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f043 0201 	orr.w	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7fe fb13 	bl	8001a40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800341a:	e00e      	b.n	800343a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f7ff fd85 	bl	8002f38 <HAL_ADC_ErrorCallback>
}
 800342e:	e004      	b.n	800343a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b084      	sub	sp, #16
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7fe fae7 	bl	8001a24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003456:	bf00      	nop
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b084      	sub	sp, #16
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2240      	movs	r2, #64	@ 0x40
 8003470:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003476:	f043 0204 	orr.w	r2, r3, #4
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f7ff fd5a 	bl	8002f38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800349c:	4b0c      	ldr	r3, [pc, #48]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034a8:	4013      	ands	r3, r2
 80034aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034be:	4a04      	ldr	r2, [pc, #16]	@ (80034d0 <__NVIC_SetPriorityGrouping+0x44>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60d3      	str	r3, [r2, #12]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d8:	4b04      	ldr	r3, [pc, #16]	@ (80034ec <__NVIC_GetPriorityGrouping+0x18>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	f003 0307 	and.w	r3, r3, #7
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	db0b      	blt.n	800351a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4907      	ldr	r1, [pc, #28]	@ (8003528 <__NVIC_EnableIRQ+0x38>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2001      	movs	r0, #1
 8003512:	fa00 f202 	lsl.w	r2, r0, r2
 8003516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e100 	.word	0xe000e100

0800352c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	6039      	str	r1, [r7, #0]
 8003536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353c:	2b00      	cmp	r3, #0
 800353e:	db0a      	blt.n	8003556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	490c      	ldr	r1, [pc, #48]	@ (8003578 <__NVIC_SetPriority+0x4c>)
 8003546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354a:	0112      	lsls	r2, r2, #4
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	440b      	add	r3, r1
 8003550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003554:	e00a      	b.n	800356c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	4908      	ldr	r1, [pc, #32]	@ (800357c <__NVIC_SetPriority+0x50>)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	3b04      	subs	r3, #4
 8003564:	0112      	lsls	r2, r2, #4
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	440b      	add	r3, r1
 800356a:	761a      	strb	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	e000e100 	.word	0xe000e100
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	@ 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f1c3 0307 	rsb	r3, r3, #7
 800359a:	2b04      	cmp	r3, #4
 800359c:	bf28      	it	cs
 800359e:	2304      	movcs	r3, #4
 80035a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3304      	adds	r3, #4
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d902      	bls.n	80035b0 <NVIC_EncodePriority+0x30>
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3b03      	subs	r3, #3
 80035ae:	e000      	b.n	80035b2 <NVIC_EncodePriority+0x32>
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035b4:	f04f 32ff 	mov.w	r2, #4294967295
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	401a      	ands	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	43d9      	mvns	r1, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	4313      	orrs	r3, r2
         );
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3724      	adds	r7, #36	@ 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035f8:	d301      	bcc.n	80035fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00f      	b.n	800361e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <SysTick_Config+0x40>)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003606:	210f      	movs	r1, #15
 8003608:	f04f 30ff 	mov.w	r0, #4294967295
 800360c:	f7ff ff8e 	bl	800352c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <SysTick_Config+0x40>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003616:	4b04      	ldr	r3, [pc, #16]	@ (8003628 <SysTick_Config+0x40>)
 8003618:	2207      	movs	r2, #7
 800361a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000e010 	.word	0xe000e010

0800362c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ff29 	bl	800348c <__NVIC_SetPriorityGrouping>
}
 800363a:	bf00      	nop
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003654:	f7ff ff3e 	bl	80034d4 <__NVIC_GetPriorityGrouping>
 8003658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	6978      	ldr	r0, [r7, #20]
 8003660:	f7ff ff8e 	bl	8003580 <NVIC_EncodePriority>
 8003664:	4602      	mov	r2, r0
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff5d 	bl	800352c <__NVIC_SetPriority>
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	4603      	mov	r3, r0
 8003682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff ff31 	bl	80034f0 <__NVIC_EnableIRQ>
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b082      	sub	sp, #8
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f7ff ffa2 	bl	80035e8 <SysTick_Config>
 80036a4:	4603      	mov	r3, r0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036bc:	f7ff fab4 	bl	8002c28 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e099      	b.n	8003800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036ec:	e00f      	b.n	800370e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036ee:	f7ff fa9b 	bl	8002c28 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b05      	cmp	r3, #5
 80036fa:	d908      	bls.n	800370e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2220      	movs	r2, #32
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2203      	movs	r2, #3
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e078      	b.n	8003800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e8      	bne.n	80036ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4b38      	ldr	r3, [pc, #224]	@ (8003808 <HAL_DMA_Init+0x158>)
 8003728:	4013      	ands	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	2b04      	cmp	r3, #4
 8003766:	d107      	bne.n	8003778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0307 	bic.w	r3, r3, #7
 800378e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d117      	bne.n	80037d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00e      	beq.n	80037d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fb01 	bl	8003dbc <DMA_CheckFifoParam>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2240      	movs	r2, #64	@ 0x40
 80037c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037ce:	2301      	movs	r3, #1
 80037d0:	e016      	b.n	8003800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fab8 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 80037e0:	4603      	mov	r3, r0
 80037e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e8:	223f      	movs	r2, #63	@ 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	f010803f 	.word	0xf010803f

0800380c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
 8003818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_DMA_Start_IT+0x26>
 800382e:	2302      	movs	r3, #2
 8003830:	e040      	b.n	80038b4 <HAL_DMA_Start_IT+0xa8>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d12f      	bne.n	80038a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fa4a 	bl	8003cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003864:	223f      	movs	r2, #63	@ 0x3f
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0216 	orr.w	r2, r2, #22
 800387a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d007      	beq.n	8003894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0208 	orr.w	r2, r2, #8
 8003892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e005      	b.n	80038b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ca:	f7ff f9ad 	bl	8002c28 <HAL_GetTick>
 80038ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d008      	beq.n	80038ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2280      	movs	r2, #128	@ 0x80
 80038e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e052      	b.n	8003994 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0216 	bic.w	r2, r2, #22
 80038fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800390c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <HAL_DMA_Abort+0x62>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391a:	2b00      	cmp	r3, #0
 800391c:	d007      	beq.n	800392e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0208 	bic.w	r2, r2, #8
 800392c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0201 	bic.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800393e:	e013      	b.n	8003968 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003940:	f7ff f972 	bl	8002c28 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b05      	cmp	r3, #5
 800394c:	d90c      	bls.n	8003968 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2203      	movs	r2, #3
 8003958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e015      	b.n	8003994 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e4      	bne.n	8003940 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	223f      	movs	r2, #63	@ 0x3f
 800397c:	409a      	lsls	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2280      	movs	r2, #128	@ 0x80
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00c      	b.n	80039d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2205      	movs	r2, #5
 80039be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003c28 <HAL_DMA_IRQHandler+0x248>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a8e      	ldr	r2, [pc, #568]	@ (8003c2c <HAL_DMA_IRQHandler+0x24c>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0a9b      	lsrs	r3, r3, #10
 80039f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0a:	2208      	movs	r2, #8
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01a      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a38:	2208      	movs	r2, #8
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a44:	f043 0201 	orr.w	r2, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	2201      	movs	r2, #1
 8003a52:	409a      	lsls	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d012      	beq.n	8003a82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a7a:	f043 0202 	orr.w	r2, r3, #2
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a86:	2204      	movs	r2, #4
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d012      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00b      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	f043 0204 	orr.w	r2, r3, #4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	2210      	movs	r2, #16
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d043      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d03c      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ada:	2210      	movs	r2, #16
 8003adc:	409a      	lsls	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d018      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d024      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	4798      	blx	r3
 8003b0e:	e01f      	b.n	8003b50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01b      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e016      	b.n	8003b50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d107      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0208 	bic.w	r2, r2, #8
 8003b3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b54:	2220      	movs	r2, #32
 8003b56:	409a      	lsls	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 808f 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8087 	beq.w	8003c80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b76:	2220      	movs	r2, #32
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b05      	cmp	r3, #5
 8003b88:	d136      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0216 	bic.w	r2, r2, #22
 8003b98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ba8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <HAL_DMA_IRQHandler+0x1da>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0208 	bic.w	r2, r2, #8
 8003bc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	223f      	movs	r2, #63	@ 0x3f
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d07e      	beq.n	8003cec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	4798      	blx	r3
        }
        return;
 8003bf6:	e079      	b.n	8003cec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01d      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d031      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4798      	blx	r3
 8003c24:	e02c      	b.n	8003c80 <HAL_DMA_IRQHandler+0x2a0>
 8003c26:	bf00      	nop
 8003c28:	20000008 	.word	0x20000008
 8003c2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d023      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	4798      	blx	r3
 8003c40:	e01e      	b.n	8003c80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10f      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0210 	bic.w	r2, r2, #16
 8003c5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d032      	beq.n	8003cee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d022      	beq.n	8003cda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2205      	movs	r2, #5
 8003c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d307      	bcc.n	8003cc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f2      	bne.n	8003cac <HAL_DMA_IRQHandler+0x2cc>
 8003cc6:	e000      	b.n	8003cca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
 8003cea:	e000      	b.n	8003cee <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cec:	bf00      	nop
    }
  }
}
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d108      	bne.n	8003d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d32:	e007      	b.n	8003d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3b10      	subs	r3, #16
 8003d60:	4a14      	ldr	r2, [pc, #80]	@ (8003db4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6a:	4a13      	ldr	r2, [pc, #76]	@ (8003db8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d909      	bls.n	8003d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d90:	e007      	b.n	8003da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	080072ac 	.word	0x080072ac

08003dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11f      	bne.n	8003e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d856      	bhi.n	8003e8a <DMA_CheckFifoParam+0xce>
 8003ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8003de4 <DMA_CheckFifoParam+0x28>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e8b 	.word	0x08003e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d046      	beq.n	8003e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e043      	b.n	8003e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e0e:	d140      	bne.n	8003e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e14:	e03d      	b.n	8003e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e1e:	d121      	bne.n	8003e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d837      	bhi.n	8003e96 <DMA_CheckFifoParam+0xda>
 8003e26:	a201      	add	r2, pc, #4	@ (adr r2, 8003e2c <DMA_CheckFifoParam+0x70>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e43 	.word	0x08003e43
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	08003e55 	.word	0x08003e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e030      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d025      	beq.n	8003e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e52:	e022      	b.n	8003e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e62:	e01c      	b.n	8003e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d903      	bls.n	8003e72 <DMA_CheckFifoParam+0xb6>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d003      	beq.n	8003e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e70:	e018      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      break;
 8003e76:	e015      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
      break;
 8003e88:	e00b      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e00a      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e008      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e92:	bf00      	nop
 8003e94:	e006      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	@ 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e16b      	b.n	80041a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f040 815a 	bne.w	80041a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d130      	bne.n	8003f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0201 	and.w	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d017      	beq.n	8003fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d123      	bne.n	8003ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80b4 	beq.w	80041a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b60      	ldr	r3, [pc, #384]	@ (80041c0 <HAL_GPIO_Init+0x30c>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	4a5f      	ldr	r2, [pc, #380]	@ (80041c0 <HAL_GPIO_Init+0x30c>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004048:	6453      	str	r3, [r2, #68]	@ 0x44
 800404a:	4b5d      	ldr	r3, [pc, #372]	@ (80041c0 <HAL_GPIO_Init+0x30c>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004056:	4a5b      	ldr	r2, [pc, #364]	@ (80041c4 <HAL_GPIO_Init+0x310>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a52      	ldr	r2, [pc, #328]	@ (80041c8 <HAL_GPIO_Init+0x314>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02b      	beq.n	80040da <HAL_GPIO_Init+0x226>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a51      	ldr	r2, [pc, #324]	@ (80041cc <HAL_GPIO_Init+0x318>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_Init+0x222>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a50      	ldr	r2, [pc, #320]	@ (80041d0 <HAL_GPIO_Init+0x31c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_Init+0x21e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4f      	ldr	r2, [pc, #316]	@ (80041d4 <HAL_GPIO_Init+0x320>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x21a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4e      	ldr	r2, [pc, #312]	@ (80041d8 <HAL_GPIO_Init+0x324>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x216>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4d      	ldr	r2, [pc, #308]	@ (80041dc <HAL_GPIO_Init+0x328>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x212>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4c      	ldr	r2, [pc, #304]	@ (80041e0 <HAL_GPIO_Init+0x32c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x20e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	@ (80041e4 <HAL_GPIO_Init+0x330>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x20a>
 80040ba:	2307      	movs	r3, #7
 80040bc:	e00e      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040be:	2308      	movs	r3, #8
 80040c0:	e00c      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040c2:	2306      	movs	r3, #6
 80040c4:	e00a      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040c6:	2305      	movs	r3, #5
 80040c8:	e008      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040ca:	2304      	movs	r3, #4
 80040cc:	e006      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040ce:	2303      	movs	r3, #3
 80040d0:	e004      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e002      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040da:	2300      	movs	r3, #0
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f002 0203 	and.w	r2, r2, #3
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	4093      	lsls	r3, r2
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ec:	4935      	ldr	r1, [pc, #212]	@ (80041c4 <HAL_GPIO_Init+0x310>)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	3302      	adds	r3, #2
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fa:	4b3b      	ldr	r3, [pc, #236]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800411e:	4a32      	ldr	r2, [pc, #200]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004124:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004148:	4a27      	ldr	r2, [pc, #156]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800414e:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004172:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800419c:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <HAL_GPIO_Init+0x334>)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3301      	adds	r3, #1
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b0f      	cmp	r3, #15
 80041ac:	f67f ae90 	bls.w	8003ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3724      	adds	r7, #36	@ 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40013800 	.word	0x40013800
 80041c8:	40020000 	.word	0x40020000
 80041cc:	40020400 	.word	0x40020400
 80041d0:	40020800 	.word	0x40020800
 80041d4:	40020c00 	.word	0x40020c00
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40021400 	.word	0x40021400
 80041e0:	40021800 	.word	0x40021800
 80041e4:	40021c00 	.word	0x40021c00
 80041e8:	40013c00 	.word	0x40013c00

080041ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	e001      	b.n	800420e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
 8004228:	4613      	mov	r3, r2
 800422a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800422c:	787b      	ldrb	r3, [r7, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004238:	e003      	b.n	8004242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	041a      	lsls	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	619a      	str	r2, [r3, #24]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800425a:	4b08      	ldr	r3, [pc, #32]	@ (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800425c:	695a      	ldr	r2, [r3, #20]
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004266:	4a05      	ldr	r2, [pc, #20]	@ (800427c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800426c:	88fb      	ldrh	r3, [r7, #6]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe f968 	bl	8002544 <HAL_GPIO_EXTI_Callback>
  }
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40013c00 	.word	0x40013c00

08004280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e267      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d075      	beq.n	800438a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800429e:	4b88      	ldr	r3, [pc, #544]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d00c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4b85      	ldr	r3, [pc, #532]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d112      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b6:	4b82      	ldr	r3, [pc, #520]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c2:	d10b      	bne.n	80042dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	4b7e      	ldr	r3, [pc, #504]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05b      	beq.n	8004388 <HAL_RCC_OscConfig+0x108>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d157      	bne.n	8004388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e242      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e4:	d106      	bne.n	80042f4 <HAL_RCC_OscConfig+0x74>
 80042e6:	4b76      	ldr	r3, [pc, #472]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a75      	ldr	r2, [pc, #468]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e01d      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042fc:	d10c      	bne.n	8004318 <HAL_RCC_OscConfig+0x98>
 80042fe:	4b70      	ldr	r3, [pc, #448]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6f      	ldr	r2, [pc, #444]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b6d      	ldr	r3, [pc, #436]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a6c      	ldr	r2, [pc, #432]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e00b      	b.n	8004330 <HAL_RCC_OscConfig+0xb0>
 8004318:	4b69      	ldr	r3, [pc, #420]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a68      	ldr	r2, [pc, #416]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800431e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b66      	ldr	r3, [pc, #408]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a65      	ldr	r2, [pc, #404]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800432a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800432e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d013      	beq.n	8004360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fc76 	bl	8002c28 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe fc72 	bl	8002c28 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e207      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b5b      	ldr	r3, [pc, #364]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0xc0>
 800435e:	e014      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe fc62 	bl	8002c28 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe fc5e 	bl	8002c28 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1f3      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437a:	4b51      	ldr	r3, [pc, #324]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0xe8>
 8004386:	e000      	b.n	800438a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004396:	4b4a      	ldr	r3, [pc, #296]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00b      	beq.n	80043ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b47      	ldr	r3, [pc, #284]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d11c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ae:	4b44      	ldr	r3, [pc, #272]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d116      	bne.n	80043e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	4b41      	ldr	r3, [pc, #260]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d001      	beq.n	80043d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e1c7      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d2:	4b3b      	ldr	r3, [pc, #236]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4937      	ldr	r1, [pc, #220]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e6:	e03a      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f0:	4b34      	ldr	r3, [pc, #208]	@ (80044c4 <HAL_RCC_OscConfig+0x244>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f6:	f7fe fc17 	bl	8002c28 <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043fe:	f7fe fc13 	bl	8002c28 <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e1a8      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004410:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f0      	beq.n	80043fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441c:	4b28      	ldr	r3, [pc, #160]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4925      	ldr	r1, [pc, #148]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 800442c:	4313      	orrs	r3, r2
 800442e:	600b      	str	r3, [r1, #0]
 8004430:	e015      	b.n	800445e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004432:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <HAL_RCC_OscConfig+0x244>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fbf6 	bl	8002c28 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004440:	f7fe fbf2 	bl	8002c28 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e187      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b1b      	ldr	r3, [pc, #108]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d036      	beq.n	80044d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d016      	beq.n	80044a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b15      	ldr	r3, [pc, #84]	@ (80044c8 <HAL_RCC_OscConfig+0x248>)
 8004474:	2201      	movs	r2, #1
 8004476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004478:	f7fe fbd6 	bl	8002c28 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004480:	f7fe fbd2 	bl	8002c28 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e167      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_RCC_OscConfig+0x240>)
 8004494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x200>
 800449e:	e01b      	b.n	80044d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <HAL_RCC_OscConfig+0x248>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a6:	f7fe fbbf 	bl	8002c28 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e00e      	b.n	80044cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fe fbbb 	bl	8002c28 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d907      	bls.n	80044cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e150      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
 80044c0:	40023800 	.word	0x40023800
 80044c4:	42470000 	.word	0x42470000
 80044c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044cc:	4b88      	ldr	r3, [pc, #544]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1ea      	bne.n	80044ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 8097 	beq.w	8004614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ea:	4b81      	ldr	r3, [pc, #516]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10f      	bne.n	8004516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	4b7d      	ldr	r3, [pc, #500]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	4a7c      	ldr	r2, [pc, #496]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004504:	6413      	str	r3, [r2, #64]	@ 0x40
 8004506:	4b7a      	ldr	r3, [pc, #488]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b77      	ldr	r3, [pc, #476]	@ (80046f4 <HAL_RCC_OscConfig+0x474>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b74      	ldr	r3, [pc, #464]	@ (80046f4 <HAL_RCC_OscConfig+0x474>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a73      	ldr	r2, [pc, #460]	@ (80046f4 <HAL_RCC_OscConfig+0x474>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800452c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fe fb7b 	bl	8002c28 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fe fb77 	bl	8002c28 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e10c      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	4b6a      	ldr	r3, [pc, #424]	@ (80046f4 <HAL_RCC_OscConfig+0x474>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d106      	bne.n	800456a <HAL_RCC_OscConfig+0x2ea>
 800455c:	4b64      	ldr	r3, [pc, #400]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004560:	4a63      	ldr	r2, [pc, #396]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
 8004568:	e01c      	b.n	80045a4 <HAL_RCC_OscConfig+0x324>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b05      	cmp	r3, #5
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0x30c>
 8004572:	4b5f      	ldr	r3, [pc, #380]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	4a5e      	ldr	r2, [pc, #376]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004578:	f043 0304 	orr.w	r3, r3, #4
 800457c:	6713      	str	r3, [r2, #112]	@ 0x70
 800457e:	4b5c      	ldr	r3, [pc, #368]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	4a5b      	ldr	r2, [pc, #364]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004584:	f043 0301 	orr.w	r3, r3, #1
 8004588:	6713      	str	r3, [r2, #112]	@ 0x70
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0x324>
 800458c:	4b58      	ldr	r3, [pc, #352]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a57      	ldr	r2, [pc, #348]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
 8004598:	4b55      	ldr	r3, [pc, #340]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	4a54      	ldr	r2, [pc, #336]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800459e:	f023 0304 	bic.w	r3, r3, #4
 80045a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d015      	beq.n	80045d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fe fb3c 	bl	8002c28 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	e00a      	b.n	80045ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b4:	f7fe fb38 	bl	8002c28 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e0cb      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ca:	4b49      	ldr	r3, [pc, #292]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0ee      	beq.n	80045b4 <HAL_RCC_OscConfig+0x334>
 80045d6:	e014      	b.n	8004602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d8:	f7fe fb26 	bl	8002c28 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fe fb22 	bl	8002c28 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e0b5      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f6:	4b3e      	ldr	r3, [pc, #248]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ee      	bne.n	80045e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004608:	4b39      	ldr	r3, [pc, #228]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	4a38      	ldr	r2, [pc, #224]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 800460e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004612:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a1 	beq.w	8004760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800461e:	4b34      	ldr	r3, [pc, #208]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b08      	cmp	r3, #8
 8004628:	d05c      	beq.n	80046e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d141      	bne.n	80046b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b31      	ldr	r3, [pc, #196]	@ (80046f8 <HAL_RCC_OscConfig+0x478>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fe faf6 	bl	8002c28 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe faf2 	bl	8002c28 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e087      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004652:	4b27      	ldr	r3, [pc, #156]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	019b      	lsls	r3, r3, #6
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	3b01      	subs	r3, #1
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	491b      	ldr	r1, [pc, #108]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004688:	4b1b      	ldr	r3, [pc, #108]	@ (80046f8 <HAL_RCC_OscConfig+0x478>)
 800468a:	2201      	movs	r2, #1
 800468c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468e:	f7fe facb 	bl	8002c28 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004696:	f7fe fac7 	bl	8002c28 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e05c      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x416>
 80046b4:	e054      	b.n	8004760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <HAL_RCC_OscConfig+0x478>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fe fab4 	bl	8002c28 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fab0 	bl	8002c28 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e045      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_OscConfig+0x470>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x444>
 80046e2:	e03d      	b.n	8004760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d107      	bne.n	80046fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e038      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
 80046f0:	40023800 	.word	0x40023800
 80046f4:	40007000 	.word	0x40007000
 80046f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046fc:	4b1b      	ldr	r3, [pc, #108]	@ (800476c <HAL_RCC_OscConfig+0x4ec>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d028      	beq.n	800475c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d121      	bne.n	800475c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d11a      	bne.n	800475c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004734:	4293      	cmp	r3, r2
 8004736:	d111      	bne.n	800475c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004742:	085b      	lsrs	r3, r3, #1
 8004744:	3b01      	subs	r3, #1
 8004746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d107      	bne.n	800475c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40023800 	.word	0x40023800

08004770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0cc      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004784:	4b68      	ldr	r3, [pc, #416]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d90c      	bls.n	80047ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004792:	4b65      	ldr	r3, [pc, #404]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b63      	ldr	r3, [pc, #396]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0307 	and.w	r3, r3, #7
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b8      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c4:	4b59      	ldr	r3, [pc, #356]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a58      	ldr	r2, [pc, #352]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047dc:	4b53      	ldr	r3, [pc, #332]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a52      	ldr	r2, [pc, #328]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e8:	4b50      	ldr	r3, [pc, #320]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	494d      	ldr	r1, [pc, #308]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d044      	beq.n	8004890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	4b47      	ldr	r3, [pc, #284]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d119      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e07f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d003      	beq.n	800482e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482a:	2b03      	cmp	r3, #3
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482e:	4b3f      	ldr	r3, [pc, #252]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e06f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483e:	4b3b      	ldr	r3, [pc, #236]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e067      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800484e:	4b37      	ldr	r3, [pc, #220]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 0203 	bic.w	r2, r3, #3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4934      	ldr	r1, [pc, #208]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	4313      	orrs	r3, r2
 800485e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004860:	f7fe f9e2 	bl	8002c28 <HAL_GetTick>
 8004864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	e00a      	b.n	800487e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004868:	f7fe f9de 	bl	8002c28 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004876:	4293      	cmp	r3, r2
 8004878:	d901      	bls.n	800487e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e04f      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	4b2b      	ldr	r3, [pc, #172]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 020c 	and.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	429a      	cmp	r2, r3
 800488e:	d1eb      	bne.n	8004868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d20c      	bcs.n	80048b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a6:	4b20      	ldr	r3, [pc, #128]	@ (8004928 <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d001      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e032      	b.n	800491e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d008      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c4:	4b19      	ldr	r3, [pc, #100]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4916      	ldr	r1, [pc, #88]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0308 	and.w	r3, r3, #8
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d009      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e2:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	490e      	ldr	r1, [pc, #56]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048f6:	f000 f821 	bl	800493c <HAL_RCC_GetSysClockFreq>
 80048fa:	4602      	mov	r2, r0
 80048fc:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490a      	ldr	r1, [pc, #40]	@ (8004930 <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a09      	ldr	r2, [pc, #36]	@ (8004934 <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004912:	4b09      	ldr	r3, [pc, #36]	@ (8004938 <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f942 	bl	8002ba0 <HAL_InitTick>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023c00 	.word	0x40023c00
 800492c:	40023800 	.word	0x40023800
 8004930:	08007294 	.word	0x08007294
 8004934:	20000008 	.word	0x20000008
 8004938:	2000000c 	.word	0x2000000c

0800493c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800493c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004940:	b094      	sub	sp, #80	@ 0x50
 8004942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004954:	4b79      	ldr	r3, [pc, #484]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 030c 	and.w	r3, r3, #12
 800495c:	2b08      	cmp	r3, #8
 800495e:	d00d      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x40>
 8004960:	2b08      	cmp	r3, #8
 8004962:	f200 80e1 	bhi.w	8004b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x34>
 800496a:	2b04      	cmp	r3, #4
 800496c:	d003      	beq.n	8004976 <HAL_RCC_GetSysClockFreq+0x3a>
 800496e:	e0db      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004970:	4b73      	ldr	r3, [pc, #460]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004974:	e0db      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004976:	4b73      	ldr	r3, [pc, #460]	@ (8004b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800497a:	e0d8      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800497c:	4b6f      	ldr	r3, [pc, #444]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004986:	4b6d      	ldr	r3, [pc, #436]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004992:	4b6a      	ldr	r3, [pc, #424]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	2200      	movs	r2, #0
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800499c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800499e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049a6:	2300      	movs	r3, #0
 80049a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	0159      	lsls	r1, r3, #5
 80049bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c0:	0150      	lsls	r0, r2, #5
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4621      	mov	r1, r4
 80049c8:	1a51      	subs	r1, r2, r1
 80049ca:	6139      	str	r1, [r7, #16]
 80049cc:	4629      	mov	r1, r5
 80049ce:	eb63 0301 	sbc.w	r3, r3, r1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e0:	4659      	mov	r1, fp
 80049e2:	018b      	lsls	r3, r1, #6
 80049e4:	4651      	mov	r1, sl
 80049e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ea:	4651      	mov	r1, sl
 80049ec:	018a      	lsls	r2, r1, #6
 80049ee:	4651      	mov	r1, sl
 80049f0:	ebb2 0801 	subs.w	r8, r2, r1
 80049f4:	4659      	mov	r1, fp
 80049f6:	eb63 0901 	sbc.w	r9, r3, r1
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0e:	4690      	mov	r8, r2
 8004a10:	4699      	mov	r9, r3
 8004a12:	4623      	mov	r3, r4
 8004a14:	eb18 0303 	adds.w	r3, r8, r3
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	eb49 0303 	adc.w	r3, r9, r3
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	024b      	lsls	r3, r1, #9
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a38:	4621      	mov	r1, r4
 8004a3a:	024a      	lsls	r2, r1, #9
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a4c:	f7fb ff1e 	bl	800088c <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a58:	e058      	b.n	8004b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a5a:	4b38      	ldr	r3, [pc, #224]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	2200      	movs	r2, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	4611      	mov	r1, r2
 8004a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a6a:	623b      	str	r3, [r7, #32]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	f04f 0000 	mov.w	r0, #0
 8004a7c:	f04f 0100 	mov.w	r1, #0
 8004a80:	0159      	lsls	r1, r3, #5
 8004a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a86:	0150      	lsls	r0, r2, #5
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4641      	mov	r1, r8
 8004a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a92:	4649      	mov	r1, r9
 8004a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f04f 0300 	mov.w	r3, #0
 8004aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aac:	ebb2 040a 	subs.w	r4, r2, sl
 8004ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	eb45 0303 	adc.w	r3, r5, r3
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	f04f 0300 	mov.w	r3, #0
 8004ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	028b      	lsls	r3, r1, #10
 8004ae6:	4621      	mov	r1, r4
 8004ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004aec:	4621      	mov	r1, r4
 8004aee:	028a      	lsls	r2, r1, #10
 8004af0:	4610      	mov	r0, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004af6:	2200      	movs	r2, #0
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	61fa      	str	r2, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	f7fb fec4 	bl	800088c <__aeabi_uldivmod>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	4613      	mov	r3, r2
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	0c1b      	lsrs	r3, r3, #16
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	3301      	adds	r3, #1
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b26:	e002      	b.n	8004b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3750      	adds	r7, #80	@ 0x50
 8004b34:	46bd      	mov	sp, r7
 8004b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	00f42400 	.word	0x00f42400
 8004b44:	007a1200 	.word	0x007a1200

08004b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b4c:	4b03      	ldr	r3, [pc, #12]	@ (8004b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	20000008 	.word	0x20000008

08004b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0a9b      	lsrs	r3, r3, #10
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	@ (8004b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	080072a4 	.word	0x080072a4

08004b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b8c:	f7ff ffdc 	bl	8004b48 <HAL_RCC_GetHCLKFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	0b5b      	lsrs	r3, r3, #13
 8004b98:	f003 0307 	and.w	r3, r3, #7
 8004b9c:	4903      	ldr	r1, [pc, #12]	@ (8004bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	080072a4 	.word	0x080072a4

08004bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e041      	b.n	8004c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fd fe34 	bl	8002844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3304      	adds	r3, #4
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 fad8 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b082      	sub	sp, #8
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e041      	b.n	8004ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f839 	bl	8004cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	f000 fa89 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d109      	bne.n	8004d24 <HAL_TIM_PWM_Start+0x24>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	e022      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d109      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x3e>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e015      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b08      	cmp	r3, #8
 8004d42:	d109      	bne.n	8004d58 <HAL_TIM_PWM_Start+0x58>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e008      	b.n	8004d6a <HAL_TIM_PWM_Start+0x6a>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	bf14      	ite	ne
 8004d64:	2301      	movne	r3, #1
 8004d66:	2300      	moveq	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e07c      	b.n	8004e6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d104      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x82>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d80:	e013      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d104      	bne.n	8004d92 <HAL_TIM_PWM_Start+0x92>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d90:	e00b      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0xa2>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004da0:	e003      	b.n	8004daa <HAL_TIM_PWM_Start+0xaa>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	6839      	ldr	r1, [r7, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fce6 	bl	8005784 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e74 <HAL_TIM_PWM_Start+0x174>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIM_PWM_Start+0xcc>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e78 <HAL_TIM_PWM_Start+0x178>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0xd0>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xd2>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d007      	beq.n	8004de6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a22      	ldr	r2, [pc, #136]	@ (8004e74 <HAL_TIM_PWM_Start+0x174>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df8:	d01d      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8004e7c <HAL_TIM_PWM_Start+0x17c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <HAL_TIM_PWM_Start+0x180>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <HAL_TIM_PWM_Start+0x184>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <HAL_TIM_PWM_Start+0x178>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a18      	ldr	r2, [pc, #96]	@ (8004e88 <HAL_TIM_PWM_Start+0x188>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_TIM_PWM_Start+0x136>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a16      	ldr	r2, [pc, #88]	@ (8004e8c <HAL_TIM_PWM_Start+0x18c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d111      	bne.n	8004e5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d010      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	e007      	b.n	8004e6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40010000 	.word	0x40010000
 8004e78:	40010400 	.word	0x40010400
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800
 8004e84:	40000c00 	.word	0x40000c00
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40001800 	.word	0x40001800

08004e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004eaa:	2302      	movs	r3, #2
 8004eac:	e0ae      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b0c      	cmp	r3, #12
 8004eba:	f200 809f 	bhi.w	8004ffc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ec4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004ef9 	.word	0x08004ef9
 8004ec8:	08004ffd 	.word	0x08004ffd
 8004ecc:	08004ffd 	.word	0x08004ffd
 8004ed0:	08004ffd 	.word	0x08004ffd
 8004ed4:	08004f39 	.word	0x08004f39
 8004ed8:	08004ffd 	.word	0x08004ffd
 8004edc:	08004ffd 	.word	0x08004ffd
 8004ee0:	08004ffd 	.word	0x08004ffd
 8004ee4:	08004f7b 	.word	0x08004f7b
 8004ee8:	08004ffd 	.word	0x08004ffd
 8004eec:	08004ffd 	.word	0x08004ffd
 8004ef0:	08004ffd 	.word	0x08004ffd
 8004ef4:	08004fbb 	.word	0x08004fbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f9f6 	bl	80052f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	619a      	str	r2, [r3, #24]
      break;
 8004f36:	e064      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fa46 	bl	80053d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	619a      	str	r2, [r3, #24]
      break;
 8004f78:	e043      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fa9b 	bl	80054bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0208 	orr.w	r2, r2, #8
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0204 	bic.w	r2, r2, #4
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	61da      	str	r2, [r3, #28]
      break;
 8004fb8:	e023      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 faef 	bl	80055a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
      break;
 8004ffa:	e002      	b.n	8005002 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8005000:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800500a:	7dfb      	ldrb	r3, [r7, #23]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIM_ConfigClockSource+0x1c>
 800502c:	2302      	movs	r3, #2
 800502e:	e0b4      	b.n	800519a <HAL_TIM_ConfigClockSource+0x186>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800504e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005068:	d03e      	beq.n	80050e8 <HAL_TIM_ConfigClockSource+0xd4>
 800506a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800506e:	f200 8087 	bhi.w	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005076:	f000 8086 	beq.w	8005186 <HAL_TIM_ConfigClockSource+0x172>
 800507a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800507e:	d87f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b70      	cmp	r3, #112	@ 0x70
 8005082:	d01a      	beq.n	80050ba <HAL_TIM_ConfigClockSource+0xa6>
 8005084:	2b70      	cmp	r3, #112	@ 0x70
 8005086:	d87b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b60      	cmp	r3, #96	@ 0x60
 800508a:	d050      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x11a>
 800508c:	2b60      	cmp	r3, #96	@ 0x60
 800508e:	d877      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b50      	cmp	r3, #80	@ 0x50
 8005092:	d03c      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xfa>
 8005094:	2b50      	cmp	r3, #80	@ 0x50
 8005096:	d873      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 8005098:	2b40      	cmp	r3, #64	@ 0x40
 800509a:	d058      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x13a>
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d86f      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a0:	2b30      	cmp	r3, #48	@ 0x30
 80050a2:	d064      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050a4:	2b30      	cmp	r3, #48	@ 0x30
 80050a6:	d86b      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d060      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d867      	bhi.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d05c      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d05a      	beq.n	800516e <HAL_TIM_ConfigClockSource+0x15a>
 80050b8:	e062      	b.n	8005180 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ca:	f000 fb3b 	bl	8005744 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	609a      	str	r2, [r3, #8]
      break;
 80050e6:	e04f      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050f8:	f000 fb24 	bl	8005744 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800510a:	609a      	str	r2, [r3, #8]
      break;
 800510c:	e03c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fa98 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2150      	movs	r1, #80	@ 0x50
 8005126:	4618      	mov	r0, r3
 8005128:	f000 faf1 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 800512c:	e02c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fab7 	bl	80056ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2160      	movs	r1, #96	@ 0x60
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fae1 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 800514c:	e01c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	461a      	mov	r2, r3
 800515c:	f000 fa78 	bl	8005650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2140      	movs	r1, #64	@ 0x40
 8005166:	4618      	mov	r0, r3
 8005168:	f000 fad1 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 800516c:	e00c      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4619      	mov	r1, r3
 8005178:	4610      	mov	r0, r2
 800517a:	f000 fac8 	bl	800570e <TIM_ITRx_SetConfig>
      break;
 800517e:	e003      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
      break;
 8005184:	e000      	b.n	8005188 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a43      	ldr	r2, [pc, #268]	@ (80052c4 <TIM_Base_SetConfig+0x120>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a40      	ldr	r2, [pc, #256]	@ (80052c8 <TIM_Base_SetConfig+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3f      	ldr	r2, [pc, #252]	@ (80052cc <TIM_Base_SetConfig+0x128>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3e      	ldr	r2, [pc, #248]	@ (80052d0 <TIM_Base_SetConfig+0x12c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3d      	ldr	r2, [pc, #244]	@ (80052d4 <TIM_Base_SetConfig+0x130>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a32      	ldr	r2, [pc, #200]	@ (80052c4 <TIM_Base_SetConfig+0x120>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005204:	d027      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2f      	ldr	r2, [pc, #188]	@ (80052c8 <TIM_Base_SetConfig+0x124>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d023      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2e      	ldr	r2, [pc, #184]	@ (80052cc <TIM_Base_SetConfig+0x128>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2d      	ldr	r2, [pc, #180]	@ (80052d0 <TIM_Base_SetConfig+0x12c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2c      	ldr	r2, [pc, #176]	@ (80052d4 <TIM_Base_SetConfig+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2b      	ldr	r2, [pc, #172]	@ (80052d8 <TIM_Base_SetConfig+0x134>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	@ (80052dc <TIM_Base_SetConfig+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	@ (80052e0 <TIM_Base_SetConfig+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a28      	ldr	r2, [pc, #160]	@ (80052e4 <TIM_Base_SetConfig+0x140>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	@ (80052e8 <TIM_Base_SetConfig+0x144>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	@ (80052ec <TIM_Base_SetConfig+0x148>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a0e      	ldr	r2, [pc, #56]	@ (80052c4 <TIM_Base_SetConfig+0x120>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0xf2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a10      	ldr	r2, [pc, #64]	@ (80052d4 <TIM_Base_SetConfig+0x130>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d103      	bne.n	800529e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f043 0204 	orr.w	r2, r3, #4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	601a      	str	r2, [r3, #0]
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	40001800 	.word	0x40001800
 80052e8:	40001c00 	.word	0x40001c00
 80052ec:	40002000 	.word	0x40002000

080052f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	f023 0201 	bic.w	r2, r3, #1
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 0302 	bic.w	r3, r3, #2
 8005338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a20      	ldr	r2, [pc, #128]	@ (80053c8 <TIM_OC1_SetConfig+0xd8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_OC1_SetConfig+0x64>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <TIM_OC1_SetConfig+0xdc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10c      	bne.n	800536e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0308 	bic.w	r3, r3, #8
 800535a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a15      	ldr	r2, [pc, #84]	@ (80053c8 <TIM_OC1_SetConfig+0xd8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d003      	beq.n	800537e <TIM_OC1_SetConfig+0x8e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a14      	ldr	r2, [pc, #80]	@ (80053cc <TIM_OC1_SetConfig+0xdc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d111      	bne.n	80053a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	621a      	str	r2, [r3, #32]
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40010400 	.word	0x40010400

080053d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a1b      	ldr	r3, [r3, #32]
 80053e4:	f023 0210 	bic.w	r2, r3, #16
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0320 	bic.w	r3, r3, #32
 800541a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <TIM_OC2_SetConfig+0xe4>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC2_SetConfig+0x68>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a21      	ldr	r2, [pc, #132]	@ (80054b8 <TIM_OC2_SetConfig+0xe8>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10d      	bne.n	8005454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <TIM_OC2_SetConfig+0xe4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d003      	beq.n	8005464 <TIM_OC2_SetConfig+0x94>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <TIM_OC2_SetConfig+0xe8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d113      	bne.n	800548c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800546a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000
 80054b8:	40010400 	.word	0x40010400

080054bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054bc:	b480      	push	{r7}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a21      	ldr	r2, [pc, #132]	@ (800559c <TIM_OC3_SetConfig+0xe0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_OC3_SetConfig+0x66>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a20      	ldr	r2, [pc, #128]	@ (80055a0 <TIM_OC3_SetConfig+0xe4>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10d      	bne.n	800553e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800553c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a16      	ldr	r2, [pc, #88]	@ (800559c <TIM_OC3_SetConfig+0xe0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d003      	beq.n	800554e <TIM_OC3_SetConfig+0x92>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a15      	ldr	r2, [pc, #84]	@ (80055a0 <TIM_OC3_SetConfig+0xe4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d113      	bne.n	8005576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800555c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40010000 	.word	0x40010000
 80055a0:	40010400 	.word	0x40010400

080055a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	031b      	lsls	r3, r3, #12
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a12      	ldr	r2, [pc, #72]	@ (8005648 <TIM_OC4_SetConfig+0xa4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC4_SetConfig+0x68>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a11      	ldr	r2, [pc, #68]	@ (800564c <TIM_OC4_SetConfig+0xa8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d109      	bne.n	8005620 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40010400 	.word	0x40010400

08005650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800567a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 030a 	bic.w	r3, r3, #10
 800568c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	621a      	str	r2, [r3, #32]
}
 80056a2:	bf00      	nop
 80056a4:	371c      	adds	r7, #28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b087      	sub	sp, #28
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f023 0210 	bic.w	r2, r3, #16
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	031b      	lsls	r3, r3, #12
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	f043 0307 	orr.w	r3, r3, #7
 8005730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	609a      	str	r2, [r3, #8]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800575e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	431a      	orrs	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	609a      	str	r2, [r3, #8]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	2201      	movs	r2, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1a      	ldr	r2, [r3, #32]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a1a      	ldr	r2, [r3, #32]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	431a      	orrs	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e05a      	b.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a21      	ldr	r2, [pc, #132]	@ (80058ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005834:	d01d      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1b      	ldr	r2, [pc, #108]	@ (80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1a      	ldr	r2, [pc, #104]	@ (80058b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a18      	ldr	r2, [pc, #96]	@ (80058bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a17      	ldr	r2, [pc, #92]	@ (80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a15      	ldr	r2, [pc, #84]	@ (80058c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10c      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	4313      	orrs	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40001800 	.word	0x40001800

080058c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e042      	b.n	8005960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fd f804 	bl	80028fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2224      	movs	r2, #36	@ 0x24
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800590a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fd7f 	bl	8006410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	695a      	ldr	r2, [r3, #20]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	@ 0x28
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b20      	cmp	r3, #32
 8005986:	d175      	bne.n	8005a74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_UART_Transmit+0x2c>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e06e      	b.n	8005a76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2221      	movs	r2, #33	@ 0x21
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059a6:	f7fd f93f 	bl	8002c28 <HAL_GetTick>
 80059aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	88fa      	ldrh	r2, [r7, #6]
 80059b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	88fa      	ldrh	r2, [r7, #6]
 80059b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c0:	d108      	bne.n	80059d4 <HAL_UART_Transmit+0x6c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	61bb      	str	r3, [r7, #24]
 80059d2:	e003      	b.n	80059dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059d8:	2300      	movs	r3, #0
 80059da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059dc:	e02e      	b.n	8005a3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2180      	movs	r1, #128	@ 0x80
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fb1d 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e03a      	b.n	8005a76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10b      	bne.n	8005a1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	61bb      	str	r3, [r7, #24]
 8005a1c:	e007      	b.n	8005a2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	781a      	ldrb	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1cb      	bne.n	80059de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	2140      	movs	r1, #64	@ 0x40
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 fae9 	bl	8006028 <UART_WaitOnFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e006      	b.n	8005a76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0ba      	sub	sp, #232	@ 0xe8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fbd7 	bl	8006292 <UART_Receive_IT>
      return;
 8005ae4:	e273      	b.n	8005fce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80de 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80d1 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
 8005b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 820a 	beq.w	8005fc4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb62 	bl	8006292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd8:	2b40      	cmp	r3, #64	@ 0x40
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_UART_IRQHandler+0x17a>
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04f      	beq.n	8005c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa6d 	bl	80060da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0a:	2b40      	cmp	r3, #64	@ 0x40
 8005c0c:	d141      	bne.n	8005c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1d9      	bne.n	8005c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c66:	4a8a      	ldr	r2, [pc, #552]	@ (8005e90 <HAL_UART_IRQHandler+0x410>)
 8005c68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd fe94 	bl	800399c <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e00e      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9b6 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00a      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9b2 	bl	8005ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e006      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f9ae 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ca6:	e18d      	b.n	8005fc4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	bf00      	nop
    return;
 8005caa:	e18b      	b.n	8005fc4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 8167 	bne.w	8005f84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8160 	beq.w	8005f84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8159 	beq.w	8005f84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	f040 80ce 	bne.w	8005e94 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80a9 	beq.w	8005e60 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f080 80a2 	bcs.w	8005e60 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d2e:	f000 8088 	beq.w	8005e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005da2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e1      	bne.n	8005d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005de0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005de4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fd3d 	bl	80038bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f8d9 	bl	8006010 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005e5e:	e0b3      	b.n	8005fc8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	f040 80ad 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e78:	f040 80a6 	bne.w	8005fc8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8c1 	bl	8006010 <HAL_UARTEx_RxEventCallback>
      return;
 8005e8e:	e09b      	b.n	8005fc8 <HAL_UART_IRQHandler+0x548>
 8005e90:	080061a1 	.word	0x080061a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 808e 	beq.w	8005fcc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8089 	beq.w	8005fcc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	330c      	adds	r3, #12
 8005ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	330c      	adds	r3, #12
 8005eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e3      	bne.n	8005eba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3314      	adds	r3, #20
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	623b      	str	r3, [r7, #32]
   return(result);
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3314      	adds	r3, #20
 8005f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1e3      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2220      	movs	r2, #32
 8005f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	e853 3f00 	ldrex	r3, [r3]
 8005f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0310 	bic.w	r3, r3, #16
 8005f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f5c:	61fa      	str	r2, [r7, #28]
 8005f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f60:	69b9      	ldr	r1, [r7, #24]
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	e841 2300 	strex	r3, r2, [r1]
 8005f68:	617b      	str	r3, [r7, #20]
   return(result);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e3      	bne.n	8005f38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f847 	bl	8006010 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f82:	e023      	b.n	8005fcc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d009      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x524>
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f910 	bl	80061c2 <UART_Transmit_IT>
    return;
 8005fa2:	e014      	b.n	8005fce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <HAL_UART_IRQHandler+0x54e>
 8005fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d008      	beq.n	8005fce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 f950 	bl	8006262 <UART_EndTransmit_IT>
    return;
 8005fc2:	e004      	b.n	8005fce <HAL_UART_IRQHandler+0x54e>
    return;
 8005fc4:	bf00      	nop
 8005fc6:	e002      	b.n	8005fce <HAL_UART_IRQHandler+0x54e>
      return;
 8005fc8:	bf00      	nop
 8005fca:	e000      	b.n	8005fce <HAL_UART_IRQHandler+0x54e>
      return;
 8005fcc:	bf00      	nop
  }
}
 8005fce:	37e8      	adds	r7, #232	@ 0xe8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	603b      	str	r3, [r7, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006038:	e03b      	b.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d037      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fc fdf1 	bl	8002c28 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	6a3a      	ldr	r2, [r7, #32]
 800604e:	429a      	cmp	r2, r3
 8006050:	d302      	bcc.n	8006058 <UART_WaitOnFlagUntilTimeout+0x30>
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e03a      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d023      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b80      	cmp	r3, #128	@ 0x80
 800606e:	d020      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d01d      	beq.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d116      	bne.n	80060b2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006084:	2300      	movs	r3, #0
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f81d 	bl	80060da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2208      	movs	r2, #8
 80060a4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e00f      	b.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4013      	ands	r3, r2
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d0b4      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060da:	b480      	push	{r7}
 80060dc:	b095      	sub	sp, #84	@ 0x54
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	330c      	adds	r3, #12
 80060e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006102:	643a      	str	r2, [r7, #64]	@ 0x40
 8006104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	61fb      	str	r3, [r7, #28]
   return(result);
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006138:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800613c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	2b01      	cmp	r3, #1
 8006150:	d119      	bne.n	8006186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	330c      	adds	r3, #12
 8006158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	60bb      	str	r3, [r7, #8]
   return(result);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f023 0310 	bic.w	r3, r3, #16
 8006168:	647b      	str	r3, [r7, #68]	@ 0x44
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	330c      	adds	r3, #12
 8006170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006172:	61ba      	str	r2, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	613b      	str	r3, [r7, #16]
   return(result);
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e5      	bne.n	8006152 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006194:	bf00      	nop
 8006196:	3754      	adds	r7, #84	@ 0x54
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff ff21 	bl	8005ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ba:	bf00      	nop
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b21      	cmp	r3, #33	@ 0x21
 80061d4:	d13e      	bne.n	8006254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061de:	d114      	bne.n	800620a <UART_Transmit_IT+0x48>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d110      	bne.n	800620a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	461a      	mov	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	1c9a      	adds	r2, r3, #2
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	621a      	str	r2, [r3, #32]
 8006208:	e008      	b.n	800621c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	6211      	str	r1, [r2, #32]
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006220:	b29b      	uxth	r3, r3
 8006222:	3b01      	subs	r3, #1
 8006224:	b29b      	uxth	r3, r3
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10f      	bne.n	8006250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800623e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800624e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b082      	sub	sp, #8
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68da      	ldr	r2, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff fea6 	bl	8005fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3708      	adds	r7, #8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b08c      	sub	sp, #48	@ 0x30
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b22      	cmp	r3, #34	@ 0x22
 80062ac:	f040 80aa 	bne.w	8006404 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062b8:	d115      	bne.n	80062e6 <UART_Receive_IT+0x54>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d111      	bne.n	80062e6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80062e4:	e024      	b.n	8006330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f4:	d007      	beq.n	8006306 <UART_Receive_IT+0x74>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <UART_Receive_IT+0x82>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	e008      	b.n	8006326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4619      	mov	r1, r3
 800633e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006340:	2b00      	cmp	r3, #0
 8006342:	d15d      	bne.n	8006400 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0220 	bic.w	r2, r2, #32
 8006352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695a      	ldr	r2, [r3, #20]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006386:	2b01      	cmp	r3, #1
 8006388:	d135      	bne.n	80063f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	e853 3f00 	ldrex	r3, [r3]
 800639e:	613b      	str	r3, [r7, #16]
   return(result);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	f023 0310 	bic.w	r3, r3, #16
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b0:	623a      	str	r2, [r7, #32]
 80063b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	e841 2300 	strex	r3, r2, [r1]
 80063bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1e5      	bne.n	8006390 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d10a      	bne.n	80063e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fe0e 	bl	8006010 <HAL_UARTEx_RxEventCallback>
 80063f4:	e002      	b.n	80063fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fdf6 	bl	8005fe8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	e002      	b.n	8006406 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	e000      	b.n	8006406 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006404:	2302      	movs	r3, #2
  }
}
 8006406:	4618      	mov	r0, r3
 8006408:	3730      	adds	r7, #48	@ 0x30
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b0c0      	sub	sp, #256	@ 0x100
 8006416:	af00      	add	r7, sp, #0
 8006418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	68d9      	ldr	r1, [r3, #12]
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	ea40 0301 	orr.w	r3, r0, r1
 8006438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	431a      	orrs	r2, r3
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	431a      	orrs	r2, r3
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006468:	f021 010c 	bic.w	r1, r1, #12
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006476:	430b      	orrs	r3, r1
 8006478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	6999      	ldr	r1, [r3, #24]
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	ea40 0301 	orr.w	r3, r0, r1
 8006496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b8f      	ldr	r3, [pc, #572]	@ (80066dc <UART_SetConfig+0x2cc>)
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d005      	beq.n	80064b0 <UART_SetConfig+0xa0>
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b8d      	ldr	r3, [pc, #564]	@ (80066e0 <UART_SetConfig+0x2d0>)
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d104      	bne.n	80064ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fe fb6a 	bl	8004b88 <HAL_RCC_GetPCLK2Freq>
 80064b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064b8:	e003      	b.n	80064c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ba:	f7fe fb51 	bl	8004b60 <HAL_RCC_GetPCLK1Freq>
 80064be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064cc:	f040 810c 	bne.w	80066e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	1891      	adds	r1, r2, r2
 80064e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064ea:	415b      	adcs	r3, r3
 80064ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064f2:	4621      	mov	r1, r4
 80064f4:	eb12 0801 	adds.w	r8, r2, r1
 80064f8:	4629      	mov	r1, r5
 80064fa:	eb43 0901 	adc.w	r9, r3, r1
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800650a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800650e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006512:	4690      	mov	r8, r2
 8006514:	4699      	mov	r9, r3
 8006516:	4623      	mov	r3, r4
 8006518:	eb18 0303 	adds.w	r3, r8, r3
 800651c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006520:	462b      	mov	r3, r5
 8006522:	eb49 0303 	adc.w	r3, r9, r3
 8006526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800653a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800653e:	460b      	mov	r3, r1
 8006540:	18db      	adds	r3, r3, r3
 8006542:	653b      	str	r3, [r7, #80]	@ 0x50
 8006544:	4613      	mov	r3, r2
 8006546:	eb42 0303 	adc.w	r3, r2, r3
 800654a:	657b      	str	r3, [r7, #84]	@ 0x54
 800654c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006554:	f7fa f99a 	bl	800088c <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4b61      	ldr	r3, [pc, #388]	@ (80066e4 <UART_SetConfig+0x2d4>)
 800655e:	fba3 2302 	umull	r2, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	011c      	lsls	r4, r3, #4
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	1891      	adds	r1, r2, r2
 800657e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006580:	415b      	adcs	r3, r3
 8006582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006588:	4641      	mov	r1, r8
 800658a:	eb12 0a01 	adds.w	sl, r2, r1
 800658e:	4649      	mov	r1, r9
 8006590:	eb43 0b01 	adc.w	fp, r3, r1
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a8:	4692      	mov	sl, r2
 80065aa:	469b      	mov	fp, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	eb1a 0303 	adds.w	r3, sl, r3
 80065b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb4b 0303 	adc.w	r3, fp, r3
 80065bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065d4:	460b      	mov	r3, r1
 80065d6:	18db      	adds	r3, r3, r3
 80065d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065da:	4613      	mov	r3, r2
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065ea:	f7fa f94f 	bl	800088c <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	4b3b      	ldr	r3, [pc, #236]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80065f6:	fba3 2301 	umull	r2, r3, r3, r1
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	2264      	movs	r2, #100	@ 0x64
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	1acb      	subs	r3, r1, r3
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800660a:	4b36      	ldr	r3, [pc, #216]	@ (80066e4 <UART_SetConfig+0x2d4>)
 800660c:	fba3 2302 	umull	r2, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006618:	441c      	add	r4, r3
 800661a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006634:	415b      	adcs	r3, r3
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6339      	str	r1, [r7, #48]	@ 0x30
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006670:	464b      	mov	r3, r9
 8006672:	460a      	mov	r2, r1
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800668c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006690:	460b      	mov	r3, r1
 8006692:	18db      	adds	r3, r3, r3
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006696:	4613      	mov	r3, r2
 8006698:	eb42 0303 	adc.w	r3, r2, r3
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066a6:	f7fa f8f1 	bl	800088c <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80066b0:	fba3 1302 	umull	r1, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	2164      	movs	r1, #100	@ 0x64
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	3332      	adds	r3, #50	@ 0x32
 80066c2:	4a08      	ldr	r2, [pc, #32]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 0207 	and.w	r2, r3, #7
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4422      	add	r2, r4
 80066d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d8:	e106      	b.n	80068e8 <UART_SetConfig+0x4d8>
 80066da:	bf00      	nop
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40011400 	.word	0x40011400
 80066e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066fa:	4642      	mov	r2, r8
 80066fc:	464b      	mov	r3, r9
 80066fe:	1891      	adds	r1, r2, r2
 8006700:	6239      	str	r1, [r7, #32]
 8006702:	415b      	adcs	r3, r3
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670a:	4641      	mov	r1, r8
 800670c:	1854      	adds	r4, r2, r1
 800670e:	4649      	mov	r1, r9
 8006710:	eb43 0501 	adc.w	r5, r3, r1
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	00eb      	lsls	r3, r5, #3
 800671e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006722:	00e2      	lsls	r2, r4, #3
 8006724:	4614      	mov	r4, r2
 8006726:	461d      	mov	r5, r3
 8006728:	4643      	mov	r3, r8
 800672a:	18e3      	adds	r3, r4, r3
 800672c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006730:	464b      	mov	r3, r9
 8006732:	eb45 0303 	adc.w	r3, r5, r3
 8006736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006756:	4629      	mov	r1, r5
 8006758:	008b      	lsls	r3, r1, #2
 800675a:	4621      	mov	r1, r4
 800675c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006760:	4621      	mov	r1, r4
 8006762:	008a      	lsls	r2, r1, #2
 8006764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006768:	f7fa f890 	bl	800088c <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4b60      	ldr	r3, [pc, #384]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006772:	fba3 2302 	umull	r2, r3, r3, r2
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	011c      	lsls	r4, r3, #4
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800678c:	4642      	mov	r2, r8
 800678e:	464b      	mov	r3, r9
 8006790:	1891      	adds	r1, r2, r2
 8006792:	61b9      	str	r1, [r7, #24]
 8006794:	415b      	adcs	r3, r3
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800679c:	4641      	mov	r1, r8
 800679e:	1851      	adds	r1, r2, r1
 80067a0:	6139      	str	r1, [r7, #16]
 80067a2:	4649      	mov	r1, r9
 80067a4:	414b      	adcs	r3, r1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b4:	4659      	mov	r1, fp
 80067b6:	00cb      	lsls	r3, r1, #3
 80067b8:	4651      	mov	r1, sl
 80067ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067be:	4651      	mov	r1, sl
 80067c0:	00ca      	lsls	r2, r1, #3
 80067c2:	4610      	mov	r0, r2
 80067c4:	4619      	mov	r1, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	4642      	mov	r2, r8
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067d0:	464b      	mov	r3, r9
 80067d2:	460a      	mov	r2, r1
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067f4:	4649      	mov	r1, r9
 80067f6:	008b      	lsls	r3, r1, #2
 80067f8:	4641      	mov	r1, r8
 80067fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067fe:	4641      	mov	r1, r8
 8006800:	008a      	lsls	r2, r1, #2
 8006802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006806:	f7fa f841 	bl	800088c <__aeabi_uldivmod>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4611      	mov	r1, r2
 8006810:	4b38      	ldr	r3, [pc, #224]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006812:	fba3 2301 	umull	r2, r3, r3, r1
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2264      	movs	r2, #100	@ 0x64
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	1acb      	subs	r3, r1, r3
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	3332      	adds	r3, #50	@ 0x32
 8006824:	4a33      	ldr	r2, [pc, #204]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006830:	441c      	add	r4, r3
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006836:	2200      	movs	r2, #0
 8006838:	673b      	str	r3, [r7, #112]	@ 0x70
 800683a:	677a      	str	r2, [r7, #116]	@ 0x74
 800683c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	1891      	adds	r1, r2, r2
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	415b      	adcs	r3, r3
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006850:	4641      	mov	r1, r8
 8006852:	1851      	adds	r1, r2, r1
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	4649      	mov	r1, r9
 8006858:	414b      	adcs	r3, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006868:	4659      	mov	r1, fp
 800686a:	00cb      	lsls	r3, r1, #3
 800686c:	4651      	mov	r1, sl
 800686e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006872:	4651      	mov	r1, sl
 8006874:	00ca      	lsls	r2, r1, #3
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	4603      	mov	r3, r0
 800687c:	4642      	mov	r2, r8
 800687e:	189b      	adds	r3, r3, r2
 8006880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006882:	464b      	mov	r3, r9
 8006884:	460a      	mov	r2, r1
 8006886:	eb42 0303 	adc.w	r3, r2, r3
 800688a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	663b      	str	r3, [r7, #96]	@ 0x60
 8006896:	667a      	str	r2, [r7, #100]	@ 0x64
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068a4:	4649      	mov	r1, r9
 80068a6:	008b      	lsls	r3, r1, #2
 80068a8:	4641      	mov	r1, r8
 80068aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ae:	4641      	mov	r1, r8
 80068b0:	008a      	lsls	r2, r1, #2
 80068b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068b6:	f7f9 ffe9 	bl	800088c <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <UART_SetConfig+0x4e4>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	@ 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	3332      	adds	r3, #50	@ 0x32
 80068d2:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <UART_SetConfig+0x4e4>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 020f 	and.w	r2, r3, #15
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4422      	add	r2, r4
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068ee:	46bd      	mov	sp, r7
 80068f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f4:	51eb851f 	.word	0x51eb851f

080068f8 <siprintf>:
 80068f8:	b40e      	push	{r1, r2, r3}
 80068fa:	b510      	push	{r4, lr}
 80068fc:	b09d      	sub	sp, #116	@ 0x74
 80068fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006900:	9002      	str	r0, [sp, #8]
 8006902:	9006      	str	r0, [sp, #24]
 8006904:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006908:	480a      	ldr	r0, [pc, #40]	@ (8006934 <siprintf+0x3c>)
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	490a      	ldr	r1, [pc, #40]	@ (8006938 <siprintf+0x40>)
 8006910:	f853 2b04 	ldr.w	r2, [r3], #4
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	2400      	movs	r4, #0
 8006918:	a902      	add	r1, sp, #8
 800691a:	6800      	ldr	r0, [r0, #0]
 800691c:	9301      	str	r3, [sp, #4]
 800691e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006920:	f000 f994 	bl	8006c4c <_svfiprintf_r>
 8006924:	9b02      	ldr	r3, [sp, #8]
 8006926:	701c      	strb	r4, [r3, #0]
 8006928:	b01d      	add	sp, #116	@ 0x74
 800692a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800692e:	b003      	add	sp, #12
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000014 	.word	0x20000014
 8006938:	ffff0208 	.word	0xffff0208

0800693c <memset>:
 800693c:	4402      	add	r2, r0
 800693e:	4603      	mov	r3, r0
 8006940:	4293      	cmp	r3, r2
 8006942:	d100      	bne.n	8006946 <memset+0xa>
 8006944:	4770      	bx	lr
 8006946:	f803 1b01 	strb.w	r1, [r3], #1
 800694a:	e7f9      	b.n	8006940 <memset+0x4>

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	@ (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000014 	.word	0x20000014

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	4d0d      	ldr	r5, [pc, #52]	@ (8006990 <__libc_init_array+0x38>)
 800695c:	4c0d      	ldr	r4, [pc, #52]	@ (8006994 <__libc_init_array+0x3c>)
 800695e:	1b64      	subs	r4, r4, r5
 8006960:	10a4      	asrs	r4, r4, #2
 8006962:	2600      	movs	r6, #0
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	4d0b      	ldr	r5, [pc, #44]	@ (8006998 <__libc_init_array+0x40>)
 800696a:	4c0c      	ldr	r4, [pc, #48]	@ (800699c <__libc_init_array+0x44>)
 800696c:	f000 fc64 	bl	8007238 <_init>
 8006970:	1b64      	subs	r4, r4, r5
 8006972:	10a4      	asrs	r4, r4, #2
 8006974:	2600      	movs	r6, #0
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006980:	4798      	blx	r3
 8006982:	3601      	adds	r6, #1
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	f855 3b04 	ldr.w	r3, [r5], #4
 800698a:	4798      	blx	r3
 800698c:	3601      	adds	r6, #1
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	080072f0 	.word	0x080072f0
 8006994:	080072f0 	.word	0x080072f0
 8006998:	080072f0 	.word	0x080072f0
 800699c:	080072f4 	.word	0x080072f4

080069a0 <__retarget_lock_acquire_recursive>:
 80069a0:	4770      	bx	lr

080069a2 <__retarget_lock_release_recursive>:
 80069a2:	4770      	bx	lr

080069a4 <_free_r>:
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4605      	mov	r5, r0
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d041      	beq.n	8006a30 <_free_r+0x8c>
 80069ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b0:	1f0c      	subs	r4, r1, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	bfb8      	it	lt
 80069b6:	18e4      	addlt	r4, r4, r3
 80069b8:	f000 f8e0 	bl	8006b7c <__malloc_lock>
 80069bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a34 <_free_r+0x90>)
 80069be:	6813      	ldr	r3, [r2, #0]
 80069c0:	b933      	cbnz	r3, 80069d0 <_free_r+0x2c>
 80069c2:	6063      	str	r3, [r4, #4]
 80069c4:	6014      	str	r4, [r2, #0]
 80069c6:	4628      	mov	r0, r5
 80069c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069cc:	f000 b8dc 	b.w	8006b88 <__malloc_unlock>
 80069d0:	42a3      	cmp	r3, r4
 80069d2:	d908      	bls.n	80069e6 <_free_r+0x42>
 80069d4:	6820      	ldr	r0, [r4, #0]
 80069d6:	1821      	adds	r1, r4, r0
 80069d8:	428b      	cmp	r3, r1
 80069da:	bf01      	itttt	eq
 80069dc:	6819      	ldreq	r1, [r3, #0]
 80069de:	685b      	ldreq	r3, [r3, #4]
 80069e0:	1809      	addeq	r1, r1, r0
 80069e2:	6021      	streq	r1, [r4, #0]
 80069e4:	e7ed      	b.n	80069c2 <_free_r+0x1e>
 80069e6:	461a      	mov	r2, r3
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	b10b      	cbz	r3, 80069f0 <_free_r+0x4c>
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	d9fa      	bls.n	80069e6 <_free_r+0x42>
 80069f0:	6811      	ldr	r1, [r2, #0]
 80069f2:	1850      	adds	r0, r2, r1
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d10b      	bne.n	8006a10 <_free_r+0x6c>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	4401      	add	r1, r0
 80069fc:	1850      	adds	r0, r2, r1
 80069fe:	4283      	cmp	r3, r0
 8006a00:	6011      	str	r1, [r2, #0]
 8006a02:	d1e0      	bne.n	80069c6 <_free_r+0x22>
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	6053      	str	r3, [r2, #4]
 8006a0a:	4408      	add	r0, r1
 8006a0c:	6010      	str	r0, [r2, #0]
 8006a0e:	e7da      	b.n	80069c6 <_free_r+0x22>
 8006a10:	d902      	bls.n	8006a18 <_free_r+0x74>
 8006a12:	230c      	movs	r3, #12
 8006a14:	602b      	str	r3, [r5, #0]
 8006a16:	e7d6      	b.n	80069c6 <_free_r+0x22>
 8006a18:	6820      	ldr	r0, [r4, #0]
 8006a1a:	1821      	adds	r1, r4, r0
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	bf04      	itt	eq
 8006a20:	6819      	ldreq	r1, [r3, #0]
 8006a22:	685b      	ldreq	r3, [r3, #4]
 8006a24:	6063      	str	r3, [r4, #4]
 8006a26:	bf04      	itt	eq
 8006a28:	1809      	addeq	r1, r1, r0
 8006a2a:	6021      	streq	r1, [r4, #0]
 8006a2c:	6054      	str	r4, [r2, #4]
 8006a2e:	e7ca      	b.n	80069c6 <_free_r+0x22>
 8006a30:	bd38      	pop	{r3, r4, r5, pc}
 8006a32:	bf00      	nop
 8006a34:	20000414 	.word	0x20000414

08006a38 <sbrk_aligned>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006a78 <sbrk_aligned+0x40>)
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	6831      	ldr	r1, [r6, #0]
 8006a40:	4605      	mov	r5, r0
 8006a42:	b911      	cbnz	r1, 8006a4a <sbrk_aligned+0x12>
 8006a44:	f000 fba4 	bl	8007190 <_sbrk_r>
 8006a48:	6030      	str	r0, [r6, #0]
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 fb9f 	bl	8007190 <_sbrk_r>
 8006a52:	1c43      	adds	r3, r0, #1
 8006a54:	d103      	bne.n	8006a5e <sbrk_aligned+0x26>
 8006a56:	f04f 34ff 	mov.w	r4, #4294967295
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	bd70      	pop	{r4, r5, r6, pc}
 8006a5e:	1cc4      	adds	r4, r0, #3
 8006a60:	f024 0403 	bic.w	r4, r4, #3
 8006a64:	42a0      	cmp	r0, r4
 8006a66:	d0f8      	beq.n	8006a5a <sbrk_aligned+0x22>
 8006a68:	1a21      	subs	r1, r4, r0
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 fb90 	bl	8007190 <_sbrk_r>
 8006a70:	3001      	adds	r0, #1
 8006a72:	d1f2      	bne.n	8006a5a <sbrk_aligned+0x22>
 8006a74:	e7ef      	b.n	8006a56 <sbrk_aligned+0x1e>
 8006a76:	bf00      	nop
 8006a78:	20000410 	.word	0x20000410

08006a7c <_malloc_r>:
 8006a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a80:	1ccd      	adds	r5, r1, #3
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	4606      	mov	r6, r0
 8006a92:	db01      	blt.n	8006a98 <_malloc_r+0x1c>
 8006a94:	42a9      	cmp	r1, r5
 8006a96:	d904      	bls.n	8006aa2 <_malloc_r+0x26>
 8006a98:	230c      	movs	r3, #12
 8006a9a:	6033      	str	r3, [r6, #0]
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b78 <_malloc_r+0xfc>
 8006aa6:	f000 f869 	bl	8006b7c <__malloc_lock>
 8006aaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006aae:	461c      	mov	r4, r3
 8006ab0:	bb44      	cbnz	r4, 8006b04 <_malloc_r+0x88>
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff ffbf 	bl	8006a38 <sbrk_aligned>
 8006aba:	1c43      	adds	r3, r0, #1
 8006abc:	4604      	mov	r4, r0
 8006abe:	d158      	bne.n	8006b72 <_malloc_r+0xf6>
 8006ac0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac4:	4627      	mov	r7, r4
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d143      	bne.n	8006b52 <_malloc_r+0xd6>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	d04b      	beq.n	8006b66 <_malloc_r+0xea>
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	eb04 0903 	add.w	r9, r4, r3
 8006ad8:	f000 fb5a 	bl	8007190 <_sbrk_r>
 8006adc:	4581      	cmp	r9, r0
 8006ade:	d142      	bne.n	8006b66 <_malloc_r+0xea>
 8006ae0:	6821      	ldr	r1, [r4, #0]
 8006ae2:	1a6d      	subs	r5, r5, r1
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f7ff ffa6 	bl	8006a38 <sbrk_aligned>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d03a      	beq.n	8006b66 <_malloc_r+0xea>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	442b      	add	r3, r5
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	f8d8 3000 	ldr.w	r3, [r8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	bb62      	cbnz	r2, 8006b58 <_malloc_r+0xdc>
 8006afe:	f8c8 7000 	str.w	r7, [r8]
 8006b02:	e00f      	b.n	8006b24 <_malloc_r+0xa8>
 8006b04:	6822      	ldr	r2, [r4, #0]
 8006b06:	1b52      	subs	r2, r2, r5
 8006b08:	d420      	bmi.n	8006b4c <_malloc_r+0xd0>
 8006b0a:	2a0b      	cmp	r2, #11
 8006b0c:	d917      	bls.n	8006b3e <_malloc_r+0xc2>
 8006b0e:	1961      	adds	r1, r4, r5
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	6025      	str	r5, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	6059      	strne	r1, [r3, #4]
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	bf08      	it	eq
 8006b1c:	f8c8 1000 	streq.w	r1, [r8]
 8006b20:	5162      	str	r2, [r4, r5]
 8006b22:	604b      	str	r3, [r1, #4]
 8006b24:	4630      	mov	r0, r6
 8006b26:	f000 f82f 	bl	8006b88 <__malloc_unlock>
 8006b2a:	f104 000b 	add.w	r0, r4, #11
 8006b2e:	1d23      	adds	r3, r4, #4
 8006b30:	f020 0007 	bic.w	r0, r0, #7
 8006b34:	1ac2      	subs	r2, r0, r3
 8006b36:	bf1c      	itt	ne
 8006b38:	1a1b      	subne	r3, r3, r0
 8006b3a:	50a3      	strne	r3, [r4, r2]
 8006b3c:	e7af      	b.n	8006a9e <_malloc_r+0x22>
 8006b3e:	6862      	ldr	r2, [r4, #4]
 8006b40:	42a3      	cmp	r3, r4
 8006b42:	bf0c      	ite	eq
 8006b44:	f8c8 2000 	streq.w	r2, [r8]
 8006b48:	605a      	strne	r2, [r3, #4]
 8006b4a:	e7eb      	b.n	8006b24 <_malloc_r+0xa8>
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	6864      	ldr	r4, [r4, #4]
 8006b50:	e7ae      	b.n	8006ab0 <_malloc_r+0x34>
 8006b52:	463c      	mov	r4, r7
 8006b54:	687f      	ldr	r7, [r7, #4]
 8006b56:	e7b6      	b.n	8006ac6 <_malloc_r+0x4a>
 8006b58:	461a      	mov	r2, r3
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	d1fb      	bne.n	8006b58 <_malloc_r+0xdc>
 8006b60:	2300      	movs	r3, #0
 8006b62:	6053      	str	r3, [r2, #4]
 8006b64:	e7de      	b.n	8006b24 <_malloc_r+0xa8>
 8006b66:	230c      	movs	r3, #12
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f000 f80c 	bl	8006b88 <__malloc_unlock>
 8006b70:	e794      	b.n	8006a9c <_malloc_r+0x20>
 8006b72:	6005      	str	r5, [r0, #0]
 8006b74:	e7d6      	b.n	8006b24 <_malloc_r+0xa8>
 8006b76:	bf00      	nop
 8006b78:	20000414 	.word	0x20000414

08006b7c <__malloc_lock>:
 8006b7c:	4801      	ldr	r0, [pc, #4]	@ (8006b84 <__malloc_lock+0x8>)
 8006b7e:	f7ff bf0f 	b.w	80069a0 <__retarget_lock_acquire_recursive>
 8006b82:	bf00      	nop
 8006b84:	2000040c 	.word	0x2000040c

08006b88 <__malloc_unlock>:
 8006b88:	4801      	ldr	r0, [pc, #4]	@ (8006b90 <__malloc_unlock+0x8>)
 8006b8a:	f7ff bf0a 	b.w	80069a2 <__retarget_lock_release_recursive>
 8006b8e:	bf00      	nop
 8006b90:	2000040c 	.word	0x2000040c

08006b94 <__ssputs_r>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	688e      	ldr	r6, [r1, #8]
 8006b9a:	461f      	mov	r7, r3
 8006b9c:	42be      	cmp	r6, r7
 8006b9e:	680b      	ldr	r3, [r1, #0]
 8006ba0:	4682      	mov	sl, r0
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	4690      	mov	r8, r2
 8006ba6:	d82d      	bhi.n	8006c04 <__ssputs_r+0x70>
 8006ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bb0:	d026      	beq.n	8006c00 <__ssputs_r+0x6c>
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	6909      	ldr	r1, [r1, #16]
 8006bb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bba:	eba3 0901 	sub.w	r9, r3, r1
 8006bbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bc2:	1c7b      	adds	r3, r7, #1
 8006bc4:	444b      	add	r3, r9
 8006bc6:	106d      	asrs	r5, r5, #1
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	bf38      	it	cc
 8006bcc:	461d      	movcc	r5, r3
 8006bce:	0553      	lsls	r3, r2, #21
 8006bd0:	d527      	bpl.n	8006c22 <__ssputs_r+0x8e>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	f7ff ff52 	bl	8006a7c <_malloc_r>
 8006bd8:	4606      	mov	r6, r0
 8006bda:	b360      	cbz	r0, 8006c36 <__ssputs_r+0xa2>
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	464a      	mov	r2, r9
 8006be0:	f000 fae6 	bl	80071b0 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	6165      	str	r5, [r4, #20]
 8006bf4:	444e      	add	r6, r9
 8006bf6:	eba5 0509 	sub.w	r5, r5, r9
 8006bfa:	6026      	str	r6, [r4, #0]
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	463e      	mov	r6, r7
 8006c00:	42be      	cmp	r6, r7
 8006c02:	d900      	bls.n	8006c06 <__ssputs_r+0x72>
 8006c04:	463e      	mov	r6, r7
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	4632      	mov	r2, r6
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	f000 faa6 	bl	800715c <memmove>
 8006c10:	68a3      	ldr	r3, [r4, #8]
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	4433      	add	r3, r6
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	462a      	mov	r2, r5
 8006c24:	f000 fad2 	bl	80071cc <_realloc_r>
 8006c28:	4606      	mov	r6, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d1e0      	bne.n	8006bf0 <__ssputs_r+0x5c>
 8006c2e:	6921      	ldr	r1, [r4, #16]
 8006c30:	4650      	mov	r0, sl
 8006c32:	f7ff feb7 	bl	80069a4 <_free_r>
 8006c36:	230c      	movs	r3, #12
 8006c38:	f8ca 3000 	str.w	r3, [sl]
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e7e9      	b.n	8006c1e <__ssputs_r+0x8a>
	...

08006c4c <_svfiprintf_r>:
 8006c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c50:	4698      	mov	r8, r3
 8006c52:	898b      	ldrh	r3, [r1, #12]
 8006c54:	061b      	lsls	r3, r3, #24
 8006c56:	b09d      	sub	sp, #116	@ 0x74
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	d510      	bpl.n	8006c82 <_svfiprintf_r+0x36>
 8006c60:	690b      	ldr	r3, [r1, #16]
 8006c62:	b973      	cbnz	r3, 8006c82 <_svfiprintf_r+0x36>
 8006c64:	2140      	movs	r1, #64	@ 0x40
 8006c66:	f7ff ff09 	bl	8006a7c <_malloc_r>
 8006c6a:	6028      	str	r0, [r5, #0]
 8006c6c:	6128      	str	r0, [r5, #16]
 8006c6e:	b930      	cbnz	r0, 8006c7e <_svfiprintf_r+0x32>
 8006c70:	230c      	movs	r3, #12
 8006c72:	603b      	str	r3, [r7, #0]
 8006c74:	f04f 30ff 	mov.w	r0, #4294967295
 8006c78:	b01d      	add	sp, #116	@ 0x74
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7e:	2340      	movs	r3, #64	@ 0x40
 8006c80:	616b      	str	r3, [r5, #20]
 8006c82:	2300      	movs	r3, #0
 8006c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c86:	2320      	movs	r3, #32
 8006c88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c90:	2330      	movs	r3, #48	@ 0x30
 8006c92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e30 <_svfiprintf_r+0x1e4>
 8006c96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c9a:	f04f 0901 	mov.w	r9, #1
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca6:	b10a      	cbz	r2, 8006cac <_svfiprintf_r+0x60>
 8006ca8:	2a25      	cmp	r2, #37	@ 0x25
 8006caa:	d1f9      	bne.n	8006ca0 <_svfiprintf_r+0x54>
 8006cac:	ebba 0b04 	subs.w	fp, sl, r4
 8006cb0:	d00b      	beq.n	8006cca <_svfiprintf_r+0x7e>
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4638      	mov	r0, r7
 8006cba:	f7ff ff6b 	bl	8006b94 <__ssputs_r>
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f000 80a7 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc6:	445a      	add	r2, fp
 8006cc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cca:	f89a 3000 	ldrb.w	r3, [sl]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809f 	beq.w	8006e12 <_svfiprintf_r+0x1c6>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cde:	f10a 0a01 	add.w	sl, sl, #1
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cea:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cec:	4654      	mov	r4, sl
 8006cee:	2205      	movs	r2, #5
 8006cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf4:	484e      	ldr	r0, [pc, #312]	@ (8006e30 <_svfiprintf_r+0x1e4>)
 8006cf6:	f7f9 fa73 	bl	80001e0 <memchr>
 8006cfa:	9a04      	ldr	r2, [sp, #16]
 8006cfc:	b9d8      	cbnz	r0, 8006d36 <_svfiprintf_r+0xea>
 8006cfe:	06d0      	lsls	r0, r2, #27
 8006d00:	bf44      	itt	mi
 8006d02:	2320      	movmi	r3, #32
 8006d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d08:	0711      	lsls	r1, r2, #28
 8006d0a:	bf44      	itt	mi
 8006d0c:	232b      	movmi	r3, #43	@ 0x2b
 8006d0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d12:	f89a 3000 	ldrb.w	r3, [sl]
 8006d16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d18:	d015      	beq.n	8006d46 <_svfiprintf_r+0xfa>
 8006d1a:	9a07      	ldr	r2, [sp, #28]
 8006d1c:	4654      	mov	r4, sl
 8006d1e:	2000      	movs	r0, #0
 8006d20:	f04f 0c0a 	mov.w	ip, #10
 8006d24:	4621      	mov	r1, r4
 8006d26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d2a:	3b30      	subs	r3, #48	@ 0x30
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d94b      	bls.n	8006dc8 <_svfiprintf_r+0x17c>
 8006d30:	b1b0      	cbz	r0, 8006d60 <_svfiprintf_r+0x114>
 8006d32:	9207      	str	r2, [sp, #28]
 8006d34:	e014      	b.n	8006d60 <_svfiprintf_r+0x114>
 8006d36:	eba0 0308 	sub.w	r3, r0, r8
 8006d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	9304      	str	r3, [sp, #16]
 8006d42:	46a2      	mov	sl, r4
 8006d44:	e7d2      	b.n	8006cec <_svfiprintf_r+0xa0>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d19      	adds	r1, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9103      	str	r1, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfbb      	ittet	lt
 8006d52:	425b      	neglt	r3, r3
 8006d54:	f042 0202 	orrlt.w	r2, r2, #2
 8006d58:	9307      	strge	r3, [sp, #28]
 8006d5a:	9307      	strlt	r3, [sp, #28]
 8006d5c:	bfb8      	it	lt
 8006d5e:	9204      	strlt	r2, [sp, #16]
 8006d60:	7823      	ldrb	r3, [r4, #0]
 8006d62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d64:	d10a      	bne.n	8006d7c <_svfiprintf_r+0x130>
 8006d66:	7863      	ldrb	r3, [r4, #1]
 8006d68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d6a:	d132      	bne.n	8006dd2 <_svfiprintf_r+0x186>
 8006d6c:	9b03      	ldr	r3, [sp, #12]
 8006d6e:	1d1a      	adds	r2, r3, #4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	9203      	str	r2, [sp, #12]
 8006d74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d78:	3402      	adds	r4, #2
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e40 <_svfiprintf_r+0x1f4>
 8006d80:	7821      	ldrb	r1, [r4, #0]
 8006d82:	2203      	movs	r2, #3
 8006d84:	4650      	mov	r0, sl
 8006d86:	f7f9 fa2b 	bl	80001e0 <memchr>
 8006d8a:	b138      	cbz	r0, 8006d9c <_svfiprintf_r+0x150>
 8006d8c:	9b04      	ldr	r3, [sp, #16]
 8006d8e:	eba0 000a 	sub.w	r0, r0, sl
 8006d92:	2240      	movs	r2, #64	@ 0x40
 8006d94:	4082      	lsls	r2, r0
 8006d96:	4313      	orrs	r3, r2
 8006d98:	3401      	adds	r4, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da0:	4824      	ldr	r0, [pc, #144]	@ (8006e34 <_svfiprintf_r+0x1e8>)
 8006da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da6:	2206      	movs	r2, #6
 8006da8:	f7f9 fa1a 	bl	80001e0 <memchr>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d036      	beq.n	8006e1e <_svfiprintf_r+0x1d2>
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <_svfiprintf_r+0x1ec>)
 8006db2:	bb1b      	cbnz	r3, 8006dfc <_svfiprintf_r+0x1b0>
 8006db4:	9b03      	ldr	r3, [sp, #12]
 8006db6:	3307      	adds	r3, #7
 8006db8:	f023 0307 	bic.w	r3, r3, #7
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc2:	4433      	add	r3, r6
 8006dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc6:	e76a      	b.n	8006c9e <_svfiprintf_r+0x52>
 8006dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dcc:	460c      	mov	r4, r1
 8006dce:	2001      	movs	r0, #1
 8006dd0:	e7a8      	b.n	8006d24 <_svfiprintf_r+0xd8>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	9305      	str	r3, [sp, #20]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	f04f 0c0a 	mov.w	ip, #10
 8006dde:	4620      	mov	r0, r4
 8006de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de4:	3a30      	subs	r2, #48	@ 0x30
 8006de6:	2a09      	cmp	r2, #9
 8006de8:	d903      	bls.n	8006df2 <_svfiprintf_r+0x1a6>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0c6      	beq.n	8006d7c <_svfiprintf_r+0x130>
 8006dee:	9105      	str	r1, [sp, #20]
 8006df0:	e7c4      	b.n	8006d7c <_svfiprintf_r+0x130>
 8006df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df6:	4604      	mov	r4, r0
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e7f0      	b.n	8006dde <_svfiprintf_r+0x192>
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	462a      	mov	r2, r5
 8006e02:	4b0e      	ldr	r3, [pc, #56]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4638      	mov	r0, r7
 8006e08:	f3af 8000 	nop.w
 8006e0c:	1c42      	adds	r2, r0, #1
 8006e0e:	4606      	mov	r6, r0
 8006e10:	d1d6      	bne.n	8006dc0 <_svfiprintf_r+0x174>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	065b      	lsls	r3, r3, #25
 8006e16:	f53f af2d 	bmi.w	8006c74 <_svfiprintf_r+0x28>
 8006e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e1c:	e72c      	b.n	8006c78 <_svfiprintf_r+0x2c>
 8006e1e:	ab03      	add	r3, sp, #12
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	462a      	mov	r2, r5
 8006e24:	4b05      	ldr	r3, [pc, #20]	@ (8006e3c <_svfiprintf_r+0x1f0>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f000 f879 	bl	8006f20 <_printf_i>
 8006e2e:	e7ed      	b.n	8006e0c <_svfiprintf_r+0x1c0>
 8006e30:	080072b4 	.word	0x080072b4
 8006e34:	080072be 	.word	0x080072be
 8006e38:	00000000 	.word	0x00000000
 8006e3c:	08006b95 	.word	0x08006b95
 8006e40:	080072ba 	.word	0x080072ba

08006e44 <_printf_common>:
 8006e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	4616      	mov	r6, r2
 8006e4a:	4698      	mov	r8, r3
 8006e4c:	688a      	ldr	r2, [r1, #8]
 8006e4e:	690b      	ldr	r3, [r1, #16]
 8006e50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e54:	4293      	cmp	r3, r2
 8006e56:	bfb8      	it	lt
 8006e58:	4613      	movlt	r3, r2
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e60:	4607      	mov	r7, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b10a      	cbz	r2, 8006e6a <_printf_common+0x26>
 8006e66:	3301      	adds	r3, #1
 8006e68:	6033      	str	r3, [r6, #0]
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	0699      	lsls	r1, r3, #26
 8006e6e:	bf42      	ittt	mi
 8006e70:	6833      	ldrmi	r3, [r6, #0]
 8006e72:	3302      	addmi	r3, #2
 8006e74:	6033      	strmi	r3, [r6, #0]
 8006e76:	6825      	ldr	r5, [r4, #0]
 8006e78:	f015 0506 	ands.w	r5, r5, #6
 8006e7c:	d106      	bne.n	8006e8c <_printf_common+0x48>
 8006e7e:	f104 0a19 	add.w	sl, r4, #25
 8006e82:	68e3      	ldr	r3, [r4, #12]
 8006e84:	6832      	ldr	r2, [r6, #0]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	42ab      	cmp	r3, r5
 8006e8a:	dc26      	bgt.n	8006eda <_printf_common+0x96>
 8006e8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e90:	6822      	ldr	r2, [r4, #0]
 8006e92:	3b00      	subs	r3, #0
 8006e94:	bf18      	it	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	0692      	lsls	r2, r2, #26
 8006e9a:	d42b      	bmi.n	8006ef4 <_printf_common+0xb0>
 8006e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea0:	4641      	mov	r1, r8
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	47c8      	blx	r9
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d01e      	beq.n	8006ee8 <_printf_common+0xa4>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	6922      	ldr	r2, [r4, #16]
 8006eae:	f003 0306 	and.w	r3, r3, #6
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	bf02      	ittt	eq
 8006eb6:	68e5      	ldreq	r5, [r4, #12]
 8006eb8:	6833      	ldreq	r3, [r6, #0]
 8006eba:	1aed      	subeq	r5, r5, r3
 8006ebc:	68a3      	ldr	r3, [r4, #8]
 8006ebe:	bf0c      	ite	eq
 8006ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec4:	2500      	movne	r5, #0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfc4      	itt	gt
 8006eca:	1a9b      	subgt	r3, r3, r2
 8006ecc:	18ed      	addgt	r5, r5, r3
 8006ece:	2600      	movs	r6, #0
 8006ed0:	341a      	adds	r4, #26
 8006ed2:	42b5      	cmp	r5, r6
 8006ed4:	d11a      	bne.n	8006f0c <_printf_common+0xc8>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e008      	b.n	8006eec <_printf_common+0xa8>
 8006eda:	2301      	movs	r3, #1
 8006edc:	4652      	mov	r2, sl
 8006ede:	4641      	mov	r1, r8
 8006ee0:	4638      	mov	r0, r7
 8006ee2:	47c8      	blx	r9
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	d103      	bne.n	8006ef0 <_printf_common+0xac>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	e7c6      	b.n	8006e82 <_printf_common+0x3e>
 8006ef4:	18e1      	adds	r1, r4, r3
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	2030      	movs	r0, #48	@ 0x30
 8006efa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006efe:	4422      	add	r2, r4
 8006f00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f08:	3302      	adds	r3, #2
 8006f0a:	e7c7      	b.n	8006e9c <_printf_common+0x58>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4622      	mov	r2, r4
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	47c8      	blx	r9
 8006f16:	3001      	adds	r0, #1
 8006f18:	d0e6      	beq.n	8006ee8 <_printf_common+0xa4>
 8006f1a:	3601      	adds	r6, #1
 8006f1c:	e7d9      	b.n	8006ed2 <_printf_common+0x8e>
	...

08006f20 <_printf_i>:
 8006f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f24:	7e0f      	ldrb	r7, [r1, #24]
 8006f26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f28:	2f78      	cmp	r7, #120	@ 0x78
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	469a      	mov	sl, r3
 8006f32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f36:	d807      	bhi.n	8006f48 <_printf_i+0x28>
 8006f38:	2f62      	cmp	r7, #98	@ 0x62
 8006f3a:	d80a      	bhi.n	8006f52 <_printf_i+0x32>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	f000 80d1 	beq.w	80070e4 <_printf_i+0x1c4>
 8006f42:	2f58      	cmp	r7, #88	@ 0x58
 8006f44:	f000 80b8 	beq.w	80070b8 <_printf_i+0x198>
 8006f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f50:	e03a      	b.n	8006fc8 <_printf_i+0xa8>
 8006f52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f56:	2b15      	cmp	r3, #21
 8006f58:	d8f6      	bhi.n	8006f48 <_printf_i+0x28>
 8006f5a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f60 <_printf_i+0x40>)
 8006f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f60:	08006fb9 	.word	0x08006fb9
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006f49 	.word	0x08006f49
 8006f6c:	08006f49 	.word	0x08006f49
 8006f70:	08006f49 	.word	0x08006f49
 8006f74:	08006f49 	.word	0x08006f49
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006f49 	.word	0x08006f49
 8006f80:	08006f49 	.word	0x08006f49
 8006f84:	08006f49 	.word	0x08006f49
 8006f88:	08006f49 	.word	0x08006f49
 8006f8c:	080070cb 	.word	0x080070cb
 8006f90:	08006ff7 	.word	0x08006ff7
 8006f94:	08007085 	.word	0x08007085
 8006f98:	08006f49 	.word	0x08006f49
 8006f9c:	08006f49 	.word	0x08006f49
 8006fa0:	080070ed 	.word	0x080070ed
 8006fa4:	08006f49 	.word	0x08006f49
 8006fa8:	08006ff7 	.word	0x08006ff7
 8006fac:	08006f49 	.word	0x08006f49
 8006fb0:	08006f49 	.word	0x08006f49
 8006fb4:	0800708d 	.word	0x0800708d
 8006fb8:	6833      	ldr	r3, [r6, #0]
 8006fba:	1d1a      	adds	r2, r3, #4
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6032      	str	r2, [r6, #0]
 8006fc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e09c      	b.n	8007106 <_printf_i+0x1e6>
 8006fcc:	6833      	ldr	r3, [r6, #0]
 8006fce:	6820      	ldr	r0, [r4, #0]
 8006fd0:	1d19      	adds	r1, r3, #4
 8006fd2:	6031      	str	r1, [r6, #0]
 8006fd4:	0606      	lsls	r6, r0, #24
 8006fd6:	d501      	bpl.n	8006fdc <_printf_i+0xbc>
 8006fd8:	681d      	ldr	r5, [r3, #0]
 8006fda:	e003      	b.n	8006fe4 <_printf_i+0xc4>
 8006fdc:	0645      	lsls	r5, r0, #25
 8006fde:	d5fb      	bpl.n	8006fd8 <_printf_i+0xb8>
 8006fe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe4:	2d00      	cmp	r5, #0
 8006fe6:	da03      	bge.n	8006ff0 <_printf_i+0xd0>
 8006fe8:	232d      	movs	r3, #45	@ 0x2d
 8006fea:	426d      	negs	r5, r5
 8006fec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff0:	4858      	ldr	r0, [pc, #352]	@ (8007154 <_printf_i+0x234>)
 8006ff2:	230a      	movs	r3, #10
 8006ff4:	e011      	b.n	800701a <_printf_i+0xfa>
 8006ff6:	6821      	ldr	r1, [r4, #0]
 8006ff8:	6833      	ldr	r3, [r6, #0]
 8006ffa:	0608      	lsls	r0, r1, #24
 8006ffc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007000:	d402      	bmi.n	8007008 <_printf_i+0xe8>
 8007002:	0649      	lsls	r1, r1, #25
 8007004:	bf48      	it	mi
 8007006:	b2ad      	uxthmi	r5, r5
 8007008:	2f6f      	cmp	r7, #111	@ 0x6f
 800700a:	4852      	ldr	r0, [pc, #328]	@ (8007154 <_printf_i+0x234>)
 800700c:	6033      	str	r3, [r6, #0]
 800700e:	bf14      	ite	ne
 8007010:	230a      	movne	r3, #10
 8007012:	2308      	moveq	r3, #8
 8007014:	2100      	movs	r1, #0
 8007016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800701a:	6866      	ldr	r6, [r4, #4]
 800701c:	60a6      	str	r6, [r4, #8]
 800701e:	2e00      	cmp	r6, #0
 8007020:	db05      	blt.n	800702e <_printf_i+0x10e>
 8007022:	6821      	ldr	r1, [r4, #0]
 8007024:	432e      	orrs	r6, r5
 8007026:	f021 0104 	bic.w	r1, r1, #4
 800702a:	6021      	str	r1, [r4, #0]
 800702c:	d04b      	beq.n	80070c6 <_printf_i+0x1a6>
 800702e:	4616      	mov	r6, r2
 8007030:	fbb5 f1f3 	udiv	r1, r5, r3
 8007034:	fb03 5711 	mls	r7, r3, r1, r5
 8007038:	5dc7      	ldrb	r7, [r0, r7]
 800703a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800703e:	462f      	mov	r7, r5
 8007040:	42bb      	cmp	r3, r7
 8007042:	460d      	mov	r5, r1
 8007044:	d9f4      	bls.n	8007030 <_printf_i+0x110>
 8007046:	2b08      	cmp	r3, #8
 8007048:	d10b      	bne.n	8007062 <_printf_i+0x142>
 800704a:	6823      	ldr	r3, [r4, #0]
 800704c:	07df      	lsls	r7, r3, #31
 800704e:	d508      	bpl.n	8007062 <_printf_i+0x142>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	6861      	ldr	r1, [r4, #4]
 8007054:	4299      	cmp	r1, r3
 8007056:	bfde      	ittt	le
 8007058:	2330      	movle	r3, #48	@ 0x30
 800705a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800705e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007062:	1b92      	subs	r2, r2, r6
 8007064:	6122      	str	r2, [r4, #16]
 8007066:	f8cd a000 	str.w	sl, [sp]
 800706a:	464b      	mov	r3, r9
 800706c:	aa03      	add	r2, sp, #12
 800706e:	4621      	mov	r1, r4
 8007070:	4640      	mov	r0, r8
 8007072:	f7ff fee7 	bl	8006e44 <_printf_common>
 8007076:	3001      	adds	r0, #1
 8007078:	d14a      	bne.n	8007110 <_printf_i+0x1f0>
 800707a:	f04f 30ff 	mov.w	r0, #4294967295
 800707e:	b004      	add	sp, #16
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	f043 0320 	orr.w	r3, r3, #32
 800708a:	6023      	str	r3, [r4, #0]
 800708c:	4832      	ldr	r0, [pc, #200]	@ (8007158 <_printf_i+0x238>)
 800708e:	2778      	movs	r7, #120	@ 0x78
 8007090:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	6831      	ldr	r1, [r6, #0]
 8007098:	061f      	lsls	r7, r3, #24
 800709a:	f851 5b04 	ldr.w	r5, [r1], #4
 800709e:	d402      	bmi.n	80070a6 <_printf_i+0x186>
 80070a0:	065f      	lsls	r7, r3, #25
 80070a2:	bf48      	it	mi
 80070a4:	b2ad      	uxthmi	r5, r5
 80070a6:	6031      	str	r1, [r6, #0]
 80070a8:	07d9      	lsls	r1, r3, #31
 80070aa:	bf44      	itt	mi
 80070ac:	f043 0320 	orrmi.w	r3, r3, #32
 80070b0:	6023      	strmi	r3, [r4, #0]
 80070b2:	b11d      	cbz	r5, 80070bc <_printf_i+0x19c>
 80070b4:	2310      	movs	r3, #16
 80070b6:	e7ad      	b.n	8007014 <_printf_i+0xf4>
 80070b8:	4826      	ldr	r0, [pc, #152]	@ (8007154 <_printf_i+0x234>)
 80070ba:	e7e9      	b.n	8007090 <_printf_i+0x170>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	f023 0320 	bic.w	r3, r3, #32
 80070c2:	6023      	str	r3, [r4, #0]
 80070c4:	e7f6      	b.n	80070b4 <_printf_i+0x194>
 80070c6:	4616      	mov	r6, r2
 80070c8:	e7bd      	b.n	8007046 <_printf_i+0x126>
 80070ca:	6833      	ldr	r3, [r6, #0]
 80070cc:	6825      	ldr	r5, [r4, #0]
 80070ce:	6961      	ldr	r1, [r4, #20]
 80070d0:	1d18      	adds	r0, r3, #4
 80070d2:	6030      	str	r0, [r6, #0]
 80070d4:	062e      	lsls	r6, r5, #24
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	d501      	bpl.n	80070de <_printf_i+0x1be>
 80070da:	6019      	str	r1, [r3, #0]
 80070dc:	e002      	b.n	80070e4 <_printf_i+0x1c4>
 80070de:	0668      	lsls	r0, r5, #25
 80070e0:	d5fb      	bpl.n	80070da <_printf_i+0x1ba>
 80070e2:	8019      	strh	r1, [r3, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	4616      	mov	r6, r2
 80070ea:	e7bc      	b.n	8007066 <_printf_i+0x146>
 80070ec:	6833      	ldr	r3, [r6, #0]
 80070ee:	1d1a      	adds	r2, r3, #4
 80070f0:	6032      	str	r2, [r6, #0]
 80070f2:	681e      	ldr	r6, [r3, #0]
 80070f4:	6862      	ldr	r2, [r4, #4]
 80070f6:	2100      	movs	r1, #0
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7f9 f871 	bl	80001e0 <memchr>
 80070fe:	b108      	cbz	r0, 8007104 <_printf_i+0x1e4>
 8007100:	1b80      	subs	r0, r0, r6
 8007102:	6060      	str	r0, [r4, #4]
 8007104:	6863      	ldr	r3, [r4, #4]
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	2300      	movs	r3, #0
 800710a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800710e:	e7aa      	b.n	8007066 <_printf_i+0x146>
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	4632      	mov	r2, r6
 8007114:	4649      	mov	r1, r9
 8007116:	4640      	mov	r0, r8
 8007118:	47d0      	blx	sl
 800711a:	3001      	adds	r0, #1
 800711c:	d0ad      	beq.n	800707a <_printf_i+0x15a>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	079b      	lsls	r3, r3, #30
 8007122:	d413      	bmi.n	800714c <_printf_i+0x22c>
 8007124:	68e0      	ldr	r0, [r4, #12]
 8007126:	9b03      	ldr	r3, [sp, #12]
 8007128:	4298      	cmp	r0, r3
 800712a:	bfb8      	it	lt
 800712c:	4618      	movlt	r0, r3
 800712e:	e7a6      	b.n	800707e <_printf_i+0x15e>
 8007130:	2301      	movs	r3, #1
 8007132:	4632      	mov	r2, r6
 8007134:	4649      	mov	r1, r9
 8007136:	4640      	mov	r0, r8
 8007138:	47d0      	blx	sl
 800713a:	3001      	adds	r0, #1
 800713c:	d09d      	beq.n	800707a <_printf_i+0x15a>
 800713e:	3501      	adds	r5, #1
 8007140:	68e3      	ldr	r3, [r4, #12]
 8007142:	9903      	ldr	r1, [sp, #12]
 8007144:	1a5b      	subs	r3, r3, r1
 8007146:	42ab      	cmp	r3, r5
 8007148:	dcf2      	bgt.n	8007130 <_printf_i+0x210>
 800714a:	e7eb      	b.n	8007124 <_printf_i+0x204>
 800714c:	2500      	movs	r5, #0
 800714e:	f104 0619 	add.w	r6, r4, #25
 8007152:	e7f5      	b.n	8007140 <_printf_i+0x220>
 8007154:	080072c5 	.word	0x080072c5
 8007158:	080072d6 	.word	0x080072d6

0800715c <memmove>:
 800715c:	4288      	cmp	r0, r1
 800715e:	b510      	push	{r4, lr}
 8007160:	eb01 0402 	add.w	r4, r1, r2
 8007164:	d902      	bls.n	800716c <memmove+0x10>
 8007166:	4284      	cmp	r4, r0
 8007168:	4623      	mov	r3, r4
 800716a:	d807      	bhi.n	800717c <memmove+0x20>
 800716c:	1e43      	subs	r3, r0, #1
 800716e:	42a1      	cmp	r1, r4
 8007170:	d008      	beq.n	8007184 <memmove+0x28>
 8007172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800717a:	e7f8      	b.n	800716e <memmove+0x12>
 800717c:	4402      	add	r2, r0
 800717e:	4601      	mov	r1, r0
 8007180:	428a      	cmp	r2, r1
 8007182:	d100      	bne.n	8007186 <memmove+0x2a>
 8007184:	bd10      	pop	{r4, pc}
 8007186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800718a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800718e:	e7f7      	b.n	8007180 <memmove+0x24>

08007190 <_sbrk_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4d06      	ldr	r5, [pc, #24]	@ (80071ac <_sbrk_r+0x1c>)
 8007194:	2300      	movs	r3, #0
 8007196:	4604      	mov	r4, r0
 8007198:	4608      	mov	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7fb fc6c 	bl	8002a78 <_sbrk>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d102      	bne.n	80071aa <_sbrk_r+0x1a>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	b103      	cbz	r3, 80071aa <_sbrk_r+0x1a>
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	bd38      	pop	{r3, r4, r5, pc}
 80071ac:	20000408 	.word	0x20000408

080071b0 <memcpy>:
 80071b0:	440a      	add	r2, r1
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b8:	d100      	bne.n	80071bc <memcpy+0xc>
 80071ba:	4770      	bx	lr
 80071bc:	b510      	push	{r4, lr}
 80071be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c6:	4291      	cmp	r1, r2
 80071c8:	d1f9      	bne.n	80071be <memcpy+0xe>
 80071ca:	bd10      	pop	{r4, pc}

080071cc <_realloc_r>:
 80071cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d0:	4607      	mov	r7, r0
 80071d2:	4614      	mov	r4, r2
 80071d4:	460d      	mov	r5, r1
 80071d6:	b921      	cbnz	r1, 80071e2 <_realloc_r+0x16>
 80071d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071dc:	4611      	mov	r1, r2
 80071de:	f7ff bc4d 	b.w	8006a7c <_malloc_r>
 80071e2:	b92a      	cbnz	r2, 80071f0 <_realloc_r+0x24>
 80071e4:	f7ff fbde 	bl	80069a4 <_free_r>
 80071e8:	4625      	mov	r5, r4
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	f000 f81a 	bl	8007228 <_malloc_usable_size_r>
 80071f4:	4284      	cmp	r4, r0
 80071f6:	4606      	mov	r6, r0
 80071f8:	d802      	bhi.n	8007200 <_realloc_r+0x34>
 80071fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071fe:	d8f4      	bhi.n	80071ea <_realloc_r+0x1e>
 8007200:	4621      	mov	r1, r4
 8007202:	4638      	mov	r0, r7
 8007204:	f7ff fc3a 	bl	8006a7c <_malloc_r>
 8007208:	4680      	mov	r8, r0
 800720a:	b908      	cbnz	r0, 8007210 <_realloc_r+0x44>
 800720c:	4645      	mov	r5, r8
 800720e:	e7ec      	b.n	80071ea <_realloc_r+0x1e>
 8007210:	42b4      	cmp	r4, r6
 8007212:	4622      	mov	r2, r4
 8007214:	4629      	mov	r1, r5
 8007216:	bf28      	it	cs
 8007218:	4632      	movcs	r2, r6
 800721a:	f7ff ffc9 	bl	80071b0 <memcpy>
 800721e:	4629      	mov	r1, r5
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff fbbf 	bl	80069a4 <_free_r>
 8007226:	e7f1      	b.n	800720c <_realloc_r+0x40>

08007228 <_malloc_usable_size_r>:
 8007228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722c:	1f18      	subs	r0, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	bfbc      	itt	lt
 8007232:	580b      	ldrlt	r3, [r1, r0]
 8007234:	18c0      	addlt	r0, r0, r3
 8007236:	4770      	bx	lr

08007238 <_init>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr

08007244 <_fini>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr
