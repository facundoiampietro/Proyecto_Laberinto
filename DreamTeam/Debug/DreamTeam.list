
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b54  08004b54  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b54  08004b54  00005b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b5c  08004b5c  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b5c  08004b5c  00005b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b60  08004b60  00005b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004b64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          000001c0  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ab97  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b4d  00000000  00000000  00010bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092c  00000000  00000000  00013300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213c2  00000000  00000000  00013c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d398  00000000  00000000  00034fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2323  00000000  00000000  00042386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001146a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003194  00000000  00000000  001146ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ad  00000000  00000000  00117880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b24 	.word	0x08004b24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004b24 	.word	0x08004b24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f001 fd10 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f930 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fa9a 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 8000504:	f000 fa78 	bl	80009f8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000508:	f000 f994 	bl	8000834 <MX_ADC1_Init>
  MX_TIM3_Init();
 800050c:	f000 f9f2 	bl	80008f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
 8000512:	4986      	ldr	r1, [pc, #536]	@ (800072c <main+0x238>)
 8000514:	4886      	ldr	r0, [pc, #536]	@ (8000730 <main+0x23c>)
 8000516:	f001 fddb 	bl	80020d0 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b86      	ldr	r3, [pc, #536]	@ (8000734 <main+0x240>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b84      	ldr	r3, [pc, #528]	@ (8000734 <main+0x240>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b83      	ldr	r3, [pc, #524]	@ (8000734 <main+0x240>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b82      	ldr	r3, [pc, #520]	@ (8000734 <main+0x240>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b81      	ldr	r3, [pc, #516]	@ (8000734 <main+0x240>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b7f      	ldr	r3, [pc, #508]	@ (8000734 <main+0x240>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b7e      	ldr	r3, [pc, #504]	@ (8000734 <main+0x240>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b7d      	ldr	r3, [pc, #500]	@ (8000734 <main+0x240>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b7c      	ldr	r3, [pc, #496]	@ (8000734 <main+0x240>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b7b      	ldr	r3, [pc, #492]	@ (8000734 <main+0x240>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b7a      	ldr	r3, [pc, #488]	@ (8000734 <main+0x240>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b79      	ldr	r3, [pc, #484]	@ (8000734 <main+0x240>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b78      	ldr	r3, [pc, #480]	@ (8000734 <main+0x240>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b77      	ldr	r3, [pc, #476]	@ (8000734 <main+0x240>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b76      	ldr	r3, [pc, #472]	@ (8000734 <main+0x240>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b75      	ldr	r3, [pc, #468]	@ (8000734 <main+0x240>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b74      	ldr	r3, [pc, #464]	@ (8000734 <main+0x240>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b72      	ldr	r3, [pc, #456]	@ (8000734 <main+0x240>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b71      	ldr	r3, [pc, #452]	@ (8000734 <main+0x240>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b70      	ldr	r3, [pc, #448]	@ (8000734 <main+0x240>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b6f      	ldr	r3, [pc, #444]	@ (8000734 <main+0x240>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b6e      	ldr	r3, [pc, #440]	@ (8000734 <main+0x240>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b6d      	ldr	r3, [pc, #436]	@ (8000734 <main+0x240>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b6c      	ldr	r3, [pc, #432]	@ (8000734 <main+0x240>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b6b      	ldr	r3, [pc, #428]	@ (8000734 <main+0x240>)
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
 800058c:	4b6a      	ldr	r3, [pc, #424]	@ (8000738 <main+0x244>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b69      	ldr	r3, [pc, #420]	@ (8000738 <main+0x244>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b67      	ldr	r3, [pc, #412]	@ (8000738 <main+0x244>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b66      	ldr	r3, [pc, #408]	@ (8000738 <main+0x244>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b65      	ldr	r3, [pc, #404]	@ (8000738 <main+0x244>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b64      	ldr	r3, [pc, #400]	@ (8000738 <main+0x244>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b62      	ldr	r3, [pc, #392]	@ (8000738 <main+0x244>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b61      	ldr	r3, [pc, #388]	@ (8000738 <main+0x244>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b60      	ldr	r3, [pc, #384]	@ (8000738 <main+0x244>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000738 <main+0x244>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b5d      	ldr	r3, [pc, #372]	@ (8000738 <main+0x244>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b5c      	ldr	r3, [pc, #368]	@ (8000738 <main+0x244>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b5b      	ldr	r3, [pc, #364]	@ (8000738 <main+0x244>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b5a      	ldr	r3, [pc, #360]	@ (8000738 <main+0x244>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b58      	ldr	r3, [pc, #352]	@ (8000738 <main+0x244>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b57      	ldr	r3, [pc, #348]	@ (8000738 <main+0x244>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b56      	ldr	r3, [pc, #344]	@ (8000738 <main+0x244>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b55      	ldr	r3, [pc, #340]	@ (8000738 <main+0x244>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b54      	ldr	r3, [pc, #336]	@ (8000738 <main+0x244>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b53      	ldr	r3, [pc, #332]	@ (8000738 <main+0x244>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b52      	ldr	r3, [pc, #328]	@ (8000738 <main+0x244>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b51      	ldr	r3, [pc, #324]	@ (8000738 <main+0x244>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b50      	ldr	r3, [pc, #320]	@ (8000738 <main+0x244>)
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000600:	484e      	ldr	r0, [pc, #312]	@ (800073c <main+0x248>)
 8000602:	f002 ff59 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	484b      	ldr	r0, [pc, #300]	@ (800073c <main+0x248>)
 800060e:	f002 ff53 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4848      	ldr	r0, [pc, #288]	@ (800073c <main+0x248>)
 800061a:	f002 ff4d 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4845      	ldr	r0, [pc, #276]	@ (800073c <main+0x248>)
 8000626:	f002 ff47 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	4844      	ldr	r0, [pc, #272]	@ (8000740 <main+0x24c>)
 800062e:	f003 fc69 	bl	8003f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	4842      	ldr	r0, [pc, #264]	@ (8000740 <main+0x24c>)
 8000636:	f003 fc65 	bl	8003f04 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 800063a:	4b42      	ldr	r3, [pc, #264]	@ (8000744 <main+0x250>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8000642:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <main+0x250>)
 8000644:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 5; //Aca se elige que programa queremos que se realice
 800064a:	4b3f      	ldr	r3, [pc, #252]	@ (8000748 <main+0x254>)
 800064c:	2205      	movs	r2, #5
 800064e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (prueba) {
 8000650:	4b3d      	ldr	r3, [pc, #244]	@ (8000748 <main+0x254>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b65      	cmp	r3, #101	@ 0x65
 8000656:	d063      	beq.n	8000720 <main+0x22c>
 8000658:	2b65      	cmp	r3, #101	@ 0x65
 800065a:	dcf9      	bgt.n	8000650 <main+0x15c>
 800065c:	2b0a      	cmp	r3, #10
 800065e:	dc1d      	bgt.n	800069c <main+0x1a8>
 8000660:	2b00      	cmp	r3, #0
 8000662:	dbf5      	blt.n	8000650 <main+0x15c>
 8000664:	2b0a      	cmp	r3, #10
 8000666:	d8f3      	bhi.n	8000650 <main+0x15c>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <main+0x17c>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	080006a3 	.word	0x080006a3
 8000674:	080006a9 	.word	0x080006a9
 8000678:	08000651 	.word	0x08000651
 800067c:	08000651 	.word	0x08000651
 8000680:	080006af 	.word	0x080006af
 8000684:	080006b5 	.word	0x080006b5
 8000688:	080006bb 	.word	0x080006bb
 800068c:	08000651 	.word	0x08000651
 8000690:	08000651 	.word	0x08000651
 8000694:	08000651 	.word	0x08000651
 8000698:	080006dd 	.word	0x080006dd
 800069c:	2b64      	cmp	r3, #100	@ 0x64
 800069e:	d03c      	beq.n	800071a <main+0x226>
 80006a0:	e7d6      	b.n	8000650 <main+0x15c>

				case 0:
					prueba_avanzar();
 80006a2:	f000 fac3 	bl	8000c2c <prueba_avanzar>
					break;
 80006a6:	e03f      	b.n	8000728 <main+0x234>

				case 1:
					prueba_giros_y_sensores();
 80006a8:	f000 facc 	bl	8000c44 <prueba_giros_y_sensores>
					break;
 80006ac:	e03c      	b.n	8000728 <main+0x234>

				case 4:
					programa_principal();
 80006ae:	f000 fba3 	bl	8000df8 <programa_principal>
					break;
 80006b2:	e039      	b.n	8000728 <main+0x234>

				case 5:
					ajuste_automatico();
 80006b4:	f000 fa5a 	bl	8000b6c <ajuste_automatico>
					break;
 80006b8:	e036      	b.n	8000728 <main+0x234>

				case 6:
					sensor_izq_min = 32700;
 80006ba:	4b24      	ldr	r3, [pc, #144]	@ (800074c <main+0x258>)
 80006bc:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 80006c0:	801a      	strh	r2, [r3, #0]
					sensor_der_min = 32700;
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <main+0x25c>)
 80006c4:	f647 72bc 	movw	r2, #32700	@ 0x7fbc
 80006c8:	801a      	strh	r2, [r3, #0]
					sensor_izq_max = 0;
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <main+0x260>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
					sensor_der_max = 0;
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <main+0x264>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	801a      	strh	r2, [r3, #0]
					prueba = 5;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <main+0x254>)
 80006d8:	2205      	movs	r2, #5
 80006da:	701a      	strb	r2, [r3, #0]
				case 10: {
					TIM3->CCR3 = 0;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <main+0x250>)
 80006de:	2200      	movs	r2, #0
 80006e0:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM3->CCR4 = 0;
 80006e2:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <main+0x250>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	641a      	str	r2, [r3, #64]	@ 0x40
					HAL_GPIO_WritePin(led_verde_GPIO_Port, led_verde_Pin, GPIO_PIN_SET);
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ee:	481b      	ldr	r0, [pc, #108]	@ (800075c <main+0x268>)
 80006f0:	f002 fee2 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_naranja_GPIO_Port, led_naranja_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fa:	4818      	ldr	r0, [pc, #96]	@ (800075c <main+0x268>)
 80006fc:	f002 fedc 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_rojo_GPIO_Port, led_rojo_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <main+0x268>)
 8000708:	f002 fed6 	bl	80034b8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(led_azul_GPIO_Port, led_azul_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000712:	4812      	ldr	r0, [pc, #72]	@ (800075c <main+0x268>)
 8000714:	f002 fed0 	bl	80034b8 <HAL_GPIO_WritePin>

				}
					break;
 8000718:	e006      	b.n	8000728 <main+0x234>
				case 100:
					prueba_casilla_n();
 800071a:	f000 fb0f 	bl	8000d3c <prueba_casilla_n>
					break;
 800071e:	e003      	b.n	8000728 <main+0x234>

				case 101:
					prueba_post_relleno();
 8000720:	f000 fb36 	bl	8000d90 <prueba_post_relleno>
					break;
 8000724:	bf00      	nop
 8000726:	e793      	b.n	8000650 <main+0x15c>
		switch (prueba) {
 8000728:	e792      	b.n	8000650 <main+0x15c>
 800072a:	bf00      	nop
 800072c:	2000014c 	.word	0x2000014c
 8000730:	20000030 	.word	0x20000030
 8000734:	20000124 	.word	0x20000124
 8000738:	20000134 	.word	0x20000134
 800073c:	40020400 	.word	0x40020400
 8000740:	200000d8 	.word	0x200000d8
 8000744:	40000400 	.word	0x40000400
 8000748:	20000145 	.word	0x20000145
 800074c:	20000002 	.word	0x20000002
 8000750:	20000004 	.word	0x20000004
 8000754:	20000148 	.word	0x20000148
 8000758:	2000014a 	.word	0x2000014a
 800075c:	40020c00 	.word	0x40020c00

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	@ 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	@ 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 f9ac 	bl	8004acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b28      	ldr	r3, [pc, #160]	@ (800082c <SystemClock_Config+0xcc>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078c:	4a27      	ldr	r2, [pc, #156]	@ (800082c <SystemClock_Config+0xcc>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	@ 0x40
 8000794:	4b25      	ldr	r3, [pc, #148]	@ (800082c <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <SystemClock_Config+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <SystemClock_Config+0xd0>)
 80007aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000830 <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007d4:	2332      	movs	r3, #50	@ 0x32
 80007d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d8:	2304      	movs	r3, #4
 80007da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007dc:	2307      	movs	r3, #7
 80007de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fe81 	bl	80034ec <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f001 fa1c 	bl	8001c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000800:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f003 f8e2 	bl	80039dc <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800081e:	f001 fa05 	bl	8001c2c <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	@ 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000846:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000848:	4a28      	ldr	r2, [pc, #160]	@ (80008ec <MX_ADC1_Init+0xb8>)
 800084a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800084c:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 800084e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000852:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 800085c:	2201      	movs	r2, #1
 800085e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000862:	2201      	movs	r2, #1
 8000864:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000870:	2200      	movs	r2, #0
 8000872:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000874:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000876:	4a1e      	ldr	r2, [pc, #120]	@ (80008f0 <MX_ADC1_Init+0xbc>)
 8000878:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000882:	2202      	movs	r2, #2
 8000884:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000886:	4b18      	ldr	r3, [pc, #96]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000894:	4814      	ldr	r0, [pc, #80]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 8000896:	f001 fbd7 	bl	8002048 <HAL_ADC_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008a0:	f001 f9c4 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008a4:	2309      	movs	r3, #9
 80008a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 80008b6:	f001 fd29 	bl	800230c <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008c0:	f001 f9b4 	bl	8001c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008c4:	2308      	movs	r3, #8
 80008c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_ADC1_Init+0xb4>)
 80008d2:	f001 fd1b 	bl	800230c <HAL_ADC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80008dc:	f001 f9a6 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000030 	.word	0x20000030
 80008ec:	40012000 	.word	0x40012000
 80008f0:	0f000001 	.word	0x0f000001

080008f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
 8000922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000924:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000926:	4a33      	ldr	r2, [pc, #204]	@ (80009f4 <MX_TIM3_Init+0x100>)
 8000928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800092a:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000930:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8000936:	4b2e      	ldr	r3, [pc, #184]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000938:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b2a      	ldr	r3, [pc, #168]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4829      	ldr	r0, [pc, #164]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 800094c:	f003 fa32 	bl	8003db4 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000956:	f001 f969 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000964:	4619      	mov	r1, r3
 8000966:	4822      	ldr	r0, [pc, #136]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000968:	f003 fc56 	bl	8004218 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000972:	f001 f95b 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000976:	481e      	ldr	r0, [pc, #120]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000978:	f003 fa6b 	bl	8003e52 <HAL_TIM_PWM_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000982:	f001 f953 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	4619      	mov	r1, r3
 8000994:	4816      	ldr	r0, [pc, #88]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 8000996:	f004 f81d 	bl	80049d4 <HAL_TIMEx_MasterConfigSynchronization>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80009a0:	f001 f944 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a4:	2360      	movs	r3, #96	@ 0x60
 80009a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2208      	movs	r2, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 80009bc:	f003 fb6a 	bl	8004094 <HAL_TIM_PWM_ConfigChannel>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80009c6:	f001 f931 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	220c      	movs	r2, #12
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 80009d2:	f003 fb5f 	bl	8004094 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80009dc:	f001 f926 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <MX_TIM3_Init+0xfc>)
 80009e2:	f001 f9eb 	bl	8001dbc <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3738      	adds	r7, #56	@ 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000d8 	.word	0x200000d8
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2038      	movs	r0, #56	@ 0x38
 8000a20:	f001 ffef 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a24:	2038      	movs	r0, #56	@ 0x38
 8000a26:	f002 f808 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b41      	ldr	r3, [pc, #260]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a40      	ldr	r2, [pc, #256]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a39      	ldr	r2, [pc, #228]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <MX_GPIO_Init+0x120>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	4826      	ldr	r0, [pc, #152]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000ac4:	f002 fcf8 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000ace:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <MX_GPIO_Init+0x128>)
 8000ad0:	f002 fcf2 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000ada:	4822      	ldr	r0, [pc, #136]	@ (8000b64 <MX_GPIO_Init+0x12c>)
 8000adc:	f002 fcec 	bl	80034b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4819      	ldr	r0, [pc, #100]	@ (8000b5c <MX_GPIO_Init+0x124>)
 8000af8:	f002 fb2a 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
  GPIO_InitStruct.Pin = m0_izquierda_Pin|m1_izquierda_Pin|m0_derecha_Pin|m1_derecha_Pin;
 8000afc:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <MX_GPIO_Init+0x128>)
 8000b16:	f002 fb1b 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : led_verde_Pin led_naranja_Pin led_rojo_Pin led_azul_Pin */
  GPIO_InitStruct.Pin = led_verde_Pin|led_naranja_Pin|led_rojo_Pin|led_azul_Pin;
 8000b1a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_GPIO_Init+0x12c>)
 8000b34:	f002 fb0c 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
  GPIO_InitStruct.Pin = sensor_frontal_Pin|sensor_linea_Pin;
 8000b38:	23c0      	movs	r3, #192	@ 0xc0
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4807      	ldr	r0, [pc, #28]	@ (8000b68 <MX_GPIO_Init+0x130>)
 8000b4c:	f002 fb00 	bl	8003150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	@ 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020c00 	.word	0x40020c00
 8000b68:	40020800 	.word	0x40020800

08000b6c <ajuste_automatico>:
	if (ubicacion == 0)
		prueba = 10;
	}
}

void ajuste_automatico(void) {
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	if (sensor_der_min == 0 || sensor_izq_min == 0) {
 8000b70:	4b26      	ldr	r3, [pc, #152]	@ (8000c0c <ajuste_automatico+0xa0>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <ajuste_automatico+0x14>
 8000b78:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <ajuste_automatico+0xa4>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <ajuste_automatico+0x24>
		sensor_der_min = 32000;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <ajuste_automatico+0xa0>)
 8000b82:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b86:	801a      	strh	r2, [r3, #0]
		sensor_izq_min = 32000;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <ajuste_automatico+0xa4>)
 8000b8a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000b8e:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_min > sensor_der_avg) {
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <ajuste_automatico+0xa0>)
 8000b92:	881a      	ldrh	r2, [r3, #0]
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <ajuste_automatico+0xa8>)
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d904      	bls.n	8000ba8 <ajuste_automatico+0x3c>
		sensor_der_min = sensor_der_avg;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <ajuste_automatico+0xa8>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <ajuste_automatico+0xa0>)
 8000ba6:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_min > sensor_izq_avg) {
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <ajuste_automatico+0xa4>)
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <ajuste_automatico+0xac>)
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d904      	bls.n	8000bc0 <ajuste_automatico+0x54>
		sensor_izq_min = sensor_izq_avg;
 8000bb6:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <ajuste_automatico+0xac>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <ajuste_automatico+0xa4>)
 8000bbe:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_der_max < sensor_der_avg) {
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <ajuste_automatico+0xb0>)
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <ajuste_automatico+0xa8>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d204      	bcs.n	8000bd8 <ajuste_automatico+0x6c>
		sensor_der_max = sensor_der_avg;
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <ajuste_automatico+0xa8>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <ajuste_automatico+0xb0>)
 8000bd6:	801a      	strh	r2, [r3, #0]
	}
	if (sensor_izq_max < sensor_izq_avg) {
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <ajuste_automatico+0xb4>)
 8000bda:	881a      	ldrh	r2, [r3, #0]
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <ajuste_automatico+0xac>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d204      	bcs.n	8000bf0 <ajuste_automatico+0x84>
		sensor_izq_max = sensor_izq_avg;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <ajuste_automatico+0xac>)
 8000be8:	881b      	ldrh	r3, [r3, #0]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <ajuste_automatico+0xb4>)
 8000bee:	801a      	strh	r2, [r3, #0]
	}
//	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(Boton_GPIO_Port, Boton_Pin)){
	contador_casillas = contador_casillas + 1;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <ajuste_automatico+0xb8>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <ajuste_automatico+0xb8>)
 8000bfa:	701a      	strb	r2, [r3, #0]

	prueba = 4;
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <ajuste_automatico+0xbc>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	701a      	strb	r2, [r3, #0]
	//	}
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000002 	.word	0x20000002
 8000c14:	200001ce 	.word	0x200001ce
 8000c18:	200001cc 	.word	0x200001cc
 8000c1c:	2000014a 	.word	0x2000014a
 8000c20:	20000148 	.word	0x20000148
 8000c24:	20000144 	.word	0x20000144
 8000c28:	20000145 	.word	0x20000145

08000c2c <prueba_avanzar>:

void prueba_avanzar(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	correccion_avanzar(); //codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000c30:	f000 fa7a 	bl	8001128 <correccion_avanzar>
	ejecutarGiro(izquierda);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fb27 	bl	8001288 <ejecutarGiro>
	correccion_avanzar();
 8000c3a:	f000 fa75 	bl	8001128 <correccion_avanzar>
	while (1)
 8000c3e:	bf00      	nop
 8000c40:	e7fd      	b.n	8000c3e <prueba_avanzar+0x12>
	...

08000c44 <prueba_giros_y_sensores>:
		;
}

void prueba_giros_y_sensores(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000c48:	f000 fa6e 	bl	8001128 <correccion_avanzar>
	if (verificar_sensor()) {
 8000c4c:	f000 fc70 	bl	8001530 <verificar_sensor>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d00b      	beq.n	8000c6e <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000c56:	4b36      	ldr	r3, [pc, #216]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4a36      	ldr	r2, [pc, #216]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f9e1 	bl	8001028 <act_ubicacion>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000c6c:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 8000c6e:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d121      	bne.n	8000cba <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000c76:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000c7a:	f001 f9c1 	bl	8002000 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f000 fb02 	bl	8001288 <ejecutarGiro>
		orientacion_actual = oeste;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000c86:	2203      	movs	r2, #3
 8000c88:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000c8a:	e012      	b.n	8000cb2 <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000c8c:	f000 fa4c 	bl	8001128 <correccion_avanzar>
			if (verificar_sensor()) {
 8000c90:	f000 fc4e 	bl	8001530 <verificar_sensor>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000c9a:	4b25      	ldr	r3, [pc, #148]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f9bf 	bl	8001028 <act_ubicacion>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000cb0:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d0e8      	beq.n	8000c8c <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	d121      	bne.n	8000d06 <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 8000cc2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000cc6:	f001 f99b 	bl	8002000 <HAL_Delay>
		ejecutarGiro(derecha);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f000 fadc 	bl	8001288 <ejecutarGiro>
		orientacion_actual = norte;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000cd6:	e012      	b.n	8000cfe <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 8000cd8:	f000 fa26 	bl	8001128 <correccion_avanzar>
			if (verificar_sensor()) {
 8000cdc:	f000 fc28 	bl	8001530 <verificar_sensor>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00b      	beq.n	8000cfe <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4a12      	ldr	r2, [pc, #72]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f999 	bl	8001028 <act_ubicacion>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000cfc:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b09      	cmp	r3, #9
 8000d04:	d0e8      	beq.n	8000cd8 <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13) && (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET)) {
 8000d06:	4b0a      	ldr	r3, [pc, #40]	@ (8000d30 <prueba_giros_y_sensores+0xec>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b0d      	cmp	r3, #13
 8000d0c:	d10e      	bne.n	8000d2c <prueba_giros_y_sensores+0xe8>
 8000d0e:	2140      	movs	r1, #64	@ 0x40
 8000d10:	4809      	ldr	r0, [pc, #36]	@ (8000d38 <prueba_giros_y_sensores+0xf4>)
 8000d12:	f002 fbb9 	bl	8003488 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d107      	bne.n	8000d2c <prueba_giros_y_sensores+0xe8>
		ejecutarGiro(giro_180);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 fab3 	bl	8001288 <ejecutarGiro>
		orientacion_actual = sur;
 8000d22:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <prueba_giros_y_sensores+0xf0>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000d28:	f000 f9fe 	bl	8001128 <correccion_avanzar>
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000120 	.word	0x20000120
 8000d34:	20000121 	.word	0x20000121
 8000d38:	40020800 	.word	0x40020800

08000d3c <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <prueba_casilla_n+0x40>)
 8000d42:	2207      	movs	r2, #7
 8000d44:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 8000d46:	4b0e      	ldr	r3, [pc, #56]	@ (8000d80 <prueba_casilla_n+0x44>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <prueba_casilla_n+0x48>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <prueba_casilla_n+0x48>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <prueba_casilla_n+0x48>)
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //deberia dar que tiene que ir a 11
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <prueba_casilla_n+0x40>)
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <prueba_casilla_n+0x4c>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4906      	ldr	r1, [pc, #24]	@ (8000d80 <prueba_casilla_n+0x44>)
 8000d68:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <prueba_casilla_n+0x48>)
 8000d6a:	f000 fd03 	bl	8001774 <calculo_minimo_peso>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <prueba_casilla_n+0x50>)
 8000d74:	701a      	strb	r2, [r3, #0]

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000120 	.word	0x20000120
 8000d80:	20000134 	.word	0x20000134
 8000d84:	20000124 	.word	0x20000124
 8000d88:	20000121 	.word	0x20000121
 8000d8c:	20000000 	.word	0x20000000

08000d90 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
	ubicacion = 5;
 8000d94:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <prueba_post_relleno+0x54>)
 8000d96:	2205      	movs	r2, #5
 8000d98:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <prueba_post_relleno+0x58>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <prueba_post_relleno+0x54>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4a10      	ldr	r2, [pc, #64]	@ (8000de8 <prueba_post_relleno+0x58>)
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f8de 	bl	8000f6c <obtener_orientacion_futura>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <prueba_post_relleno+0x5c>)
 8000db6:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 8000db8:	4b0d      	ldr	r3, [pc, #52]	@ (8000df0 <prueba_post_relleno+0x60>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <prueba_post_relleno+0x60>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <prueba_post_relleno+0x5c>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f000 f8fb 	bl	8000fc4 <obtenerGiro>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <prueba_post_relleno+0x64>)
 8000dd4:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <prueba_post_relleno+0x64>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fa54 	bl	8001288 <ejecutarGiro>
	while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <prueba_post_relleno+0x50>
 8000de4:	20000120 	.word	0x20000120
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000122 	.word	0x20000122
 8000df0:	20000121 	.word	0x20000121
 8000df4:	20000123 	.word	0x20000123

08000df8 <programa_principal>:
		;
}

void programa_principal(void) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000dfc:	f000 f994 	bl	8001128 <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 8000e00:	f000 fb96 	bl	8001530 <verificar_sensor>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d041      	beq.n	8000e8e <programa_principal+0x96>
		contador_giros = 0;
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f40 <programa_principal+0x148>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
		contador_casillas = contador_casillas + 1;
 8000e10:	4b4c      	ldr	r3, [pc, #304]	@ (8000f44 <programa_principal+0x14c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b4a      	ldr	r3, [pc, #296]	@ (8000f44 <programa_principal+0x14c>)
 8000e1a:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f48 <programa_principal+0x150>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4a4a      	ldr	r2, [pc, #296]	@ (8000f4c <programa_principal+0x154>)
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f8fe 	bl	8001028 <act_ubicacion>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4b45      	ldr	r3, [pc, #276]	@ (8000f48 <programa_principal+0x150>)
 8000e32:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8000e34:	4b44      	ldr	r3, [pc, #272]	@ (8000f48 <programa_principal+0x150>)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	4b44      	ldr	r3, [pc, #272]	@ (8000f4c <programa_principal+0x154>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4944      	ldr	r1, [pc, #272]	@ (8000f50 <programa_principal+0x158>)
 8000e3e:	4845      	ldr	r0, [pc, #276]	@ (8000f54 <programa_principal+0x15c>)
 8000e40:	f000 fc98 	bl	8001774 <calculo_minimo_peso>
 8000e44:	4603      	mov	r3, r0
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b43      	ldr	r3, [pc, #268]	@ (8000f58 <programa_principal+0x160>)
 8000e4a:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <programa_principal+0x150>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4a41      	ldr	r2, [pc, #260]	@ (8000f58 <programa_principal+0x160>)
 8000e52:	7812      	ldrb	r2, [r2, #0]
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f888 	bl	8000f6c <obtener_orientacion_futura>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	461a      	mov	r2, r3
 8000e60:	4b3e      	ldr	r3, [pc, #248]	@ (8000f5c <programa_principal+0x164>)
 8000e62:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000e64:	4b39      	ldr	r3, [pc, #228]	@ (8000f4c <programa_principal+0x154>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4a3c      	ldr	r2, [pc, #240]	@ (8000f5c <programa_principal+0x164>)
 8000e6a:	7812      	ldrb	r2, [r2, #0]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f8a8 	bl	8000fc4 <obtenerGiro>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <programa_principal+0x168>)
 8000e7a:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <programa_principal+0x164>)
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <programa_principal+0x154>)
 8000e82:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <programa_principal+0x168>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f9fd 	bl	8001288 <ejecutarGiro>
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8000e8e:	2140      	movs	r1, #64	@ 0x40
 8000e90:	4834      	ldr	r0, [pc, #208]	@ (8000f64 <programa_principal+0x16c>)
 8000e92:	f002 faf9 	bl	8003488 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d148      	bne.n	8000f2e <programa_principal+0x136>
		HAL_Delay(tiempo_rebotes);
 8000e9c:	2014      	movs	r0, #20
 8000e9e:	f001 f8af 	bl	8002000 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8000ea2:	2140      	movs	r1, #64	@ 0x40
 8000ea4:	482f      	ldr	r0, [pc, #188]	@ (8000f64 <programa_principal+0x16c>)
 8000ea6:	f002 faef 	bl	8003488 <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d13e      	bne.n	8000f2e <programa_principal+0x136>
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <programa_principal+0x150>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4a25      	ldr	r2, [pc, #148]	@ (8000f4c <programa_principal+0x154>)
 8000eb6:	7812      	ldrb	r2, [r2, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4825      	ldr	r0, [pc, #148]	@ (8000f50 <programa_principal+0x158>)
 8000ebc:	f000 fb68 	bl	8001590 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 8000ec0:	4924      	ldr	r1, [pc, #144]	@ (8000f54 <programa_principal+0x15c>)
 8000ec2:	4823      	ldr	r0, [pc, #140]	@ (8000f50 <programa_principal+0x158>)
 8000ec4:	f000 fbb6 	bl	8001634 <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion, orientacion_actual); //calcula la casilla a la que hay q ir
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <programa_principal+0x150>)
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <programa_principal+0x154>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	491f      	ldr	r1, [pc, #124]	@ (8000f50 <programa_principal+0x158>)
 8000ed2:	4820      	ldr	r0, [pc, #128]	@ (8000f54 <programa_principal+0x15c>)
 8000ed4:	f000 fc4e 	bl	8001774 <calculo_minimo_peso>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <programa_principal+0x160>)
 8000ede:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <programa_principal+0x150>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f58 <programa_principal+0x160>)
 8000ee6:	7812      	ldrb	r2, [r2, #0]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 f83e 	bl	8000f6c <obtener_orientacion_futura>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <programa_principal+0x164>)
 8000ef6:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <programa_principal+0x154>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <programa_principal+0x164>)
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f85e 	bl	8000fc4 <obtenerGiro>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <programa_principal+0x168>)
 8000f0e:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <programa_principal+0x164>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <programa_principal+0x154>)
 8000f16:	701a      	strb	r2, [r3, #0]
			if (contador_giros > 0) {
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <programa_principal+0x148>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <programa_principal+0x12c>
				mini_retroceso();
 8000f20:	f000 f9a4 	bl	800126c <mini_retroceso>
			}
			ejecutarGiro(giro); //giro y me voy del if
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <programa_principal+0x168>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f9ad 	bl	8001288 <ejecutarGiro>
		}
	}
	if (ubicacion == 15) {
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <programa_principal+0x150>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b0f      	cmp	r3, #15
 8000f34:	d102      	bne.n	8000f3c <programa_principal+0x144>
		prueba = 10;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <programa_principal+0x170>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000146 	.word	0x20000146
 8000f44:	20000144 	.word	0x20000144
 8000f48:	20000120 	.word	0x20000120
 8000f4c:	20000121 	.word	0x20000121
 8000f50:	20000134 	.word	0x20000134
 8000f54:	20000124 	.word	0x20000124
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000122 	.word	0x20000122
 8000f60:	20000123 	.word	0x20000123
 8000f64:	40020800 	.word	0x40020800
 8000f68:	20000145 	.word	0x20000145

08000f6c <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]

	if (casilla_n == ubicacion + 1)
 8000f7c:	79ba      	ldrb	r2, [r7, #6]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	3301      	adds	r3, #1
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d101      	bne.n	8000f8a <obtener_orientacion_futura+0x1e>
		return oeste;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e015      	b.n	8000fb6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000f8a:	79ba      	ldrb	r2, [r7, #6]
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d101      	bne.n	8000f98 <obtener_orientacion_futura+0x2c>
		return este;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e00e      	b.n	8000fb6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d101      	bne.n	8000fa6 <obtener_orientacion_futura+0x3a>
		return norte;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e007      	b.n	8000fb6 <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	3b04      	subs	r3, #4
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d101      	bne.n	8000fb4 <obtener_orientacion_futura+0x48>
		return sur;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e000      	b.n	8000fb6 <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000fb4:	2364      	movs	r3, #100	@ 0x64
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000fd4:	79ba      	ldrb	r2, [r7, #6]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	3304      	adds	r3, #4
 8000fdc:	425a      	negs	r2, r3
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	bf58      	it	pl
 8000fe8:	4253      	negpl	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d812      	bhi.n	8001018 <obtenerGiro+0x54>
 8000ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <obtenerGiro+0x34>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	08001011 	.word	0x08001011
 8001004:	08001015 	.word	0x08001015
	case 0:
		return adelante;
 8001008:	2300      	movs	r3, #0
 800100a:	e006      	b.n	800101a <obtenerGiro+0x56>
	case 1:
		return derecha;
 800100c:	2302      	movs	r3, #2
 800100e:	e004      	b.n	800101a <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8001010:	2303      	movs	r3, #3
 8001012:	e002      	b.n	800101a <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <obtenerGiro+0x56>
	default:
		return 100; // Error
 8001018:	2364      	movs	r3, #100	@ 0x64
	}
}
 800101a:	4618      	mov	r0, r3
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d81a      	bhi.n	8001074 <act_ubicacion+0x4c>
 800103e:	a201      	add	r2, pc, #4	@ (adr r2, 8001044 <act_ubicacion+0x1c>)
 8001040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001044:	08001055 	.word	0x08001055
 8001048:	0800105d 	.word	0x0800105d
 800104c:	08001065 	.word	0x08001065
 8001050:	0800106d 	.word	0x0800106d
	case 0:
		return ubicacion + 4;
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	3304      	adds	r3, #4
 8001058:	b2db      	uxtb	r3, r3
 800105a:	e00c      	b.n	8001076 <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	3b01      	subs	r3, #1
 8001060:	b2db      	uxtb	r3, r3
 8001062:	e008      	b.n	8001076 <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3b04      	subs	r3, #4
 8001068:	b2db      	uxtb	r3, r3
 800106a:	e004      	b.n	8001076 <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3301      	adds	r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	e000      	b.n	8001076 <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8001074:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <promediar>:

void promediar(uint16_t *buffer) {
 8001084:	b480      	push	{r7}
 8001086:	b087      	sub	sp, #28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e012      	b.n	80010c0 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3302      	adds	r3, #2
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	4413      	add	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3304      	adds	r3, #4
 80010b8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b0f      	cmp	r3, #15
 80010c4:	dde9      	ble.n	800109a <promediar+0x16>
	}
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <promediar+0x64>)
 80010ce:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	091b      	lsrs	r3, r3, #4
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <promediar+0x68>)
 80010d8:	801a      	strh	r2, [r3, #0]
}
 80010da:	bf00      	nop
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	200001cc 	.word	0x200001cc
 80010ec:	200001ce 	.word	0x200001ce

080010f0 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80010fa:	f7ff ffc3 	bl	8001084 <promediar>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000014c 	.word	0x2000014c

0800110c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8001114:	4803      	ldr	r0, [pc, #12]	@ (8001124 <HAL_ADC_ConvCpltCallback+0x18>)
 8001116:	f7ff ffb5 	bl	8001084 <promediar>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000018c 	.word	0x2000018c

08001128 <correccion_avanzar>:
void correccion_avanzar(void) {
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <correccion_avanzar+0x4c>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001136:	d208      	bcs.n	800114a <correccion_avanzar+0x22>
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <correccion_avanzar+0x50>)
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001142:	d902      	bls.n	800114a <correccion_avanzar+0x22>
		apagar_derecha();  // apagar motor derecho
 8001144:	f000 f86a 	bl	800121c <apagar_derecha>
 8001148:	e011      	b.n	800116e <correccion_avanzar+0x46>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <correccion_avanzar+0x4c>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001154:	d908      	bls.n	8001168 <correccion_avanzar+0x40>
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <correccion_avanzar+0x50>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001160:	d202      	bcs.n	8001168 <correccion_avanzar+0x40>
		apagar_izquierda();  //apaga motor izquierdo
 8001162:	f000 f833 	bl	80011cc <apagar_izquierda>
 8001166:	e002      	b.n	800116e <correccion_avanzar+0x46>
	} else {
		avanzar();
 8001168:	f000 f808 	bl	800117c <avanzar>
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001cc 	.word	0x200001cc
 8001178:	200001ce 	.word	0x200001ce

0800117c <avanzar>:
void avanzar(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001186:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <avanzar+0x48>)
 8001188:	f002 f996 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001192:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <avanzar+0x48>)
 8001194:	f002 f990 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <avanzar+0x48>)
 80011a0:	f002 f98a 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <avanzar+0x48>)
 80011ac:	f002 f984 	bl	80034b8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <avanzar+0x4c>)
 80011b2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 80011b8:	4b03      	ldr	r3, [pc, #12]	@ (80011c8 <avanzar+0x4c>)
 80011ba:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 80011be:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40000400 	.word	0x40000400

080011cc <apagar_izquierda>:

void apagar_izquierda(void) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011d6:	480f      	ldr	r0, [pc, #60]	@ (8001214 <apagar_izquierda+0x48>)
 80011d8:	f002 f96e 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e2:	480c      	ldr	r0, [pc, #48]	@ (8001214 <apagar_izquierda+0x48>)
 80011e4:	f002 f968 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ee:	4809      	ldr	r0, [pc, #36]	@ (8001214 <apagar_izquierda+0x48>)
 80011f0:	f002 f962 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fa:	4806      	ldr	r0, [pc, #24]	@ (8001214 <apagar_izquierda+0x48>)
 80011fc:	f002 f95c 	bl	80034b8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media_izq; // rueda a velocidad media (condigurable)
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <apagar_izquierda+0x4c>)
 8001202:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001206:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <apagar_izquierda+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020400 	.word	0x40020400
 8001218:	40000400 	.word	0x40000400

0800121c <apagar_derecha>:

void apagar_derecha(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001226:	480f      	ldr	r0, [pc, #60]	@ (8001264 <apagar_derecha+0x48>)
 8001228:	f002 f946 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001232:	480c      	ldr	r0, [pc, #48]	@ (8001264 <apagar_derecha+0x48>)
 8001234:	f002 f940 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123e:	4809      	ldr	r0, [pc, #36]	@ (8001264 <apagar_derecha+0x48>)
 8001240:	f002 f93a 	bl	80034b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8001244:	2201      	movs	r2, #1
 8001246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <apagar_derecha+0x48>)
 800124c:	f002 f934 	bl	80034b8 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <apagar_derecha+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media_der; // rueda a velocidad media
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <apagar_derecha+0x4c>)
 8001258:	f646 326c 	movw	r2, #27500	@ 0x6b6c
 800125c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400
 8001268:	40000400 	.word	0x40000400

0800126c <mini_retroceso>:

void mini_retroceso(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	setMotorIzquierdo(retroceso);
 8001270:	2002      	movs	r0, #2
 8001272:	f000 f8f9 	bl	8001468 <setMotorIzquierdo>
	setMotorDerecho(retroceso);
 8001276:	2002      	movs	r0, #2
 8001278:	f000 f928 	bl	80014cc <setMotorDerecho>
	HAL_Delay(tiempo_muerto_retroceso);
 800127c:	2064      	movs	r0, #100	@ 0x64
 800127e:	f000 febf 	bl	8002000 <HAL_Delay>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <ejecutarGiro>:

void ejecutarGiro(uint8_t giro) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	if (contador_giros == 0) {
 8001292:	4b74      	ldr	r3, [pc, #464]	@ (8001464 <ejecutarGiro+0x1dc>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d172      	bne.n	8001380 <ejecutarGiro+0xf8>
		switch (giro) {
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b03      	cmp	r3, #3
 800129e:	f200 80dd 	bhi.w	800145c <ejecutarGiro+0x1d4>
 80012a2:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <ejecutarGiro+0x20>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	080012b9 	.word	0x080012b9
 80012ac:	0800130d 	.word	0x0800130d
 80012b0:	080012cf 	.word	0x080012cf
 80012b4:	0800134b 	.word	0x0800134b
		case adelante:
			setMotorIzquierdo(avance);
 80012b8:	2001      	movs	r0, #1
 80012ba:	f000 f8d5 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80012be:	2001      	movs	r0, #1
 80012c0:	f000 f904 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 80012c4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012c8:	f000 fe9a 	bl	8002000 <HAL_Delay>
			break;
 80012cc:	e0c6      	b.n	800145c <ejecutarGiro+0x1d4>

		case derecha:
			contador_giros = contador_giros + 1;
 80012ce:	4b65      	ldr	r3, [pc, #404]	@ (8001464 <ejecutarGiro+0x1dc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <ejecutarGiro+0x1dc>)
 80012d8:	701a      	strb	r2, [r3, #0]
			//setMotorIzquierdo(avance);
			//setMotorDerecho(avance);
			HAL_Delay(tiempo_muerto_avanzar);
 80012da:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80012de:	f000 fe8f 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f000 f8c0 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 80012e8:	2002      	movs	r0, #2
 80012ea:	f000 f8ef 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 80012ee:	f240 208a 	movw	r0, #650	@ 0x28a
 80012f2:	f000 fe85 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 f8b6 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80012fc:	2001      	movs	r0, #1
 80012fe:	f000 f8e5 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 8001302:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001306:	f000 fe7b 	bl	8002000 <HAL_Delay>
			break;
 800130a:	e0a7      	b.n	800145c <ejecutarGiro+0x1d4>

		case izquierda:
			contador_giros = contador_giros + 1;
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <ejecutarGiro+0x1dc>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b53      	ldr	r3, [pc, #332]	@ (8001464 <ejecutarGiro+0x1dc>)
 8001316:	701a      	strb	r2, [r3, #0]
			//setMotorIzquierdo(avance);
			//setMotorDerecho(avance);
			HAL_Delay(tiempo_muerto_avanzar);
 8001318:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800131c:	f000 fe70 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 8001320:	2002      	movs	r0, #2
 8001322:	f000 f8a1 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001326:	2001      	movs	r0, #1
 8001328:	f000 f8d0 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro90);
 800132c:	f240 208a 	movw	r0, #650	@ 0x28a
 8001330:	f000 fe66 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 8001334:	2001      	movs	r0, #1
 8001336:	f000 f897 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 800133a:	2001      	movs	r0, #1
 800133c:	f000 f8c6 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 8001340:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001344:	f000 fe5c 	bl	8002000 <HAL_Delay>
			break;
 8001348:	e088      	b.n	800145c <ejecutarGiro+0x1d4>

		case giro_180:
			contador_giros = contador_giros + 1;
 800134a:	4b46      	ldr	r3, [pc, #280]	@ (8001464 <ejecutarGiro+0x1dc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <ejecutarGiro+0x1dc>)
 8001354:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001356:	2001      	movs	r0, #1
 8001358:	f000 f886 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 800135c:	2002      	movs	r0, #2
 800135e:	f000 f8b5 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro180);
 8001362:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001366:	f000 fe4b 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 800136a:	2001      	movs	r0, #1
 800136c:	f000 f87c 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 f8ab 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 8001376:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800137a:	f000 fe41 	bl	8002000 <HAL_Delay>
			break;
 800137e:	e06d      	b.n	800145c <ejecutarGiro+0x1d4>

		}
	} else
		switch (giro) {
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b03      	cmp	r3, #3
 8001384:	d86a      	bhi.n	800145c <ejecutarGiro+0x1d4>
 8001386:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <ejecutarGiro+0x104>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013e9 	.word	0x080013e9
 8001394:	080013b3 	.word	0x080013b3
 8001398:	08001427 	.word	0x08001427
		case adelante:
			setMotorIzquierdo(avance);
 800139c:	2001      	movs	r0, #1
 800139e:	f000 f863 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f000 f892 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 80013a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013ac:	f000 fe28 	bl	8002000 <HAL_Delay>
			break;
 80013b0:	e054      	b.n	800145c <ejecutarGiro+0x1d4>

		case derecha:
			contador_giros = contador_giros + 1;
 80013b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <ejecutarGiro+0x1dc>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <ejecutarGiro+0x1dc>)
 80013bc:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 80013be:	2001      	movs	r0, #1
 80013c0:	f000 f852 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f000 f881 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 80013ca:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80013ce:	f000 fe17 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 f848 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 f877 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 80013de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013e2:	f000 fe0d 	bl	8002000 <HAL_Delay>
			break;
 80013e6:	e039      	b.n	800145c <ejecutarGiro+0x1d4>

		case izquierda:
			contador_giros = contador_giros + 1;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <ejecutarGiro+0x1dc>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <ejecutarGiro+0x1dc>)
 80013f2:	701a      	strb	r2, [r3, #0]
			HAL_Delay(tiempo_muerto_avanzar);
 80013f4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80013f8:	f000 fe02 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(retroceso);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f000 f833 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001402:	2001      	movs	r0, #1
 8001404:	f000 f862 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro90_2);
 8001408:	f44f 7061 	mov.w	r0, #900	@ 0x384
 800140c:	f000 fdf8 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 8001410:	2001      	movs	r0, #1
 8001412:	f000 f829 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 8001416:	2001      	movs	r0, #1
 8001418:	f000 f858 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 800141c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001420:	f000 fdee 	bl	8002000 <HAL_Delay>
			break;
 8001424:	e01a      	b.n	800145c <ejecutarGiro+0x1d4>

		case giro_180:
			contador_giros = contador_giros + 1;
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <ejecutarGiro+0x1dc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <ejecutarGiro+0x1dc>)
 8001430:	701a      	strb	r2, [r3, #0]
			setMotorIzquierdo(avance);
 8001432:	2001      	movs	r0, #1
 8001434:	f000 f818 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(retroceso);
 8001438:	2002      	movs	r0, #2
 800143a:	f000 f847 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_giro180);
 800143e:	f240 404c 	movw	r0, #1100	@ 0x44c
 8001442:	f000 fddd 	bl	8002000 <HAL_Delay>
			setMotorIzquierdo(avance);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 f80e 	bl	8001468 <setMotorIzquierdo>
			setMotorDerecho(avance);
 800144c:	2001      	movs	r0, #1
 800144e:	f000 f83d 	bl	80014cc <setMotorDerecho>
			HAL_Delay(tiempo_muerto);
 8001452:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001456:	f000 fdd3 	bl	8002000 <HAL_Delay>
			break;
 800145a:	bf00      	nop

		}

}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	20000146 	.word	0x20000146

08001468 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <setMotorIzquierdo+0x5c>)
 8001474:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001478:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d002      	beq.n	8001486 <setMotorIzquierdo+0x1e>
 8001480:	2b02      	cmp	r3, #2
 8001482:	d00d      	beq.n	80014a0 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 8001484:	e019      	b.n	80014ba <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800148c:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <setMotorIzquierdo+0x60>)
 800148e:	f002 f813 	bl	80034b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001498:	480b      	ldr	r0, [pc, #44]	@ (80014c8 <setMotorIzquierdo+0x60>)
 800149a:	f002 f80d 	bl	80034b8 <HAL_GPIO_WritePin>
		break;
 800149e:	e00c      	b.n	80014ba <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014a6:	4808      	ldr	r0, [pc, #32]	@ (80014c8 <setMotorIzquierdo+0x60>)
 80014a8:	f002 f806 	bl	80034b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <setMotorIzquierdo+0x60>)
 80014b4:	f002 f800 	bl	80034b8 <HAL_GPIO_WritePin>
		break;
 80014b8:	bf00      	nop
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40000400 	.word	0x40000400
 80014c8:	40020400 	.word	0x40020400

080014cc <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <setMotorDerecho+0x5c>)
 80014d8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80014dc:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d002      	beq.n	80014ea <setMotorDerecho+0x1e>
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d00d      	beq.n	8001504 <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 80014e8:	e019      	b.n	800151e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014f0:	480e      	ldr	r0, [pc, #56]	@ (800152c <setMotorDerecho+0x60>)
 80014f2:	f001 ffe1 	bl	80034b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fc:	480b      	ldr	r0, [pc, #44]	@ (800152c <setMotorDerecho+0x60>)
 80014fe:	f001 ffdb 	bl	80034b8 <HAL_GPIO_WritePin>
		break;
 8001502:	e00c      	b.n	800151e <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 8001504:	2201      	movs	r2, #1
 8001506:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800150a:	4808      	ldr	r0, [pc, #32]	@ (800152c <setMotorDerecho+0x60>)
 800150c:	f001 ffd4 	bl	80034b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <setMotorDerecho+0x60>)
 8001518:	f001 ffce 	bl	80034b8 <HAL_GPIO_WritePin>
		break;
 800151c:	bf00      	nop
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40000400 	.word	0x40000400
 800152c:	40020400 	.word	0x40020400

08001530 <verificar_sensor>:

bool verificar_sensor(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
	GPIO_PinState lectura1, lectura2;
	bool pedido = false;
 8001536:	2300      	movs	r3, #0
 8001538:	71fb      	strb	r3, [r7, #7]
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	4812      	ldr	r0, [pc, #72]	@ (8001588 <verificar_sensor+0x58>)
 800153e:	f001 ffa3 	bl	8003488 <HAL_GPIO_ReadPin>
 8001542:	4603      	mov	r3, r0
 8001544:	71bb      	strb	r3, [r7, #6]
	if (lectura1 != ultima_lectura_valida) {
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <verificar_sensor+0x5c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	79ba      	ldrb	r2, [r7, #6]
 800154c:	429a      	cmp	r2, r3
 800154e:	d015      	beq.n	800157c <verificar_sensor+0x4c>
		HAL_Delay(20);
 8001550:	2014      	movs	r0, #20
 8001552:	f000 fd55 	bl	8002000 <HAL_Delay>
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	480b      	ldr	r0, [pc, #44]	@ (8001588 <verificar_sensor+0x58>)
 800155a:	f001 ff95 	bl	8003488 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	717b      	strb	r3, [r7, #5]
		if (lectura2 == lectura1)
 8001562:	797a      	ldrb	r2, [r7, #5]
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	429a      	cmp	r2, r3
 8001568:	d102      	bne.n	8001570 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <verificar_sensor+0x5c>)
 800156c:	797b      	ldrb	r3, [r7, #5]
 800156e:	7013      	strb	r3, [r2, #0]
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <verificar_sensor+0x5c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <verificar_sensor+0x4c>
			pedido = true;
 8001578:	2301      	movs	r3, #1
 800157a:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 800157c:	79fb      	ldrb	r3, [r7, #7]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020800 	.word	0x40020800
 800158c:	20000006 	.word	0x20000006

08001590 <act_pared>:

uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
 800159c:	4613      	mov	r3, r2
 800159e:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 80015a0:	78bb      	ldrb	r3, [r7, #2]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d83a      	bhi.n	800161c <act_pared+0x8c>
 80015a6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ac <act_pared+0x1c>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015bd 	.word	0x080015bd
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015ed 	.word	0x080015ed
 80015b8:	08001605 	.word	0x08001605
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781a      	ldrb	r2, [r3, #0]
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	440b      	add	r3, r1
 80015ca:	f042 0208 	orr.w	r2, r2, #8
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	701a      	strb	r2, [r3, #0]
		break;
 80015d2:	e025      	b.n	8001620 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	781a      	ldrb	r2, [r3, #0]
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	440b      	add	r3, r1
 80015e2:	f042 0204 	orr.w	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]
		break;
 80015ea:	e019      	b.n	8001620 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	440b      	add	r3, r1
 80015fa:	f042 0202 	orr.w	r2, r2, #2
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]
		break;
 8001602:	e00d      	b.n	8001620 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	78fb      	ldrb	r3, [r7, #3]
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	440b      	add	r3, r1
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	701a      	strb	r2, [r3, #0]
		break;
 800161a:	e001      	b.n	8001620 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 800161c:	2300      	movs	r3, #0
 800161e:	e003      	b.n	8001628 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 8; j++) {
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	e08b      	b.n	800175c <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	e081      	b.n	800174e <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 800164a:	2364      	movs	r3, #100	@ 0x64
 800164c:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b0b      	cmp	r3, #11
 8001652:	dc15      	bgt.n	8001680 <act_pesos+0x4c>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3304      	adds	r3, #4
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	7dfa      	ldrb	r2, [r7, #23]
 8001670:	429a      	cmp	r2, r3
 8001672:	d905      	bls.n	8001680 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3304      	adds	r3, #4
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	4413      	add	r3, r2
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d01e      	beq.n	80016c4 <act_pesos+0x90>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2b07      	cmp	r3, #7
 800168a:	d01b      	beq.n	80016c4 <act_pesos+0x90>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b0b      	cmp	r3, #11
 8001690:	d018      	beq.n	80016c4 <act_pesos+0x90>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d015      	beq.n	80016c4 <act_pesos+0x90>
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10d      	bne.n	80016c4 <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3301      	adds	r3, #1
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7dfa      	ldrb	r2, [r7, #23]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d905      	bls.n	80016c4 <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	3301      	adds	r3, #1
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	dd15      	ble.n	80016f6 <act_pesos+0xc2>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10d      	bne.n	80016f6 <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3b04      	subs	r3, #4
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	7dfa      	ldrb	r2, [r7, #23]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d905      	bls.n	80016f6 <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b04      	subs	r3, #4
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	4413      	add	r3, r2
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	2b00      	cmp	r3, #0
 8001704:	d119      	bne.n	800173a <act_pesos+0x106>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d016      	beq.n	800173a <act_pesos+0x106>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b04      	cmp	r3, #4
 8001710:	d013      	beq.n	800173a <act_pesos+0x106>
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b08      	cmp	r3, #8
 8001716:	d010      	beq.n	800173a <act_pesos+0x106>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d00d      	beq.n	800173a <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3b01      	subs	r3, #1
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	7dfa      	ldrb	r2, [r7, #23]
 800172a:	429a      	cmp	r2, r3
 800172c:	d905      	bls.n	800173a <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3b01      	subs	r3, #1
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	7dfa      	ldrb	r2, [r7, #23]
 8001742:	3201      	adds	r2, #1
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	3301      	adds	r3, #1
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b0e      	cmp	r3, #14
 8001752:	f77f af7a 	ble.w	800164a <act_pesos+0x16>
	for (int j = 0; j < 8; j++) {
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	3301      	adds	r3, #1
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b07      	cmp	r3, #7
 8001760:	f77f af70 	ble.w	8001644 <act_pesos+0x10>
		}
	}
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) {
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	4611      	mov	r1, r2
 8001780:	461a      	mov	r2, r3
 8001782:	460b      	mov	r3, r1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	4613      	mov	r3, r2
 8001788:	71bb      	strb	r3, [r7, #6]
	uint8_t minimo_peso = 15;
 800178a:	230f      	movs	r3, #15
 800178c:	75fb      	strb	r3, [r7, #23]
	switch (orientacion_actual) {
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	2b03      	cmp	r3, #3
 8001792:	f200 8241 	bhi.w	8001c18 <calculo_minimo_peso+0x4a4>
 8001796:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <calculo_minimo_peso+0x28>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	08001aff 	.word	0x08001aff
 80017a4:	080018c7 	.word	0x080018c7
 80017a8:	080019e5 	.word	0x080019e5
	case norte:
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	3304      	adds	r3, #4
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	7dfa      	ldrb	r2, [r7, #23]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d915      	bls.n	80017e8 <calculo_minimo_peso+0x74>
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10d      	bne.n	80017e8 <calculo_minimo_peso+0x74>
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b0b      	cmp	r3, #11
 80017d0:	d80a      	bhi.n	80017e8 <calculo_minimo_peso+0x74>
			minimo_peso = peso[ubicacion + 4];
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	3304      	adds	r3, #4
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3304      	adds	r3, #4
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b7e      	ldr	r3, [pc, #504]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 80017e6:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3301      	adds	r3, #1
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	7dfa      	ldrb	r2, [r7, #23]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d91e      	bls.n	8001836 <calculo_minimo_peso+0xc2>
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	4413      	add	r3, r2
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d116      	bne.n	8001836 <calculo_minimo_peso+0xc2>
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d013      	beq.n	8001836 <calculo_minimo_peso+0xc2>
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	2b07      	cmp	r3, #7
 8001812:	d010      	beq.n	8001836 <calculo_minimo_peso+0xc2>
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	2b0b      	cmp	r3, #11
 8001818:	d00d      	beq.n	8001836 <calculo_minimo_peso+0xc2>
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b0f      	cmp	r3, #15
 800181e:	d00a      	beq.n	8001836 <calculo_minimo_peso+0xc2>
			minimo_peso = peso[ubicacion + 1];
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	3301      	adds	r3, #1
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b6b      	ldr	r3, [pc, #428]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 8001834:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b01      	subs	r3, #1
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	7dfa      	ldrb	r2, [r7, #23]
 8001842:	429a      	cmp	r2, r3
 8001844:	d91e      	bls.n	8001884 <calculo_minimo_peso+0x110>
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <calculo_minimo_peso+0x110>
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b03      	cmp	r3, #3
 800185a:	d013      	beq.n	8001884 <calculo_minimo_peso+0x110>
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	2b07      	cmp	r3, #7
 8001860:	d010      	beq.n	8001884 <calculo_minimo_peso+0x110>
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b0b      	cmp	r3, #11
 8001866:	d00d      	beq.n	8001884 <calculo_minimo_peso+0x110>
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	d00a      	beq.n	8001884 <calculo_minimo_peso+0x110>
			minimo_peso = peso[ubicacion - 1];
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	3b01      	subs	r3, #1
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b57      	ldr	r3, [pc, #348]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 8001882:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	3b04      	subs	r3, #4
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	7dfa      	ldrb	r2, [r7, #23]
 8001890:	429a      	cmp	r2, r3
 8001892:	d915      	bls.n	80018c0 <calculo_minimo_peso+0x14c>
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10d      	bne.n	80018c0 <calculo_minimo_peso+0x14c>
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d90a      	bls.n	80018c0 <calculo_minimo_peso+0x14c>
			minimo_peso = peso[ubicacion - 4];
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	3b04      	subs	r3, #4
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	3b04      	subs	r3, #4
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b48      	ldr	r3, [pc, #288]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 80018be:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80018c0:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	e1a9      	b.n	8001c1a <calculo_minimo_peso+0x4a6>
		break;
	case sur:
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	3b04      	subs	r3, #4
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	7dfa      	ldrb	r2, [r7, #23]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d915      	bls.n	8001902 <calculo_minimo_peso+0x18e>
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <calculo_minimo_peso+0x18e>
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d90a      	bls.n	8001902 <calculo_minimo_peso+0x18e>
			minimo_peso = peso[ubicacion - 4];
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	3b04      	subs	r3, #4
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3b04      	subs	r3, #4
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 8001900:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	3301      	adds	r3, #1
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	7dfa      	ldrb	r2, [r7, #23]
 800190e:	429a      	cmp	r2, r3
 8001910:	d91e      	bls.n	8001950 <calculo_minimo_peso+0x1dc>
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d116      	bne.n	8001950 <calculo_minimo_peso+0x1dc>
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d013      	beq.n	8001950 <calculo_minimo_peso+0x1dc>
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b07      	cmp	r3, #7
 800192c:	d010      	beq.n	8001950 <calculo_minimo_peso+0x1dc>
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b0b      	cmp	r3, #11
 8001932:	d00d      	beq.n	8001950 <calculo_minimo_peso+0x1dc>
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d00a      	beq.n	8001950 <calculo_minimo_peso+0x1dc>
			minimo_peso = peso[ubicacion + 1];
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	3301      	adds	r3, #1
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 800194e:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	3b01      	subs	r3, #1
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	7dfa      	ldrb	r2, [r7, #23]
 800195c:	429a      	cmp	r2, r3
 800195e:	d91e      	bls.n	800199e <calculo_minimo_peso+0x22a>
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d116      	bne.n	800199e <calculo_minimo_peso+0x22a>
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d013      	beq.n	800199e <calculo_minimo_peso+0x22a>
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b07      	cmp	r3, #7
 800197a:	d010      	beq.n	800199e <calculo_minimo_peso+0x22a>
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	2b0b      	cmp	r3, #11
 8001980:	d00d      	beq.n	800199e <calculo_minimo_peso+0x22a>
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d00a      	beq.n	800199e <calculo_minimo_peso+0x22a>
			minimo_peso = peso[ubicacion - 1];
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	3b01      	subs	r3, #1
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	3b01      	subs	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 800199c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	3304      	adds	r3, #4
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	7dfa      	ldrb	r2, [r7, #23]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d915      	bls.n	80019da <calculo_minimo_peso+0x266>
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10d      	bne.n	80019da <calculo_minimo_peso+0x266>
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b0b      	cmp	r3, #11
 80019c2:	d80a      	bhi.n	80019da <calculo_minimo_peso+0x266>
			minimo_peso = peso[ubicacion + 4];
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	3304      	adds	r3, #4
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3304      	adds	r3, #4
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b02      	ldr	r3, [pc, #8]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 80019d8:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 80019da:	4b01      	ldr	r3, [pc, #4]	@ (80019e0 <calculo_minimo_peso+0x26c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	e11c      	b.n	8001c1a <calculo_minimo_peso+0x4a6>
 80019e0:	20000000 	.word	0x20000000
		break;
	case oeste:
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	3301      	adds	r3, #1
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	7dfa      	ldrb	r2, [r7, #23]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d91e      	bls.n	8001a32 <calculo_minimo_peso+0x2be>
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d116      	bne.n	8001a32 <calculo_minimo_peso+0x2be>
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d013      	beq.n	8001a32 <calculo_minimo_peso+0x2be>
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d010      	beq.n	8001a32 <calculo_minimo_peso+0x2be>
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b0b      	cmp	r3, #11
 8001a14:	d00d      	beq.n	8001a32 <calculo_minimo_peso+0x2be>
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d00a      	beq.n	8001a32 <calculo_minimo_peso+0x2be>
			minimo_peso = peso[ubicacion + 1];
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001a30:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3304      	adds	r3, #4
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	7dfa      	ldrb	r2, [r7, #23]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d915      	bls.n	8001a6e <calculo_minimo_peso+0x2fa>
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10d      	bne.n	8001a6e <calculo_minimo_peso+0x2fa>
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b0b      	cmp	r3, #11
 8001a56:	d80a      	bhi.n	8001a6e <calculo_minimo_peso+0x2fa>
			minimo_peso = peso[ubicacion + 4];
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	3304      	adds	r3, #4
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001a6c:	701a      	strb	r2, [r3, #0]
		}

		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	3b04      	subs	r3, #4
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	7dfa      	ldrb	r2, [r7, #23]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d915      	bls.n	8001aaa <calculo_minimo_peso+0x336>
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10d      	bne.n	8001aaa <calculo_minimo_peso+0x336>
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d90a      	bls.n	8001aaa <calculo_minimo_peso+0x336>
			minimo_peso = peso[ubicacion - 4];
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	3b04      	subs	r3, #4
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b60      	ldr	r3, [pc, #384]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001aa8:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	7dfa      	ldrb	r2, [r7, #23]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d91e      	bls.n	8001af8 <calculo_minimo_peso+0x384>
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <calculo_minimo_peso+0x384>
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d013      	beq.n	8001af8 <calculo_minimo_peso+0x384>
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d010      	beq.n	8001af8 <calculo_minimo_peso+0x384>
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b0b      	cmp	r3, #11
 8001ada:	d00d      	beq.n	8001af8 <calculo_minimo_peso+0x384>
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b0f      	cmp	r3, #15
 8001ae0:	d00a      	beq.n	8001af8 <calculo_minimo_peso+0x384>
			minimo_peso = peso[ubicacion - 1];
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001af6:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8001af8:	4b4b      	ldr	r3, [pc, #300]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	e08d      	b.n	8001c1a <calculo_minimo_peso+0x4a6>
		break;
	case este:
		if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) {
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	7dfa      	ldrb	r2, [r7, #23]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d91e      	bls.n	8001b4c <calculo_minimo_peso+0x3d8>
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	4413      	add	r3, r2
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <calculo_minimo_peso+0x3d8>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d013      	beq.n	8001b4c <calculo_minimo_peso+0x3d8>
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d010      	beq.n	8001b4c <calculo_minimo_peso+0x3d8>
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b0b      	cmp	r3, #11
 8001b2e:	d00d      	beq.n	8001b4c <calculo_minimo_peso+0x3d8>
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d00a      	beq.n	8001b4c <calculo_minimo_peso+0x3d8>
			minimo_peso = peso[ubicacion - 1];
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 1;
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	4b37      	ldr	r3, [pc, #220]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001b4a:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4413      	add	r3, r2
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	7dfa      	ldrb	r2, [r7, #23]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d915      	bls.n	8001b88 <calculo_minimo_peso+0x414>
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <calculo_minimo_peso+0x414>
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b0b      	cmp	r3, #11
 8001b70:	d80a      	bhi.n	8001b88 <calculo_minimo_peso+0x414>
			minimo_peso = peso[ubicacion + 4];
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	3304      	adds	r3, #4
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 4;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	3304      	adds	r3, #4
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001b86:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	7dfa      	ldrb	r2, [r7, #23]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d915      	bls.n	8001bc4 <calculo_minimo_peso+0x450>
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10d      	bne.n	8001bc4 <calculo_minimo_peso+0x450>
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d90a      	bls.n	8001bc4 <calculo_minimo_peso+0x450>
			minimo_peso = peso[ubicacion - 4];
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	3b04      	subs	r3, #4
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion - 4;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	3b04      	subs	r3, #4
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001bc2:	701a      	strb	r2, [r3, #0]
		}
		if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && !(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15))) { // el signo de admiracion niega y convierte en booleana ubicacion
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	7dfa      	ldrb	r2, [r7, #23]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d91e      	bls.n	8001c12 <calculo_minimo_peso+0x49e>
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d116      	bne.n	8001c12 <calculo_minimo_peso+0x49e>
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d013      	beq.n	8001c12 <calculo_minimo_peso+0x49e>
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b07      	cmp	r3, #7
 8001bee:	d010      	beq.n	8001c12 <calculo_minimo_peso+0x49e>
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b0b      	cmp	r3, #11
 8001bf4:	d00d      	beq.n	8001c12 <calculo_minimo_peso+0x49e>
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b0f      	cmp	r3, #15
 8001bfa:	d00a      	beq.n	8001c12 <calculo_minimo_peso+0x49e>
			minimo_peso = peso[ubicacion + 1];
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	75fb      	strb	r3, [r7, #23]
			casilla_n = ubicacion + 1;
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001c10:	701a      	strb	r2, [r3, #0]
		}
		return casilla_n;
 8001c12:	4b05      	ldr	r3, [pc, #20]	@ (8001c28 <calculo_minimo_peso+0x4b4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	e000      	b.n	8001c1a <calculo_minimo_peso+0x4a6>
		break;
	default:
		return 100;
 8001c18:	2364      	movs	r3, #100	@ 0x64
	}
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	371c      	adds	r7, #28
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000000 	.word	0x20000000

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <Error_Handler+0x8>

08001c38 <HAL_MspInit>:
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_MspInit+0x4c>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2007      	movs	r0, #7
 8001c78:	f000 feb8 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800

08001c88 <HAL_ADC_MspInit>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	@ 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <HAL_ADC_MspInit+0xdc>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d158      	bne.n	8001d5c <HAL_ADC_MspInit+0xd4>
 8001caa:	2300      	movs	r3, #0
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cba:	4b2b      	ldr	r3, [pc, #172]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_ADC_MspInit+0xe0>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481d      	ldr	r0, [pc, #116]	@ (8001d6c <HAL_ADC_MspInit+0xe4>)
 8001cf6:	f001 fa2b 	bl	8003150 <HAL_GPIO_Init>
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d74 <HAL_ADC_MspInit+0xec>)
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d28:	619a      	str	r2, [r3, #24]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d30:	61da      	str	r2, [r3, #28]
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d38:	621a      	str	r2, [r3, #32]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d40:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d42:	f000 fe95 	bl	8002a70 <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_ADC_MspInit+0xc8>
 8001d4c:	f7ff ff6e 	bl	8001c2c <Error_Handler>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d54:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d56:	4a06      	ldr	r2, [pc, #24]	@ (8001d70 <HAL_ADC_MspInit+0xe8>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40012000 	.word	0x40012000
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	20000078 	.word	0x20000078
 8001d74:	40026410 	.word	0x40026410

08001d78 <HAL_TIM_Base_MspInit>:
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0b      	ldr	r2, [pc, #44]	@ (8001db4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10d      	bne.n	8001da6 <HAL_TIM_Base_MspInit+0x2e>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9a:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <HAL_TIM_Base_MspInit+0x40>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_TIM_MspPostInit>:
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a12      	ldr	r2, [pc, #72]	@ (8001e24 <HAL_TIM_MspPostInit+0x68>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d11e      	bne.n	8001e1c <HAL_TIM_MspPostInit+0x60>
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4619      	mov	r1, r3
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <HAL_TIM_MspPostInit+0x70>)
 8001e18:	f001 f99a 	bl	8003150 <HAL_GPIO_Init>
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020800 	.word	0x40020800

08001e30 <NMI_Handler>:
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <NMI_Handler+0x4>

08001e38 <HardFault_Handler>:
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <MemManage_Handler+0x4>

08001e48 <BusFault_Handler>:
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e58 <SVC_Handler>:
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <DebugMon_Handler>:
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <PendSV_Handler>:
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <SysTick_Handler>:
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	f000 f89b 	bl	8001fc0 <HAL_IncTick>
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <DMA2_Stream0_IRQHandler>:
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <DMA2_Stream0_IRQHandler+0x10>)
 8001e96:	f000 fef1 	bl	8002c7c <HAL_DMA_IRQHandler>
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000078 	.word	0x20000078

08001ea4 <SystemInit>:
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	@ (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <Reset_Handler>:
 8001ec8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f00 <LoopFillZerobss+0xe>
 8001ecc:	f7ff ffea 	bl	8001ea4 <SystemInit>
 8001ed0:	480c      	ldr	r0, [pc, #48]	@ (8001f04 <LoopFillZerobss+0x12>)
 8001ed2:	490d      	ldr	r1, [pc, #52]	@ (8001f08 <LoopFillZerobss+0x16>)
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <LoopFillZerobss+0x1a>)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:
 8001eda:	58d4      	ldr	r4, [r2, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:
 8001ee0:	18c4      	adds	r4, r0, r3
 8001ee2:	428c      	cmp	r4, r1
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
 8001ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <LoopFillZerobss+0x1e>)
 8001ee8:	4c0a      	ldr	r4, [pc, #40]	@ (8001f14 <LoopFillZerobss+0x22>)
 8001eea:	2300      	movs	r3, #0
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:
 8001ef2:	42a2      	cmp	r2, r4
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>
 8001ef6:	f002 fdf1 	bl	8004adc <__libc_init_array>
 8001efa:	f7fe fafb 	bl	80004f4 <main>
 8001efe:	4770      	bx	lr
 8001f00:	20020000 	.word	0x20020000
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000014 	.word	0x20000014
 8001f0c:	08004b64 	.word	0x08004b64
 8001f10:	20000014 	.word	0x20000014
 8001f14:	200001d4 	.word	0x200001d4

08001f18 <ADC_IRQHandler>:
 8001f18:	e7fe      	b.n	8001f18 <ADC_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <HAL_Init+0x40>)
 8001f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <HAL_Init+0x40>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f38:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_Init+0x40>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 fd51 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 f808 	bl	8001f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f50:	f7ff fe72 	bl	8001c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_InitTick+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_InitTick+0x58>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd69 	bl	8002a56 <HAL_SYSTICK_Config>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00e      	b.n	8001fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b0f      	cmp	r3, #15
 8001f92:	d80a      	bhi.n	8001faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f94:	2200      	movs	r2, #0
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9c:	f000 fd31 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa0:	4a06      	ldr	r2, [pc, #24]	@ (8001fbc <HAL_InitTick+0x5c>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	2000000c 	.word	0x2000000c

08001fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_IncTick+0x20>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a04      	ldr	r2, [pc, #16]	@ (8001fe4 <HAL_IncTick+0x24>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000010 	.word	0x20000010
 8001fe4:	200001d0 	.word	0x200001d0

08001fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return uwTick;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_GetTick+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	200001d0 	.word	0x200001d0

08002000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff ffee 	bl	8001fe8 <HAL_GetTick>
 800200c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002018:	d005      	beq.n	8002026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_Delay+0x44>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002026:	bf00      	nop
 8002028:	f7ff ffde 	bl	8001fe8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	429a      	cmp	r2, r3
 8002036:	d8f7      	bhi.n	8002028 <HAL_Delay+0x28>
  {
  }
}
 8002038:	bf00      	nop
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000010 	.word	0x20000010

08002048 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e033      	b.n	80020c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d109      	bne.n	800207a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fe0e 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800208e:	f023 0302 	bic.w	r3, r3, #2
 8002092:	f043 0202 	orr.w	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa58 	bl	8002550 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80020b6:	e001      	b.n	80020bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Start_DMA+0x22>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e0eb      	b.n	80022ca <HAL_ADC_Start_DMA+0x1fa>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d018      	beq.n	800213a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002118:	4b6e      	ldr	r3, [pc, #440]	@ (80022d4 <HAL_ADC_Start_DMA+0x204>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6e      	ldr	r2, [pc, #440]	@ (80022d8 <HAL_ADC_Start_DMA+0x208>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0c9a      	lsrs	r2, r3, #18
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800212c:	e002      	b.n	8002134 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3b01      	subs	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f9      	bne.n	800212e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002148:	d107      	bne.n	800215a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002158:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 80a3 	bne.w	80022b0 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002190:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002194:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021a8:	d106      	bne.n	80021b8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ae:	f023 0206 	bic.w	r2, r3, #6
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80021b6:	e002      	b.n	80021be <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c6:	4b45      	ldr	r3, [pc, #276]	@ (80022dc <HAL_ADC_Start_DMA+0x20c>)
 80021c8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ce:	4a44      	ldr	r2, [pc, #272]	@ (80022e0 <HAL_ADC_Start_DMA+0x210>)
 80021d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	4a43      	ldr	r2, [pc, #268]	@ (80022e4 <HAL_ADC_Start_DMA+0x214>)
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	4a42      	ldr	r2, [pc, #264]	@ (80022e8 <HAL_ADC_Start_DMA+0x218>)
 80021e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021fa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800220a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	334c      	adds	r3, #76	@ 0x4c
 8002216:	4619      	mov	r1, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f000 fcd6 	bl	8002bcc <HAL_DMA_Start_IT>
 8002220:	4603      	mov	r3, r0
 8002222:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2b00      	cmp	r3, #0
 800222e:	d12a      	bne.n	8002286 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a2d      	ldr	r2, [pc, #180]	@ (80022ec <HAL_ADC_Start_DMA+0x21c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d015      	beq.n	8002266 <HAL_ADC_Start_DMA+0x196>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2c      	ldr	r2, [pc, #176]	@ (80022f0 <HAL_ADC_Start_DMA+0x220>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d105      	bne.n	8002250 <HAL_ADC_Start_DMA+0x180>
 8002244:	4b25      	ldr	r3, [pc, #148]	@ (80022dc <HAL_ADC_Start_DMA+0x20c>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a27      	ldr	r2, [pc, #156]	@ (80022f4 <HAL_ADC_Start_DMA+0x224>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d136      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
 800225a:	4b20      	ldr	r3, [pc, #128]	@ (80022dc <HAL_ADC_Start_DMA+0x20c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d130      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d129      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e020      	b.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a18      	ldr	r2, [pc, #96]	@ (80022ec <HAL_ADC_Start_DMA+0x21c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11b      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	e00b      	b.n	80022c8 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 80022c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000008 	.word	0x20000008
 80022d8:	431bde83 	.word	0x431bde83
 80022dc:	40012300 	.word	0x40012300
 80022e0:	08002749 	.word	0x08002749
 80022e4:	08002803 	.word	0x08002803
 80022e8:	0800281f 	.word	0x0800281f
 80022ec:	40012000 	.word	0x40012000
 80022f0:	40012100 	.word	0x40012100
 80022f4:	40012200 	.word	0x40012200

080022f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x1c>
 8002324:	2302      	movs	r3, #2
 8002326:	e105      	b.n	8002534 <HAL_ADC_ConfigChannel+0x228>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b09      	cmp	r3, #9
 8002336:	d925      	bls.n	8002384 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68d9      	ldr	r1, [r3, #12]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	3b1e      	subs	r3, #30
 800234e:	2207      	movs	r2, #7
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43da      	mvns	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	400a      	ands	r2, r1
 800235c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	4603      	mov	r3, r0
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4403      	add	r3, r0
 8002376:	3b1e      	subs	r3, #30
 8002378:	409a      	lsls	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	e022      	b.n	80023ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6919      	ldr	r1, [r3, #16]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	2207      	movs	r2, #7
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43da      	mvns	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	400a      	ands	r2, r1
 80023a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6919      	ldr	r1, [r3, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4403      	add	r3, r0
 80023c0:	409a      	lsls	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d824      	bhi.n	800241c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b05      	subs	r3, #5
 80023e4:	221f      	movs	r2, #31
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	400a      	ands	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4618      	mov	r0, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	3b05      	subs	r3, #5
 800240e:	fa00 f203 	lsl.w	r2, r0, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	635a      	str	r2, [r3, #52]	@ 0x34
 800241a:	e04c      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d824      	bhi.n	800246e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b23      	subs	r3, #35	@ 0x23
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43da      	mvns	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	400a      	ands	r2, r1
 8002444:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	3b23      	subs	r3, #35	@ 0x23
 8002460:	fa00 f203 	lsl.w	r2, r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
 800246c:	e023      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b41      	subs	r3, #65	@ 0x41
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	400a      	ands	r2, r1
 800248e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b41      	subs	r3, #65	@ 0x41
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_ADC_ConfigChannel+0x234>)
 80024b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a21      	ldr	r2, [pc, #132]	@ (8002544 <HAL_ADC_ConfigChannel+0x238>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d109      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1cc>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b12      	cmp	r3, #18
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <HAL_ADC_ConfigChannel+0x238>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d123      	bne.n	800252a <HAL_ADC_ConfigChannel+0x21e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d003      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x1e6>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b11      	cmp	r3, #17
 80024f0:	d11b      	bne.n	800252a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d111      	bne.n	800252a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002506:	4b10      	ldr	r3, [pc, #64]	@ (8002548 <HAL_ADC_ConfigChannel+0x23c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a10      	ldr	r2, [pc, #64]	@ (800254c <HAL_ADC_ConfigChannel+0x240>)
 800250c:	fba2 2303 	umull	r2, r3, r2, r3
 8002510:	0c9a      	lsrs	r2, r3, #18
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800251c:	e002      	b.n	8002524 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	3b01      	subs	r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f9      	bne.n	800251e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40012300 	.word	0x40012300
 8002544:	40012000 	.word	0x40012000
 8002548:	20000008 	.word	0x20000008
 800254c:	431bde83 	.word	0x431bde83

08002550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002558:	4b79      	ldr	r3, [pc, #484]	@ (8002740 <ADC_Init+0x1f0>)
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	021a      	lsls	r2, r3, #8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80025a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6899      	ldr	r1, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68da      	ldr	r2, [r3, #12]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e2:	4a58      	ldr	r2, [pc, #352]	@ (8002744 <ADC_Init+0x1f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d022      	beq.n	800262e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	e00f      	b.n	800264e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800263c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0202 	bic.w	r2, r2, #2
 800265c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	7e1b      	ldrb	r3, [r3, #24]
 8002668:	005a      	lsls	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800269a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a6:	3b01      	subs	r3, #1
 80026a8:	035a      	lsls	r2, r3, #13
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	e007      	b.n	80026c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	3b01      	subs	r3, #1
 80026e0:	051a      	lsls	r2, r3, #20
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002706:	025a      	lsls	r2, r3, #9
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	029a      	lsls	r2, r3, #10
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	40012300 	.word	0x40012300
 8002744:	0f000001 	.word	0x0f000001

08002748 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800275e:	2b00      	cmp	r3, #0
 8002760:	d13c      	bne.n	80027dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d12b      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002780:	2b00      	cmp	r3, #0
 8002782:	d127      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d006      	beq.n	80027a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800279c:	2b00      	cmp	r3, #0
 800279e:	d119      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0220 	bic.w	r2, r2, #32
 80027ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	f043 0201 	orr.w	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f7fe fc99 	bl	800110c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027da:	e00e      	b.n	80027fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f7ff fd85 	bl	80022f8 <HAL_ADC_ErrorCallback>
}
 80027ee:	e004      	b.n	80027fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7fe fc6d 	bl	80010f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f043 0204 	orr.w	r2, r3, #4
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fd5a 	bl	80022f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	@ (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	@ (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	@ (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	@ 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	@ (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fab4 	bl	8001fe8 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e099      	b.n	8002bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aac:	e00f      	b.n	8002ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aae:	f7ff fa9b 	bl	8001fe8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b05      	cmp	r3, #5
 8002aba:	d908      	bls.n	8002ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2203      	movs	r2, #3
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e078      	b.n	8002bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e8      	bne.n	8002aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	@ (8002bc8 <HAL_DMA_Init+0x158>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0307 	bic.w	r3, r3, #7
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d117      	bne.n	8002b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00e      	beq.n	8002b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa6f 	bl	8003058 <DMA_CheckFifoParam>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2240      	movs	r2, #64	@ 0x40
 8002b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 fa26 	bl	8002fec <DMA_CalcBaseAndBitshift>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	223f      	movs	r2, #63	@ 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	f010803f 	.word	0xf010803f

08002bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
 8002bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d101      	bne.n	8002bf2 <HAL_DMA_Start_IT+0x26>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e040      	b.n	8002c74 <HAL_DMA_Start_IT+0xa8>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d12f      	bne.n	8002c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f9b8 	bl	8002f90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c24:	223f      	movs	r2, #63	@ 0x3f
 8002c26:	409a      	lsls	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0216 	orr.w	r2, r2, #22
 8002c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d007      	beq.n	8002c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0208 	orr.w	r2, r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e005      	b.n	8002c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c88:	4b8e      	ldr	r3, [pc, #568]	@ (8002ec4 <HAL_DMA_IRQHandler+0x248>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8002ec8 <HAL_DMA_IRQHandler+0x24c>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a9b      	lsrs	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d013      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0204 	bic.w	r2, r2, #4
 8002cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd4:	2208      	movs	r2, #8
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cec:	2201      	movs	r2, #1
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f043 0202 	orr.w	r2, r3, #2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	2204      	movs	r2, #4
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d012      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	2204      	movs	r2, #4
 8002d42:	409a      	lsls	r2, r3
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	2210      	movs	r2, #16
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d043      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d03c      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d76:	2210      	movs	r2, #16
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d108      	bne.n	8002dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	4798      	blx	r3
 8002daa:	e01f      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01b      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
 8002dbc:	e016      	b.n	8002dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d107      	bne.n	8002ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0208 	bic.w	r2, r2, #8
 8002dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	2220      	movs	r2, #32
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 808f 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8087 	beq.w	8002f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e12:	2220      	movs	r2, #32
 8002e14:	409a      	lsls	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d136      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0216 	bic.w	r2, r2, #22
 8002e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d103      	bne.n	8002e56 <HAL_DMA_IRQHandler+0x1da>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0208 	bic.w	r2, r2, #8
 8002e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6a:	223f      	movs	r2, #63	@ 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d07e      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
        }
        return;
 8002e92:	e079      	b.n	8002f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01d      	beq.n	8002ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d031      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
 8002ec0:	e02c      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
 8002ec2:	bf00      	nop
 8002ec4:	20000008 	.word	0x20000008
 8002ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d023      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	4798      	blx	r3
 8002edc:	e01e      	b.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10f      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0210 	bic.w	r2, r2, #16
 8002efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d032      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d022      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2205      	movs	r2, #5
 8002f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d307      	bcc.n	8002f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f2      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x2cc>
 8002f62:	e000      	b.n	8002f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e000      	b.n	8002f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f88:	bf00      	nop
    }
  }
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b40      	cmp	r3, #64	@ 0x40
 8002fbc:	d108      	bne.n	8002fd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fce:	e007      	b.n	8002fe0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	60da      	str	r2, [r3, #12]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3b10      	subs	r3, #16
 8002ffc:	4a14      	ldr	r2, [pc, #80]	@ (8003050 <DMA_CalcBaseAndBitshift+0x64>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003006:	4a13      	ldr	r2, [pc, #76]	@ (8003054 <DMA_CalcBaseAndBitshift+0x68>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d909      	bls.n	800302e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003022:	f023 0303 	bic.w	r3, r3, #3
 8003026:	1d1a      	adds	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
 800302c:	e007      	b.n	800303e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003042:	4618      	mov	r0, r3
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	aaaaaaab 	.word	0xaaaaaaab
 8003054:	08004b4c 	.word	0x08004b4c

08003058 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11f      	bne.n	80030b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d856      	bhi.n	8003126 <DMA_CheckFifoParam+0xce>
 8003078:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <DMA_CheckFifoParam+0x28>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003091 	.word	0x08003091
 8003084:	080030a3 	.word	0x080030a3
 8003088:	08003091 	.word	0x08003091
 800308c:	08003127 	.word	0x08003127
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d046      	beq.n	800312a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e043      	b.n	800312a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030aa:	d140      	bne.n	800312e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b0:	e03d      	b.n	800312e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ba:	d121      	bne.n	8003100 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d837      	bhi.n	8003132 <DMA_CheckFifoParam+0xda>
 80030c2:	a201      	add	r2, pc, #4	@ (adr r2, 80030c8 <DMA_CheckFifoParam+0x70>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030df 	.word	0x080030df
 80030d0:	080030d9 	.word	0x080030d9
 80030d4:	080030f1 	.word	0x080030f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e030      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d025      	beq.n	8003136 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e022      	b.n	8003136 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030f8:	d11f      	bne.n	800313a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030fe:	e01c      	b.n	800313a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d903      	bls.n	800310e <DMA_CheckFifoParam+0xb6>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d003      	beq.n	8003114 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800310c:	e018      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      break;
 8003112:	e015      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00e      	beq.n	800313e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e00b      	b.n	800313e <DMA_CheckFifoParam+0xe6>
      break;
 8003126:	bf00      	nop
 8003128:	e00a      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312a:	bf00      	nop
 800312c:	e008      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800312e:	bf00      	nop
 8003130:	e006      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003132:	bf00      	nop
 8003134:	e004      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;   
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
    }
  } 
  
  return status; 
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b480      	push	{r7}
 8003152:	b089      	sub	sp, #36	@ 0x24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
 800316a:	e16b      	b.n	8003444 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	429a      	cmp	r2, r3
 8003186:	f040 815a 	bne.w	800343e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b01      	cmp	r3, #1
 8003194:	d005      	beq.n	80031a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d130      	bne.n	8003204 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	2203      	movs	r2, #3
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 0201 	and.w	r2, r3, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d017      	beq.n	8003240 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d123      	bne.n	8003294 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	08da      	lsrs	r2, r3, #3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3208      	adds	r2, #8
 8003254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	220f      	movs	r2, #15
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	08da      	lsrs	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3208      	adds	r2, #8
 800328e:	69b9      	ldr	r1, [r7, #24]
 8003290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0203 	and.w	r2, r3, #3
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80b4 	beq.w	800343e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	4b60      	ldr	r3, [pc, #384]	@ (800345c <HAL_GPIO_Init+0x30c>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	4a5f      	ldr	r2, [pc, #380]	@ (800345c <HAL_GPIO_Init+0x30c>)
 80032e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e6:	4b5d      	ldr	r3, [pc, #372]	@ (800345c <HAL_GPIO_Init+0x30c>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_GPIO_Init+0x310>)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	220f      	movs	r2, #15
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a52      	ldr	r2, [pc, #328]	@ (8003464 <HAL_GPIO_Init+0x314>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d02b      	beq.n	8003376 <HAL_GPIO_Init+0x226>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a51      	ldr	r2, [pc, #324]	@ (8003468 <HAL_GPIO_Init+0x318>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d025      	beq.n	8003372 <HAL_GPIO_Init+0x222>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a50      	ldr	r2, [pc, #320]	@ (800346c <HAL_GPIO_Init+0x31c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01f      	beq.n	800336e <HAL_GPIO_Init+0x21e>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4f      	ldr	r2, [pc, #316]	@ (8003470 <HAL_GPIO_Init+0x320>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d019      	beq.n	800336a <HAL_GPIO_Init+0x21a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4e      	ldr	r2, [pc, #312]	@ (8003474 <HAL_GPIO_Init+0x324>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <HAL_GPIO_Init+0x216>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4d      	ldr	r2, [pc, #308]	@ (8003478 <HAL_GPIO_Init+0x328>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00d      	beq.n	8003362 <HAL_GPIO_Init+0x212>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4c      	ldr	r2, [pc, #304]	@ (800347c <HAL_GPIO_Init+0x32c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <HAL_GPIO_Init+0x20e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4b      	ldr	r2, [pc, #300]	@ (8003480 <HAL_GPIO_Init+0x330>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d101      	bne.n	800335a <HAL_GPIO_Init+0x20a>
 8003356:	2307      	movs	r3, #7
 8003358:	e00e      	b.n	8003378 <HAL_GPIO_Init+0x228>
 800335a:	2308      	movs	r3, #8
 800335c:	e00c      	b.n	8003378 <HAL_GPIO_Init+0x228>
 800335e:	2306      	movs	r3, #6
 8003360:	e00a      	b.n	8003378 <HAL_GPIO_Init+0x228>
 8003362:	2305      	movs	r3, #5
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x228>
 8003366:	2304      	movs	r3, #4
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x228>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x228>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x228>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x228>
 8003376:	2300      	movs	r3, #0
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	@ (8003460 <HAL_GPIO_Init+0x310>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b3b      	ldr	r3, [pc, #236]	@ (8003484 <HAL_GPIO_Init+0x334>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ba:	4a32      	ldr	r2, [pc, #200]	@ (8003484 <HAL_GPIO_Init+0x334>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c0:	4b30      	ldr	r3, [pc, #192]	@ (8003484 <HAL_GPIO_Init+0x334>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e4:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <HAL_GPIO_Init+0x334>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ea:	4b26      	ldr	r3, [pc, #152]	@ (8003484 <HAL_GPIO_Init+0x334>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340e:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <HAL_GPIO_Init+0x334>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003414:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_GPIO_Init+0x334>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003438:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <HAL_GPIO_Init+0x334>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	f67f ae90 	bls.w	800316c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3724      	adds	r7, #36	@ 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40013800 	.word	0x40013800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021000 	.word	0x40021000
 8003478:	40021400 	.word	0x40021400
 800347c:	40021800 	.word	0x40021800
 8003480:	40021c00 	.word	0x40021c00
 8003484:	40013c00 	.word	0x40013c00

08003488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e001      	b.n	80034aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
 80034c4:	4613      	mov	r3, r2
 80034c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c8:	787b      	ldrb	r3, [r7, #1]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ce:	887a      	ldrh	r2, [r7, #2]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034d4:	e003      	b.n	80034de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034d6:	887b      	ldrh	r3, [r7, #2]
 80034d8:	041a      	lsls	r2, r3, #16
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fe fd20 	bl	8001fe8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe fd1c 	bl	8001fe8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fd0c 	bl	8001fe8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe fd08 	bl	8001fe8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7fe fcc1 	bl	8001fe8 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366a:	f7fe fcbd 	bl	8001fe8 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fca0 	bl	8001fe8 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe fc9c 	bl	8001fe8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7fe fc80 	bl	8001fe8 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fc7c 	bl	8001fe8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7fe fc69 	bl	8001fe8 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fc65 	bl	8001fe8 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe fc25 	bl	8001fe8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe fc21 	bl	8001fe8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe fbe6 	bl	8001fe8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fbe2 	bl	8001fe8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7fe fbd0 	bl	8001fe8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7fe fbcc 	bl	8001fe8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fe fba0 	bl	8001fe8 <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ac:	f7fe fb9c 	bl	8001fe8 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fe fb75 	bl	8001fe8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fb71 	bl	8001fe8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fe fb5e 	bl	8001fe8 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003930:	f7fe fb5a 	bl	8001fe8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7fe fa8c 	bl	8001fe8 <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7fe fa88 	bl	8001fe8 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe f9ec 	bl	8001f60 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	08004b3c 	.word	0x08004b3c
 8003ba0:	20000008 	.word	0x20000008
 8003ba4:	2000000c 	.word	0x2000000c

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b094      	sub	sp, #80	@ 0x50
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80e1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e0db      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be0:	e0db      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4621      	mov	r1, r4
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c60:	4659      	mov	r1, fp
 8003c62:	eb63 0901 	sbc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	462b      	mov	r3, r5
 8003c88:	eb49 0303 	adc.w	r3, r9, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	024b      	lsls	r3, r1, #9
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	024a      	lsls	r2, r1, #9
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb8:	f7fc fa86 	bl	80001c8 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b38      	ldr	r3, [pc, #224]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d18:	ebb2 040a 	subs.w	r4, r2, sl
 8003d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb45 0303 	adc.w	r3, r5, r3
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	61fa      	str	r2, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc fa2c 	bl	80001c8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3750      	adds	r7, #80	@ 0x50
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e041      	b.n	8003e4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd ffcc 	bl	8001d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 fad8 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e041      	b.n	8003ee8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f839 	bl	8003ef0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fa89 	bl	80043a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <HAL_TIM_PWM_Start+0x24>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	bf14      	ite	ne
 8003f20:	2301      	movne	r3, #1
 8003f22:	2300      	moveq	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	e022      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d109      	bne.n	8003f42 <HAL_TIM_PWM_Start+0x3e>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	bf14      	ite	ne
 8003f3a:	2301      	movne	r3, #1
 8003f3c:	2300      	moveq	r3, #0
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e015      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d109      	bne.n	8003f5c <HAL_TIM_PWM_Start+0x58>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	bf14      	ite	ne
 8003f54:	2301      	movne	r3, #1
 8003f56:	2300      	moveq	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e008      	b.n	8003f6e <HAL_TIM_PWM_Start+0x6a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e07c      	b.n	8004070 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x82>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f84:	e013      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x92>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f94:	e00b      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0xa2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa4:	e003      	b.n	8003fae <HAL_TIM_PWM_Start+0xaa>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fce6 	bl	8004988 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8004078 <HAL_TIM_PWM_Start+0x174>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_PWM_Start+0xcc>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2c      	ldr	r2, [pc, #176]	@ (800407c <HAL_TIM_PWM_Start+0x178>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0xd0>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_PWM_Start+0xd2>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <HAL_TIM_PWM_Start+0x174>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffc:	d01d      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1f      	ldr	r2, [pc, #124]	@ (8004080 <HAL_TIM_PWM_Start+0x17c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1d      	ldr	r2, [pc, #116]	@ (8004084 <HAL_TIM_PWM_Start+0x180>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_TIM_PWM_Start+0x184>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a16      	ldr	r2, [pc, #88]	@ (800407c <HAL_TIM_PWM_Start+0x178>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a18      	ldr	r2, [pc, #96]	@ (800408c <HAL_TIM_PWM_Start+0x188>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_PWM_Start+0x136>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <HAL_TIM_PWM_Start+0x18c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d010      	beq.n	800406e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0201 	orr.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	e007      	b.n	800406e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40010000 	.word	0x40010000
 800407c:	40010400 	.word	0x40010400
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40014000 	.word	0x40014000
 8004090:	40001800 	.word	0x40001800

08004094 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0ae      	b.n	8004210 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0c      	cmp	r3, #12
 80040be:	f200 809f 	bhi.w	8004200 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040c2:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040fd 	.word	0x080040fd
 80040cc:	08004201 	.word	0x08004201
 80040d0:	08004201 	.word	0x08004201
 80040d4:	08004201 	.word	0x08004201
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	08004201 	.word	0x08004201
 80040e0:	08004201 	.word	0x08004201
 80040e4:	08004201 	.word	0x08004201
 80040e8:	0800417f 	.word	0x0800417f
 80040ec:	08004201 	.word	0x08004201
 80040f0:	08004201 	.word	0x08004201
 80040f4:	08004201 	.word	0x08004201
 80040f8:	080041bf 	.word	0x080041bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9f6 	bl	80044f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0204 	bic.w	r2, r2, #4
 8004126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6999      	ldr	r1, [r3, #24]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	619a      	str	r2, [r3, #24]
      break;
 800413a:	e064      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa46 	bl	80045d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	699a      	ldr	r2, [r3, #24]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6999      	ldr	r1, [r3, #24]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	619a      	str	r2, [r3, #24]
      break;
 800417c:	e043      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fa9b 	bl	80046c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	69da      	ldr	r2, [r3, #28]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0208 	orr.w	r2, r2, #8
 8004198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0204 	bic.w	r2, r2, #4
 80041a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69d9      	ldr	r1, [r3, #28]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	61da      	str	r2, [r3, #28]
      break;
 80041bc:	e023      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 faef 	bl	80047a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69da      	ldr	r2, [r3, #28]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69d9      	ldr	r1, [r3, #28]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	021a      	lsls	r2, r3, #8
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	61da      	str	r2, [r3, #28]
      break;
 80041fe:	e002      	b.n	8004206 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_ConfigClockSource+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e0b4      	b.n	800439e <HAL_TIM_ConfigClockSource+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800425a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800426c:	d03e      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0xd4>
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004272:	f200 8087 	bhi.w	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427a:	f000 8086 	beq.w	800438a <HAL_TIM_ConfigClockSource+0x172>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004282:	d87f      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b70      	cmp	r3, #112	@ 0x70
 8004286:	d01a      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xa6>
 8004288:	2b70      	cmp	r3, #112	@ 0x70
 800428a:	d87b      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b60      	cmp	r3, #96	@ 0x60
 800428e:	d050      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x11a>
 8004290:	2b60      	cmp	r3, #96	@ 0x60
 8004292:	d877      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b50      	cmp	r3, #80	@ 0x50
 8004296:	d03c      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0xfa>
 8004298:	2b50      	cmp	r3, #80	@ 0x50
 800429a:	d873      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b40      	cmp	r3, #64	@ 0x40
 800429e:	d058      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x13a>
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d86f      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b30      	cmp	r3, #48	@ 0x30
 80042a6:	d064      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042a8:	2b30      	cmp	r3, #48	@ 0x30
 80042aa:	d86b      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d060      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d867      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d05a      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042bc:	e062      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	f000 fb3b 	bl	8004948 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	609a      	str	r2, [r3, #8]
      break;
 80042ea:	e04f      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	f000 fb24 	bl	8004948 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800430e:	609a      	str	r2, [r3, #8]
      break;
 8004310:	e03c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431e:	461a      	mov	r2, r3
 8004320:	f000 fa98 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2150      	movs	r1, #80	@ 0x50
 800432a:	4618      	mov	r0, r3
 800432c:	f000 faf1 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004330:	e02c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800433e:	461a      	mov	r2, r3
 8004340:	f000 fab7 	bl	80048b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2160      	movs	r1, #96	@ 0x60
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fae1 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004350:	e01c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800435e:	461a      	mov	r2, r3
 8004360:	f000 fa78 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2140      	movs	r1, #64	@ 0x40
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fad1 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004370:	e00c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f000 fac8 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004382:	e003      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e000      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800438a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a43      	ldr	r2, [pc, #268]	@ (80044c8 <TIM_Base_SetConfig+0x120>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043c6:	d00f      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a40      	ldr	r2, [pc, #256]	@ (80044cc <TIM_Base_SetConfig+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3f      	ldr	r2, [pc, #252]	@ (80044d0 <TIM_Base_SetConfig+0x128>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a3e      	ldr	r2, [pc, #248]	@ (80044d4 <TIM_Base_SetConfig+0x12c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0x40>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a3d      	ldr	r2, [pc, #244]	@ (80044d8 <TIM_Base_SetConfig+0x130>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a32      	ldr	r2, [pc, #200]	@ (80044c8 <TIM_Base_SetConfig+0x120>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d02b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004408:	d027      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <TIM_Base_SetConfig+0x124>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d023      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2e      	ldr	r2, [pc, #184]	@ (80044d0 <TIM_Base_SetConfig+0x128>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <TIM_Base_SetConfig+0x12c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d01b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2c      	ldr	r2, [pc, #176]	@ (80044d8 <TIM_Base_SetConfig+0x130>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d017      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2b      	ldr	r2, [pc, #172]	@ (80044dc <TIM_Base_SetConfig+0x134>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d013      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <TIM_Base_SetConfig+0x138>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00f      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a29      	ldr	r2, [pc, #164]	@ (80044e4 <TIM_Base_SetConfig+0x13c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d00b      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a28      	ldr	r2, [pc, #160]	@ (80044e8 <TIM_Base_SetConfig+0x140>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d007      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a27      	ldr	r2, [pc, #156]	@ (80044ec <TIM_Base_SetConfig+0x144>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d003      	beq.n	800445a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a26      	ldr	r2, [pc, #152]	@ (80044f0 <TIM_Base_SetConfig+0x148>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d108      	bne.n	800446c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	689a      	ldr	r2, [r3, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a0e      	ldr	r2, [pc, #56]	@ (80044c8 <TIM_Base_SetConfig+0x120>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0xf2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a10      	ldr	r2, [pc, #64]	@ (80044d8 <TIM_Base_SetConfig+0x130>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d103      	bne.n	80044a2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	40001800 	.word	0x40001800
 80044ec:	40001c00 	.word	0x40001c00
 80044f0:	40002000 	.word	0x40002000

080044f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f023 0201 	bic.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0302 	bic.w	r3, r3, #2
 800453c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a20      	ldr	r2, [pc, #128]	@ (80045cc <TIM_OC1_SetConfig+0xd8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC1_SetConfig+0x64>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a1f      	ldr	r2, [pc, #124]	@ (80045d0 <TIM_OC1_SetConfig+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10c      	bne.n	8004572 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0308 	bic.w	r3, r3, #8
 800455e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	@ (80045cc <TIM_OC1_SetConfig+0xd8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC1_SetConfig+0x8e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a14      	ldr	r2, [pc, #80]	@ (80045d0 <TIM_OC1_SetConfig+0xdc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010400 	.word	0x40010400

080045d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	f023 0210 	bic.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0320 	bic.w	r3, r3, #32
 800461e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a22      	ldr	r2, [pc, #136]	@ (80046b8 <TIM_OC2_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC2_SetConfig+0x68>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <TIM_OC2_SetConfig+0xe8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10d      	bne.n	8004658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a17      	ldr	r2, [pc, #92]	@ (80046b8 <TIM_OC2_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC2_SetConfig+0x94>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a16      	ldr	r2, [pc, #88]	@ (80046bc <TIM_OC2_SetConfig+0xe8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d113      	bne.n	8004690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800466e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a21      	ldr	r2, [pc, #132]	@ (80047a0 <TIM_OC3_SetConfig+0xe0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC3_SetConfig+0x66>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a20      	ldr	r2, [pc, #128]	@ (80047a4 <TIM_OC3_SetConfig+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10d      	bne.n	8004742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800472c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <TIM_OC3_SetConfig+0xe0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x92>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a15      	ldr	r2, [pc, #84]	@ (80047a4 <TIM_OC3_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40010400 	.word	0x40010400

080047a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	031b      	lsls	r3, r3, #12
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a12      	ldr	r2, [pc, #72]	@ (800484c <TIM_OC4_SetConfig+0xa4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_OC4_SetConfig+0x68>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a11      	ldr	r2, [pc, #68]	@ (8004850 <TIM_OC4_SetConfig+0xa8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d109      	bne.n	8004824 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400

08004854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 030a 	bic.w	r3, r3, #10
 8004890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b087      	sub	sp, #28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	f023 0210 	bic.w	r2, r3, #16
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	f043 0307 	orr.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	431a      	orrs	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	2201      	movs	r2, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	fa01 f303 	lsl.w	r3, r1, r3
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e05a      	b.n	8004aa2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d01d      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	@ (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	@ (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a15      	ldr	r2, [pc, #84]	@ (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d10c      	bne.n	8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40001800 	.word	0x40001800

08004acc <memset>:
 8004acc:	4402      	add	r2, r0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d100      	bne.n	8004ad6 <memset+0xa>
 8004ad4:	4770      	bx	lr
 8004ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8004ada:	e7f9      	b.n	8004ad0 <memset+0x4>

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	@ (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	@ (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	@ (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 f818 	bl	8004b24 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	08004b5c 	.word	0x08004b5c
 8004b18:	08004b5c 	.word	0x08004b5c
 8004b1c:	08004b5c 	.word	0x08004b5c
 8004b20:	08004b60 	.word	0x08004b60

08004b24 <_init>:
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	bf00      	nop
 8004b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2a:	bc08      	pop	{r3}
 8004b2c:	469e      	mov	lr, r3
 8004b2e:	4770      	bx	lr

08004b30 <_fini>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr
