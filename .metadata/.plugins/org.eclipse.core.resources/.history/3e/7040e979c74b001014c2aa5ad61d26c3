
DreamTeam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< Updated upstream
  1 .text         00003a14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003b9c  08003b9c  00004b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bb4  08003bb4  00005010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bbc  08003bbc  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bbc  08003bbc  00004bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003bc4  00005000  2**2
=======
  1 .text         000043c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800454c  0800454c  0000554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004564  08004564  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004564  08004564  00005564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800456c  0800456c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800456c  0800456c  0000556c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004570  08004570  00005570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004574  00006000  2**2
>>>>>>> Stashed changes
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005010  2**0
                  CONTENTS
 10 .bss          000001b4  20000010  20000010  00005010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00005010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a9e8  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  0000fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00011590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< Updated upstream
 16 .debug_rnglists 000008ec  00000000  00000000  00012118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021362  00000000  00000000  00012a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd5d  00000000  00000000  00033d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2038  00000000  00000000  00040ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112afb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000306c  00000000  00000000  00112b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00115bac  2**0
=======
 16 .debug_rnglists 00000924  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021374  00000000  00000000  00013b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfc4  00000000  00000000  00034f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20f1  00000000  00000000  00041ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113fbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003174  00000000  00000000  00114000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  00117174  2**0
>>>>>>> Stashed changes
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
<<<<<<< Updated upstream
 80001a8:	08003b84 	.word	0x08003b84
=======
 80001a8:	08004534 	.word	0x08004534
>>>>>>> Stashed changes

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
<<<<<<< Updated upstream
 80001c4:	08003b84 	.word	0x08003b84
=======
 80001c4:	08004534 	.word	0x08004534
>>>>>>> Stashed changes

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
<<<<<<< Updated upstream
 80004f8:	f000 fd64 	bl	8000fc4 <HAL_Init>
=======
 80004f8:	f001 fa00 	bl	80018fc <HAL_Init>
>>>>>>> Stashed changes
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
<<<<<<< Updated upstream
 80004fc:	f000 f8ce 	bl	800069c <SystemClock_Config>
=======
 80004fc:	f000 f8dc 	bl	80006b8 <SystemClock_Config>
>>>>>>> Stashed changes
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
<<<<<<< Updated upstream
 8000500:	f000 fa38 	bl	8000974 <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa16 	bl	8000934 <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f932 	bl	8000770 <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f990 	bl	8000830 <MX_TIM3_Init>
=======
 8000500:	f000 fa46 	bl	8000990 <MX_GPIO_Init>
	MX_DMA_Init();
 8000504:	f000 fa24 	bl	8000950 <MX_DMA_Init>
	MX_ADC1_Init();
 8000508:	f000 f940 	bl	800078c <MX_ADC1_Init>
	MX_TIM3_Init();
 800050c:	f000 f99e 	bl	800084c <MX_TIM3_Init>
>>>>>>> Stashed changes
	/* USER CODE BEGIN 2 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) dma_buffer, 64);
 8000510:	2240      	movs	r2, #64	@ 0x40
<<<<<<< Updated upstream
 8000512:	4958      	ldr	r1, [pc, #352]	@ (8000674 <main+0x180>)
 8000514:	4858      	ldr	r0, [pc, #352]	@ (8000678 <main+0x184>)
 8000516:	f000 fe0b 	bl	8001130 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b58      	ldr	r3, [pc, #352]	@ (800067c <main+0x188>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b56      	ldr	r3, [pc, #344]	@ (800067c <main+0x188>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b55      	ldr	r3, [pc, #340]	@ (800067c <main+0x188>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b54      	ldr	r3, [pc, #336]	@ (800067c <main+0x188>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b53      	ldr	r3, [pc, #332]	@ (800067c <main+0x188>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b51      	ldr	r3, [pc, #324]	@ (800067c <main+0x188>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b50      	ldr	r3, [pc, #320]	@ (800067c <main+0x188>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b4f      	ldr	r3, [pc, #316]	@ (800067c <main+0x188>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b4e      	ldr	r3, [pc, #312]	@ (800067c <main+0x188>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b4d      	ldr	r3, [pc, #308]	@ (800067c <main+0x188>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b4c      	ldr	r3, [pc, #304]	@ (800067c <main+0x188>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b4b      	ldr	r3, [pc, #300]	@ (800067c <main+0x188>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b4a      	ldr	r3, [pc, #296]	@ (800067c <main+0x188>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b49      	ldr	r3, [pc, #292]	@ (800067c <main+0x188>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b48      	ldr	r3, [pc, #288]	@ (800067c <main+0x188>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b47      	ldr	r3, [pc, #284]	@ (800067c <main+0x188>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b46      	ldr	r3, [pc, #280]	@ (800067c <main+0x188>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b44      	ldr	r3, [pc, #272]	@ (800067c <main+0x188>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b43      	ldr	r3, [pc, #268]	@ (800067c <main+0x188>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b42      	ldr	r3, [pc, #264]	@ (800067c <main+0x188>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b41      	ldr	r3, [pc, #260]	@ (800067c <main+0x188>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b40      	ldr	r3, [pc, #256]	@ (800067c <main+0x188>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b3f      	ldr	r3, [pc, #252]	@ (800067c <main+0x188>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b3e      	ldr	r3, [pc, #248]	@ (800067c <main+0x188>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <main+0x188>)
=======
 8000512:	4961      	ldr	r1, [pc, #388]	@ (8000698 <main+0x1a4>)
 8000514:	4861      	ldr	r0, [pc, #388]	@ (800069c <main+0x1a8>)
 8000516:	f001 facb 	bl	8001ab0 <HAL_ADC_Start_DMA>

	peso[15] = 0;  //inicialización de pesos
 800051a:	4b61      	ldr	r3, [pc, #388]	@ (80006a0 <main+0x1ac>)
 800051c:	2200      	movs	r2, #0
 800051e:	73da      	strb	r2, [r3, #15]
	peso[11] = peso[14] = 1;
 8000520:	4b5f      	ldr	r3, [pc, #380]	@ (80006a0 <main+0x1ac>)
 8000522:	2201      	movs	r2, #1
 8000524:	739a      	strb	r2, [r3, #14]
 8000526:	4b5e      	ldr	r3, [pc, #376]	@ (80006a0 <main+0x1ac>)
 8000528:	7b9a      	ldrb	r2, [r3, #14]
 800052a:	4b5d      	ldr	r3, [pc, #372]	@ (80006a0 <main+0x1ac>)
 800052c:	72da      	strb	r2, [r3, #11]
	peso[7] = peso[10] = peso[13] = 2;
 800052e:	4b5c      	ldr	r3, [pc, #368]	@ (80006a0 <main+0x1ac>)
 8000530:	2202      	movs	r2, #2
 8000532:	735a      	strb	r2, [r3, #13]
 8000534:	4b5a      	ldr	r3, [pc, #360]	@ (80006a0 <main+0x1ac>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b59      	ldr	r3, [pc, #356]	@ (80006a0 <main+0x1ac>)
 800053a:	729a      	strb	r2, [r3, #10]
 800053c:	4b58      	ldr	r3, [pc, #352]	@ (80006a0 <main+0x1ac>)
 800053e:	7a9a      	ldrb	r2, [r3, #10]
 8000540:	4b57      	ldr	r3, [pc, #348]	@ (80006a0 <main+0x1ac>)
 8000542:	71da      	strb	r2, [r3, #7]
	peso[3] = peso[6] = peso[9] = peso[12] = 3;
 8000544:	4b56      	ldr	r3, [pc, #344]	@ (80006a0 <main+0x1ac>)
 8000546:	2203      	movs	r2, #3
 8000548:	731a      	strb	r2, [r3, #12]
 800054a:	4b55      	ldr	r3, [pc, #340]	@ (80006a0 <main+0x1ac>)
 800054c:	7b1a      	ldrb	r2, [r3, #12]
 800054e:	4b54      	ldr	r3, [pc, #336]	@ (80006a0 <main+0x1ac>)
 8000550:	725a      	strb	r2, [r3, #9]
 8000552:	4b53      	ldr	r3, [pc, #332]	@ (80006a0 <main+0x1ac>)
 8000554:	7a5a      	ldrb	r2, [r3, #9]
 8000556:	4b52      	ldr	r3, [pc, #328]	@ (80006a0 <main+0x1ac>)
 8000558:	719a      	strb	r2, [r3, #6]
 800055a:	4b51      	ldr	r3, [pc, #324]	@ (80006a0 <main+0x1ac>)
 800055c:	799a      	ldrb	r2, [r3, #6]
 800055e:	4b50      	ldr	r3, [pc, #320]	@ (80006a0 <main+0x1ac>)
 8000560:	70da      	strb	r2, [r3, #3]
	peso[2] = peso[5] = peso[8] = 4;
 8000562:	4b4f      	ldr	r3, [pc, #316]	@ (80006a0 <main+0x1ac>)
 8000564:	2204      	movs	r2, #4
 8000566:	721a      	strb	r2, [r3, #8]
 8000568:	4b4d      	ldr	r3, [pc, #308]	@ (80006a0 <main+0x1ac>)
 800056a:	7a1a      	ldrb	r2, [r3, #8]
 800056c:	4b4c      	ldr	r3, [pc, #304]	@ (80006a0 <main+0x1ac>)
 800056e:	715a      	strb	r2, [r3, #5]
 8000570:	4b4b      	ldr	r3, [pc, #300]	@ (80006a0 <main+0x1ac>)
 8000572:	795a      	ldrb	r2, [r3, #5]
 8000574:	4b4a      	ldr	r3, [pc, #296]	@ (80006a0 <main+0x1ac>)
 8000576:	709a      	strb	r2, [r3, #2]
	peso[1] = peso[4] = 5;
 8000578:	4b49      	ldr	r3, [pc, #292]	@ (80006a0 <main+0x1ac>)
 800057a:	2205      	movs	r2, #5
 800057c:	711a      	strb	r2, [r3, #4]
 800057e:	4b48      	ldr	r3, [pc, #288]	@ (80006a0 <main+0x1ac>)
 8000580:	791a      	ldrb	r2, [r3, #4]
 8000582:	4b47      	ldr	r3, [pc, #284]	@ (80006a0 <main+0x1ac>)
 8000584:	705a      	strb	r2, [r3, #1]
	peso[0] = 6;
 8000586:	4b46      	ldr	r3, [pc, #280]	@ (80006a0 <main+0x1ac>)
>>>>>>> Stashed changes
 8000588:	2206      	movs	r2, #6
 800058a:	701a      	strb	r2, [r3, #0]

	//paredes de cada casilla (8=pared en norte, 4=pared en Este, 2=pared en sur, 1=pared en oeste)
	pared[0] = 6; //se suma sur y este
<<<<<<< Updated upstream
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <main+0x18c>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b3b      	ldr	r3, [pc, #236]	@ (8000680 <main+0x18c>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b39      	ldr	r3, [pc, #228]	@ (8000680 <main+0x18c>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b38      	ldr	r3, [pc, #224]	@ (8000680 <main+0x18c>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b37      	ldr	r3, [pc, #220]	@ (8000680 <main+0x18c>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b36      	ldr	r3, [pc, #216]	@ (8000680 <main+0x18c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b34      	ldr	r3, [pc, #208]	@ (8000680 <main+0x18c>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b33      	ldr	r3, [pc, #204]	@ (8000680 <main+0x18c>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b32      	ldr	r3, [pc, #200]	@ (8000680 <main+0x18c>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <main+0x18c>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <main+0x18c>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <main+0x18c>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000680 <main+0x18c>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <main+0x18c>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000680 <main+0x18c>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <main+0x18c>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <main+0x18c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <main+0x18c>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <main+0x18c>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <main+0x18c>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <main+0x18c>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <main+0x18c>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <main+0x18c>)
=======
 800058c:	4b45      	ldr	r3, [pc, #276]	@ (80006a4 <main+0x1b0>)
 800058e:	2206      	movs	r2, #6
 8000590:	701a      	strb	r2, [r3, #0]
	pared[1] = pared[2] = 2; //solo sur
 8000592:	4b44      	ldr	r3, [pc, #272]	@ (80006a4 <main+0x1b0>)
 8000594:	2202      	movs	r2, #2
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4b42      	ldr	r3, [pc, #264]	@ (80006a4 <main+0x1b0>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b41      	ldr	r3, [pc, #260]	@ (80006a4 <main+0x1b0>)
 800059e:	705a      	strb	r2, [r3, #1]
	pared[3] = 3;  //se suma sur y oeste
 80005a0:	4b40      	ldr	r3, [pc, #256]	@ (80006a4 <main+0x1b0>)
 80005a2:	2203      	movs	r2, #3
 80005a4:	70da      	strb	r2, [r3, #3]
	pared[7] = pared[11] = 1; // solo oeste
 80005a6:	4b3f      	ldr	r3, [pc, #252]	@ (80006a4 <main+0x1b0>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	72da      	strb	r2, [r3, #11]
 80005ac:	4b3d      	ldr	r3, [pc, #244]	@ (80006a4 <main+0x1b0>)
 80005ae:	7ada      	ldrb	r2, [r3, #11]
 80005b0:	4b3c      	ldr	r3, [pc, #240]	@ (80006a4 <main+0x1b0>)
 80005b2:	71da      	strb	r2, [r3, #7]
	pared[15] = 9;  //se suma norte y oeste
 80005b4:	4b3b      	ldr	r3, [pc, #236]	@ (80006a4 <main+0x1b0>)
 80005b6:	2209      	movs	r2, #9
 80005b8:	73da      	strb	r2, [r3, #15]
	pared[14] = pared[13] = 8; //solo norte
 80005ba:	4b3a      	ldr	r3, [pc, #232]	@ (80006a4 <main+0x1b0>)
 80005bc:	2208      	movs	r2, #8
 80005be:	735a      	strb	r2, [r3, #13]
 80005c0:	4b38      	ldr	r3, [pc, #224]	@ (80006a4 <main+0x1b0>)
 80005c2:	7b5a      	ldrb	r2, [r3, #13]
 80005c4:	4b37      	ldr	r3, [pc, #220]	@ (80006a4 <main+0x1b0>)
 80005c6:	739a      	strb	r2, [r3, #14]
	pared[12] = 12; //se suma mprte y este
 80005c8:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <main+0x1b0>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	731a      	strb	r2, [r3, #12]
	pared[4] = pared[8] = 4; //solo este
 80005ce:	4b35      	ldr	r3, [pc, #212]	@ (80006a4 <main+0x1b0>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	721a      	strb	r2, [r3, #8]
 80005d4:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <main+0x1b0>)
 80005d6:	7a1a      	ldrb	r2, [r3, #8]
 80005d8:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <main+0x1b0>)
 80005da:	711a      	strb	r2, [r3, #4]
	pared[5] = pared[6] = pared[9] = pared[10] = 0;
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <main+0x1b0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	729a      	strb	r2, [r3, #10]
 80005e2:	4b30      	ldr	r3, [pc, #192]	@ (80006a4 <main+0x1b0>)
 80005e4:	7a9a      	ldrb	r2, [r3, #10]
 80005e6:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <main+0x1b0>)
 80005e8:	725a      	strb	r2, [r3, #9]
 80005ea:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <main+0x1b0>)
 80005ec:	7a5a      	ldrb	r2, [r3, #9]
 80005ee:	4b2d      	ldr	r3, [pc, #180]	@ (80006a4 <main+0x1b0>)
 80005f0:	719a      	strb	r2, [r3, #6]
 80005f2:	4b2c      	ldr	r3, [pc, #176]	@ (80006a4 <main+0x1b0>)
 80005f4:	799a      	ldrb	r2, [r3, #6]
 80005f6:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <main+0x1b0>)
>>>>>>> Stashed changes
 80005f8:	715a      	strb	r2, [r3, #5]

	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET); // INICIALIZACION EN AVANZAR
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
<<<<<<< Updated upstream
 8000600:	4820      	ldr	r0, [pc, #128]	@ (8000684 <main+0x190>)
 8000602:	f001 ff89 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	481d      	ldr	r0, [pc, #116]	@ (8000684 <main+0x190>)
 800060e:	f001 ff83 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	481a      	ldr	r0, [pc, #104]	@ (8000684 <main+0x190>)
 800061a:	f001 ff7d 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4817      	ldr	r0, [pc, #92]	@ (8000684 <main+0x190>)
 8000626:	f001 ff77 	bl	8002518 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0x194>)
 800062e:	f002 fc99 	bl	8002f64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	4814      	ldr	r0, [pc, #80]	@ (8000688 <main+0x194>)
 8000636:	f002 fc95 	bl	8002f64 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <main+0x198>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <main+0x198>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

=======
 8000600:	4829      	ldr	r0, [pc, #164]	@ (80006a8 <main+0x1b4>)
 8000602:	f002 fc49 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800060c:	4826      	ldr	r0, [pc, #152]	@ (80006a8 <main+0x1b4>)
 800060e:	f002 fc43 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000618:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <main+0x1b4>)
 800061a:	f002 fc3d 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000624:	4820      	ldr	r0, [pc, #128]	@ (80006a8 <main+0x1b4>)
 8000626:	f002 fc37 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // Inicio de la modulación PWM, rueda izquierda
 800062a:	2108      	movs	r1, #8
 800062c:	481f      	ldr	r0, [pc, #124]	@ (80006ac <main+0x1b8>)
 800062e:	f003 f971 	bl	8003914 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); // Inicio de la modulación PWM, rueda derecha
 8000632:	210c      	movs	r1, #12
 8000634:	481d      	ldr	r0, [pc, #116]	@ (80006ac <main+0x1b8>)
 8000636:	f003 f96d 	bl	8003914 <HAL_TIM_PWM_Start>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 800063a:	4b1d      	ldr	r3, [pc, #116]	@ (80006b0 <main+0x1bc>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000640:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <main+0x1bc>)
 8000644:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000648:	641a      	str	r2, [r3, #64]	@ 0x40

	prueba = 4; //Aca se elige que programa queremos que se realice
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <main+0x1c0>)
 800064c:	2204      	movs	r2, #4
 800064e:	701a      	strb	r2, [r3, #0]

>>>>>>> Stashed changes
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
<<<<<<< Updated upstream
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET){
 800064a:	2140      	movs	r1, #64	@ 0x40
 800064c:	4810      	ldr	r0, [pc, #64]	@ (8000690 <main+0x19c>)
 800064e:	f001 ff4b 	bl	80024e8 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f8      	bne.n	800064a <main+0x156>
		act_pared(pared, ubicacion, orientacion_actual);
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <main+0x1a0>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <main+0x1a4>)
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4807      	ldr	r0, [pc, #28]	@ (8000680 <main+0x18c>)
 8000664:	f000 fa4e 	bl	8000b04 <act_pared>
		act_pesos(pared, peso);
 8000668:	4904      	ldr	r1, [pc, #16]	@ (800067c <main+0x188>)
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <main+0x18c>)
 800066c:	f000 fa9c 	bl	8000ba8 <act_pesos>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET){
 8000670:	e7eb      	b.n	800064a <main+0x156>
 8000672:	bf00      	nop
 8000674:	2000013c 	.word	0x2000013c
 8000678:	2000002c 	.word	0x2000002c
 800067c:	2000011c 	.word	0x2000011c
 8000680:	2000012c 	.word	0x2000012c
 8000684:	40020400 	.word	0x40020400
 8000688:	200000d4 	.word	0x200000d4
 800068c:	40000400 	.word	0x40000400
 8000690:	40020800 	.word	0x40020800
 8000694:	20000000 	.word	0x20000000
 8000698:	20000001 	.word	0x20000001

0800069c <SystemClock_Config>:
=======
		switch (prueba) {
 8000650:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <main+0x1c0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d8fb      	bhi.n	8000650 <main+0x15c>
 8000658:	a201      	add	r2, pc, #4	@ (adr r2, 8000660 <main+0x16c>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000675 	.word	0x08000675
 8000664:	0800067b 	.word	0x0800067b
 8000668:	08000681 	.word	0x08000681
 800066c:	08000687 	.word	0x08000687
 8000670:	0800068d 	.word	0x0800068d
		case 0:
			prueba_avanzar();
 8000674:	f000 fa16 	bl	8000aa4 <prueba_avanzar>
			break;
 8000678:	e00c      	b.n	8000694 <main+0x1a0>
		case 1:
			prueba_giros_y_sensores();
 800067a:	f000 fa1f 	bl	8000abc <prueba_giros_y_sensores>
			break;
 800067e:	e009      	b.n	8000694 <main+0x1a0>
		case 2:
			prueba_casilla_n();
 8000680:	f000 fa98 	bl	8000bb4 <prueba_casilla_n>
			break;
 8000684:	e006      	b.n	8000694 <main+0x1a0>
		case 3:
			prueba_post_relleno();
 8000686:	f000 fabb 	bl	8000c00 <prueba_post_relleno>
			break;
 800068a:	e003      	b.n	8000694 <main+0x1a0>
		case 4:
			programa_principal();
 800068c:	f000 faec 	bl	8000c68 <programa_principal>
		//default:

			break;
 8000690:	bf00      	nop
 8000692:	e7dd      	b.n	8000650 <main+0x15c>
		switch (prueba) {
 8000694:	e7dc      	b.n	8000650 <main+0x15c>
 8000696:	bf00      	nop
 8000698:	20000144 	.word	0x20000144
 800069c:	2000002c 	.word	0x2000002c
 80006a0:	20000120 	.word	0x20000120
 80006a4:	20000130 	.word	0x20000130
 80006a8:	40020400 	.word	0x40020400
 80006ac:	200000d4 	.word	0x200000d4
 80006b0:	40000400 	.word	0x40000400
 80006b4:	20000141 	.word	0x20000141

080006b8 <SystemClock_Config>:
>>>>>>> Stashed changes

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
<<<<<<< Updated upstream
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fa3e 	bl	8003b2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
=======
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	@ 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 ff08 	bl	80044dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< Updated upstream
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
=======
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <SystemClock_Config+0xcc>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a27      	ldr	r2, [pc, #156]	@ (8000784 <SystemClock_Config+0xcc>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b22      	ldr	r3, [pc, #136]	@ (8000788 <SystemClock_Config+0xd0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <SystemClock_Config+0xd0>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< Updated upstream
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8000710:	2332      	movs	r3, #50	@ 0x32
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 ff13 	bl	800254c <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
		Error_Handler();
 800072c:	f000 fad1 	bl	8000cd2 <Error_Handler>
=======
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 800072c:	2332      	movs	r3, #50	@ 0x32
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000730:	2304      	movs	r3, #4
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fbdd 	bl	8002efc <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x94>
		Error_Handler();
 8000748:	f000 ff59 	bl	80015fe <Error_Handler>
>>>>>>> Stashed changes
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
<<<<<<< Updated upstream
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f974 	bl	8002a3c <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
		Error_Handler();
 800075a:	f000 faba 	bl	8000cd2 <Error_Handler>
	}
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_ADC1_Init>:
=======
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000750:	2302      	movs	r3, #2
 8000752:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000758:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800075c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000762:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fe3e 	bl	80033ec <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc2>
		Error_Handler();
 8000776:	f000 ff42 	bl	80015fe <Error_Handler>
	}
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	@ 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_ADC1_Init>:
>>>>>>> Stashed changes
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
<<<<<<< Updated upstream
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
=======
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
<<<<<<< Updated upstream
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
=======
 8000792:	463b      	mov	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
<<<<<<< Updated upstream
 8000782:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <MX_ADC1_Init+0xb4>)
 8000784:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <MX_ADC1_Init+0xb8>)
 8000786:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <MX_ADC1_Init+0xb4>)
 800078a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800078e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000790:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_ADC1_Init+0xb4>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000796:	4b23      	ldr	r3, [pc, #140]	@ (8000824 <MX_ADC1_Init+0xb4>)
 8000798:	2201      	movs	r2, #1
 800079a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800079c:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <MX_ADC1_Init+0xb4>)
 800079e:	2201      	movs	r2, #1
 80007a0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_ADC1_Init+0xbc>)
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80007bc:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007be:	2202      	movs	r2, #2
 80007c0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007d0:	4814      	ldr	r0, [pc, #80]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007d2:	f000 fc69 	bl	80010a8 <HAL_ADC_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x70>
		Error_Handler();
 80007dc:	f000 fa79 	bl	8000cd2 <Error_Handler>
=======
 800079e:	4b28      	ldr	r3, [pc, #160]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007a0:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <MX_ADC1_Init+0xb8>)
 80007a2:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80007a4:	4b26      	ldr	r3, [pc, #152]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007aa:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ac:	4b24      	ldr	r3, [pc, #144]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000848 <MX_ADC1_Init+0xbc>)
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007da:	2202      	movs	r2, #2
 80007dc:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80007de:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007e6:	4b16      	ldr	r3, [pc, #88]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007ec:	4814      	ldr	r0, [pc, #80]	@ (8000840 <MX_ADC1_Init+0xb4>)
 80007ee:	f001 f91b 	bl	8001a28 <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0x70>
		Error_Handler();
 80007f8:	f000 ff01 	bl	80015fe <Error_Handler>
>>>>>>> Stashed changes
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< Updated upstream
 80007e0:	2309      	movs	r3, #9
 80007e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	480c      	ldr	r0, [pc, #48]	@ (8000824 <MX_ADC1_Init+0xb4>)
 80007f2:	f000 fdbb 	bl	800136c <HAL_ADC_ConfigChannel>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_ADC1_Init+0x90>
		Error_Handler();
 80007fc:	f000 fa69 	bl	8000cd2 <Error_Handler>
=======
 80007fc:	2309      	movs	r3, #9
 80007fe:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000800:	2301      	movs	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <MX_ADC1_Init+0xb4>)
 800080e:	f001 fa6d 	bl	8001cec <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x90>
		Error_Handler();
 8000818:	f000 fef1 	bl	80015fe <Error_Handler>
>>>>>>> Stashed changes
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< Updated upstream
 8000800:	2308      	movs	r3, #8
 8000802:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	@ (8000824 <MX_ADC1_Init+0xb4>)
 800080e:	f000 fdad 	bl	800136c <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0xac>
		Error_Handler();
 8000818:	f000 fa5b 	bl	8000cd2 <Error_Handler>
=======
 800081c:	2308      	movs	r3, #8
 800081e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_ADC1_Init+0xb4>)
 800082a:	f001 fa5f 	bl	8001cec <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC1_Init+0xac>
		Error_Handler();
 8000834:	f000 fee3 	bl	80015fe <Error_Handler>
>>>>>>> Stashed changes
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
<<<<<<< Updated upstream
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000002c 	.word	0x2000002c
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_TIM3_Init>:
=======
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	2000002c 	.word	0x2000002c
 8000844:	40012000 	.word	0x40012000
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_TIM3_Init>:
>>>>>>> Stashed changes
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
<<<<<<< Updated upstream
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	@ 0x38
 8000834:	af00      	add	r7, sp, #0
=======
 800084c:	b580      	push	{r7, lr}
 800084e:	b08e      	sub	sp, #56	@ 0x38
 8000850:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
<<<<<<< Updated upstream
 8000836:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]
=======
 8000852:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
 8000878:	615a      	str	r2, [r3, #20]
 800087a:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
<<<<<<< Updated upstream
 8000860:	4b32      	ldr	r3, [pc, #200]	@ (800092c <MX_TIM3_Init+0xfc>)
 8000862:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <MX_TIM3_Init+0x100>)
 8000864:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000866:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_TIM3_Init+0xfc>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <MX_TIM3_Init+0xfc>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_TIM3_Init+0xfc>)
 8000874:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000878:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_TIM3_Init+0xfc>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_TIM3_Init+0xfc>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000886:	4829      	ldr	r0, [pc, #164]	@ (800092c <MX_TIM3_Init+0xfc>)
 8000888:	f002 fac4 	bl	8002e14 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM3_Init+0x66>
		Error_Handler();
 8000892:	f000 fa1e 	bl	8000cd2 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800089c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_TIM3_Init+0xfc>)
 80008a4:	f002 fce8 	bl	8003278 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x82>
		Error_Handler();
 80008ae:	f000 fa10 	bl	8000cd2 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008b2:	481e      	ldr	r0, [pc, #120]	@ (800092c <MX_TIM3_Init+0xfc>)
 80008b4:	f002 fafd 	bl	8002eb2 <HAL_TIM_PWM_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM3_Init+0x92>
		Error_Handler();
 80008be:	f000 fa08 	bl	8000cd2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	@ (800092c <MX_TIM3_Init+0xfc>)
 80008d2:	f003 f8af 	bl	8003a34 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80008dc:	f000 f9f9 	bl	8000cd2 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e0:	2360      	movs	r3, #96	@ 0x60
 80008e2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2208      	movs	r2, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_TIM3_Init+0xfc>)
 80008f8:	f002 fbfc 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000902:	f000 f9e6 	bl	8000cd2 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	220c      	movs	r2, #12
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <MX_TIM3_Init+0xfc>)
 800090e:	f002 fbf1 	bl	80030f4 <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000918:	f000 f9db 	bl	8000cd2 <Error_Handler>
=======
 800087c:	4b32      	ldr	r3, [pc, #200]	@ (8000948 <MX_TIM3_Init+0xfc>)
 800087e:	4a33      	ldr	r2, [pc, #204]	@ (800094c <MX_TIM3_Init+0x100>)
 8000880:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000882:	4b31      	ldr	r3, [pc, #196]	@ (8000948 <MX_TIM3_Init+0xfc>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b2f      	ldr	r3, [pc, #188]	@ (8000948 <MX_TIM3_Init+0xfc>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 63999;
 800088e:	4b2e      	ldr	r3, [pc, #184]	@ (8000948 <MX_TIM3_Init+0xfc>)
 8000890:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000894:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <MX_TIM3_Init+0xfc>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b2a      	ldr	r3, [pc, #168]	@ (8000948 <MX_TIM3_Init+0xfc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80008a2:	4829      	ldr	r0, [pc, #164]	@ (8000948 <MX_TIM3_Init+0xfc>)
 80008a4:	f002 ff8e 	bl	80037c4 <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x66>
		Error_Handler();
 80008ae:	f000 fea6 	bl	80015fe <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80008b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008bc:	4619      	mov	r1, r3
 80008be:	4822      	ldr	r0, [pc, #136]	@ (8000948 <MX_TIM3_Init+0xfc>)
 80008c0:	f003 f9b2 	bl	8003c28 <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0x82>
		Error_Handler();
 80008ca:	f000 fe98 	bl	80015fe <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80008ce:	481e      	ldr	r0, [pc, #120]	@ (8000948 <MX_TIM3_Init+0xfc>)
 80008d0:	f002 ffc7 	bl	8003862 <HAL_TIM_PWM_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x92>
		Error_Handler();
 80008da:	f000 fe90 	bl	80015fe <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	4619      	mov	r1, r3
 80008ec:	4816      	ldr	r0, [pc, #88]	@ (8000948 <MX_TIM3_Init+0xfc>)
 80008ee:	f003 fd79 	bl	80043e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80008f8:	f000 fe81 	bl	80015fe <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008fc:	2360      	movs	r3, #96	@ 0x60
 80008fe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2208      	movs	r2, #8
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <MX_TIM3_Init+0xfc>)
 8000914:	f003 f8c6 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800091e:	f000 fe6e 	bl	80015fe <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	220c      	movs	r2, #12
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <MX_TIM3_Init+0xfc>)
 800092a:	f003 f8bb 	bl	8003aa4 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0xec>
			!= HAL_OK) {
		Error_Handler();
 8000934:	f000 fe63 	bl	80015fe <Error_Handler>
>>>>>>> Stashed changes
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
<<<<<<< Updated upstream
 800091c:	4803      	ldr	r0, [pc, #12]	@ (800092c <MX_TIM3_Init+0xfc>)
 800091e:	f000 faa1 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000d4 	.word	0x200000d4
 8000930:	40000400 	.word	0x40000400

08000934 <MX_DMA_Init>:
=======
 8000938:	4803      	ldr	r0, [pc, #12]	@ (8000948 <MX_TIM3_Init+0xfc>)
 800093a:	f000 ff29 	bl	8001790 <HAL_TIM_MspPostInit>

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	@ 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000d4 	.word	0x200000d4
 800094c:	40000400 	.word	0x40000400

08000950 <MX_DMA_Init>:
>>>>>>> Stashed changes

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
<<<<<<< Updated upstream
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <MX_DMA_Init+0x3c>)
 8000944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
=======
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_DMA_Init+0x3c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0b      	ldr	r2, [pc, #44]	@ (800098c <MX_DMA_Init+0x3c>)
 8000960:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_DMA_Init+0x3c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
>>>>>>> Stashed changes

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< Updated upstream
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	2038      	movs	r0, #56	@ 0x38
 800095c:	f001 f881 	bl	8001a62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000960:	2038      	movs	r0, #56	@ 0x38
 8000962:	f001 f89a 	bl	8001a9a <HAL_NVIC_EnableIRQ>

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <MX_GPIO_Init>:
=======
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2038      	movs	r0, #56	@ 0x38
 8000978:	f001 fd33 	bl	80023e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800097c:	2038      	movs	r0, #56	@ 0x38
 800097e:	f001 fd4c 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <MX_GPIO_Init>:
>>>>>>> Stashed changes
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
<<<<<<< Updated upstream
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
=======
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000996:	f107 030c 	add.w	r3, r7, #12
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
<<<<<<< Updated upstream
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b30      	ldr	r3, [pc, #192]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a2f      	ldr	r2, [pc, #188]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b2d      	ldr	r3, [pc, #180]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a28      	ldr	r2, [pc, #160]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b22      	ldr	r3, [pc, #136]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a21      	ldr	r2, [pc, #132]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a50 <MX_GPIO_Init+0xdc>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 80009e4:	f001 fd98 	bl	8002518 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 80009ee:	481a      	ldr	r0, [pc, #104]	@ (8000a58 <MX_GPIO_Init+0xe4>)
 80009f0:	f001 fd92 	bl	8002518 <HAL_GPIO_WritePin>
=======
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a39      	ldr	r2, [pc, #228]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0310 	and.w	r3, r3, #16
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a32      	ldr	r2, [pc, #200]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b30      	ldr	r3, [pc, #192]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009e8:	f043 0304 	orr.w	r3, r3, #4
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <MX_GPIO_Init+0x104>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0304 	and.w	r3, r3, #4
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <MX_GPIO_Init+0x108>)
 8000a00:	f002 fa4a 	bl	8002e98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 41f0 	mov.w	r1, #30720	@ 0x7800
 8000a0a:	4824      	ldr	r0, [pc, #144]	@ (8000a9c <MX_GPIO_Init+0x10c>)
 8000a0c:	f002 fa44 	bl	8002e98 <HAL_GPIO_WritePin>
>>>>>>> Stashed changes
	m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin | m1_derecha_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
<<<<<<< Updated upstream
 80009f4:	2308      	movs	r3, #8
 80009f6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <MX_GPIO_Init+0xe0>)
 8000a0c:	f001 fbd0 	bl	80021b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000a10:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a14:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <MX_GPIO_Init+0xe4>)
 8000a2a:	f001 fbc1 	bl	80021b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : sensor_frontal_Pin sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin | sensor_linea_Pin;
 8000a2e:	23c0      	movs	r3, #192	@ 0xc0
 8000a30:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4806      	ldr	r0, [pc, #24]	@ (8000a5c <MX_GPIO_Init+0xe8>)
 8000a42:	f001 fbb5 	bl	80021b0 <HAL_GPIO_Init>
=======
 8000a10:	2308      	movs	r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	481c      	ldr	r0, [pc, #112]	@ (8000a98 <MX_GPIO_Init+0x108>)
 8000a28:	f002 f882 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pins : m0_izquierda_Pin m1_izquierda_Pin m0_derecha_Pin m1_derecha_Pin */
	GPIO_InitStruct.Pin = m0_izquierda_Pin | m1_izquierda_Pin | m0_derecha_Pin
 8000a2c:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8000a30:	60fb      	str	r3, [r7, #12]
			| m1_derecha_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4815      	ldr	r0, [pc, #84]	@ (8000a9c <MX_GPIO_Init+0x10c>)
 8000a46:	f002 f873 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_frontal_Pin */
	GPIO_InitStruct.Pin = sensor_frontal_Pin;
 8000a4a:	2340      	movs	r3, #64	@ 0x40
 8000a4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(sensor_frontal_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <MX_GPIO_Init+0x110>)
 8000a60:	f002 f866 	bl	8002b30 <HAL_GPIO_Init>

	/*Configure GPIO pin : sensor_linea_Pin */
	GPIO_InitStruct.Pin = sensor_linea_Pin;
 8000a64:	2380      	movs	r3, #128	@ 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(sensor_linea_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	480a      	ldr	r0, [pc, #40]	@ (8000aa0 <MX_GPIO_Init+0x110>)
 8000a78:	f002 f85a 	bl	8002b30 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2017      	movs	r0, #23
 8000a82:	f001 fcae 	bl	80023e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a86:	2017      	movs	r0, #23
 8000a88:	f001 fcc7 	bl	800241a <HAL_NVIC_EnableIRQ>
>>>>>>> Stashed changes

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< Updated upstream
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800

08000a60 <promediar>:
	default:
		return 100; // Error
	}
}

void promediar(uint16_t *buffer) {
 8000a60:	b480      	push	{r7}
 8000a62:	b087      	sub	sp, #28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	e012      	b.n	8000a9c <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	4413      	add	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3302      	adds	r3, #2
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3304      	adds	r3, #4
 8000a94:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b0f      	cmp	r3, #15
 8000aa0:	dde9      	ble.n	8000a76 <promediar+0x16>
	}
// Dividimos las sumas para obtener el promedio
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <promediar+0x64>)
 8000aaa:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	091b      	lsrs	r3, r3, #4
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <promediar+0x68>)
 8000ab4:	801a      	strh	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200001bc 	.word	0x200001bc
 8000ac8:	200001be 	.word	0x200001be

08000acc <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8000ad4:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000ad6:	f7ff ffc3 	bl	8000a60 <promediar>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000013c 	.word	0x2000013c

08000ae8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8000af0:	4803      	ldr	r0, [pc, #12]	@ (8000b00 <HAL_ADC_ConvCpltCallback+0x18>)
 8000af2:	f7ff ffb5 	bl	8000a60 <promediar>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000017c 	.word	0x2000017c

08000b04 <act_pared>:
	}
	return pedido;
}

uint8_t act_pared(uint8_t pared[cant_casilleros], uint8_t ubicacion,
		uint8_t orientacion_actual) { // ESTE CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]
 8000b10:	4613      	mov	r3, r2
 8000b12:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	d83a      	bhi.n	8000b90 <act_pared+0x8c>
 8000b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b20 <act_pared+0x1c>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b31 	.word	0x08000b31
 8000b24:	08000b49 	.word	0x08000b49
 8000b28:	08000b61 	.word	0x08000b61
 8000b2c:	08000b79 	.word	0x08000b79
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	f042 0208 	orr.w	r2, r2, #8
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	701a      	strb	r2, [r3, #0]
		break;
 8000b46:	e025      	b.n	8000b94 <act_pared+0x90>
	case ESTE:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	78fb      	ldrb	r3, [r7, #3]
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	440b      	add	r3, r1
 8000b56:	f042 0204 	orr.w	r2, r2, #4
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]
		break;
 8000b5e:	e019      	b.n	8000b94 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8000b60:	78fb      	ldrb	r3, [r7, #3]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	78fb      	ldrb	r3, [r7, #3]
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	f042 0202 	orr.w	r2, r2, #2
 8000b72:	b2d2      	uxtb	r2, r2
 8000b74:	701a      	strb	r2, [r3, #0]
		break;
 8000b76:	e00d      	b.n	8000b94 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	440b      	add	r3, r1
 8000b86:	f042 0201 	orr.w	r2, r2, #1
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	701a      	strb	r2, [r3, #0]
		break;
 8000b8e:	e001      	b.n	8000b94 <act_pared+0x90>
	default:
		return 0; // Orientación no válida
 8000b90:	2300      	movs	r3, #0
 8000b92:	e003      	b.n	8000b9c <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8000b94:	78fb      	ldrb	r3, [r7, #3]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <act_pesos>:

void act_pesos(uint8_t * pared , uint8_t * peso) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
//	for (int j = 0; j < 16; j++) {
		for (int i = 0; i < cant_casilleros; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e081      	b.n	8000cbc <act_pesos+0x114>
			minimo_peso_vecino = 100;
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	73fb      	strb	r3, [r7, #15]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b0b      	cmp	r3, #11
 8000bc0:	dc15      	bgt.n	8000bee <act_pesos+0x46>
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10d      	bne.n	8000bee <act_pesos+0x46>
				if (peso[i + 4] < minimo_peso_vecino)
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	7bfa      	ldrb	r2, [r7, #15]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d905      	bls.n	8000bee <act_pesos+0x46>
					minimo_peso_vecino = peso[i + 4];
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3304      	adds	r3, #4
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	4413      	add	r3, r2
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	73fb      	strb	r3, [r7, #15]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA DERECHA (LIMITE DEL MAPA)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d01e      	beq.n	8000c32 <act_pesos+0x8a>
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2b07      	cmp	r3, #7
 8000bf8:	d01b      	beq.n	8000c32 <act_pesos+0x8a>
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	2b0b      	cmp	r3, #11
 8000bfe:	d018      	beq.n	8000c32 <act_pesos+0x8a>
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d015      	beq.n	8000c32 <act_pesos+0x8a>
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10d      	bne.n	8000c32 <act_pesos+0x8a>
				if (peso[i + 1] < minimo_peso_vecino)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d905      	bls.n	8000c32 <act_pesos+0x8a>
					minimo_peso_vecino = peso[i + 1];
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	73fb      	strb	r3, [r7, #15]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	dd15      	ble.n	8000c64 <act_pesos+0xbc>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d10d      	bne.n	8000c64 <act_pesos+0xbc>
				if (peso[i - 4] < minimo_peso_vecino)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d905      	bls.n	8000c64 <act_pesos+0xbc>
					minimo_peso_vecino = peso[i - 4];
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	73fb      	strb	r3, [r7, #15]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d119      	bne.n	8000ca8 <act_pesos+0x100>
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d016      	beq.n	8000ca8 <act_pesos+0x100>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	d013      	beq.n	8000ca8 <act_pesos+0x100>
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d010      	beq.n	8000ca8 <act_pesos+0x100>
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	2b0c      	cmp	r3, #12
 8000c8a:	d00d      	beq.n	8000ca8 <act_pesos+0x100>
				if (peso[i - 1] < minimo_peso_vecino)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	7bfa      	ldrb	r2, [r7, #15]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d905      	bls.n	8000ca8 <act_pesos+0x100>
					minimo_peso_vecino = peso[i - 1];
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	73fb      	strb	r3, [r7, #15]
			}

			peso[i] = minimo_peso_vecino + 1;
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	683a      	ldr	r2, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	3201      	adds	r2, #1
 8000cb2:	b2d2      	uxtb	r2, r2
 8000cb4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros; i++) {
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	f77f af7a 	ble.w	8000bb8 <act_pesos+0x10>
				}
	}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3714      	adds	r7, #20
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <Error_Handler>:
=======
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <prueba_avanzar>:

/* USER CODE BEGIN 4 */
void prueba_avanzar(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	correccion_avanzar();//codigo sencillo para configurar los margenes del ADC y verificacion de las ruedas y pilas
 8000aa8:	f000 fa60 	bl	8000f6c <correccion_avanzar>
	ejecutarGiro(izquierda);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 fb01 	bl	80010b4 <ejecutarGiro>
	correccion_avanzar();
 8000ab2:	f000 fa5b 	bl	8000f6c <correccion_avanzar>
	while(1);
 8000ab6:	bf00      	nop
 8000ab8:	e7fd      	b.n	8000ab6 <prueba_avanzar+0x12>
	...

08000abc <prueba_giros_y_sensores>:
}

void prueba_giros_y_sensores(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000ac0:	f000 fa54 	bl	8000f6c <correccion_avanzar>
	if (verificar_sensor()) {
 8000ac4:	f000 fbd0 	bl	8001268 <verificar_sensor>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <prueba_giros_y_sensores+0x2a>
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000ace:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4a36      	ldr	r2, [pc, #216]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f9c7 	bl	8000e6c <act_ubicacion>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000ae4:	701a      	strb	r2, [r3, #0]
	}
	if (ubicacion == 8) {
 8000ae6:	4b30      	ldr	r3, [pc, #192]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b08      	cmp	r3, #8
 8000aec:	d121      	bne.n	8000b32 <prueba_giros_y_sensores+0x76>
		HAL_Delay(600);
 8000aee:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000af2:	f000 ff75 	bl	80019e0 <HAL_Delay>
		ejecutarGiro(izquierda);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fadc 	bl	80010b4 <ejecutarGiro>
		orientacion_actual = oeste;
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000b02:	e012      	b.n	8000b2a <prueba_giros_y_sensores+0x6e>
			correccion_avanzar();
 8000b04:	f000 fa32 	bl	8000f6c <correccion_avanzar>
			if (verificar_sensor()) {
 8000b08:	f000 fbae 	bl	8001268 <verificar_sensor>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00b      	beq.n	8000b2a <prueba_giros_y_sensores+0x6e>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b12:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4a25      	ldr	r2, [pc, #148]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f9a5 	bl	8000e6c <act_ubicacion>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b28:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 8)) {
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b08      	cmp	r3, #8
 8000b30:	d0e8      	beq.n	8000b04 <prueba_giros_y_sensores+0x48>
			}
		}
	}
	if (ubicacion == 9) {
 8000b32:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b09      	cmp	r3, #9
 8000b38:	d121      	bne.n	8000b7e <prueba_giros_y_sensores+0xc2>
		HAL_Delay(600);
 8000b3a:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000b3e:	f000 ff4f 	bl	80019e0 <HAL_Delay>
		ejecutarGiro(derecha);
 8000b42:	2002      	movs	r0, #2
 8000b44:	f000 fab6 	bl	80010b4 <ejecutarGiro>
		orientacion_actual = norte;
 8000b48:	4b18      	ldr	r3, [pc, #96]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000b4e:	e012      	b.n	8000b76 <prueba_giros_y_sensores+0xba>
			correccion_avanzar();
 8000b50:	f000 fa0c 	bl	8000f6c <correccion_avanzar>
			if (verificar_sensor()) {
 8000b54:	f000 fb88 	bl	8001268 <verificar_sensor>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00b      	beq.n	8000b76 <prueba_giros_y_sensores+0xba>
				ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000b64:	7812      	ldrb	r2, [r2, #0]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f000 f97f 	bl	8000e6c <act_ubicacion>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b74:	701a      	strb	r2, [r3, #0]
		while ((ubicacion == 9)) {
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b09      	cmp	r3, #9
 8000b7c:	d0e8      	beq.n	8000b50 <prueba_giros_y_sensores+0x94>
			}
		}
	}
	if ((ubicacion == 13)
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <prueba_giros_y_sensores+0xec>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b0d      	cmp	r3, #13
 8000b84:	d10e      	bne.n	8000ba4 <prueba_giros_y_sensores+0xe8>
			&& (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <prueba_giros_y_sensores+0xf4>)
 8000b8a:	f002 f96d 	bl	8002e68 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d107      	bne.n	8000ba4 <prueba_giros_y_sensores+0xe8>
					== GPIO_PIN_RESET)) {
		ejecutarGiro(giro_180);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fa8d 	bl	80010b4 <ejecutarGiro>
		orientacion_actual = sur;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <prueba_giros_y_sensores+0xf0>)
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
		correccion_avanzar();
 8000ba0:	f000 f9e4 	bl	8000f6c <correccion_avanzar>
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000011c 	.word	0x2000011c
 8000bac:	2000011d 	.word	0x2000011d
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <prueba_casilla_n>:

void prueba_casilla_n(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

//	comentar el de arriba o el de abajo
	ubicacion = 7; //elegir ubicacion
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <prueba_casilla_n+0x3c>)
 8000bba:	2207      	movs	r2, #7
 8000bbc:	701a      	strb	r2, [r3, #0]
	pared[7] = 1; //tiene parede en frente, izq y der
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <prueba_casilla_n+0x40>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	71da      	strb	r2, [r3, #7]
	peso[11] = 1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <prueba_casilla_n+0x44>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	72da      	strb	r2, [r3, #11]
	peso[6] = 3;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <prueba_casilla_n+0x44>)
 8000bcc:	2203      	movs	r2, #3
 8000bce:	719a      	strb	r2, [r3, #6]
	peso[3] = 3; //asignarles pesos arbitrarios para ver si cumple con que vaya al menor
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <prueba_casilla_n+0x44>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	70da      	strb	r2, [r3, #3]
	casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //deberia dar que tiene que ir a 11
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <prueba_casilla_n+0x3c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4905      	ldr	r1, [pc, #20]	@ (8000bf4 <prueba_casilla_n+0x40>)
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <prueba_casilla_n+0x44>)
 8000be0:	f000 fc64 	bl	80014ac <calculo_minimo_peso>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <prueba_casilla_n+0x48>)
 8000bea:	701a      	strb	r2, [r3, #0]

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000011c 	.word	0x2000011c
 8000bf4:	20000130 	.word	0x20000130
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	20000000 	.word	0x20000000

08000c00 <prueba_post_relleno>:

void prueba_post_relleno(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	ubicacion = 5;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <prueba_post_relleno+0x54>)
 8000c06:	2205      	movs	r2, #5
 8000c08:	701a      	strb	r2, [r3, #0]
	casilla_n = 1;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <prueba_post_relleno+0x58>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
	orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //deberia dar sur
 8000c10:	4b10      	ldr	r3, [pc, #64]	@ (8000c54 <prueba_post_relleno+0x54>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <prueba_post_relleno+0x58>)
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f8c8 	bl	8000db0 <obtener_orientacion_futura>
 8000c20:	4603      	mov	r3, r0
 8000c22:	461a      	mov	r2, r3
 8000c24:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <prueba_post_relleno+0x5c>)
 8000c26:	701a      	strb	r2, [r3, #0]
	orientacion_actual = norte;
 8000c28:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <prueba_post_relleno+0x60>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	giro = obtenerGiro(orientacion_actual, orientacion_futura); //deberia dar giro 180
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <prueba_post_relleno+0x60>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <prueba_post_relleno+0x5c>)
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f8e5 	bl	8000e08 <obtenerGiro>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <prueba_post_relleno+0x64>)
 8000c44:	701a      	strb	r2, [r3, #0]
	ejecutarGiro(giro); //tendria que girar 180 xD
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <prueba_post_relleno+0x64>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa32 	bl	80010b4 <ejecutarGiro>
	while (1);
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <prueba_post_relleno+0x50>
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	2000011e 	.word	0x2000011e
 8000c60:	2000011d 	.word	0x2000011d
 8000c64:	2000011f 	.word	0x2000011f

08000c68 <programa_principal>:
}

void programa_principal(void) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	correccion_avanzar();
 8000c6c:	f000 f97e 	bl	8000f6c <correccion_avanzar>

	if (verificar_sensor()) { //cambio de casilla
 8000c70:	f000 fafa 	bl	8001268 <verificar_sensor>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d03d      	beq.n	8000cf6 <programa_principal+0x8e>
		contador_casillas= contador_casillas + 1;
 8000c7a:	4b44      	ldr	r3, [pc, #272]	@ (8000d8c <programa_principal+0x124>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b42      	ldr	r3, [pc, #264]	@ (8000d8c <programa_principal+0x124>)
 8000c84:	701a      	strb	r2, [r3, #0]
		ubicacion = act_ubicacion(ubicacion, orientacion_actual);
 8000c86:	4b42      	ldr	r3, [pc, #264]	@ (8000d90 <programa_principal+0x128>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4a42      	ldr	r2, [pc, #264]	@ (8000d94 <programa_principal+0x12c>)
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f8eb 	bl	8000e6c <act_ubicacion>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d90 <programa_principal+0x128>)
 8000c9c:	701a      	strb	r2, [r3, #0]
		casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d90 <programa_principal+0x128>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	493c      	ldr	r1, [pc, #240]	@ (8000d98 <programa_principal+0x130>)
 8000ca6:	483d      	ldr	r0, [pc, #244]	@ (8000d9c <programa_principal+0x134>)
 8000ca8:	f000 fc00 	bl	80014ac <calculo_minimo_peso>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8000da0 <programa_principal+0x138>)
 8000cb2:	701a      	strb	r2, [r3, #0]
		orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000cb4:	4b36      	ldr	r3, [pc, #216]	@ (8000d90 <programa_principal+0x128>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4a39      	ldr	r2, [pc, #228]	@ (8000da0 <programa_principal+0x138>)
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f876 	bl	8000db0 <obtener_orientacion_futura>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <programa_principal+0x13c>)
 8000cca:	701a      	strb	r2, [r3, #0]
		giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000ccc:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <programa_principal+0x12c>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4a34      	ldr	r2, [pc, #208]	@ (8000da4 <programa_principal+0x13c>)
 8000cd2:	7812      	ldrb	r2, [r2, #0]
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f896 	bl	8000e08 <obtenerGiro>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b31      	ldr	r3, [pc, #196]	@ (8000da8 <programa_principal+0x140>)
 8000ce2:	701a      	strb	r2, [r3, #0]
		orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <programa_principal+0x13c>)
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <programa_principal+0x12c>)
 8000cea:	701a      	strb	r2, [r3, #0]
		ejecutarGiro(giro); //giro y me voy del if
 8000cec:	4b2e      	ldr	r3, [pc, #184]	@ (8000da8 <programa_principal+0x140>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f9df 	bl	80010b4 <ejecutarGiro>
	}
	if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin)) {
 8000cf6:	2140      	movs	r1, #64	@ 0x40
 8000cf8:	482c      	ldr	r0, [pc, #176]	@ (8000dac <programa_principal+0x144>)
 8000cfa:	f002 f8b5 	bl	8002e68 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d141      	bne.n	8000d88 <programa_principal+0x120>
		HAL_Delay(tiempo_rebotes);
 8000d04:	2014      	movs	r0, #20
 8000d06:	f000 fe6b 	bl	80019e0 <HAL_Delay>
		if (HAL_GPIO_ReadPin(sensor_frontal_GPIO_Port, sensor_frontal_Pin) == GPIO_PIN_RESET) {
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	4827      	ldr	r0, [pc, #156]	@ (8000dac <programa_principal+0x144>)
 8000d0e:	f002 f8ab 	bl	8002e68 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d137      	bne.n	8000d88 <programa_principal+0x120>
			act_pared(pared, ubicacion, orientacion_actual); //primero actualiza la pared encontrada
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <programa_principal+0x128>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <programa_principal+0x12c>)
 8000d1e:	7812      	ldrb	r2, [r2, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	@ (8000d98 <programa_principal+0x130>)
 8000d24:	f000 fad0 	bl	80012c8 <act_pared>
			act_pesos(pared, peso);  //luego actualiza el peso
 8000d28:	491c      	ldr	r1, [pc, #112]	@ (8000d9c <programa_principal+0x134>)
 8000d2a:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <programa_principal+0x130>)
 8000d2c:	f000 fb1e 	bl	800136c <act_pesos>
			casilla_n = calculo_minimo_peso(peso, pared, ubicacion); //calcula la casilla a la que hay q ir
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <programa_principal+0x128>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <programa_principal+0x130>)
 8000d38:	4818      	ldr	r0, [pc, #96]	@ (8000d9c <programa_principal+0x134>)
 8000d3a:	f000 fbb7 	bl	80014ac <calculo_minimo_peso>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <programa_principal+0x138>)
 8000d44:	701a      	strb	r2, [r3, #0]
			orientacion_futura = obtener_orientacion_futura(ubicacion, casilla_n); //obtiene a la orientacion a la que hay que ir con la ubicacion actual y casilla n
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <programa_principal+0x128>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4a15      	ldr	r2, [pc, #84]	@ (8000da0 <programa_principal+0x138>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f82d 	bl	8000db0 <obtener_orientacion_futura>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <programa_principal+0x13c>)
 8000d5c:	701a      	strb	r2, [r3, #0]
			giro = obtenerGiro(orientacion_actual, orientacion_futura); //con la orientacion futura (orientación q quiero) y la orientacion actual que giro debo realizar
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <programa_principal+0x12c>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <programa_principal+0x13c>)
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f84d 	bl	8000e08 <obtenerGiro>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <programa_principal+0x140>)
 8000d74:	701a      	strb	r2, [r3, #0]
			orientacion_actual = orientacion_futura;  //actualizo la orientación
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <programa_principal+0x13c>)
 8000d78:	781a      	ldrb	r2, [r3, #0]
 8000d7a:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <programa_principal+0x12c>)
 8000d7c:	701a      	strb	r2, [r3, #0]
			ejecutarGiro(giro); //giro y me voy del if
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <programa_principal+0x140>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f996 	bl	80010b4 <ejecutarGiro>
		}
	}
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000140 	.word	0x20000140
 8000d90:	2000011c 	.word	0x2000011c
 8000d94:	2000011d 	.word	0x2000011d
 8000d98:	20000130 	.word	0x20000130
 8000d9c:	20000120 	.word	0x20000120
 8000da0:	20000000 	.word	0x20000000
 8000da4:	2000011e 	.word	0x2000011e
 8000da8:	2000011f 	.word	0x2000011f
 8000dac:	40020800 	.word	0x40020800

08000db0 <obtener_orientacion_futura>:
	TIM3->CCR4 = v_media; // rueda a velocidad media
	while (1)
		;
}

uint8_t obtener_orientacion_futura(uint8_t ubicacion, uint8_t casilla_n) { // Devuelve la dirección hacia donde hay que ir según la diferencia entre casillas
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	460a      	mov	r2, r1
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	71bb      	strb	r3, [r7, #6]
	if (casilla_n == ubicacion + 1)
 8000dc0:	79ba      	ldrb	r2, [r7, #6]
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d101      	bne.n	8000dce <obtener_orientacion_futura+0x1e>
		return oeste;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e015      	b.n	8000dfa <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 1)
 8000dce:	79ba      	ldrb	r2, [r7, #6]
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d101      	bne.n	8000ddc <obtener_orientacion_futura+0x2c>
		return este;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e00e      	b.n	8000dfa <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion + 4)
 8000ddc:	79ba      	ldrb	r2, [r7, #6]
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	3304      	adds	r3, #4
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d101      	bne.n	8000dea <obtener_orientacion_futura+0x3a>
		return norte;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e007      	b.n	8000dfa <obtener_orientacion_futura+0x4a>
	if (casilla_n == ubicacion - 4)
 8000dea:	79ba      	ldrb	r2, [r7, #6]
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	3b04      	subs	r3, #4
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d101      	bne.n	8000df8 <obtener_orientacion_futura+0x48>
		return sur;
 8000df4:	2302      	movs	r3, #2
 8000df6:	e000      	b.n	8000dfa <obtener_orientacion_futura+0x4a>

	return 100; // Movimiento no válido (no adyacente o fuera del tablero)
 8000df8:	2364      	movs	r3, #100	@ 0x64
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <obtenerGiro>:

uint8_t obtenerGiro(uint8_t orientacion_actual, uint8_t orientacion_futura) { // Calcula el giro que debe hacer el autito para pasar de su orientación actual a la deseada
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
	int diferencia = (orientacion_futura - orientacion_actual + 4) % 4; //el %4 se queda con el resto de la divsion por 4
 8000e18:	79ba      	ldrb	r2, [r7, #6]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	3304      	adds	r3, #4
 8000e20:	425a      	negs	r2, r3
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	bf58      	it	pl
 8000e2c:	4253      	negpl	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

	switch (diferencia) {
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d812      	bhi.n	8000e5c <obtenerGiro+0x54>
 8000e36:	a201      	add	r2, pc, #4	@ (adr r2, 8000e3c <obtenerGiro+0x34>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e59 	.word	0x08000e59
	case 0:
		return adelante;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	e006      	b.n	8000e5e <obtenerGiro+0x56>
	case 1:
		return derecha;
 8000e50:	2302      	movs	r3, #2
 8000e52:	e004      	b.n	8000e5e <obtenerGiro+0x56>
	case 2:
		return giro_180;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e002      	b.n	8000e5e <obtenerGiro+0x56>
	case 3:
		return izquierda;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <obtenerGiro+0x56>
	default:
		return 100; // Error
 8000e5c:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <act_ubicacion>:
uint8_t act_ubicacion(uint8_t ubicacion, uint8_t orientacion_actual) {
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	460a      	mov	r2, r1
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	71bb      	strb	r3, [r7, #6]

	switch (orientacion_actual) {
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d81a      	bhi.n	8000eb8 <act_ubicacion+0x4c>
 8000e82:	a201      	add	r2, pc, #4	@ (adr r2, 8000e88 <act_ubicacion+0x1c>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000e99 	.word	0x08000e99
 8000e8c:	08000ea1 	.word	0x08000ea1
 8000e90:	08000ea9 	.word	0x08000ea9
 8000e94:	08000eb1 	.word	0x08000eb1
	case 0:
		return ubicacion + 4;
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e00c      	b.n	8000eba <act_ubicacion+0x4e>
	case 1:
		return ubicacion - 1;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	e008      	b.n	8000eba <act_ubicacion+0x4e>
	case 2:
		return ubicacion - 4;
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	e004      	b.n	8000eba <act_ubicacion+0x4e>
	case 3:
		return ubicacion + 1;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	e000      	b.n	8000eba <act_ubicacion+0x4e>
	default:
		return 100; // Error
 8000eb8:	2364      	movs	r3, #100	@ 0x64
	}
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <promediar>:

void promediar(uint16_t *buffer) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	uint32_t sensor_izq_sum = 0, sensor_der_sum = 0; // Inicializamos variables para acumular la suma de las muestras
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	e012      	b.n	8000f04 <promediar+0x3c>
		sensor_izq_sum += buffer[0];
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
		sensor_der_sum += buffer[1]; //hago la suma y la guardo (eso significa el +=)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3302      	adds	r3, #2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
		buffer += 2;  //desplazo el puntero 2
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3304      	adds	r3, #4
 8000efc:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 16; ++i) { // Ralizamos la suma incrementando el puntero a las muestras
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3301      	adds	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	dde9      	ble.n	8000ede <promediar+0x16>
	}
// Dividimos las sumas para obtener el promedio
	sensor_izq_avg = sensor_izq_sum / 16; //divido 16 porq son 16 muestras
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <promediar+0x64>)
 8000f12:	801a      	strh	r2, [r3, #0]
	sensor_der_avg = sensor_der_sum / 16;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <promediar+0x68>)
 8000f1c:	801a      	strh	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	371c      	adds	r7, #28
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200001c4 	.word	0x200001c4
 8000f30:	200001c6 	.word	0x200001c6

08000f34 <HAL_ADC_ConvHalfCpltCallback>:
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a mitad
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
// Promediamos la primera mitad del buffer (el primer bloque de tamaño mínimo)
	promediar(&dma_buffer[0]);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8000f3e:	f7ff ffc3 	bl	8000ec8 <promediar>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000144 	.word	0x20000144

08000f50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) { // Rutina de antención a la interrupción de buffer a tope
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
// Promediamos la segunda mitad del buffer (el segundo bloque de tamaño mínimo)
	promediar(&dma_buffer[32]);
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <HAL_ADC_ConvCpltCallback+0x18>)
 8000f5a:	f7ff ffb5 	bl	8000ec8 <promediar>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000184 	.word	0x20000184

08000f6c <correccion_avanzar>:
void correccion_avanzar(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	// corrección para el sensor izquierdo
	if ((sensor_izq_avg < margen_I) && (margen_D < sensor_der_avg)) {
 8000f70:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <correccion_avanzar+0x50>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000f7a:	d209      	bcs.n	8000f90 <correccion_avanzar+0x24>
 8000f7c:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <correccion_avanzar+0x54>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f240 424c 	movw	r2, #1100	@ 0x44c
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d902      	bls.n	8000f90 <correccion_avanzar+0x24>
		apagar_derecha();  // apagar motor derecho
 8000f8a:	f000 f86b 	bl	8001064 <apagar_derecha>
 8000f8e:	e012      	b.n	8000fb6 <correccion_avanzar+0x4a>
	} else if ((margen_I < sensor_izq_avg) && (sensor_der_avg < margen_D)) { // avanzar con ambos motores
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <correccion_avanzar+0x50>)
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000f9a:	d909      	bls.n	8000fb0 <correccion_avanzar+0x44>
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <correccion_avanzar+0x54>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f240 424b 	movw	r2, #1099	@ 0x44b
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d802      	bhi.n	8000fb0 <correccion_avanzar+0x44>
		apagar_izquierda();  //apaga motor izquierdo
 8000faa:	f000 f833 	bl	8001014 <apagar_izquierda>
 8000fae:	e002      	b.n	8000fb6 <correccion_avanzar+0x4a>
	} else {
		avanzar();
 8000fb0:	f000 f808 	bl	8000fc4 <avanzar>
	}

}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001c4 	.word	0x200001c4
 8000fc0:	200001c6 	.word	0x200001c6

08000fc4 <avanzar>:
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
	TIM3->CCR4 = v_media; // rueda a velocidad media
	HAL_Delay(tiempo_mini);
}
void avanzar(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fce:	480f      	ldr	r0, [pc, #60]	@ (800100c <avanzar+0x48>)
 8000fd0:	f001 ff62 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fda:	480c      	ldr	r0, [pc, #48]	@ (800100c <avanzar+0x48>)
 8000fdc:	f001 ff5c 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <avanzar+0x48>)
 8000fe8:	f001 ff56 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff2:	4806      	ldr	r0, [pc, #24]	@ (800100c <avanzar+0x48>)
 8000ff4:	f001 ff50 	bl	8002e98 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <avanzar+0x4c>)
 8000ffa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <avanzar+0x4c>)
 8001002:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001006:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40020400 	.word	0x40020400
 8001010:	40000400 	.word	0x40000400

08001014 <apagar_izquierda>:

void apagar_izquierda(void) {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101e:	480f      	ldr	r0, [pc, #60]	@ (800105c <apagar_izquierda+0x48>)
 8001020:	f001 ff3a 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800102a:	480c      	ldr	r0, [pc, #48]	@ (800105c <apagar_izquierda+0x48>)
 800102c:	f001 ff34 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <apagar_izquierda+0x48>)
 8001038:	f001 ff2e 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001042:	4806      	ldr	r0, [pc, #24]	@ (800105c <apagar_izquierda+0x48>)
 8001044:	f001 ff28 	bl	8002e98 <HAL_GPIO_WritePin>
	TIM3->CCR3 = v_media; // rueda a velocidad media (condigurable)
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <apagar_izquierda+0x4c>)
 800104a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = 0; // rueda a velocidad media
 8001050:	4b03      	ldr	r3, [pc, #12]	@ (8001060 <apagar_izquierda+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40020400 	.word	0x40020400
 8001060:	40000400 	.word	0x40000400

08001064 <apagar_derecha>:

void apagar_derecha(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800106e:	480f      	ldr	r0, [pc, #60]	@ (80010ac <apagar_derecha+0x48>)
 8001070:	f001 ff12 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800107a:	480c      	ldr	r0, [pc, #48]	@ (80010ac <apagar_derecha+0x48>)
 800107c:	f001 ff0c 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <apagar_derecha+0x48>)
 8001088:	f001 ff06 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001092:	4806      	ldr	r0, [pc, #24]	@ (80010ac <apagar_derecha+0x48>)
 8001094:	f001 ff00 	bl	8002e98 <HAL_GPIO_WritePin>
	TIM3->CCR3 = 0; // rueda a velocidad media (condigurable)
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <apagar_derecha+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4 = v_media; // rueda a velocidad media
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <apagar_derecha+0x4c>)
 80010a0:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40000400 	.word	0x40000400

080010b4 <ejecutarGiro>:
void ejecutarGiro(uint8_t giro) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	switch (giro) {
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	d869      	bhi.n	8001198 <ejecutarGiro+0xe4>
 80010c4:	a201      	add	r2, pc, #4	@ (adr r2, 80010cc <ejecutarGiro+0x18>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	08001131 	.word	0x08001131
 80010d4:	080010f3 	.word	0x080010f3
 80010d8:	0800116f 	.word	0x0800116f
	case adelante:
		setMotorIzquierdo(avance);
 80010dc:	2001      	movs	r0, #1
 80010de:	f000 f85f 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f000 f88e 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 80010e8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80010ec:	f000 fc78 	bl	80019e0 <HAL_Delay>
		break;
 80010f0:	e052      	b.n	8001198 <ejecutarGiro+0xe4>

	case derecha:
		setMotorIzquierdo(avance);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 f854 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f000 f883 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 80010fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001102:	f000 fc6d 	bl	80019e0 <HAL_Delay>
		setMotorIzquierdo(avance);
 8001106:	2001      	movs	r0, #1
 8001108:	f000 f84a 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 800110c:	2002      	movs	r0, #2
 800110e:	f000 f879 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 8001112:	f240 203f 	movw	r0, #575	@ 0x23f
 8001116:	f000 fc63 	bl	80019e0 <HAL_Delay>
		setMotorIzquierdo(avance);
 800111a:	2001      	movs	r0, #1
 800111c:	f000 f840 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001120:	2001      	movs	r0, #1
 8001122:	f000 f86f 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 8001126:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800112a:	f000 fc59 	bl	80019e0 <HAL_Delay>
		break;
 800112e:	e033      	b.n	8001198 <ejecutarGiro+0xe4>

	case izquierda:
		setMotorIzquierdo(avance);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 f835 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001136:	2001      	movs	r0, #1
 8001138:	f000 f864 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 800113c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001140:	f000 fc4e 	bl	80019e0 <HAL_Delay>
		setMotorIzquierdo(retroceso);
 8001144:	2002      	movs	r0, #2
 8001146:	f000 f82b 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 800114a:	2001      	movs	r0, #1
 800114c:	f000 f85a 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_giro90);
 8001150:	f240 203f 	movw	r0, #575	@ 0x23f
 8001154:	f000 fc44 	bl	80019e0 <HAL_Delay>
		setMotorIzquierdo(avance);
 8001158:	2001      	movs	r0, #1
 800115a:	f000 f821 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 f850 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 8001164:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001168:	f000 fc3a 	bl	80019e0 <HAL_Delay>
		break;
 800116c:	e014      	b.n	8001198 <ejecutarGiro+0xe4>

	case giro_180:
		setMotorIzquierdo(avance);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 f816 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(retroceso);
 8001174:	2002      	movs	r0, #2
 8001176:	f000 f845 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_giro180);
 800117a:	f240 404c 	movw	r0, #1100	@ 0x44c
 800117e:	f000 fc2f 	bl	80019e0 <HAL_Delay>
		setMotorIzquierdo(avance);
 8001182:	2001      	movs	r0, #1
 8001184:	f000 f80c 	bl	80011a0 <setMotorIzquierdo>
		setMotorDerecho(avance);
 8001188:	2001      	movs	r0, #1
 800118a:	f000 f83b 	bl	8001204 <setMotorDerecho>
		HAL_Delay(tiempo_muerto);
 800118e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001192:	f000 fc25 	bl	80019e0 <HAL_Delay>
		break;
 8001196:	bf00      	nop

	}
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <setMotorIzquierdo>:

void setMotorIzquierdo(uint8_t modo) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR3 = v_media; // rueda a velocidad media
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <setMotorIzquierdo+0x5c>)
 80011ac:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80011b0:	63da      	str	r2, [r3, #60]	@ 0x3c

	switch (modo) {
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d002      	beq.n	80011be <setMotorIzquierdo+0x1e>
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d00d      	beq.n	80011d8 <setMotorIzquierdo+0x38>
	case retroceso:
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
		break;
	}
}
 80011bc:	e019      	b.n	80011f2 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c4:	480e      	ldr	r0, [pc, #56]	@ (8001200 <setMotorIzquierdo+0x60>)
 80011c6:	f001 fe67 	bl	8002e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011d0:	480b      	ldr	r0, [pc, #44]	@ (8001200 <setMotorIzquierdo+0x60>)
 80011d2:	f001 fe61 	bl	8002e98 <HAL_GPIO_WritePin>
		break;
 80011d6:	e00c      	b.n	80011f2 <setMotorIzquierdo+0x52>
		HAL_GPIO_WritePin(m1_izquierda_GPIO_Port, m1_izquierda_Pin, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011de:	4808      	ldr	r0, [pc, #32]	@ (8001200 <setMotorIzquierdo+0x60>)
 80011e0:	f001 fe5a 	bl	8002e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_izquierda_GPIO_Port, m0_izquierda_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <setMotorIzquierdo+0x60>)
 80011ec:	f001 fe54 	bl	8002e98 <HAL_GPIO_WritePin>
		break;
 80011f0:	bf00      	nop
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40000400 	.word	0x40000400
 8001200:	40020400 	.word	0x40020400

08001204 <setMotorDerecho>:

void setMotorDerecho(uint8_t modo) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]

	TIM3->CCR4 = v_media; // rueda a velocidad media
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <setMotorDerecho+0x5c>)
 8001210:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (modo) {
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d002      	beq.n	8001222 <setMotorDerecho+0x1e>
 800121c:	2b02      	cmp	r3, #2
 800121e:	d00d      	beq.n	800123c <setMotorDerecho+0x38>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
		break;

	}
}
 8001220:	e019      	b.n	8001256 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001228:	480e      	ldr	r0, [pc, #56]	@ (8001264 <setMotorDerecho+0x60>)
 800122a:	f001 fe35 	bl	8002e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <setMotorDerecho+0x60>)
 8001236:	f001 fe2f 	bl	8002e98 <HAL_GPIO_WritePin>
		break;
 800123a:	e00c      	b.n	8001256 <setMotorDerecho+0x52>
		HAL_GPIO_WritePin(m1_derecha_GPIO_Port, m1_derecha_Pin, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001242:	4808      	ldr	r0, [pc, #32]	@ (8001264 <setMotorDerecho+0x60>)
 8001244:	f001 fe28 	bl	8002e98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(m0_derecha_GPIO_Port, m0_derecha_Pin, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <setMotorDerecho+0x60>)
 8001250:	f001 fe22 	bl	8002e98 <HAL_GPIO_WritePin>
		break;
 8001254:	bf00      	nop
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40000400 	.word	0x40000400
 8001264:	40020400 	.word	0x40020400

08001268 <verificar_sensor>:

bool verificar_sensor(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	static GPIO_PinState ultima_lectura_valida = GPIO_PIN_SET;
	GPIO_PinState lectura1, lectura2;
	bool pedido = false; // No hay pedido hasta que se pulsa el botón
 800126e:	2300      	movs	r3, #0
 8001270:	71fb      	strb	r3, [r7, #7]
	lectura1 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 8001272:	2180      	movs	r1, #128	@ 0x80
 8001274:	4812      	ldr	r0, [pc, #72]	@ (80012c0 <verificar_sensor+0x58>)
 8001276:	f001 fdf7 	bl	8002e68 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	71bb      	strb	r3, [r7, #6]
// Si hubo un cambio
	if (lectura1 != ultima_lectura_valida) {
 800127e:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <verificar_sensor+0x5c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	79ba      	ldrb	r2, [r7, #6]
 8001284:	429a      	cmp	r2, r3
 8001286:	d015      	beq.n	80012b4 <verificar_sensor+0x4c>
		HAL_Delay(20); // Retardo de 20 milisegundos
 8001288:	2014      	movs	r0, #20
 800128a:	f000 fba9 	bl	80019e0 <HAL_Delay>
		lectura2 = HAL_GPIO_ReadPin(sensor_linea_GPIO_Port, sensor_linea_Pin);
 800128e:	2180      	movs	r1, #128	@ 0x80
 8001290:	480b      	ldr	r0, [pc, #44]	@ (80012c0 <verificar_sensor+0x58>)
 8001292:	f001 fde9 	bl	8002e68 <HAL_GPIO_ReadPin>
 8001296:	4603      	mov	r3, r0
 8001298:	717b      	strb	r3, [r7, #5]
		if (lectura2 == lectura1)
 800129a:	797a      	ldrb	r2, [r7, #5]
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d102      	bne.n	80012a8 <verificar_sensor+0x40>
			ultima_lectura_valida = lectura2;
 80012a2:	4a08      	ldr	r2, [pc, #32]	@ (80012c4 <verificar_sensor+0x5c>)
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	7013      	strb	r3, [r2, #0]
		if (ultima_lectura_valida == GPIO_PIN_RESET)
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <verificar_sensor+0x5c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <verificar_sensor+0x4c>
			pedido = true;
 80012b0:	2301      	movs	r3, #1
 80012b2:	71fb      	strb	r3, [r7, #7]
	}
	return pedido;
 80012b4:	79fb      	ldrb	r3, [r7, #7]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40020800 	.word	0x40020800
 80012c4:	20000001 	.word	0x20000001

080012c8 <act_pared>:


uint8_t act_pared(uint8_t *pared, uint8_t ubicacion, uint8_t orientacion_actual) { // este CODIGO ES SUPONIENDO Q YA SE DETECTO LA PARED
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
 80012d4:	4613      	mov	r3, r2
 80012d6:	70bb      	strb	r3, [r7, #2]

	// actualizamos el valor de pared según la orientación
	switch (orientacion_actual) { //SE PONE 0X08 PORQ ES HEXADECIMAL, SI NO LO PONES ESTA EN OTRA BASE, ME HIZO RE CONFUNDIR
 80012d8:	78bb      	ldrb	r3, [r7, #2]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d83a      	bhi.n	8001354 <act_pared+0x8c>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <act_pared+0x1c>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	0800130d 	.word	0x0800130d
 80012ec:	08001325 	.word	0x08001325
 80012f0:	0800133d 	.word	0x0800133d
	case norte: // TAMBIEN USO EL |= PARA Q SI DETECTA UNA PARED YA INICIALIZADA NO LA SUME Y ACUMULE UN CARRY , SI NO Q HAGA LA OR
		pared[ubicacion] |= 0x08;  // suma 8 (1000 en binario)
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	440b      	add	r3, r1
 8001302:	f042 0208 	orr.w	r2, r2, #8
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]
		break;
 800130a:	e025      	b.n	8001358 <act_pared+0x90>
	case este:
		pared[ubicacion] |= 0x04;  // suma 4 (0100 en binario)
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	781a      	ldrb	r2, [r3, #0]
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	440b      	add	r3, r1
 800131a:	f042 0204 	orr.w	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	701a      	strb	r2, [r3, #0]
		break;
 8001322:	e019      	b.n	8001358 <act_pared+0x90>
	case sur:
		pared[ubicacion] |= 0x02;  // suma 2 (0010 en binario)
 8001324:	78fb      	ldrb	r3, [r7, #3]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	440b      	add	r3, r1
 8001332:	f042 0202 	orr.w	r2, r2, #2
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	701a      	strb	r2, [r3, #0]
		break;
 800133a:	e00d      	b.n	8001358 <act_pared+0x90>
	case oeste:
		pared[ubicacion] |= 0x01;  // suma 1 (0001 en binario)
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	440b      	add	r3, r1
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	701a      	strb	r2, [r3, #0]
		break;
 8001352:	e001      	b.n	8001358 <act_pared+0x90>
	default:
		return 100; // Orientación no válida
 8001354:	2364      	movs	r3, #100	@ 0x64
 8001356:	e003      	b.n	8001360 <act_pared+0x98>
	}
	return pared[ubicacion];  // devolvés el valor actualizado
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <act_pesos>:

void act_pesos(uint8_t *pared, uint8_t *peso) {
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	uint8_t minimo_peso_vecino;
	for (int j = 0; j < 4; j++) {
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	e08b      	b.n	8001494 <act_pesos+0x128>
		for (int i = 0; i < cant_casilleros - 1; i++) {
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e081      	b.n	8001486 <act_pesos+0x11a>
			minimo_peso_vecino = 100;
 8001382:	2364      	movs	r3, #100	@ 0x64
 8001384:	75fb      	strb	r3, [r7, #23]
			if (((i + 4 < cant_casilleros) && (pared[i] & 0x08) == 0)) { //mirar la el vecino de arriba si el bit 3 es 0 y si i es menor a 12 (es decir q no tiene pared superior) PORQUE SI NO NO PUEDE CALCULAR EL VECINO DE ARRIBA PORQ SERIA I+4 Y SI I ES 12 O MAS, I+4 VA A DAR 16 O MAS, Q NO EXISTE
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b0b      	cmp	r3, #11
 800138a:	dc15      	bgt.n	80013b8 <act_pesos+0x4c>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10d      	bne.n	80013b8 <act_pesos+0x4c>
				if (peso[i + 4] < minimo_peso_vecino)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3304      	adds	r3, #4
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	7dfa      	ldrb	r2, [r7, #23]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d905      	bls.n	80013b8 <act_pesos+0x4c>
					minimo_peso_vecino = peso[i + 4];
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3304      	adds	r3, #4
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	75fb      	strb	r3, [r7, #23]
			}

			if (((!(i == 3 || i == 7 || i == 11 || i == 15)) && (pared[i] & 0x01) == 0)) { //ideam mirar el vecino derecha si el bit 2 es 0 y si el numero es distinto a 3 7 11 y 15 PORQ EN ESE CASO NO TIENE VECINO A LA derecha (LIMITE DEL MAPA)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d01e      	beq.n	80013fc <act_pesos+0x90>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b07      	cmp	r3, #7
 80013c2:	d01b      	beq.n	80013fc <act_pesos+0x90>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2b0b      	cmp	r3, #11
 80013c8:	d018      	beq.n	80013fc <act_pesos+0x90>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d015      	beq.n	80013fc <act_pesos+0x90>
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <act_pesos+0x90>
				if (peso[i + 1] < minimo_peso_vecino)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	7dfa      	ldrb	r2, [r7, #23]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d905      	bls.n	80013fc <act_pesos+0x90>
					minimo_peso_vecino = peso[i + 1];
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	75fb      	strb	r3, [r7, #23]
			}

			if (((i >= 4) && (pared[i] & 0x02) == 0)) { //ideam al primero, mira el vecino de abajo en el caso de q i sea mayor o igual a 4
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	dd15      	ble.n	800142e <act_pesos+0xc2>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10d      	bne.n	800142e <act_pesos+0xc2>
				if (peso[i - 4] < minimo_peso_vecino)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3b04      	subs	r3, #4
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	7dfa      	ldrb	r2, [r7, #23]
 800141e:	429a      	cmp	r2, r3
 8001420:	d905      	bls.n	800142e <act_pesos+0xc2>
					minimo_peso_vecino = peso[i - 4];
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b04      	subs	r3, #4
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	4413      	add	r3, r2
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	75fb      	strb	r3, [r7, #23]
			}

			if (((pared[i] & 0x04) == 0) && (!(i == 0 || i == 4 || i == 8 || i == 12))) { //ideam al dos
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d119      	bne.n	8001472 <act_pesos+0x106>
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d016      	beq.n	8001472 <act_pesos+0x106>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d013      	beq.n	8001472 <act_pesos+0x106>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b08      	cmp	r3, #8
 800144e:	d010      	beq.n	8001472 <act_pesos+0x106>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b0c      	cmp	r3, #12
 8001454:	d00d      	beq.n	8001472 <act_pesos+0x106>
				if (peso[i - 1] < minimo_peso_vecino)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	3b01      	subs	r3, #1
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	4413      	add	r3, r2
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	7dfa      	ldrb	r2, [r7, #23]
 8001462:	429a      	cmp	r2, r3
 8001464:	d905      	bls.n	8001472 <act_pesos+0x106>
					minimo_peso_vecino = peso[i - 1];
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3b01      	subs	r3, #1
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	75fb      	strb	r3, [r7, #23]
			}

			peso[i] = minimo_peso_vecino + 1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	7dfa      	ldrb	r2, [r7, #23]
 800147a:	3201      	adds	r2, #1
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < cant_casilleros - 1; i++) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b0e      	cmp	r3, #14
 800148a:	f77f af7a 	ble.w	8001382 <act_pesos+0x16>
	for (int j = 0; j < 4; j++) {
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	2b03      	cmp	r3, #3
 8001498:	f77f af70 	ble.w	800137c <act_pesos+0x10>
		}
	}
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	371c      	adds	r7, #28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <calculo_minimo_peso>:

uint8_t calculo_minimo_peso(uint8_t *peso, uint8_t *pared, uint8_t ubicacion) {
 80014ac:	b480      	push	{r7}
 80014ae:	b087      	sub	sp, #28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	4613      	mov	r3, r2
 80014b8:	71fb      	strb	r3, [r7, #7]
	uint8_t minimo_peso = 15;
 80014ba:	230f      	movs	r3, #15
 80014bc:	75fb      	strb	r3, [r7, #23]
	if (((peso[ubicacion + 4] < minimo_peso) && ((pared[ubicacion] & 0x08) == 0) && (ubicacion + 4 < cant_casilleros))) {
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	3304      	adds	r3, #4
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	7dfa      	ldrb	r2, [r7, #23]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d915      	bls.n	80014fa <calculo_minimo_peso+0x4e>
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <calculo_minimo_peso+0x4e>
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b0b      	cmp	r3, #11
 80014e2:	d80a      	bhi.n	80014fa <calculo_minimo_peso+0x4e>
		minimo_peso = peso[ubicacion + 4];
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	3304      	adds	r3, #4
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 4;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	3304      	adds	r3, #4
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <calculo_minimo_peso+0x138>)
 80014f8:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion + 1] < minimo_peso) && ((pared[ubicacion] & 0x01) == 0) && (!(ubicacion == 3 || ubicacion == 7 || ubicacion == 11 || ubicacion == 15)))) { // el signo de admiracion niega y convierte en booleana ubicacion
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	3301      	adds	r3, #1
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	7dfa      	ldrb	r2, [r7, #23]
 8001506:	429a      	cmp	r2, r3
 8001508:	d91e      	bls.n	8001548 <calculo_minimo_peso+0x9c>
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	68ba      	ldr	r2, [r7, #8]
 800150e:	4413      	add	r3, r2
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <calculo_minimo_peso+0x9c>
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d013      	beq.n	8001548 <calculo_minimo_peso+0x9c>
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	2b07      	cmp	r3, #7
 8001524:	d010      	beq.n	8001548 <calculo_minimo_peso+0x9c>
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b0b      	cmp	r3, #11
 800152a:	d00d      	beq.n	8001548 <calculo_minimo_peso+0x9c>
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d00a      	beq.n	8001548 <calculo_minimo_peso+0x9c>
		minimo_peso = peso[ubicacion + 1];
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3301      	adds	r3, #1
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	4413      	add	r3, r2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion + 1;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3301      	adds	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b27      	ldr	r3, [pc, #156]	@ (80015e4 <calculo_minimo_peso+0x138>)
 8001546:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 4] < minimo_peso) && ((pared[ubicacion] & 0x02) == 0) && (4 <= ubicacion))) {
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	3b04      	subs	r3, #4
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	7dfa      	ldrb	r2, [r7, #23]
 8001554:	429a      	cmp	r2, r3
 8001556:	d915      	bls.n	8001584 <calculo_minimo_peso+0xd8>
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10d      	bne.n	8001584 <calculo_minimo_peso+0xd8>
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d90a      	bls.n	8001584 <calculo_minimo_peso+0xd8>
		minimo_peso = peso[ubicacion - 4];
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b04      	subs	r3, #4
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 4;
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	3b04      	subs	r3, #4
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <calculo_minimo_peso+0x138>)
 8001582:	701a      	strb	r2, [r3, #0]
	}
	if (((peso[ubicacion - 1] < minimo_peso) && ((pared[ubicacion] & 0x04) == 0)&& (!(ubicacion == 0 || ubicacion == 4 || ubicacion == 8 || ubicacion == 12)))) {
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	3b01      	subs	r3, #1
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	7dfa      	ldrb	r2, [r7, #23]
 8001590:	429a      	cmp	r2, r3
 8001592:	d91e      	bls.n	80015d2 <calculo_minimo_peso+0x126>
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d116      	bne.n	80015d2 <calculo_minimo_peso+0x126>
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <calculo_minimo_peso+0x126>
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d010      	beq.n	80015d2 <calculo_minimo_peso+0x126>
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d00d      	beq.n	80015d2 <calculo_minimo_peso+0x126>
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	2b0c      	cmp	r3, #12
 80015ba:	d00a      	beq.n	80015d2 <calculo_minimo_peso+0x126>
		minimo_peso = peso[ubicacion - 1];
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	3b01      	subs	r3, #1
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	75fb      	strb	r3, [r7, #23]
		casilla_n = ubicacion - 1;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <calculo_minimo_peso+0x138>)
 80015d0:	701a      	strb	r2, [r3, #0]
	}
	return casilla_n;
 80015d2:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <calculo_minimo_peso+0x138>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000

080015e8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]

}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <Error_Handler>:
>>>>>>> Stashed changes

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
<<<<<<< Updated upstream
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
=======
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< Updated upstream
 8000cd6:	b672      	cpsid	i
}
 8000cd8:	bf00      	nop
=======
 8001602:	b672      	cpsid	i
}
 8001604:	bf00      	nop
>>>>>>> Stashed changes
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
<<<<<<< Updated upstream
 8000cda:	bf00      	nop
 8000cdc:	e7fd      	b.n	8000cda <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
=======
 8001606:	bf00      	nop
 8001608:	e7fd      	b.n	8001606 <Error_Handler+0x8>
	...

0800160c <HAL_MspInit>:
>>>>>>> Stashed changes
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< Updated upstream
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
=======
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< Updated upstream
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fe94 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>
=======
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <HAL_MspInit+0x4c>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <HAL_MspInit+0x4c>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001636:	4a08      	ldr	r2, [pc, #32]	@ (8001658 <HAL_MspInit+0x4c>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	@ 0x40
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 febe 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>
>>>>>>> Stashed changes
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< Updated upstream
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_ADC_MspInit>:
=======
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800

0800165c <HAL_ADC_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< Updated upstream
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8000e0c <HAL_ADC_MspInit+0xdc>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d158      	bne.n	8000e04 <HAL_ADC_MspInit+0xd4>
=======
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2f      	ldr	r2, [pc, #188]	@ (8001738 <HAL_ADC_MspInit+0xdc>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d158      	bne.n	8001730 <HAL_ADC_MspInit+0xd4>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< Updated upstream
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b2e      	ldr	r3, [pc, #184]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b2b      	ldr	r3, [pc, #172]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b27      	ldr	r3, [pc, #156]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a26      	ldr	r2, [pc, #152]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <HAL_ADC_MspInit+0xe0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
=======
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b2e      	ldr	r3, [pc, #184]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001686:	4a2d      	ldr	r2, [pc, #180]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 8001688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800168c:	6453      	str	r3, [r2, #68]	@ 0x44
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016aa:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_ADC_MspInit+0xe0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = sensor_derecho_Pin|sensor_izquierdo_Pin;
<<<<<<< Updated upstream
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481d      	ldr	r0, [pc, #116]	@ (8000e14 <HAL_ADC_MspInit+0xe4>)
 8000d9e:	f001 fa07 	bl	80021b0 <HAL_GPIO_Init>
=======
 80016b6:	2303      	movs	r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ba:	2303      	movs	r3, #3
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	481d      	ldr	r0, [pc, #116]	@ (8001740 <HAL_ADC_MspInit+0xe4>)
 80016ca:	f001 fa31 	bl	8002b30 <HAL_GPIO_Init>
>>>>>>> Stashed changes

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< Updated upstream
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000da4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e1c <HAL_ADC_MspInit+0xec>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000ddc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dea:	f000 fe71 	bl	8001ad0 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000df4:	f7ff ff6d 	bl	8000cd2 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dfe:	4a06      	ldr	r2, [pc, #24]	@ (8000e18 <HAL_ADC_MspInit+0xe8>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	@ 0x38
=======
 80016ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_ADC_MspInit+0xec>)
 80016d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 80016f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 8001700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 8001708:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800170c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001714:	480b      	ldr	r0, [pc, #44]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 8001716:	f000 fe9b 	bl	8002450 <HAL_DMA_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001720:	f7ff ff6d 	bl	80015fe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 8001728:	639a      	str	r2, [r3, #56]	@ 0x38
 800172a:	4a06      	ldr	r2, [pc, #24]	@ (8001744 <HAL_ADC_MspInit+0xe8>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6393      	str	r3, [r2, #56]	@ 0x38
>>>>>>> Stashed changes

    /* USER CODE END ADC1_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40012000 	.word	0x40012000
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020400 	.word	0x40020400
 8000e18:	20000074 	.word	0x20000074
 8000e1c:	40026410 	.word	0x40026410

08000e20 <HAL_TIM_Base_MspInit>:
=======
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40012000 	.word	0x40012000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020400 	.word	0x40020400
 8001744:	20000074 	.word	0x20000074
 8001748:	40026410 	.word	0x40026410

0800174c <HAL_TIM_Base_MspInit>:
>>>>>>> Stashed changes
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< Updated upstream
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e5c <HAL_TIM_Base_MspInit+0x3c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d10d      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x2e>
=======
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <HAL_TIM_Base_MspInit+0x3c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d10d      	bne.n	800177a <HAL_TIM_Base_MspInit+0x2e>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< Updated upstream
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <HAL_TIM_Base_MspInit+0x40>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
=======
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	4a09      	ldr	r2, [pc, #36]	@ (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6413      	str	r3, [r2, #64]	@ 0x40
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <HAL_TIM_Base_MspInit+0x40>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
>>>>>>> Stashed changes

    /* USER CODE END TIM3_MspInit 1 */

  }

}
<<<<<<< Updated upstream
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40000400 	.word	0x40000400
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11e      	bne.n	8000ec4 <HAL_TIM_MspPostInit+0x60>
=======
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40000400 	.word	0x40000400
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_TIM_MspPostInit+0x68>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d11e      	bne.n	80017f0 <HAL_TIM_MspPostInit+0x60>
>>>>>>> Stashed changes
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< Updated upstream
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a10      	ldr	r2, [pc, #64]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
=======
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a10      	ldr	r2, [pc, #64]	@ (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <HAL_TIM_MspPostInit+0x6c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
>>>>>>> Stashed changes
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = V_izquierda_Pin|V_derecha_Pin;
<<<<<<< Updated upstream
 8000ea2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ea6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <HAL_TIM_MspPostInit+0x70>)
 8000ec0:	f001 f976 	bl	80021b0 <HAL_GPIO_Init>
=======
 80017ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4619      	mov	r1, r3
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <HAL_TIM_MspPostInit+0x70>)
 80017ec:	f001 f9a0 	bl	8002b30 <HAL_GPIO_Init>
>>>>>>> Stashed changes
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< Updated upstream
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020800 	.word	0x40020800

08000ed8 <NMI_Handler>:
=======
 80017f0:	bf00      	nop
 80017f2:	3720      	adds	r7, #32
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40000400 	.word	0x40000400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020800 	.word	0x40020800

08001804 <NMI_Handler>:
>>>>>>> Stashed changes
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< Updated upstream
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
=======
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< Updated upstream
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:
=======
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <NMI_Handler+0x4>

0800180c <HardFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< Updated upstream
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
=======
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:
=======
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< Updated upstream
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
=======
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:
=======
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< Updated upstream
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
=======
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:
=======
 8001820:	bf00      	nop
 8001822:	e7fd      	b.n	8001820 <BusFault_Handler+0x4>

08001824 <UsageFault_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< Updated upstream
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
=======
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< Updated upstream
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:
=======
 8001828:	bf00      	nop
 800182a:	e7fd      	b.n	8001828 <UsageFault_Handler+0x4>

0800182c <SVC_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< Updated upstream
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
=======
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:
=======
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <DebugMon_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< Updated upstream
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
=======
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:
=======
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< Updated upstream
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
=======
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:
=======
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <SysTick_Handler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< Updated upstream
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
=======
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< Updated upstream
 8000f2e:	f000 f89b 	bl	8001068 <HAL_IncTick>
=======
 800185a:	f000 f8a1 	bl	80019a0 <HAL_IncTick>
>>>>>>> Stashed changes
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <DMA2_Stream0_IRQHandler>:
=======
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sensor_frontal_Pin);
 8001866:	2040      	movs	r0, #64	@ 0x40
 8001868:	f001 fb30 	bl	8002ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <DMA2_Stream0_IRQHandler>:
>>>>>>> Stashed changes

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< Updated upstream
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
=======
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< Updated upstream
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <DMA2_Stream0_IRQHandler+0x10>)
 8000f3e:	f000 fecd 	bl	8001cdc <HAL_DMA_IRQHandler>
=======
 8001874:	4802      	ldr	r0, [pc, #8]	@ (8001880 <DMA2_Stream0_IRQHandler+0x10>)
 8001876:	f000 fef1 	bl	800265c <HAL_DMA_IRQHandler>
>>>>>>> Stashed changes
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< Updated upstream
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000074 	.word	0x20000074

08000f4c <SystemInit>:
=======
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000074 	.word	0x20000074

08001884 <SystemInit>:
>>>>>>> Stashed changes
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< Updated upstream
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> Stashed changes

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< Updated upstream
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:
=======
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:
>>>>>>> Stashed changes

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< Updated upstream
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 fdcd 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff faa7 	bl	80004f4 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fb4:	08003bc4 	.word	0x08003bc4
  ldr r2, =_sbss
 8000fb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fbc:	200001c4 	.word	0x200001c4

08000fc0 <ADC_IRQHandler>:
=======
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018ac:	f7ff ffea 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f002 fe09 	bl	80044ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7fe fe0b 	bl	80004f4 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018ec:	08004574 	.word	0x08004574
  ldr r2, =_sbss
 80018f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018f4:	200001cc 	.word	0x200001cc

080018f8 <ADC_IRQHandler>:
>>>>>>> Stashed changes
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< Updated upstream
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
=======
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
>>>>>>> Stashed changes
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< Updated upstream
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
=======
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190a:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< Updated upstream
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fde:	6013      	str	r3, [r2, #0]
=======
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001916:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< Updated upstream
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	6013      	str	r3, [r2, #0]
=======
 8001918:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	@ (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001922:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< Updated upstream
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 fd2d 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fe72 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
=======
 8001924:	2003      	movs	r0, #3
 8001926:	f000 fd51 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff fe6c 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_InitTick>:
>>>>>>> Stashed changes
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< Updated upstream
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fd45 	bl	8001ab6 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
=======
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fd69 	bl	8002436 <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
>>>>>>> Stashed changes
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< Updated upstream
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 fd0d 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
=======
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 fd31 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
>>>>>>> Stashed changes
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000004 	.word	0x20000004
 8001060:	2000000c 	.word	0x2000000c
 8001064:	20000008 	.word	0x20000008

08001068 <HAL_IncTick>:
=======
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000004 	.word	0x20000004
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
>>>>>>> Stashed changes
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< Updated upstream
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000000c 	.word	0x2000000c
 800108c:	200001c0 	.word	0x200001c0

08001090 <HAL_GetTick>:
=======
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200001c8 	.word	0x200001c8

080019c8 <HAL_GetTick>:
>>>>>>> Stashed changes
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< Updated upstream
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	200001c0 	.word	0x200001c0

080010a8 <HAL_ADC_Init>:
=======
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200001c8 	.word	0x200001c8

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <HAL_ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e033      	b.n	8001126 <HAL_ADC_Init+0x7e>
=======
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e033      	b.n	8001aa6 <HAL_ADC_Init+0x7e>
>>>>>>> Stashed changes
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< Updated upstream
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d109      	bne.n	80010da <HAL_ADC_Init+0x32>
=======
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d109      	bne.n	8001a5a <HAL_ADC_Init+0x32>
>>>>>>> Stashed changes

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< Updated upstream
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe32 	bl	8000d30 <HAL_ADC_MspInit>
=======
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff fe08 	bl	800165c <HAL_ADC_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< Updated upstream
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d118      	bne.n	8001118 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ea:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010ee:	f023 0302 	bic.w	r3, r3, #2
 80010f2:	f043 0202 	orr.w	r2, r3, #2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a6e:	f023 0302 	bic.w	r3, r3, #2
 8001a72:	f043 0202 	orr.w	r2, r3, #2
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< Updated upstream
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 fa58 	bl	80015b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f023 0303 	bic.w	r3, r3, #3
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	@ 0x40
 8001116:	e001      	b.n	800111c <HAL_ADC_Init+0x74>
=======
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fa58 	bl	8001f30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f023 0303 	bic.w	r3, r3, #3
 8001a8e:	f043 0201 	orr.w	r2, r3, #1
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a96:	e001      	b.n	8001a9c <HAL_ADC_Init+0x74>
>>>>>>> Stashed changes
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< Updated upstream
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]
=======
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_ADC_Start_DMA>:
=======
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_ADC_Start_DMA>:
>>>>>>> Stashed changes
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
<<<<<<< Updated upstream
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	77fb      	strb	r3, [r7, #31]
=======
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800114a:	2b01      	cmp	r3, #1
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Start_DMA+0x22>
 800114e:	2302      	movs	r3, #2
 8001150:	e0eb      	b.n	800132a <HAL_ADC_Start_DMA+0x1fa>
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_ADC_Start_DMA+0x22>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e0eb      	b.n	8001caa <HAL_ADC_Start_DMA+0x1fa>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< Updated upstream
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	2b01      	cmp	r3, #1
 8001166:	d018      	beq.n	800119a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0201 	orr.w	r2, r2, #1
 8001176:	609a      	str	r2, [r3, #8]
=======
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d018      	beq.n	8001b1a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< Updated upstream
 8001178:	4b6e      	ldr	r3, [pc, #440]	@ (8001334 <HAL_ADC_Start_DMA+0x204>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6e      	ldr	r2, [pc, #440]	@ (8001338 <HAL_ADC_Start_DMA+0x208>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0c9a      	lsrs	r2, r3, #18
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800118c:	e002      	b.n	8001194 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3b01      	subs	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <HAL_ADC_Start_DMA+0x5e>
=======
 8001af8:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_ADC_Start_DMA+0x204>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb8 <HAL_ADC_Start_DMA+0x208>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9a      	lsrs	r2, r3, #18
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b0c:	e002      	b.n	8001b14 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f9      	bne.n	8001b0e <HAL_ADC_Start_DMA+0x5e>
>>>>>>> Stashed changes
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
<<<<<<< Updated upstream
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a8:	d107      	bne.n	80011ba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011b8:	609a      	str	r2, [r3, #8]
=======
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b28:	d107      	bne.n	8001b3a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b38:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< Updated upstream
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 80a3 	bne.w	8001310 <HAL_ADC_Start_DMA+0x1e0>
=======
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 80a3 	bne.w	8001c90 <HAL_ADC_Start_DMA+0x1e0>
>>>>>>> Stashed changes
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< Updated upstream
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011d2:	f023 0301 	bic.w	r3, r3, #1
 80011d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< Updated upstream
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< Updated upstream
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001208:	d106      	bne.n	8001218 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f023 0206 	bic.w	r2, r3, #6
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	645a      	str	r2, [r3, #68]	@ 0x44
 8001216:	e002      	b.n	800121e <HAL_ADC_Start_DMA+0xee>
=======
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b88:	d106      	bne.n	8001b98 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f023 0206 	bic.w	r2, r3, #6
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_Start_DMA+0xee>
>>>>>>> Stashed changes
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< Updated upstream
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 8001226:	4b45      	ldr	r3, [pc, #276]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 8001228:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800122e:	4a44      	ldr	r2, [pc, #272]	@ (8001340 <HAL_ADC_Start_DMA+0x210>)
 8001230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001236:	4a43      	ldr	r2, [pc, #268]	@ (8001344 <HAL_ADC_Start_DMA+0x214>)
 8001238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800123e:	4a42      	ldr	r2, [pc, #264]	@ (8001348 <HAL_ADC_Start_DMA+0x218>)
 8001240:	64da      	str	r2, [r3, #76]	@ 0x4c
=======
 8001ba6:	4b45      	ldr	r3, [pc, #276]	@ (8001cbc <HAL_ADC_Start_DMA+0x20c>)
 8001ba8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bae:	4a44      	ldr	r2, [pc, #272]	@ (8001cc0 <HAL_ADC_Start_DMA+0x210>)
 8001bb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb6:	4a43      	ldr	r2, [pc, #268]	@ (8001cc4 <HAL_ADC_Start_DMA+0x214>)
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbe:	4a42      	ldr	r2, [pc, #264]	@ (8001cc8 <HAL_ADC_Start_DMA+0x218>)
 8001bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
>>>>>>> Stashed changes
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< Updated upstream
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800124a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800125a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800126a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	334c      	adds	r3, #76	@ 0x4c
 8001276:	4619      	mov	r1, r3
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f000 fcd6 	bl	8001c2c <HAL_DMA_Start_IT>
 8001280:	4603      	mov	r3, r0
 8001282:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 031f 	and.w	r3, r3, #31
 800128c:	2b00      	cmp	r3, #0
 800128e:	d12a      	bne.n	80012e6 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a2d      	ldr	r2, [pc, #180]	@ (800134c <HAL_ADC_Start_DMA+0x21c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d015      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x196>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a2c      	ldr	r2, [pc, #176]	@ (8001350 <HAL_ADC_Start_DMA+0x220>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_Start_DMA+0x180>
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_ADC_Start_DMA+0x224>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d136      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <HAL_ADC_Start_DMA+0x20c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d130      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
=======
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001bca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001bda:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	334c      	adds	r3, #76	@ 0x4c
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	68ba      	ldr	r2, [r7, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f000 fcd6 	bl	80025ac <HAL_DMA_Start_IT>
 8001c00:	4603      	mov	r3, r0
 8001c02:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12a      	bne.n	8001c66 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <HAL_ADC_Start_DMA+0x21c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d015      	beq.n	8001c46 <HAL_ADC_Start_DMA+0x196>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd0 <HAL_ADC_Start_DMA+0x220>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_Start_DMA+0x180>
 8001c24:	4b25      	ldr	r3, [pc, #148]	@ (8001cbc <HAL_ADC_Start_DMA+0x20c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00a      	beq.n	8001c46 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_ADC_Start_DMA+0x224>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d136      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_ADC_Start_DMA+0x20c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d130      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
>>>>>>> Stashed changes
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
<<<<<<< Updated upstream
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d129      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e020      	b.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
=======
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d129      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e020      	b.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
>>>>>>> Stashed changes
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< Updated upstream
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a18      	ldr	r2, [pc, #96]	@ (800134c <HAL_ADC_Start_DMA+0x21c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d11b      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d114      	bne.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	e00b      	b.n	8001328 <HAL_ADC_Start_DMA+0x1f8>
=======
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ccc <HAL_ADC_Start_DMA+0x21c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d114      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_ADC_Start_DMA+0x1f8>
>>>>>>> Stashed changes
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< Updated upstream
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f043 0210 	orr.w	r2, r3, #16
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001320:	f043 0201 	orr.w	r2, r3, #1
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	f043 0210 	orr.w	r2, r3, #16
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  }

  /* Return function status */
  return tmp_hal_status;
<<<<<<< Updated upstream
 8001328:	7ffb      	ldrb	r3, [r7, #31]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000004 	.word	0x20000004
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	080017a9 	.word	0x080017a9
 8001344:	08001863 	.word	0x08001863
 8001348:	0800187f 	.word	0x0800187f
 800134c:	40012000 	.word	0x40012000
 8001350:	40012100 	.word	0x40012100
 8001354:	40012200 	.word	0x40012200

08001358 <HAL_ADC_ErrorCallback>:
=======
 8001ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	431bde83 	.word	0x431bde83
 8001cbc:	40012300 	.word	0x40012300
 8001cc0:	08002129 	.word	0x08002129
 8001cc4:	080021e3 	.word	0x080021e3
 8001cc8:	080021ff 	.word	0x080021ff
 8001ccc:	40012000 	.word	0x40012000
 8001cd0:	40012100 	.word	0x40012100
 8001cd4:	40012200 	.word	0x40012200

08001cd8 <HAL_ADC_ErrorCallback>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
=======
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_ADC_ConfigChannel>:
=======
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ADC_ConfigChannel>:
>>>>>>> Stashed changes
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
<<<<<<< Updated upstream
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
=======
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
>>>>>>> Stashed changes
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< Updated upstream
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_ADC_ConfigChannel+0x1c>
 8001384:	2302      	movs	r3, #2
 8001386:	e105      	b.n	8001594 <HAL_ADC_ConfigChannel+0x228>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b09      	cmp	r3, #9
 8001396:	d925      	bls.n	80013e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68d9      	ldr	r1, [r3, #12]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43da      	mvns	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	400a      	ands	r2, r1
 80013bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68d9      	ldr	r1, [r3, #12]
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4618      	mov	r0, r3
 80013d0:	4603      	mov	r3, r0
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4403      	add	r3, r0
 80013d6:	3b1e      	subs	r3, #30
 80013d8:	409a      	lsls	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	e022      	b.n	800142a <HAL_ADC_ConfigChannel+0xbe>
=======
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1c>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e105      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x228>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d925      	bls.n	8001d64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68d9      	ldr	r1, [r3, #12]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3b1e      	subs	r3, #30
 8001d2e:	2207      	movs	r2, #7
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43da      	mvns	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	400a      	ands	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68d9      	ldr	r1, [r3, #12]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4403      	add	r3, r0
 8001d56:	3b1e      	subs	r3, #30
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	e022      	b.n	8001daa <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> Stashed changes
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< Updated upstream
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6919      	ldr	r1, [r3, #16]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	4613      	mov	r3, r2
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	4413      	add	r3, r2
 80013f8:	2207      	movs	r2, #7
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6919      	ldr	r1, [r3, #16]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4618      	mov	r0, r3
 800141a:	4603      	mov	r3, r0
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4403      	add	r3, r0
 8001420:	409a      	lsls	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	611a      	str	r2, [r3, #16]
=======
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	2207      	movs	r2, #7
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	400a      	ands	r2, r1
 8001d86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6919      	ldr	r1, [r3, #16]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4403      	add	r3, r0
 8001da0:	409a      	lsls	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	611a      	str	r2, [r3, #16]
>>>>>>> Stashed changes
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< Updated upstream
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b06      	cmp	r3, #6
 8001430:	d824      	bhi.n	800147c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	3b05      	subs	r3, #5
 8001444:	221f      	movs	r2, #31
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	400a      	ands	r2, r1
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4618      	mov	r0, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	3b05      	subs	r3, #5
 800146e:	fa00 f203 	lsl.w	r2, r0, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	@ 0x34
 800147a:	e04c      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d824      	bhi.n	80014ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	3b23      	subs	r3, #35	@ 0x23
 8001496:	221f      	movs	r2, #31
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43da      	mvns	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	400a      	ands	r2, r1
 80014a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b23      	subs	r3, #35	@ 0x23
 80014c0:	fa00 f203 	lsl.w	r2, r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80014cc:	e023      	b.n	8001516 <HAL_ADC_ConfigChannel+0x1aa>
=======
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d824      	bhi.n	8001dfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b05      	subs	r3, #5
 8001dc4:	221f      	movs	r2, #31
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	400a      	ands	r2, r1
 8001dd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	3b05      	subs	r3, #5
 8001dee:	fa00 f203 	lsl.w	r2, r0, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dfa:	e04c      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b0c      	cmp	r3, #12
 8001e02:	d824      	bhi.n	8001e4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b23      	subs	r3, #35	@ 0x23
 8001e16:	221f      	movs	r2, #31
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43da      	mvns	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	400a      	ands	r2, r1
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3b23      	subs	r3, #35	@ 0x23
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e4c:	e023      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> Stashed changes
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< Updated upstream
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b41      	subs	r3, #65	@ 0x41
 80014e0:	221f      	movs	r2, #31
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	400a      	ands	r2, r1
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4618      	mov	r0, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	3b41      	subs	r3, #65	@ 0x41
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b41      	subs	r3, #65	@ 0x41
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b41      	subs	r3, #65	@ 0x41
 8001e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> Stashed changes
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <HAL_ADC_ConfigChannel+0x234>)
 8001518:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a21      	ldr	r2, [pc, #132]	@ (80015a4 <HAL_ADC_ConfigChannel+0x238>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d109      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1cc>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d105      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1cc>
=======
 8001e96:	4b22      	ldr	r3, [pc, #136]	@ (8001f20 <HAL_ADC_ConfigChannel+0x234>)
 8001e98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a21      	ldr	r2, [pc, #132]	@ (8001f24 <HAL_ADC_ConfigChannel+0x238>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d109      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b12      	cmp	r3, #18
 8001eaa:	d105      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> Stashed changes
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< Updated upstream
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
=======
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< Updated upstream
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a19      	ldr	r2, [pc, #100]	@ (80015a4 <HAL_ADC_ConfigChannel+0x238>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d123      	bne.n	800158a <HAL_ADC_ConfigChannel+0x21e>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2b10      	cmp	r3, #16
 8001548:	d003      	beq.n	8001552 <HAL_ADC_ConfigChannel+0x1e6>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b11      	cmp	r3, #17
 8001550:	d11b      	bne.n	800158a <HAL_ADC_ConfigChannel+0x21e>
=======
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_ADC_ConfigChannel+0x238>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d123      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x21e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d003      	beq.n	8001ed2 <HAL_ADC_ConfigChannel+0x1e6>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b11      	cmp	r3, #17
 8001ed0:	d11b      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> Stashed changes
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< Updated upstream
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b10      	cmp	r3, #16
 8001564:	d111      	bne.n	800158a <HAL_ADC_ConfigChannel+0x21e>
=======
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d111      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> Stashed changes
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< Updated upstream
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_ADC_ConfigChannel+0x23c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a10      	ldr	r2, [pc, #64]	@ (80015ac <HAL_ADC_ConfigChannel+0x240>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0c9a      	lsrs	r2, r3, #18
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800157c:	e002      	b.n	8001584 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	3b01      	subs	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f9      	bne.n	800157e <HAL_ADC_ConfigChannel+0x212>
=======
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_ADC_ConfigChannel+0x23c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a10      	ldr	r2, [pc, #64]	@ (8001f2c <HAL_ADC_ConfigChannel+0x240>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	0c9a      	lsrs	r2, r3, #18
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001efc:	e002      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f9      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x212>
>>>>>>> Stashed changes
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< Updated upstream
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40012300 	.word	0x40012300
 80015a4:	40012000 	.word	0x40012000
 80015a8:	20000004 	.word	0x20000004
 80015ac:	431bde83 	.word	0x431bde83

080015b0 <ADC_Init>:
=======
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40012300 	.word	0x40012300
 8001f24:	40012000 	.word	0x40012000
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	431bde83 	.word	0x431bde83

08001f30 <ADC_Init>:
>>>>>>> Stashed changes
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
<<<<<<< Updated upstream
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
=======
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< Updated upstream
 80015b8:	4b79      	ldr	r3, [pc, #484]	@ (80017a0 <ADC_Init+0x1f0>)
 80015ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	021a      	lsls	r2, r3, #8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6859      	ldr	r1, [r3, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800162a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6899      	ldr	r1, [r3, #8]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
=======
 8001f38:	4b79      	ldr	r3, [pc, #484]	@ (8002120 <ADC_Init+0x1f0>)
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	431a      	orrs	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6859      	ldr	r1, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	021a      	lsls	r2, r3, #8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6859      	ldr	r1, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< Updated upstream
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001642:	4a58      	ldr	r2, [pc, #352]	@ (80017a4 <ADC_Init+0x1f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d022      	beq.n	800168e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001656:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001678:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6899      	ldr	r1, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e00f      	b.n	80016ae <ADC_Init+0xfe>
=======
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc2:	4a58      	ldr	r2, [pc, #352]	@ (8002124 <ADC_Init+0x1f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d022      	beq.n	800200e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6899      	ldr	r1, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e00f      	b.n	800202e <ADC_Init+0xfe>
>>>>>>> Stashed changes
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< Updated upstream
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800169c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016ac:	609a      	str	r2, [r3, #8]
=======
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800201c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800202c:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< Updated upstream
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0202 	bic.w	r2, r2, #2
 80016bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7e1b      	ldrb	r3, [r3, #24]
 80016c8:	005a      	lsls	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01b      	beq.n	8001714 <ADC_Init+0x164>
=======
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0202 	bic.w	r2, r2, #2
 800203c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
 8002048:	005a      	lsls	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01b      	beq.n	8002094 <ADC_Init+0x164>
>>>>>>> Stashed changes
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< Updated upstream
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	685a      	ldr	r2, [r3, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	3b01      	subs	r3, #1
 8001708:	035a      	lsls	r2, r3, #13
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	e007      	b.n	8001724 <ADC_Init+0x174>
=======
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800206a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800207a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	3b01      	subs	r3, #1
 8002088:	035a      	lsls	r2, r3, #13
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	e007      	b.n	80020a4 <ADC_Init+0x174>
>>>>>>> Stashed changes
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< Updated upstream
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001722:	605a      	str	r2, [r3, #4]
=======
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a2:	605a      	str	r2, [r3, #4]
>>>>>>> Stashed changes
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< Updated upstream
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	3b01      	subs	r3, #1
 8001740:	051a      	lsls	r2, r3, #20
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001758:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001766:	025a      	lsls	r2, r3, #9
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800177e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	029a      	lsls	r2, r3, #10
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40012300 	.word	0x40012300
 80017a4:	0f000001 	.word	0x0f000001

080017a8 <ADC_DMAConvCplt>:
=======
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	3b01      	subs	r3, #1
 80020c0:	051a      	lsls	r2, r3, #20
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6899      	ldr	r1, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020e6:	025a      	lsls	r2, r3, #9
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6899      	ldr	r1, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	029a      	lsls	r2, r3, #10
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40012300 	.word	0x40012300
 8002124:	0f000001 	.word	0x0f000001

08002128 <ADC_DMAConvCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d13c      	bne.n	800183c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002134:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800213e:	2b00      	cmp	r3, #0
 8002140:	d13c      	bne.n	80021bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< Updated upstream
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d12b      	bne.n	8001834 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d127      	bne.n	8001834 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d119      	bne.n	8001834 <ADC_DMAConvCplt+0x8c>
=======
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12b      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d127      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800216e:	2b00      	cmp	r3, #0
 8002170:	d006      	beq.n	8002180 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800217c:	2b00      	cmp	r3, #0
 800217e:	d119      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
>>>>>>> Stashed changes
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< Updated upstream
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 0220 	bic.w	r2, r2, #32
 800180e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182c:	f043 0201 	orr.w	r2, r3, #1
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	641a      	str	r2, [r3, #64]	@ 0x40
=======
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0220 	bic.w	r2, r2, #32
 800218e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d105      	bne.n	80021b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f043 0201 	orr.w	r2, r3, #1
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
>>>>>>> Stashed changes

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< Updated upstream
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff f957 	bl	8000ae8 <HAL_ADC_ConvCpltCallback>
=======
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7fe fecb 	bl	8000f50 <HAL_ADC_ConvCpltCallback>
>>>>>>> Stashed changes
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< Updated upstream
 800183a:	e00e      	b.n	800185a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f7ff fd85 	bl	8001358 <HAL_ADC_ErrorCallback>
}
 800184e:	e004      	b.n	800185a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4798      	blx	r3
}
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <ADC_DMAHalfConvCplt>:
=======
 80021ba:	e00e      	b.n	80021da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c0:	f003 0310 	and.w	r3, r3, #16
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7ff fd85 	bl	8001cd8 <HAL_ADC_ErrorCallback>
}
 80021ce:	e004      	b.n	80021da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <ADC_DMAHalfConvCplt>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186e:	60fb      	str	r3, [r7, #12]
=======
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ee:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< Updated upstream
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f7ff f92b 	bl	8000acc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001876:	bf00      	nop
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <ADC_DMAError>:
=======
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7fe fe9f 	bl	8000f34 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <ADC_DMAError>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2240      	movs	r2, #64	@ 0x40
 8001890:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	f043 0204 	orr.w	r2, r3, #4
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800220a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	@ 0x40
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f043 0204 	orr.w	r2, r3, #4
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< Updated upstream
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f7ff fd5a 	bl	8001358 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a4:	bf00      	nop
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <__NVIC_SetPriorityGrouping>:
=======
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f7ff fd5a 	bl	8001cd8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <__NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018c8:	4013      	ands	r3, r2
 80018ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018de:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <__NVIC_SetPriorityGrouping+0x44>)
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	60d3      	str	r3, [r2, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <__NVIC_GetPriorityGrouping>:
=======
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	@ (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
>>>>>>> Stashed changes
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< Updated upstream
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f8:	4b04      	ldr	r3, [pc, #16]	@ (800190c <__NVIC_GetPriorityGrouping+0x18>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	f003 0307 	and.w	r3, r3, #7
}
 8001902:	4618      	mov	r0, r3
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <__NVIC_EnableIRQ>:
=======
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	@ (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	db0b      	blt.n	800193a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	4907      	ldr	r1, [pc, #28]	@ (8001948 <__NVIC_EnableIRQ+0x38>)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	2001      	movs	r0, #1
 8001932:	fa00 f202 	lsl.w	r2, r0, r2
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
=======
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	@ (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
>>>>>>> Stashed changes
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< Updated upstream
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	@ (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	@ (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> Stashed changes
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< Updated upstream
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	@ (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
=======
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	@ (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
>>>>>>> Stashed changes
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< Updated upstream
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	@ 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
=======
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	@ 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
>>>>>>> Stashed changes
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< Updated upstream
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	@ 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <SysTick_Config>:
=======
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
>>>>>>> Stashed changes
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< Updated upstream
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff8e 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
=======
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	@ (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	@ (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> Stashed changes
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< Updated upstream
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
=======
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< Updated upstream
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff29 	bl	80018ac <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
=======
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
>>>>>>> Stashed changes
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< Updated upstream
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
=======
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< Updated upstream
 8001a74:	f7ff ff3e 	bl	80018f4 <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff8e 	bl	80019a0 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5d 	bl	800194c <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
=======
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
>>>>>>> Stashed changes
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< Updated upstream
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
=======
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< Updated upstream
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff31 	bl	8001910 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
=======
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
>>>>>>> Stashed changes
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< Updated upstream
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_DMA_Init>:
=======
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_DMA_Init>:
>>>>>>> Stashed changes
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fad8 	bl	8001090 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]
=======
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff fab4 	bl	80019c8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]
>>>>>>> Stashed changes
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< Updated upstream
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e099      	b.n	8001c20 <HAL_DMA_Init+0x150>
=======
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e099      	b.n	80025a0 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< Updated upstream
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0201 	bic.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b0c:	e00f      	b.n	8001b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0e:	f7ff fabf 	bl	8001090 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d908      	bls.n	8001b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2203      	movs	r2, #3
 8001b26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e078      	b.n	8001c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e8      	bne.n	8001b0e <HAL_DMA_Init+0x3e>
=======
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248c:	e00f      	b.n	80024ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800248e:	f7ff fa9b 	bl	80019c8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b05      	cmp	r3, #5
 800249a:	d908      	bls.n	80024ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e078      	b.n	80025a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e8      	bne.n	800248e <HAL_DMA_Init+0x3e>
>>>>>>> Stashed changes
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< Updated upstream
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <HAL_DMA_Init+0x158>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
=======
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <HAL_DMA_Init+0x158>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< Updated upstream
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d107      	bne.n	8001b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4313      	orrs	r3, r2
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
=======
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2b04      	cmp	r3, #4
 8002506:	d107      	bne.n	8002518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	4313      	orrs	r3, r2
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< Updated upstream
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d117      	bne.n	8001bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
=======
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f023 0307 	bic.w	r3, r3, #7
 800252e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	2b04      	cmp	r3, #4
 8002540:	d117      	bne.n	8002572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< Updated upstream
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fa6f 	bl	80020b8 <DMA_CheckFifoParam>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2240      	movs	r2, #64	@ 0x40
 8001be4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e016      	b.n	8001c20 <HAL_DMA_Init+0x150>
=======
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fa6f 	bl	8002a38 <DMA_CheckFifoParam>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2240      	movs	r2, #64	@ 0x40
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800256e:	2301      	movs	r3, #1
 8002570:	e016      	b.n	80025a0 <HAL_DMA_Init+0x150>
>>>>>>> Stashed changes
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< Updated upstream
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	615a      	str	r2, [r3, #20]
=======
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	615a      	str	r2, [r3, #20]
>>>>>>> Stashed changes

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< Updated upstream
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fa26 	bl	800204c <DMA_CalcBaseAndBitshift>
 8001c00:	4603      	mov	r3, r0
 8001c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	223f      	movs	r2, #63	@ 0x3f
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	f010803f 	.word	0xf010803f

08001c2c <HAL_DMA_Start_IT>:
=======
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fa26 	bl	80029cc <DMA_CalcBaseAndBitshift>
 8002580:	4603      	mov	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	223f      	movs	r2, #63	@ 0x3f
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	f010803f 	.word	0xf010803f

080025ac <HAL_DMA_Start_IT>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	613b      	str	r3, [r7, #16]
=======
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< Updated upstream
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_DMA_Start_IT+0x26>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e040      	b.n	8001cd4 <HAL_DMA_Start_IT+0xa8>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d12f      	bne.n	8001cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f9b8 	bl	8001ff0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	223f      	movs	r2, #63	@ 0x3f
 8001c86:	409a      	lsls	r2, r3
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0216 	orr.w	r2, r2, #22
 8001c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d007      	beq.n	8001cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0208 	orr.w	r2, r2, #8
 8001cb2:	601a      	str	r2, [r3, #0]
=======
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_DMA_Start_IT+0x26>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e040      	b.n	8002654 <HAL_DMA_Start_IT+0xa8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d12f      	bne.n	8002646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2202      	movs	r2, #2
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f9b8 	bl	8002970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002604:	223f      	movs	r2, #63	@ 0x3f
 8002606:	409a      	lsls	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0216 	orr.w	r2, r2, #22
 800261a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0208 	orr.w	r2, r2, #8
 8002632:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< Updated upstream
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e005      	b.n	8001cd2 <HAL_DMA_Start_IT+0xa6>
=======
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e005      	b.n	8002652 <HAL_DMA_Start_IT+0xa6>
>>>>>>> Stashed changes
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< Updated upstream
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_DMA_IRQHandler>:
=======
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800264e:	2302      	movs	r3, #2
 8002650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_DMA_IRQHandler>:
>>>>>>> Stashed changes
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ce8:	4b8e      	ldr	r3, [pc, #568]	@ (8001f24 <HAL_DMA_IRQHandler+0x248>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a8e      	ldr	r2, [pc, #568]	@ (8001f28 <HAL_DMA_IRQHandler+0x24c>)
 8001cee:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf2:	0a9b      	lsrs	r3, r3, #10
 8001cf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	2208      	movs	r2, #8
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d01a      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d013      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0204 	bic.w	r2, r2, #4
 8001d2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d34:	2208      	movs	r2, #8
 8001d36:	409a      	lsls	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002668:	4b8e      	ldr	r3, [pc, #568]	@ (80028a4 <HAL_DMA_IRQHandler+0x248>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a8e      	ldr	r2, [pc, #568]	@ (80028a8 <HAL_DMA_IRQHandler+0x24c>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	0a9b      	lsrs	r3, r3, #10
 8002674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	2208      	movs	r2, #8
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01a      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0204 	bic.w	r2, r2, #4
 80026ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2208      	movs	r2, #8
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d76:	f043 0202 	orr.w	r2, r3, #2
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	2201      	movs	r2, #1
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d012      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f6:	f043 0202 	orr.w	r2, r3, #2
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d82:	2204      	movs	r2, #4
 8001d84:	409a      	lsls	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d012      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	2204      	movs	r2, #4
 8001da2:	409a      	lsls	r2, r3
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dac:	f043 0204 	orr.w	r2, r3, #4
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	@ 0x54
=======
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002702:	2204      	movs	r2, #4
 8002704:	409a      	lsls	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d012      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002720:	2204      	movs	r2, #4
 8002722:	409a      	lsls	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f043 0204 	orr.w	r2, r3, #4
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
>>>>>>> Stashed changes
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db8:	2210      	movs	r2, #16
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d043      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d03c      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd6:	2210      	movs	r2, #16
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d018      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d108      	bne.n	8001e0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d024      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
 8001e0a:	e01f      	b.n	8001e4c <HAL_DMA_IRQHandler+0x170>
=======
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	2210      	movs	r2, #16
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d043      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03c      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	2210      	movs	r2, #16
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d018      	beq.n	800279e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d024      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e01f      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< Updated upstream
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01b      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
 8001e1c:	e016      	b.n	8001e4c <HAL_DMA_IRQHandler+0x170>
=======
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002790:	2b00      	cmp	r3, #0
 8002792:	d01b      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
 800279c:	e016      	b.n	80027cc <HAL_DMA_IRQHandler+0x170>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0208 	bic.w	r2, r2, #8
 8001e3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	4798      	blx	r3
=======
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0208 	bic.w	r2, r2, #8
 80027ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	4798      	blx	r3
>>>>>>> Stashed changes
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< Updated upstream
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e50:	2220      	movs	r2, #32
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 808f 	beq.w	8001f7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 8087 	beq.w	8001f7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e72:	2220      	movs	r2, #32
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d136      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0216 	bic.w	r2, r2, #22
 8001e94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d103      	bne.n	8001eb6 <HAL_DMA_IRQHandler+0x1da>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0208 	bic.w	r2, r2, #8
 8001ec4:	601a      	str	r2, [r3, #0]
=======
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	2220      	movs	r2, #32
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 808f 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8087 	beq.w	80028fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2220      	movs	r2, #32
 80027f4:	409a      	lsls	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d136      	bne.n	8002874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0216 	bic.w	r2, r2, #22
 8002814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <HAL_DMA_IRQHandler+0x1da>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002832:	2b00      	cmp	r3, #0
 8002834:	d007      	beq.n	8002846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0208 	bic.w	r2, r2, #8
 8002844:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< Updated upstream
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	223f      	movs	r2, #63	@ 0x3f
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d07e      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	4798      	blx	r3
        }
        return;
 8001ef2:	e079      	b.n	8001fe8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d01d      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	4798      	blx	r3
 8001f20:	e02c      	b.n	8001f7c <HAL_DMA_IRQHandler+0x2a0>
 8001f22:	bf00      	nop
 8001f24:	20000004 	.word	0x20000004
 8001f28:	1b4e81b5 	.word	0x1b4e81b5
=======
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	223f      	movs	r2, #63	@ 0x3f
 800284c:	409a      	lsls	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002866:	2b00      	cmp	r3, #0
 8002868:	d07e      	beq.n	8002968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	4798      	blx	r3
        }
        return;
 8002872:	e079      	b.n	8002968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01d      	beq.n	80028be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10d      	bne.n	80028ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002894:	2b00      	cmp	r3, #0
 8002896:	d031      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e02c      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
 80028a2:	bf00      	nop
 80028a4:	20000004 	.word	0x20000004
 80028a8:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> Stashed changes
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< Updated upstream
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d023      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	e01e      	b.n	8001f7c <HAL_DMA_IRQHandler+0x2a0>
=======
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d023      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
 80028bc:	e01e      	b.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> Stashed changes
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< Updated upstream
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10f      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0210 	bic.w	r2, r2, #16
 8001f5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	4798      	blx	r3
=======
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0210 	bic.w	r2, r2, #16
 80028da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
>>>>>>> Stashed changes
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< Updated upstream
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d032      	beq.n	8001fea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d022      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2205      	movs	r2, #5
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
=======
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d022      	beq.n	8002956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2205      	movs	r2, #5
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      do
      {
        if (++count > timeout)
<<<<<<< Updated upstream
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d307      	bcc.n	8001fc4 <HAL_DMA_IRQHandler+0x2e8>
=======
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3301      	adds	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	429a      	cmp	r2, r3
 8002932:	d307      	bcc.n	8002944 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> Stashed changes
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< Updated upstream
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f2      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x2cc>
 8001fc2:	e000      	b.n	8001fc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
 8001fe6:	e000      	b.n	8001fea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fe8:	bf00      	nop
    }
  }
}
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <DMA_SetConfig>:
=======
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f2      	bne.n	8002928 <HAL_DMA_IRQHandler+0x2cc>
 8002942:	e000      	b.n	8002946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	4798      	blx	r3
 8002966:	e000      	b.n	800296a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002968:	bf00      	nop
    }
  }
}
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <DMA_SetConfig>:
>>>>>>> Stashed changes
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< Updated upstream
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800200c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b40      	cmp	r3, #64	@ 0x40
 800201c:	d108      	bne.n	8002030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	60da      	str	r2, [r3, #12]
=======
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800298c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b40      	cmp	r3, #64	@ 0x40
 800299c:	d108      	bne.n	80029b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< Updated upstream
 800202e:	e007      	b.n	8002040 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DMA_CalcBaseAndBitshift>:
=======
 80029ae:	e007      	b.n	80029c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA_CalcBaseAndBitshift>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	3b10      	subs	r3, #16
 800205c:	4a14      	ldr	r2, [pc, #80]	@ (80020b0 <DMA_CalcBaseAndBitshift+0x64>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	60fb      	str	r3, [r7, #12]
=======
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	3b10      	subs	r3, #16
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <DMA_CalcBaseAndBitshift+0x64>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	091b      	lsrs	r3, r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< Updated upstream
 8002066:	4a13      	ldr	r2, [pc, #76]	@ (80020b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d909      	bls.n	800208e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002082:	f023 0303 	bic.w	r3, r3, #3
 8002086:	1d1a      	adds	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	659a      	str	r2, [r3, #88]	@ 0x58
 800208c:	e007      	b.n	800209e <DMA_CalcBaseAndBitshift+0x52>
=======
 80029e6:	4a13      	ldr	r2, [pc, #76]	@ (8002a34 <DMA_CalcBaseAndBitshift+0x68>)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d909      	bls.n	8002a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a02:	f023 0303 	bic.w	r3, r3, #3
 8002a06:	1d1a      	adds	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a0c:	e007      	b.n	8002a1e <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> Stashed changes
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< Updated upstream
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	aaaaaaab 	.word	0xaaaaaaab
 80020b4:	08003bac 	.word	0x08003bac

080020b8 <DMA_CheckFifoParam>:
=======
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	aaaaaaab 	.word	0xaaaaaaab
 8002a34:	0800455c 	.word	0x0800455c

08002a38 <DMA_CheckFifoParam>:
>>>>>>> Stashed changes
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< Updated upstream
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d11f      	bne.n	8002112 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d856      	bhi.n	8002186 <DMA_CheckFifoParam+0xce>
 80020d8:	a201      	add	r2, pc, #4	@ (adr r2, 80020e0 <DMA_CheckFifoParam+0x28>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	08002103 	.word	0x08002103
 80020e8:	080020f1 	.word	0x080020f1
 80020ec:	08002187 	.word	0x08002187
=======
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11f      	bne.n	8002a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d856      	bhi.n	8002b06 <DMA_CheckFifoParam+0xce>
 8002a58:	a201      	add	r2, pc, #4	@ (adr r2, 8002a60 <DMA_CheckFifoParam+0x28>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a71 	.word	0x08002a71
 8002a64:	08002a83 	.word	0x08002a83
 8002a68:	08002a71 	.word	0x08002a71
 8002a6c:	08002b07 	.word	0x08002b07
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< Updated upstream
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d046      	beq.n	800218a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002100:	e043      	b.n	800218a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800210a:	d140      	bne.n	800218e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002110:	e03d      	b.n	800218e <DMA_CheckFifoParam+0xd6>
=======
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d046      	beq.n	8002b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e043      	b.n	8002b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a8a:	d140      	bne.n	8002b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a90:	e03d      	b.n	8002b0e <DMA_CheckFifoParam+0xd6>
>>>>>>> Stashed changes
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< Updated upstream
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800211a:	d121      	bne.n	8002160 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d837      	bhi.n	8002192 <DMA_CheckFifoParam+0xda>
 8002122:	a201      	add	r2, pc, #4	@ (adr r2, 8002128 <DMA_CheckFifoParam+0x70>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	08002139 	.word	0x08002139
 800212c:	0800213f 	.word	0x0800213f
 8002130:	08002139 	.word	0x08002139
 8002134:	08002151 	.word	0x08002151
=======
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a9a:	d121      	bne.n	8002ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d837      	bhi.n	8002b12 <DMA_CheckFifoParam+0xda>
 8002aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa8 <DMA_CheckFifoParam+0x70>)
 8002aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa8:	08002ab9 	.word	0x08002ab9
 8002aac:	08002abf 	.word	0x08002abf
 8002ab0:	08002ab9 	.word	0x08002ab9
 8002ab4:	08002ad1 	.word	0x08002ad1
>>>>>>> Stashed changes
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      break;
 800213c:	e030      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d025      	beq.n	8002196 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214e:	e022      	b.n	8002196 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002154:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002158:	d11f      	bne.n	800219a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800215e:	e01c      	b.n	800219a <DMA_CheckFifoParam+0xe2>
=======
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	e030      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d025      	beq.n	8002b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ace:	e022      	b.n	8002b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ad8:	d11f      	bne.n	8002b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ade:	e01c      	b.n	8002b1a <DMA_CheckFifoParam+0xe2>
>>>>>>> Stashed changes
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< Updated upstream
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d903      	bls.n	800216e <DMA_CheckFifoParam+0xb6>
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d003      	beq.n	8002174 <DMA_CheckFifoParam+0xbc>
=======
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d903      	bls.n	8002aee <DMA_CheckFifoParam+0xb6>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d003      	beq.n	8002af4 <DMA_CheckFifoParam+0xbc>
>>>>>>> Stashed changes
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< Updated upstream
 800216c:	e018      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
      break;
 8002172:	e015      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00e      	beq.n	800219e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	73fb      	strb	r3, [r7, #15]
      break;
 8002184:	e00b      	b.n	800219e <DMA_CheckFifoParam+0xe6>
      break;
 8002186:	bf00      	nop
 8002188:	e00a      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;
 800218a:	bf00      	nop
 800218c:	e008      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;
 800218e:	bf00      	nop
 8002190:	e006      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e004      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e002      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800219a:	bf00      	nop
 800219c:	e000      	b.n	80021a0 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
=======
 8002aec:	e018      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      break;
 8002af2:	e015      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e00b      	b.n	8002b1e <DMA_CheckFifoParam+0xe6>
      break;
 8002b06:	bf00      	nop
 8002b08:	e00a      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e008      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e006      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b12:	bf00      	nop
 8002b14:	e004      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
 8002b18:	e002      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b1a:	bf00      	nop
 8002b1c:	e000      	b.n	8002b20 <DMA_CheckFifoParam+0xe8>
      break;
 8002b1e:	bf00      	nop
>>>>>>> Stashed changes
    }
  } 
  
  return status; 
<<<<<<< Updated upstream
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop

080021b0 <HAL_GPIO_Init>:
=======
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop

08002b30 <HAL_GPIO_Init>:
>>>>>>> Stashed changes
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< Updated upstream
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
=======
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	@ 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61bb      	str	r3, [r7, #24]
>>>>>>> Stashed changes
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< Updated upstream
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	e16b      	b.n	80024a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021cc:	2201      	movs	r2, #1
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	4013      	ands	r3, r2
 80021de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	f040 815a 	bne.w	800249e <HAL_GPIO_Init+0x2ee>
=======
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e16b      	b.n	8002e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f040 815a 	bne.w	8002e1e <HAL_GPIO_Init+0x2ee>
>>>>>>> Stashed changes
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< Updated upstream
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d005      	beq.n	8002202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d130      	bne.n	8002264 <HAL_GPIO_Init+0xb4>
=======
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d005      	beq.n	8002b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d130      	bne.n	8002be4 <HAL_GPIO_Init+0xb4>
>>>>>>> Stashed changes
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< Updated upstream
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4013      	ands	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d017      	beq.n	80022a0 <HAL_GPIO_Init+0xf0>
=======
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bb8:	2201      	movs	r2, #1
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 0201 	and.w	r2, r3, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0xf0>
>>>>>>> Stashed changes
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< Updated upstream
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	60da      	str	r2, [r3, #12]
=======
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	60da      	str	r2, [r3, #12]
>>>>>>> Stashed changes
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< Updated upstream
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d123      	bne.n	80022f4 <HAL_GPIO_Init+0x144>
=======
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d123      	bne.n	8002c74 <HAL_GPIO_Init+0x144>
>>>>>>> Stashed changes
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< Updated upstream
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	69b9      	ldr	r1, [r7, #24]
 80022f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	08da      	lsrs	r2, r3, #3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3208      	adds	r2, #8
 8002c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	220f      	movs	r2, #15
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	08da      	lsrs	r2, r3, #3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3208      	adds	r2, #8
 8002c6e:	69b9      	ldr	r1, [r7, #24]
 8002c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> Stashed changes
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< Updated upstream
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	601a      	str	r2, [r3, #0]
=======
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0203 	and.w	r2, r3, #3
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< Updated upstream
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80b4 	beq.w	800249e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <HAL_GPIO_Init+0x30c>)
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	4a5f      	ldr	r2, [pc, #380]	@ (80024bc <HAL_GPIO_Init+0x30c>)
 8002340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002344:	6453      	str	r3, [r2, #68]	@ 0x44
 8002346:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <HAL_GPIO_Init+0x30c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002352:	4a5b      	ldr	r2, [pc, #364]	@ (80024c0 <HAL_GPIO_Init+0x310>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	220f      	movs	r2, #15
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	@ (80024c4 <HAL_GPIO_Init+0x314>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d02b      	beq.n	80023d6 <HAL_GPIO_Init+0x226>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a51      	ldr	r2, [pc, #324]	@ (80024c8 <HAL_GPIO_Init+0x318>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d025      	beq.n	80023d2 <HAL_GPIO_Init+0x222>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a50      	ldr	r2, [pc, #320]	@ (80024cc <HAL_GPIO_Init+0x31c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d01f      	beq.n	80023ce <HAL_GPIO_Init+0x21e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4f      	ldr	r2, [pc, #316]	@ (80024d0 <HAL_GPIO_Init+0x320>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <HAL_GPIO_Init+0x21a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4e      	ldr	r2, [pc, #312]	@ (80024d4 <HAL_GPIO_Init+0x324>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x216>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_GPIO_Init+0x328>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x212>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4c      	ldr	r2, [pc, #304]	@ (80024dc <HAL_GPIO_Init+0x32c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x20e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4b      	ldr	r2, [pc, #300]	@ (80024e0 <HAL_GPIO_Init+0x330>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x20a>
 80023b6:	2307      	movs	r3, #7
 80023b8:	e00e      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ba:	2308      	movs	r3, #8
 80023bc:	e00c      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023be:	2306      	movs	r3, #6
 80023c0:	e00a      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x228>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	@ (80024c0 <HAL_GPIO_Init+0x310>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a32      	ldr	r2, [pc, #200]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a27      	ldr	r2, [pc, #156]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <HAL_GPIO_Init+0x334>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f ae90 	bls.w	80021cc <HAL_GPIO_Init+0x1c>
=======
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80b4 	beq.w	8002e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b60      	ldr	r3, [pc, #384]	@ (8002e3c <HAL_GPIO_Init+0x30c>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002e3c <HAL_GPIO_Init+0x30c>)
 8002cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e3c <HAL_GPIO_Init+0x30c>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e40 <HAL_GPIO_Init+0x310>)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a52      	ldr	r2, [pc, #328]	@ (8002e44 <HAL_GPIO_Init+0x314>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02b      	beq.n	8002d56 <HAL_GPIO_Init+0x226>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a51      	ldr	r2, [pc, #324]	@ (8002e48 <HAL_GPIO_Init+0x318>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d025      	beq.n	8002d52 <HAL_GPIO_Init+0x222>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_GPIO_Init+0x31c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01f      	beq.n	8002d4e <HAL_GPIO_Init+0x21e>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a4f      	ldr	r2, [pc, #316]	@ (8002e50 <HAL_GPIO_Init+0x320>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x21a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4e      	ldr	r2, [pc, #312]	@ (8002e54 <HAL_GPIO_Init+0x324>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x216>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a4d      	ldr	r2, [pc, #308]	@ (8002e58 <HAL_GPIO_Init+0x328>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x212>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a4c      	ldr	r2, [pc, #304]	@ (8002e5c <HAL_GPIO_Init+0x32c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x20e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4b      	ldr	r2, [pc, #300]	@ (8002e60 <HAL_GPIO_Init+0x330>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x20a>
 8002d36:	2307      	movs	r3, #7
 8002d38:	e00e      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d3a:	2308      	movs	r3, #8
 8002d3c:	e00c      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d3e:	2306      	movs	r3, #6
 8002d40:	e00a      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d42:	2305      	movs	r3, #5
 8002d44:	e008      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d46:	2304      	movs	r3, #4
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e004      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x228>
 8002d56:	2300      	movs	r3, #0
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f002 0203 	and.w	r2, r2, #3
 8002d5e:	0092      	lsls	r2, r2, #2
 8002d60:	4093      	lsls	r3, r2
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d68:	4935      	ldr	r1, [pc, #212]	@ (8002e40 <HAL_GPIO_Init+0x310>)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9a:	4a32      	ldr	r2, [pc, #200]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da0:	4b30      	ldr	r3, [pc, #192]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc4:	4a27      	ldr	r2, [pc, #156]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dca:	4b26      	ldr	r3, [pc, #152]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dee:	4a1d      	ldr	r2, [pc, #116]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e18:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <HAL_GPIO_Init+0x334>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b0f      	cmp	r3, #15
 8002e28:	f67f ae90 	bls.w	8002b4c <HAL_GPIO_Init+0x1c>
>>>>>>> Stashed changes
      }
    }
  }
}
<<<<<<< Updated upstream
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40021400 	.word	0x40021400
 80024dc:	40021800 	.word	0x40021800
 80024e0:	40021c00 	.word	0x40021c00
 80024e4:	40013c00 	.word	0x40013c00

080024e8 <HAL_GPIO_ReadPin>:
=======
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3724      	adds	r7, #36	@ 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40021400 	.word	0x40021400
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	40021c00 	.word	0x40021c00
 8002e64:	40013c00 	.word	0x40013c00

08002e68 <HAL_GPIO_ReadPin>:
>>>>>>> Stashed changes
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< Updated upstream
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
=======
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
>>>>>>> Stashed changes
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< Updated upstream
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_GPIO_ReadPin+0x22>
=======
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	887b      	ldrh	r3, [r7, #2]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e001      	b.n	8002e8a <HAL_GPIO_ReadPin+0x22>
>>>>>>> Stashed changes
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< Updated upstream
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_GPIO_WritePin>:
=======
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_GPIO_WritePin>:
>>>>>>> Stashed changes
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< Updated upstream
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
 8002524:	4613      	mov	r3, r2
 8002526:	707b      	strb	r3, [r7, #1]
=======
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
>>>>>>> Stashed changes
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< Updated upstream
 8002528:	787b      	ldrb	r3, [r7, #1]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252e:	887a      	ldrh	r2, [r7, #2]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
=======
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
>>>>>>> Stashed changes
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< Updated upstream
 8002534:	e003      	b.n	800253e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002536:	887b      	ldrh	r3, [r7, #2]
 8002538:	041a      	lsls	r2, r3, #16
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_RCC_OscConfig>:
=======
 8002eb4:	e003      	b.n	8002ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb6:	887b      	ldrh	r3, [r7, #2]
 8002eb8:	041a      	lsls	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	619a      	str	r2, [r3, #24]
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ee2:	4a05      	ldr	r2, [pc, #20]	@ (8002ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fe fb7c 	bl	80015e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40013c00 	.word	0x40013c00

08002efc <HAL_RCC_OscConfig>:
>>>>>>> Stashed changes
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< Updated upstream
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
=======
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< Updated upstream
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e267      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
=======
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e267      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< Updated upstream
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d075      	beq.n	8002656 <HAL_RCC_OscConfig+0x10a>
=======
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d075      	beq.n	8003006 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
<<<<<<< Updated upstream
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d00c      	beq.n	8002590 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b85      	ldr	r3, [pc, #532]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800257e:	2b08      	cmp	r3, #8
 8002580:	d112      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800258e:	d10b      	bne.n	80025a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d05b      	beq.n	8002654 <HAL_RCC_OscConfig+0x108>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d157      	bne.n	8002654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e242      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
=======
 8002f1a:	4b88      	ldr	r3, [pc, #544]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b85      	ldr	r3, [pc, #532]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b82      	ldr	r3, [pc, #520]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b7e      	ldr	r3, [pc, #504]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e242      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< Updated upstream
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x74>
 80025b2:	4b76      	ldr	r3, [pc, #472]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a75      	ldr	r2, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e01d      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025c8:	d10c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x98>
 80025ca:	4b70      	ldr	r3, [pc, #448]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e00b      	b.n	80025fc <HAL_RCC_OscConfig+0xb0>
 80025e4:	4b69      	ldr	r3, [pc, #420]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a68      	ldr	r2, [pc, #416]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b66      	ldr	r3, [pc, #408]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a65      	ldr	r2, [pc, #404]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80025f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe fd44 	bl	8001090 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800260c:	f7fe fd40 	bl	8001090 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	@ 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e207      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261e:	4b5b      	ldr	r3, [pc, #364]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0xc0>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
=======
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x74>
 8002f62:	4b76      	ldr	r3, [pc, #472]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a75      	ldr	r2, [pc, #468]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b70      	ldr	r3, [pc, #448]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a6f      	ldr	r2, [pc, #444]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b6d      	ldr	r3, [pc, #436]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6c      	ldr	r2, [pc, #432]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f94:	4b69      	ldr	r3, [pc, #420]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a68      	ldr	r2, [pc, #416]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b66      	ldr	r3, [pc, #408]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a65      	ldr	r2, [pc, #404]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fd08 	bl	80019c8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fd04 	bl	80019c8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e207      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 800262c:	f7fe fd30 	bl	8001090 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002634:	f7fe fd2c 	bl	8001090 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b64      	cmp	r3, #100	@ 0x64
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1f3      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002646:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0xe8>
 8002652:	e000      	b.n	8002656 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002654:	bf00      	nop
=======
 8002fdc:	f7fe fcf4 	bl	80019c8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fcf0 	bl	80019c8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1f3      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b51      	ldr	r3, [pc, #324]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< Updated upstream
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_OscConfig+0x1de>
=======
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
<<<<<<< Updated upstream
 8002662:	4b4a      	ldr	r3, [pc, #296]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00b      	beq.n	8002686 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266e:	4b47      	ldr	r3, [pc, #284]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002676:	2b08      	cmp	r3, #8
 8002678:	d11c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b44      	ldr	r3, [pc, #272]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	4b41      	ldr	r3, [pc, #260]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e1c7      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
=======
 8003012:	4b4a      	ldr	r3, [pc, #296]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b47      	ldr	r3, [pc, #284]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b44      	ldr	r3, [pc, #272]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b41      	ldr	r3, [pc, #260]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1c7      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 800269e:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4937      	ldr	r1, [pc, #220]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	e03a      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
=======
 800304e:	4b3b      	ldr	r3, [pc, #236]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4937      	ldr	r1, [pc, #220]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< Updated upstream
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026bc:	4b34      	ldr	r3, [pc, #208]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fce5 	bl	8001090 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ca:	f7fe fce1 	bl	8001090 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e1a8      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x17e>
=======
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b34      	ldr	r3, [pc, #208]	@ (8003140 <HAL_RCC_OscConfig+0x244>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fca9 	bl	80019c8 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe fca5 	bl	80019c8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1a8      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b2b      	ldr	r3, [pc, #172]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x17e>
>>>>>>> Stashed changes
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< Updated upstream
 80026e8:	4b28      	ldr	r3, [pc, #160]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	4925      	ldr	r1, [pc, #148]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	600b      	str	r3, [r1, #0]
 80026fc:	e015      	b.n	800272a <HAL_RCC_OscConfig+0x1de>
=======
 8003098:	4b28      	ldr	r3, [pc, #160]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4925      	ldr	r1, [pc, #148]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
>>>>>>> Stashed changes
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< Updated upstream
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x244>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe fcc4 	bl	8001090 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe fcc0 	bl	8001090 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e187      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1b      	ldr	r3, [pc, #108]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1c0>
=======
 80030ae:	4b24      	ldr	r3, [pc, #144]	@ (8003140 <HAL_RCC_OscConfig+0x244>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fc88 	bl	80019c8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe fc84 	bl	80019c8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e187      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1c0>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< Updated upstream
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d036      	beq.n	80027a4 <HAL_RCC_OscConfig+0x258>
=======
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d036      	beq.n	8003154 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< Updated upstream
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d016      	beq.n	800276c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe fca4 	bl	8001090 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274c:	f7fe fca0 	bl	8001090 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e167      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <HAL_RCC_OscConfig+0x240>)
 8002760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x200>
 800276a:	e01b      	b.n	80027a4 <HAL_RCC_OscConfig+0x258>
=======
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_RCC_OscConfig+0x248>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fc68 	bl	80019c8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe fc64 	bl	80019c8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e167      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <HAL_RCC_OscConfig+0x240>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x200>
 800311a:	e01b      	b.n	8003154 <HAL_RCC_OscConfig+0x258>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< Updated upstream
 800276c:	4b09      	ldr	r3, [pc, #36]	@ (8002794 <HAL_RCC_OscConfig+0x248>)
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fc8d 	bl	8001090 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002778:	e00e      	b.n	8002798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe fc89 	bl	8001090 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d907      	bls.n	8002798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e150      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ea      	bne.n	800277a <HAL_RCC_OscConfig+0x22e>
=======
 800311c:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_RCC_OscConfig+0x248>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe fc51 	bl	80019c8 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e00e      	b.n	8003148 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe fc4d 	bl	80019c8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d907      	bls.n	8003148 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e150      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
 800313c:	40023800 	.word	0x40023800
 8003140:	42470000 	.word	0x42470000
 8003144:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ea      	bne.n	800312a <HAL_RCC_OscConfig+0x22e>
>>>>>>> Stashed changes
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< Updated upstream
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
=======
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 8097 	beq.w	8003290 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< Updated upstream
 80027b6:	4b81      	ldr	r3, [pc, #516]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60bb      	str	r3, [r7, #8]
 80027c6:	4b7d      	ldr	r3, [pc, #500]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	4a7c      	ldr	r2, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	4b7a      	ldr	r3, [pc, #488]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	60bb      	str	r3, [r7, #8]
 80027dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b77      	ldr	r3, [pc, #476]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b74      	ldr	r3, [pc, #464]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a73      	ldr	r2, [pc, #460]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fc49 	bl	8001090 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fc45 	bl	8001090 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e10c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6a      	ldr	r3, [pc, #424]	@ (80029c0 <HAL_RCC_OscConfig+0x474>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2b6>
=======
 8003166:	4b81      	ldr	r3, [pc, #516]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10f      	bne.n	8003192 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	4b7d      	ldr	r3, [pc, #500]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	4a7c      	ldr	r2, [pc, #496]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800317c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40
 8003182:	4b7a      	ldr	r3, [pc, #488]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	60bb      	str	r3, [r7, #8]
 800318c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003192:	4b77      	ldr	r3, [pc, #476]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319a:	2b00      	cmp	r3, #0
 800319c:	d118      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319e:	4b74      	ldr	r3, [pc, #464]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a73      	ldr	r2, [pc, #460]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fe fc0d 	bl	80019c8 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b2:	f7fe fc09 	bl	80019c8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e10c      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003370 <HAL_RCC_OscConfig+0x474>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0f0      	beq.n	80031b2 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> Stashed changes
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< Updated upstream
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x2ea>
 8002828:	4b64      	ldr	r3, [pc, #400]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a63      	ldr	r2, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x30c>
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	4a5e      	ldr	r2, [pc, #376]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	@ 0x70
 800284a:	4b5c      	ldr	r3, [pc, #368]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a5b      	ldr	r2, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x324>
 8002858:	4b58      	ldr	r3, [pc, #352]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285c:	4a57      	ldr	r2, [pc, #348]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	@ 0x70
 8002864:	4b55      	ldr	r3, [pc, #340]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fc0a 	bl	8001090 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fc06 	bl	8001090 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0cb      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b49      	ldr	r3, [pc, #292]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x334>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x382>
=======
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2ea>
 80031d8:	4b64      	ldr	r3, [pc, #400]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031dc:	4a63      	ldr	r2, [pc, #396]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031de:	f043 0301 	orr.w	r3, r3, #1
 80031e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x324>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0x30c>
 80031ee:	4b5f      	ldr	r3, [pc, #380]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f2:	4a5e      	ldr	r2, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031f4:	f043 0304 	orr.w	r3, r3, #4
 80031f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fa:	4b5c      	ldr	r3, [pc, #368]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031fe:	4a5b      	ldr	r2, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003200:	f043 0301 	orr.w	r3, r3, #1
 8003204:	6713      	str	r3, [r2, #112]	@ 0x70
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0x324>
 8003208:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320c:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	6713      	str	r3, [r2, #112]	@ 0x70
 8003214:	4b55      	ldr	r3, [pc, #340]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003218:	4a54      	ldr	r2, [pc, #336]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800321a:	f023 0304 	bic.w	r3, r3, #4
 800321e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d015      	beq.n	8003254 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fbce 	bl	80019c8 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	e00a      	b.n	8003246 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003230:	f7fe fbca 	bl	80019c8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0cb      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	4b49      	ldr	r3, [pc, #292]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ee      	beq.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003252:	e014      	b.n	800327e <HAL_RCC_OscConfig+0x382>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< Updated upstream
 80028a4:	f7fe fbf4 	bl	8001090 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fbf0 	bl	8001090 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e0b5      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b3e      	ldr	r3, [pc, #248]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x360>
=======
 8003254:	f7fe fbb8 	bl	80019c8 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fe fbb4 	bl	80019c8 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0b5      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	4b3e      	ldr	r3, [pc, #248]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ee      	bne.n	800325c <HAL_RCC_OscConfig+0x360>
>>>>>>> Stashed changes
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
<<<<<<< Updated upstream
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	4a38      	ldr	r2, [pc, #224]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 800327e:	7dfb      	ldrb	r3, [r7, #23]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d105      	bne.n	8003290 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003284:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	4a38      	ldr	r2, [pc, #224]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800328a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> Stashed changes
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< Updated upstream
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80a1 	beq.w	8002a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d05c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d141      	bne.n	8002982 <HAL_RCC_OscConfig+0x436>
=======
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80a1 	beq.w	80033dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800329a:	4b34      	ldr	r3, [pc, #208]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d05c      	beq.n	8003360 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d141      	bne.n	8003332 <HAL_RCC_OscConfig+0x436>
>>>>>>> Stashed changes
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 80028fe:	4b31      	ldr	r3, [pc, #196]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fe fbc4 	bl	8001090 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290c:	f7fe fbc0 	bl	8001090 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e087      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x3c0>
=======
 80032ae:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fb88 	bl	80019c8 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe fb84 	bl	80019c8 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e087      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ce:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x3c0>
>>>>>>> Stashed changes
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< Updated upstream
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002940:	085b      	lsrs	r3, r3, #1
 8002942:	3b01      	subs	r3, #1
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	491b      	ldr	r1, [pc, #108]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
=======
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	019b      	lsls	r3, r3, #6
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	3b01      	subs	r3, #1
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	491b      	ldr	r1, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
>>>>>>> Stashed changes
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< Updated upstream
 8002954:	4b1b      	ldr	r3, [pc, #108]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fb99 	bl	8001090 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fb95 	bl	8001090 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e05c      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x416>
 8002980:	e054      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
=======
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe fb5d 	bl	80019c8 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe fb59 	bl	80019c8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e05c      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x416>
 8003330:	e054      	b.n	80033dc <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< Updated upstream
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <HAL_RCC_OscConfig+0x478>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fb82 	bl	8001090 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fb7e 	bl	8001090 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e045      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x470>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x444>
 80029ae:	e03d      	b.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
=======
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCC_OscConfig+0x478>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fb46 	bl	80019c8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe fb42 	bl	80019c8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e045      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x470>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
 800335e:	e03d      	b.n	80033dc <HAL_RCC_OscConfig+0x4e0>
>>>>>>> Stashed changes
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< Updated upstream
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e038      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000
 80029c4:	42470060 	.word	0x42470060
=======
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e038      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
 800336c:	40023800 	.word	0x40023800
 8003370:	40007000 	.word	0x40007000
 8003374:	42470060 	.word	0x42470060
>>>>>>> Stashed changes
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< Updated upstream
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x4ec>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
=======
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <HAL_RCC_OscConfig+0x4ec>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< Updated upstream
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d028      	beq.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d121      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d11a      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029f8:	4013      	ands	r3, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	3b01      	subs	r3, #1
 8002a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x4e2>
=======
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d028      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d121      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	429a      	cmp	r2, r3
 80033a0:	d11a      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a8:	4013      	ands	r3, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d111      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	085b      	lsrs	r3, r3, #1
 80033c0:	3b01      	subs	r3, #1
 80033c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x4e2>
>>>>>>> Stashed changes
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< Updated upstream
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_RCC_ClockConfig>:
=======
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_RCC_ClockConfig>:
>>>>>>> Stashed changes
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< Updated upstream
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
=======
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< Updated upstream
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0cc      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0cc      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002a50:	4b68      	ldr	r3, [pc, #416]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d90c      	bls.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b65      	ldr	r3, [pc, #404]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
=======
 8003400:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d90c      	bls.n	8003428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340e:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002a66:	4b63      	ldr	r3, [pc, #396]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0b8      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 8003416:	4b63      	ldr	r3, [pc, #396]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< Updated upstream
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d020      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x8a>
=======
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x8a>
>>>>>>> Stashed changes
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a90:	4b59      	ldr	r3, [pc, #356]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	4a58      	ldr	r2, [pc, #352]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa8:	4b53      	ldr	r3, [pc, #332]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ab2:	6093      	str	r3, [r2, #8]
=======
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800344a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003462:	6093      	str	r3, [r2, #8]
>>>>>>> Stashed changes
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< Updated upstream
 8002ab4:	4b50      	ldr	r3, [pc, #320]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	494d      	ldr	r1, [pc, #308]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
=======
 8003464:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< Updated upstream
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d044      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x120>
=======
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d044      	beq.n	800350c <HAL_RCC_ClockConfig+0x120>
>>>>>>> Stashed changes
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< Updated upstream
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d119      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e07f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< Updated upstream
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b3f      	ldr	r3, [pc, #252]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e06f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d003      	beq.n	80034aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034aa:	4b3f      	ldr	r3, [pc, #252]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e06f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< Updated upstream
 8002b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e067      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 80034ba:	4b3b      	ldr	r3, [pc, #236]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e067      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< Updated upstream
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4934      	ldr	r1, [pc, #208]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fab0 	bl	8001090 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe faac 	bl	8001090 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e04f      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf8>
=======
 80034ca:	4b37      	ldr	r3, [pc, #220]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4934      	ldr	r1, [pc, #208]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fa74 	bl	80019c8 <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e4:	f7fe fa70 	bl	80019c8 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e04f      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	4b2b      	ldr	r3, [pc, #172]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 020c 	and.w	r2, r3, #12
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d1eb      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> Stashed changes
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< Updated upstream
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d20c      	bcs.n	8002b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6a:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]
=======
 800350c:	4b25      	ldr	r3, [pc, #148]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d20c      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]
>>>>>>> Stashed changes

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< Updated upstream
 8002b72:	4b20      	ldr	r3, [pc, #128]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e032      	b.n	8002bea <HAL_RCC_ClockConfig+0x1ae>
=======
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> Stashed changes
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< Updated upstream
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4916      	ldr	r1, [pc, #88]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	608b      	str	r3, [r1, #8]
=======
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	4313      	orrs	r3, r2
 8003550:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< Updated upstream
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	490e      	ldr	r1, [pc, #56]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
=======
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
>>>>>>> Stashed changes
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< Updated upstream
 8002bc2:	f000 f821 	bl	8002c08 <HAL_RCC_GetSysClockFreq>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	490a      	ldr	r1, [pc, #40]	@ (8002bfc <HAL_RCC_ClockConfig+0x1c0>)
 8002bd4:	5ccb      	ldrb	r3, [r1, r3]
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	4a09      	ldr	r2, [pc, #36]	@ (8002c00 <HAL_RCC_ClockConfig+0x1c4>)
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fa10 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	08003b9c 	.word	0x08003b9c
 8002c00:	20000004 	.word	0x20000004
 8002c04:	20000008 	.word	0x20000008

08002c08 <HAL_RCC_GetSysClockFreq>:
=======
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe f9d4 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023c00 	.word	0x40023c00
 80035a8:	40023800 	.word	0x40023800
 80035ac:	0800454c 	.word	0x0800454c
 80035b0:	20000004 	.word	0x20000004
 80035b4:	20000008 	.word	0x20000008

080035b8 <HAL_RCC_GetSysClockFreq>:
>>>>>>> Stashed changes
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< Updated upstream
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b094      	sub	sp, #80	@ 0x50
 8002c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c20:	4b79      	ldr	r3, [pc, #484]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d00d      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0x40>
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	f200 80e1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x34>
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3a:	e0db      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 80035b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035bc:	b094      	sub	sp, #80	@ 0x50
 80035be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d0:	4b79      	ldr	r3, [pc, #484]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d00d      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
 80035dc:	2b08      	cmp	r3, #8
 80035de:	f200 80e1 	bhi.w	80037a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x34>
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d003      	beq.n	80035f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80035ea:	e0db      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> Stashed changes
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8002c3c:	4b73      	ldr	r3, [pc, #460]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c40:	e0db      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80035ec:	4b73      	ldr	r3, [pc, #460]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x204>)
 80035ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f0:	e0db      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< Updated upstream
 8002c42:	4b73      	ldr	r3, [pc, #460]	@ (8002e10 <HAL_RCC_GetSysClockFreq+0x208>)
 8002c44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c46:	e0d8      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80035f2:	4b73      	ldr	r3, [pc, #460]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80035f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035f6:	e0d8      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< Updated upstream
 8002c48:	4b6f      	ldr	r3, [pc, #444]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c50:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d063      	beq.n	8002d26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c68:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c72:	2300      	movs	r3, #0
 8002c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c7a:	4622      	mov	r2, r4
 8002c7c:	462b      	mov	r3, r5
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4621      	mov	r1, r4
 8002c94:	1a51      	subs	r1, r2, r1
 8002c96:	6139      	str	r1, [r7, #16]
 8002c98:	4629      	mov	r1, r5
 8002c9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cac:	4659      	mov	r1, fp
 8002cae:	018b      	lsls	r3, r1, #6
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	018a      	lsls	r2, r1, #6
 8002cba:	4651      	mov	r1, sl
 8002cbc:	ebb2 0801 	subs.w	r8, r2, r1
 8002cc0:	4659      	mov	r1, fp
 8002cc2:	eb63 0901 	sbc.w	r9, r3, r1
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cda:	4690      	mov	r8, r2
 8002cdc:	4699      	mov	r9, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	eb18 0303 	adds.w	r3, r8, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	eb49 0303 	adc.w	r3, r9, r3
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	024b      	lsls	r3, r1, #9
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d04:	4621      	mov	r1, r4
 8002d06:	024a      	lsls	r2, r1, #9
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0e:	2200      	movs	r2, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d18:	f7fd fa56 	bl	80001c8 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	e058      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 80035f8:	4b6f      	ldr	r3, [pc, #444]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003600:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003602:	4b6d      	ldr	r3, [pc, #436]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360e:	4b6a      	ldr	r3, [pc, #424]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	099b      	lsrs	r3, r3, #6
 8003614:	2200      	movs	r2, #0
 8003616:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003618:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800361a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003620:	633b      	str	r3, [r7, #48]	@ 0x30
 8003622:	2300      	movs	r3, #0
 8003624:	637b      	str	r3, [r7, #52]	@ 0x34
 8003626:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800362a:	4622      	mov	r2, r4
 800362c:	462b      	mov	r3, r5
 800362e:	f04f 0000 	mov.w	r0, #0
 8003632:	f04f 0100 	mov.w	r1, #0
 8003636:	0159      	lsls	r1, r3, #5
 8003638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800363c:	0150      	lsls	r0, r2, #5
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	4621      	mov	r1, r4
 8003644:	1a51      	subs	r1, r2, r1
 8003646:	6139      	str	r1, [r7, #16]
 8003648:	4629      	mov	r1, r5
 800364a:	eb63 0301 	sbc.w	r3, r3, r1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800365c:	4659      	mov	r1, fp
 800365e:	018b      	lsls	r3, r1, #6
 8003660:	4651      	mov	r1, sl
 8003662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003666:	4651      	mov	r1, sl
 8003668:	018a      	lsls	r2, r1, #6
 800366a:	4651      	mov	r1, sl
 800366c:	ebb2 0801 	subs.w	r8, r2, r1
 8003670:	4659      	mov	r1, fp
 8003672:	eb63 0901 	sbc.w	r9, r3, r1
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003682:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003686:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368a:	4690      	mov	r8, r2
 800368c:	4699      	mov	r9, r3
 800368e:	4623      	mov	r3, r4
 8003690:	eb18 0303 	adds.w	r3, r8, r3
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	462b      	mov	r3, r5
 8003698:	eb49 0303 	adc.w	r3, r9, r3
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036aa:	4629      	mov	r1, r5
 80036ac:	024b      	lsls	r3, r1, #9
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b4:	4621      	mov	r1, r4
 80036b6:	024a      	lsls	r2, r1, #9
 80036b8:	4610      	mov	r0, r2
 80036ba:	4619      	mov	r1, r3
 80036bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036be:	2200      	movs	r2, #0
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036c8:	f7fc fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4613      	mov	r3, r2
 80036d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d4:	e058      	b.n	8003788 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> Stashed changes
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< Updated upstream
 8002d26:	4b38      	ldr	r3, [pc, #224]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	4611      	mov	r1, r2
 8002d32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	0159      	lsls	r1, r3, #5
 8002d4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d52:	0150      	lsls	r0, r2, #5
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4641      	mov	r1, r8
 8002d5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d5e:	4649      	mov	r1, r9
 8002d60:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d78:	ebb2 040a 	subs.w	r4, r2, sl
 8002d7c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	00eb      	lsls	r3, r5, #3
 8002d8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	4614      	mov	r4, r2
 8002d92:	461d      	mov	r5, r3
 8002d94:	4643      	mov	r3, r8
 8002d96:	18e3      	adds	r3, r4, r3
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	eb45 0303 	adc.w	r3, r5, r3
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	61fa      	str	r2, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	f7fd f9fc 	bl	80001c8 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002de8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002dea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80036d6:	4b38      	ldr	r3, [pc, #224]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	099b      	lsrs	r3, r3, #6
 80036dc:	2200      	movs	r2, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	4611      	mov	r1, r2
 80036e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	2300      	movs	r3, #0
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036f0:	4642      	mov	r2, r8
 80036f2:	464b      	mov	r3, r9
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	0159      	lsls	r1, r3, #5
 80036fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003702:	0150      	lsls	r0, r2, #5
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4641      	mov	r1, r8
 800370a:	ebb2 0a01 	subs.w	sl, r2, r1
 800370e:	4649      	mov	r1, r9
 8003710:	eb63 0b01 	sbc.w	fp, r3, r1
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003720:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003724:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003728:	ebb2 040a 	subs.w	r4, r2, sl
 800372c:	eb63 050b 	sbc.w	r5, r3, fp
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	00eb      	lsls	r3, r5, #3
 800373a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373e:	00e2      	lsls	r2, r4, #3
 8003740:	4614      	mov	r4, r2
 8003742:	461d      	mov	r5, r3
 8003744:	4643      	mov	r3, r8
 8003746:	18e3      	adds	r3, r4, r3
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	464b      	mov	r3, r9
 800374c:	eb45 0303 	adc.w	r3, r5, r3
 8003750:	607b      	str	r3, [r7, #4]
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800375e:	4629      	mov	r1, r5
 8003760:	028b      	lsls	r3, r1, #10
 8003762:	4621      	mov	r1, r4
 8003764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003768:	4621      	mov	r1, r4
 800376a:	028a      	lsls	r2, r1, #10
 800376c:	4610      	mov	r0, r2
 800376e:	4619      	mov	r1, r3
 8003770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003772:	2200      	movs	r2, #0
 8003774:	61bb      	str	r3, [r7, #24]
 8003776:	61fa      	str	r2, [r7, #28]
 8003778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800377c:	f7fc fd24 	bl	80001c8 <__aeabi_uldivmod>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4613      	mov	r3, r2
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003788:	4b0b      	ldr	r3, [pc, #44]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	3301      	adds	r3, #1
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003798:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800379a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> Stashed changes
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< Updated upstream
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0x204>)
 8002df6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3750      	adds	r7, #80	@ 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	007a1200 	.word	0x007a1200

08002e14 <HAL_TIM_Base_Init>:
=======
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x204>)
 80037a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3750      	adds	r7, #80	@ 0x50
 80037b0:	46bd      	mov	sp, r7
 80037b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	007a1200 	.word	0x007a1200

080037c4 <HAL_TIM_Base_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e041      	b.n	8002eaa <HAL_TIM_Base_Init+0x96>
=======
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e041      	b.n	800385a <HAL_TIM_Base_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< Updated upstream
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd fff0 	bl	8000e20 <HAL_TIM_Base_MspInit>
=======
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fd ffae 	bl	800174c <HAL_TIM_Base_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f000 fad8 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_TIM_PWM_Init>:
=======
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f000 fad8 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_TIM_PWM_Init>:
>>>>>>> Stashed changes
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e041      	b.n	8002f48 <HAL_TIM_PWM_Init+0x96>
=======
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e041      	b.n	80038f8 <HAL_TIM_PWM_Init+0x96>
>>>>>>> Stashed changes
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< Updated upstream
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d106      	bne.n	8002ede <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d106      	bne.n	800388e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> Stashed changes
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< Updated upstream
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f839 	bl	8002f50 <HAL_TIM_PWM_MspInit>
=======
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f839 	bl	8003900 <HAL_TIM_PWM_MspInit>
>>>>>>> Stashed changes
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< Updated upstream
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2202      	movs	r2, #2
 8002ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	f000 fa89 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_PWM_MspInit>:
=======
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f000 fa89 	bl	8003db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_PWM_MspInit>:
>>>>>>> Stashed changes
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< Updated upstream
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
=======
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
>>>>>>> Stashed changes
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< Updated upstream
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_PWM_Start>:
=======
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIM_PWM_Start>:
>>>>>>> Stashed changes
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< Updated upstream
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
=======
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< Updated upstream
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d109      	bne.n	8002f88 <HAL_TIM_PWM_Start+0x24>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e022      	b.n	8002fce <HAL_TIM_PWM_Start+0x6a>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d109      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0x3e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	bf14      	ite	ne
 8002f9a:	2301      	movne	r3, #1
 8002f9c:	2300      	moveq	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e015      	b.n	8002fce <HAL_TIM_PWM_Start+0x6a>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x58>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e008      	b.n	8002fce <HAL_TIM_PWM_Start+0x6a>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e07c      	b.n	80030d0 <HAL_TIM_PWM_Start+0x16c>
=======
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start+0x24>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e022      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d109      	bne.n	8003952 <HAL_TIM_PWM_Start+0x3e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e015      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e008      	b.n	800397e <HAL_TIM_PWM_Start+0x6a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07c      	b.n	8003a80 <HAL_TIM_PWM_Start+0x16c>
>>>>>>> Stashed changes
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< Updated upstream
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_PWM_Start+0x82>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe4:	e013      	b.n	800300e <HAL_TIM_PWM_Start+0xaa>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x92>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ff4:	e00b      	b.n	800300e <HAL_TIM_PWM_Start+0xaa>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_PWM_Start+0xa2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003004:	e003      	b.n	800300e <HAL_TIM_PWM_Start+0xaa>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2201      	movs	r2, #1
 8003014:	6839      	ldr	r1, [r7, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fce6 	bl	80039e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2d      	ldr	r2, [pc, #180]	@ (80030d8 <HAL_TIM_PWM_Start+0x174>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d004      	beq.n	8003030 <HAL_TIM_PWM_Start+0xcc>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a2c      	ldr	r2, [pc, #176]	@ (80030dc <HAL_TIM_PWM_Start+0x178>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d101      	bne.n	8003034 <HAL_TIM_PWM_Start+0xd0>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <HAL_TIM_PWM_Start+0xd2>
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d007      	beq.n	800304a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0x82>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003994:	e013      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b04      	cmp	r3, #4
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_PWM_Start+0x92>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039a4:	e00b      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d104      	bne.n	80039b6 <HAL_TIM_PWM_Start+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b4:	e003      	b.n	80039be <HAL_TIM_PWM_Start+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2202      	movs	r2, #2
 80039ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fce6 	bl	8004398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a88 <HAL_TIM_PWM_Start+0x174>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_PWM_Start+0xcc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	@ (8003a8c <HAL_TIM_PWM_Start+0x178>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_TIM_PWM_Start+0xd0>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_TIM_PWM_Start+0xd2>
 80039e4:	2300      	movs	r3, #0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039f8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> Stashed changes
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< Updated upstream
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <HAL_TIM_PWM_Start+0x174>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d022      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800305c:	d01d      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1f      	ldr	r2, [pc, #124]	@ (80030e0 <HAL_TIM_PWM_Start+0x17c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1d      	ldr	r2, [pc, #116]	@ (80030e4 <HAL_TIM_PWM_Start+0x180>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1c      	ldr	r2, [pc, #112]	@ (80030e8 <HAL_TIM_PWM_Start+0x184>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a16      	ldr	r2, [pc, #88]	@ (80030dc <HAL_TIM_PWM_Start+0x178>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a18      	ldr	r2, [pc, #96]	@ (80030ec <HAL_TIM_PWM_Start+0x188>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIM_PWM_Start+0x136>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a16      	ldr	r2, [pc, #88]	@ (80030f0 <HAL_TIM_PWM_Start+0x18c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d010      	beq.n	80030ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030bc:	e007      	b.n	80030ce <HAL_TIM_PWM_Start+0x16a>
=======
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a22      	ldr	r2, [pc, #136]	@ (8003a88 <HAL_TIM_PWM_Start+0x174>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a0c:	d01d      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a1f      	ldr	r2, [pc, #124]	@ (8003a90 <HAL_TIM_PWM_Start+0x17c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003a94 <HAL_TIM_PWM_Start+0x180>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a1c      	ldr	r2, [pc, #112]	@ (8003a98 <HAL_TIM_PWM_Start+0x184>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a16      	ldr	r2, [pc, #88]	@ (8003a8c <HAL_TIM_PWM_Start+0x178>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <HAL_TIM_PWM_Start+0x188>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <HAL_TIM_PWM_Start+0x136>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a16      	ldr	r2, [pc, #88]	@ (8003aa0 <HAL_TIM_PWM_Start+0x18c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	d010      	beq.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6c:	e007      	b.n	8003a7e <HAL_TIM_PWM_Start+0x16a>
>>>>>>> Stashed changes
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< Updated upstream
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
=======
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< Updated upstream
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010000 	.word	0x40010000
 80030dc:	40010400 	.word	0x40010400
 80030e0:	40000400 	.word	0x40000400
 80030e4:	40000800 	.word	0x40000800
 80030e8:	40000c00 	.word	0x40000c00
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40001800 	.word	0x40001800

080030f4 <HAL_TIM_PWM_ConfigChannel>:
=======
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40010400 	.word	0x40010400
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40001800 	.word	0x40001800

08003aa4 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> Stashed changes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< Updated upstream
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	75fb      	strb	r3, [r7, #23]
=======
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	75fb      	strb	r3, [r7, #23]
>>>>>>> Stashed changes
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800310e:	2302      	movs	r3, #2
 8003110:	e0ae      	b.n	8003270 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	f200 809f 	bhi.w	8003260 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003261 	.word	0x08003261
 8003130:	08003261 	.word	0x08003261
 8003134:	08003261 	.word	0x08003261
 8003138:	0800319d 	.word	0x0800319d
 800313c:	08003261 	.word	0x08003261
 8003140:	08003261 	.word	0x08003261
 8003144:	08003261 	.word	0x08003261
 8003148:	080031df 	.word	0x080031df
 800314c:	08003261 	.word	0x08003261
 8003150:	08003261 	.word	0x08003261
 8003154:	08003261 	.word	0x08003261
 8003158:	0800321f 	.word	0x0800321f
=======
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e0ae      	b.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b0c      	cmp	r3, #12
 8003ace:	f200 809f 	bhi.w	8003c10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003c11 	.word	0x08003c11
 8003ae0:	08003c11 	.word	0x08003c11
 8003ae4:	08003c11 	.word	0x08003c11
 8003ae8:	08003b4d 	.word	0x08003b4d
 8003aec:	08003c11 	.word	0x08003c11
 8003af0:	08003c11 	.word	0x08003c11
 8003af4:	08003c11 	.word	0x08003c11
 8003af8:	08003b8f 	.word	0x08003b8f
 8003afc:	08003c11 	.word	0x08003c11
 8003b00:	08003c11 	.word	0x08003c11
 8003b04:	08003c11 	.word	0x08003c11
 8003b08:	08003bcf 	.word	0x08003bcf
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f9f6 	bl	8003554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699a      	ldr	r2, [r3, #24]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6999      	ldr	r1, [r3, #24]
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	619a      	str	r2, [r3, #24]
      break;
 800319a:	e064      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f9f6 	bl	8003f04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0208 	orr.w	r2, r2, #8
 8003b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6999      	ldr	r1, [r3, #24]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	619a      	str	r2, [r3, #24]
      break;
 8003b4a:	e064      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fa46 	bl	8003634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699a      	ldr	r2, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6999      	ldr	r1, [r3, #24]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	021a      	lsls	r2, r3, #8
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
      break;
 80031dc:	e043      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fa46 	bl	8003fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6999      	ldr	r1, [r3, #24]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	021a      	lsls	r2, r3, #8
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	619a      	str	r2, [r3, #24]
      break;
 8003b8c:	e043      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa9b 	bl	8003720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0208 	orr.w	r2, r2, #8
 80031f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0204 	bic.w	r2, r2, #4
 8003208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69d9      	ldr	r1, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	61da      	str	r2, [r3, #28]
      break;
 800321c:	e023      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fa9b 	bl	80040d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f042 0208 	orr.w	r2, r2, #8
 8003ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0204 	bic.w	r2, r2, #4
 8003bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69d9      	ldr	r1, [r3, #28]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	61da      	str	r2, [r3, #28]
      break;
 8003bcc:	e023      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< Updated upstream
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68b9      	ldr	r1, [r7, #8]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 faef 	bl	8003808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69da      	ldr	r2, [r3, #28]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69d9      	ldr	r1, [r3, #28]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	021a      	lsls	r2, r3, #8
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	61da      	str	r2, [r3, #28]
      break;
 800325e:	e002      	b.n	8003266 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 faef 	bl	80041b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69d9      	ldr	r1, [r3, #28]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	021a      	lsls	r2, r3, #8
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	61da      	str	r2, [r3, #28]
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
      break;
 8003264:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800326e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_ConfigClockSource>:
=======
 8003c10:	2301      	movs	r3, #1
 8003c12:	75fb      	strb	r3, [r7, #23]
      break;
 8003c14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_TIM_ConfigClockSource>:
>>>>>>> Stashed changes
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< Updated upstream
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	73fb      	strb	r3, [r7, #15]
=======
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIM_ConfigClockSource+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e0b4      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x186>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
=======
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_TIM_ConfigClockSource+0x1c>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0b4      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x186>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< Updated upstream
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80032b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032cc:	d03e      	beq.n	800334c <HAL_TIM_ConfigClockSource+0xd4>
 80032ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d2:	f200 8087 	bhi.w	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032da:	f000 8086 	beq.w	80033ea <HAL_TIM_ConfigClockSource+0x172>
 80032de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e2:	d87f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e4:	2b70      	cmp	r3, #112	@ 0x70
 80032e6:	d01a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0xa6>
 80032e8:	2b70      	cmp	r3, #112	@ 0x70
 80032ea:	d87b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ec:	2b60      	cmp	r3, #96	@ 0x60
 80032ee:	d050      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x11a>
 80032f0:	2b60      	cmp	r3, #96	@ 0x60
 80032f2:	d877      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b50      	cmp	r3, #80	@ 0x50
 80032f6:	d03c      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0xfa>
 80032f8:	2b50      	cmp	r3, #80	@ 0x50
 80032fa:	d873      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b40      	cmp	r3, #64	@ 0x40
 80032fe:	d058      	beq.n	80033b2 <HAL_TIM_ConfigClockSource+0x13a>
 8003300:	2b40      	cmp	r3, #64	@ 0x40
 8003302:	d86f      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b30      	cmp	r3, #48	@ 0x30
 8003306:	d064      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	2b30      	cmp	r3, #48	@ 0x30
 800330a:	d86b      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b20      	cmp	r3, #32
 800330e:	d060      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d867      	bhi.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05c      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b10      	cmp	r3, #16
 800331a:	d05a      	beq.n	80033d2 <HAL_TIM_ConfigClockSource+0x15a>
 800331c:	e062      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x16c>
=======
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c7c:	d03e      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0xd4>
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c82:	f200 8087 	bhi.w	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c8a:	f000 8086 	beq.w	8003d9a <HAL_TIM_ConfigClockSource+0x172>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c92:	d87f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b70      	cmp	r3, #112	@ 0x70
 8003c96:	d01a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xa6>
 8003c98:	2b70      	cmp	r3, #112	@ 0x70
 8003c9a:	d87b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9c:	2b60      	cmp	r3, #96	@ 0x60
 8003c9e:	d050      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x11a>
 8003ca0:	2b60      	cmp	r3, #96	@ 0x60
 8003ca2:	d877      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca4:	2b50      	cmp	r3, #80	@ 0x50
 8003ca6:	d03c      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xfa>
 8003ca8:	2b50      	cmp	r3, #80	@ 0x50
 8003caa:	d873      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d058      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x13a>
 8003cb0:	2b40      	cmp	r3, #64	@ 0x40
 8003cb2:	d86f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb4:	2b30      	cmp	r3, #48	@ 0x30
 8003cb6:	d064      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cb8:	2b30      	cmp	r3, #48	@ 0x30
 8003cba:	d86b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d060      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d867      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d05a      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	e062      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	f000 fb3b 	bl	80039a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	609a      	str	r2, [r3, #8]
      break;
 800334a:	e04f      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	f000 fb3b 	bl	8004358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	609a      	str	r2, [r3, #8]
      break;
 8003cfa:	e04f      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< Updated upstream
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	f000 fb24 	bl	80039a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800336e:	609a      	str	r2, [r3, #8]
      break;
 8003370:	e03c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d0c:	f000 fb24 	bl	8004358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e03c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	461a      	mov	r2, r3
 8003380:	f000 fa98 	bl	80038b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2150      	movs	r1, #80	@ 0x50
 800338a:	4618      	mov	r0, r3
 800338c:	f000 faf1 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 8003390:	e02c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 fa98 	bl	8004264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2150      	movs	r1, #80	@ 0x50
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 faf1 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8003d40:	e02c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800339e:	461a      	mov	r2, r3
 80033a0:	f000 fab7 	bl	8003912 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2160      	movs	r1, #96	@ 0x60
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fae1 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033b0:	e01c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 fab7 	bl	80042c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2160      	movs	r1, #96	@ 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fae1 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8003d60:	e01c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< Updated upstream
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033be:	461a      	mov	r2, r3
 80033c0:	f000 fa78 	bl	80038b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2140      	movs	r1, #64	@ 0x40
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fad1 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033d0:	e00c      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 fa78 	bl	8004264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	@ 0x40
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fad1 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< Updated upstream
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f000 fac8 	bl	8003972 <TIM_ITRx_SetConfig>
      break;
 80033e2:	e003      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
=======
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 fac8 	bl	8004322 <TIM_ITRx_SetConfig>
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> Stashed changes
    }

    default:
      status = HAL_ERROR;
<<<<<<< Updated upstream
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e000      	b.n	80033ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <TIM_Base_SetConfig>:
=======
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <TIM_Base_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< Updated upstream
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a43      	ldr	r2, [pc, #268]	@ (8003528 <TIM_Base_SetConfig+0x120>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d00f      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a40      	ldr	r2, [pc, #256]	@ (800352c <TIM_Base_SetConfig+0x124>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00b      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3f      	ldr	r2, [pc, #252]	@ (8003530 <TIM_Base_SetConfig+0x128>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a3e      	ldr	r2, [pc, #248]	@ (8003534 <TIM_Base_SetConfig+0x12c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3d      	ldr	r2, [pc, #244]	@ (8003538 <TIM_Base_SetConfig+0x130>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800344e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a32      	ldr	r2, [pc, #200]	@ (8003528 <TIM_Base_SetConfig+0x120>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d02b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003468:	d027      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <TIM_Base_SetConfig+0x124>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d023      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a2e      	ldr	r2, [pc, #184]	@ (8003530 <TIM_Base_SetConfig+0x128>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2d      	ldr	r2, [pc, #180]	@ (8003534 <TIM_Base_SetConfig+0x12c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d01b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2c      	ldr	r2, [pc, #176]	@ (8003538 <TIM_Base_SetConfig+0x130>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d017      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2b      	ldr	r2, [pc, #172]	@ (800353c <TIM_Base_SetConfig+0x134>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2a      	ldr	r2, [pc, #168]	@ (8003540 <TIM_Base_SetConfig+0x138>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a29      	ldr	r2, [pc, #164]	@ (8003544 <TIM_Base_SetConfig+0x13c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a28      	ldr	r2, [pc, #160]	@ (8003548 <TIM_Base_SetConfig+0x140>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a27      	ldr	r2, [pc, #156]	@ (800354c <TIM_Base_SetConfig+0x144>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a26      	ldr	r2, [pc, #152]	@ (8003550 <TIM_Base_SetConfig+0x148>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
=======
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a43      	ldr	r2, [pc, #268]	@ (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd6:	d00f      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a40      	ldr	r2, [pc, #256]	@ (8003edc <TIM_Base_SetConfig+0x124>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00b      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d007      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a3e      	ldr	r2, [pc, #248]	@ (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d003      	beq.n	8003df8 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d108      	bne.n	8003e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a32      	ldr	r2, [pc, #200]	@ (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d02b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e18:	d027      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003edc <TIM_Base_SetConfig+0x124>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d023      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a2e      	ldr	r2, [pc, #184]	@ (8003ee0 <TIM_Base_SetConfig+0x128>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee4 <TIM_Base_SetConfig+0x12c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d01b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d017      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003eec <TIM_Base_SetConfig+0x134>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef0 <TIM_Base_SetConfig+0x138>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00f      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a29      	ldr	r2, [pc, #164]	@ (8003ef4 <TIM_Base_SetConfig+0x13c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <TIM_Base_SetConfig+0x140>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <TIM_Base_SetConfig+0x144>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <TIM_Base_SetConfig+0x148>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
>>>>>>> Stashed changes
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< Updated upstream
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003528 <TIM_Base_SetConfig+0x120>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d003      	beq.n	80034fa <TIM_Base_SetConfig+0xf2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a10      	ldr	r2, [pc, #64]	@ (8003538 <TIM_Base_SetConfig+0x130>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d103      	bne.n	8003502 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	@ (8003ed8 <TIM_Base_SetConfig+0x120>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_Base_SetConfig+0xf2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a10      	ldr	r2, [pc, #64]	@ (8003ee8 <TIM_Base_SetConfig+0x130>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d103      	bne.n	8003eb2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691a      	ldr	r2, [r3, #16]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> Stashed changes
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
<<<<<<< Updated upstream
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f043 0204 	orr.w	r2, r3, #4
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	601a      	str	r2, [r3, #0]
=======
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
>>>>>>> Stashed changes

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< Updated upstream
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40010000 	.word	0x40010000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40000c00 	.word	0x40000c00
 8003538:	40010400 	.word	0x40010400
 800353c:	40014000 	.word	0x40014000
 8003540:	40014400 	.word	0x40014400
 8003544:	40014800 	.word	0x40014800
 8003548:	40001800 	.word	0x40001800
 800354c:	40001c00 	.word	0x40001c00
 8003550:	40002000 	.word	0x40002000

08003554 <TIM_OC1_SetConfig>:
=======
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	601a      	str	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40010400 	.word	0x40010400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800
 8003ef8:	40001800 	.word	0x40001800
 8003efc:	40001c00 	.word	0x40001c00
 8003f00:	40002000 	.word	0x40002000

08003f04 <TIM_OC1_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
=======
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 0201 	bic.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 0302 	bic.w	r3, r3, #2
 800359c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a20      	ldr	r2, [pc, #128]	@ (800362c <TIM_OC1_SetConfig+0xd8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_OC1_SetConfig+0x64>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <TIM_OC1_SetConfig+0xdc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10c      	bne.n	80035d2 <TIM_OC1_SetConfig+0x7e>
=======
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	f023 0201 	bic.w	r2, r3, #1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0303 	bic.w	r3, r3, #3
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 0302 	bic.w	r3, r3, #2
 8003f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a20      	ldr	r2, [pc, #128]	@ (8003fdc <TIM_OC1_SetConfig+0xd8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_OC1_SetConfig+0x64>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <TIM_OC1_SetConfig+0xdc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d10c      	bne.n	8003f82 <TIM_OC1_SetConfig+0x7e>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< Updated upstream
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0308 	bic.w	r3, r3, #8
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 0304 	bic.w	r3, r3, #4
 80035d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <TIM_OC1_SetConfig+0xd8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_OC1_SetConfig+0x8e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a14      	ldr	r2, [pc, #80]	@ (8003630 <TIM_OC1_SetConfig+0xdc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d111      	bne.n	8003606 <TIM_OC1_SetConfig+0xb2>
=======
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0308 	bic.w	r3, r3, #8
 8003f6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <TIM_OC1_SetConfig+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d003      	beq.n	8003f92 <TIM_OC1_SetConfig+0x8e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <TIM_OC1_SetConfig+0xdc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d111      	bne.n	8003fb6 <TIM_OC1_SetConfig+0xb2>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< Updated upstream
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
=======
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40010000 	.word	0x40010000
 8003630:	40010400 	.word	0x40010400

08003634 <TIM_OC2_SetConfig>:
=======
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	621a      	str	r2, [r3, #32]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40010400 	.word	0x40010400

08003fe4 <TIM_OC2_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
=======
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 0210 	bic.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4313      	orrs	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0320 	bic.w	r3, r3, #32
 800367e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a22      	ldr	r2, [pc, #136]	@ (8003718 <TIM_OC2_SetConfig+0xe4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_OC2_SetConfig+0x68>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a21      	ldr	r2, [pc, #132]	@ (800371c <TIM_OC2_SetConfig+0xe8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10d      	bne.n	80036b8 <TIM_OC2_SetConfig+0x84>
=======
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	f023 0210 	bic.w	r2, r3, #16
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800401a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f023 0320 	bic.w	r3, r3, #32
 800402e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a22      	ldr	r2, [pc, #136]	@ (80040c8 <TIM_OC2_SetConfig+0xe4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC2_SetConfig+0x68>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a21      	ldr	r2, [pc, #132]	@ (80040cc <TIM_OC2_SetConfig+0xe8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d10d      	bne.n	8004068 <TIM_OC2_SetConfig+0x84>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< Updated upstream
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <TIM_OC2_SetConfig+0xe4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d003      	beq.n	80036c8 <TIM_OC2_SetConfig+0x94>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <TIM_OC2_SetConfig+0xe8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d113      	bne.n	80036f0 <TIM_OC2_SetConfig+0xbc>
=======
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004066:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a17      	ldr	r2, [pc, #92]	@ (80040c8 <TIM_OC2_SetConfig+0xe4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_OC2_SetConfig+0x94>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a16      	ldr	r2, [pc, #88]	@ (80040cc <TIM_OC2_SetConfig+0xe8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d113      	bne.n	80040a0 <TIM_OC2_SetConfig+0xbc>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< Updated upstream
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
=======
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800407e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004086:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40010000 	.word	0x40010000
 800371c:	40010400 	.word	0x40010400

08003720 <TIM_OC3_SetConfig>:
=======
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400

080040d0 <TIM_OC3_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
=======
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0303 	bic.w	r3, r3, #3
 8003756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	021b      	lsls	r3, r3, #8
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a21      	ldr	r2, [pc, #132]	@ (8003800 <TIM_OC3_SetConfig+0xe0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d003      	beq.n	8003786 <TIM_OC3_SetConfig+0x66>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a20      	ldr	r2, [pc, #128]	@ (8003804 <TIM_OC3_SetConfig+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d10d      	bne.n	80037a2 <TIM_OC3_SetConfig+0x82>
=======
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	021b      	lsls	r3, r3, #8
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a21      	ldr	r2, [pc, #132]	@ (80041b0 <TIM_OC3_SetConfig+0xe0>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_OC3_SetConfig+0x66>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a20      	ldr	r2, [pc, #128]	@ (80041b4 <TIM_OC3_SetConfig+0xe4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10d      	bne.n	8004152 <TIM_OC3_SetConfig+0x82>
>>>>>>> Stashed changes
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< Updated upstream
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800378c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a16      	ldr	r2, [pc, #88]	@ (8003800 <TIM_OC3_SetConfig+0xe0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_OC3_SetConfig+0x92>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a15      	ldr	r2, [pc, #84]	@ (8003804 <TIM_OC3_SetConfig+0xe4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d113      	bne.n	80037da <TIM_OC3_SetConfig+0xba>
=======
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800413c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a16      	ldr	r2, [pc, #88]	@ (80041b0 <TIM_OC3_SetConfig+0xe0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC3_SetConfig+0x92>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a15      	ldr	r2, [pc, #84]	@ (80041b4 <TIM_OC3_SetConfig+0xe4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d113      	bne.n	800418a <TIM_OC3_SetConfig+0xba>
>>>>>>> Stashed changes
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< Updated upstream
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
=======
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40010000 	.word	0x40010000
 8003804:	40010400 	.word	0x40010400

08003808 <TIM_OC4_SetConfig>:
=======
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	621a      	str	r2, [r3, #32]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40010400 	.word	0x40010400

080041b8 <TIM_OC4_SetConfig>:
>>>>>>> Stashed changes
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< Updated upstream
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
=======
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	021b      	lsls	r3, r3, #8
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	031b      	lsls	r3, r3, #12
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <TIM_OC4_SetConfig+0xa4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_OC4_SetConfig+0x68>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a11      	ldr	r2, [pc, #68]	@ (80038b0 <TIM_OC4_SetConfig+0xa8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d109      	bne.n	8003884 <TIM_OC4_SetConfig+0x7c>
=======
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a12      	ldr	r2, [pc, #72]	@ (800425c <TIM_OC4_SetConfig+0xa4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d003      	beq.n	8004220 <TIM_OC4_SetConfig+0x68>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a11      	ldr	r2, [pc, #68]	@ (8004260 <TIM_OC4_SetConfig+0xa8>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d109      	bne.n	8004234 <TIM_OC4_SetConfig+0x7c>
>>>>>>> Stashed changes
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< Updated upstream
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
=======
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004226:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	019b      	lsls	r3, r3, #6
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
>>>>>>> Stashed changes
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< Updated upstream
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000
 80038b0:	40010400 	.word	0x40010400

080038b4 <TIM_TI1_ConfigInputStage>:
=======
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	621a      	str	r2, [r3, #32]
}
 800424e:	bf00      	nop
 8004250:	371c      	adds	r7, #28
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40010000 	.word	0x40010000
 8004260:	40010400 	.word	0x40010400

08004264 <TIM_TI1_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
=======
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	f023 0201 	bic.w	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f023 030a 	bic.w	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	621a      	str	r2, [r3, #32]
}
 8003906:	bf00      	nop
 8003908:	371c      	adds	r7, #28
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <TIM_TI2_ConfigInputStage>:
=======
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0201 	bic.w	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800428e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f023 030a 	bic.w	r3, r3, #10
 80042a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <TIM_TI2_ConfigInputStage>:
>>>>>>> Stashed changes
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< Updated upstream
 8003912:	b480      	push	{r7}
 8003914:	b087      	sub	sp, #28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
=======
 80042c2:	b480      	push	{r7}
 80042c4:	b087      	sub	sp, #28
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< Updated upstream
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f023 0210 	bic.w	r2, r3, #16
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800394e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <TIM_ITRx_SetConfig>:
=======
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 0210 	bic.w	r2, r3, #16
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	031b      	lsls	r3, r3, #12
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	621a      	str	r2, [r3, #32]
}
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <TIM_ITRx_SetConfig>:
>>>>>>> Stashed changes
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< Updated upstream
 8003972:	b480      	push	{r7}
 8003974:	b085      	sub	sp, #20
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	6039      	str	r1, [r7, #0]
=======
 8004322:	b480      	push	{r7}
 8004324:	b085      	sub	sp, #20
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
 800432a:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< Updated upstream
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	f043 0307 	orr.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <TIM_ETR_SetConfig>:
=======
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	f043 0307 	orr.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <TIM_ETR_SetConfig>:
>>>>>>> Stashed changes
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< Updated upstream
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	021a      	lsls	r2, r3, #8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <TIM_CCxChannelCmd>:
=======
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	021a      	lsls	r2, r3, #8
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	431a      	orrs	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	371c      	adds	r7, #28
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <TIM_CCxChannelCmd>:
>>>>>>> Stashed changes
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< Updated upstream
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
=======
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
>>>>>>> Stashed changes

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< Updated upstream
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2201      	movs	r2, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	401a      	ands	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	621a      	str	r2, [r3, #32]
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 031f 	and.w	r3, r3, #31
 80043aa:	2201      	movs	r2, #1
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	43db      	mvns	r3, r3
 80043ba:	401a      	ands	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f003 031f 	and.w	r3, r3, #31
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	fa01 f303 	lsl.w	r3, r1, r3
 80043d0:	431a      	orrs	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
}
 80043d6:	bf00      	nop
 80043d8:	371c      	adds	r7, #28
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> Stashed changes
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< Updated upstream
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
=======
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
>>>>>>> Stashed changes
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< Updated upstream
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e05a      	b.n	8003b02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2202      	movs	r2, #2
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a21      	ldr	r2, [pc, #132]	@ (8003b10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d01d      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d018      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1a      	ldr	r2, [pc, #104]	@ (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d009      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d004      	beq.n	8003ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10c      	bne.n	8003af0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003adc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	609a      	str	r2, [r3, #8]
=======
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e05a      	b.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004448:	d01d      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1b      	ldr	r2, [pc, #108]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1a      	ldr	r2, [pc, #104]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a18      	ldr	r2, [pc, #96]	@ (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a17      	ldr	r2, [pc, #92]	@ (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a15      	ldr	r2, [pc, #84]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10c      	bne.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4313      	orrs	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	609a      	str	r2, [r3, #8]
>>>>>>> Stashed changes
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< Updated upstream
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40010400 	.word	0x40010400
 8003b24:	40014000 	.word	0x40014000
 8003b28:	40001800 	.word	0x40001800

08003b2c <memset>:
 8003b2c:	4402      	add	r2, r0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d100      	bne.n	8003b36 <memset+0xa>
 8003b34:	4770      	bx	lr
 8003b36:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3a:	e7f9      	b.n	8003b30 <memset+0x4>

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8003b74 <__libc_init_array+0x38>)
 8003b40:	4c0d      	ldr	r4, [pc, #52]	@ (8003b78 <__libc_init_array+0x3c>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	2600      	movs	r6, #0
 8003b48:	42a6      	cmp	r6, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8003b7c <__libc_init_array+0x40>)
 8003b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8003b80 <__libc_init_array+0x44>)
 8003b50:	f000 f818 	bl	8003b84 <_init>
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	2600      	movs	r6, #0
 8003b5a:	42a6      	cmp	r6, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b64:	4798      	blx	r3
 8003b66:	3601      	adds	r6, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b6e:	4798      	blx	r3
 8003b70:	3601      	adds	r6, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08003bbc 	.word	0x08003bbc
 8003b78:	08003bbc 	.word	0x08003bbc
 8003b7c:	08003bbc 	.word	0x08003bbc
 8003b80:	08003bc0 	.word	0x08003bc0

08003b84 <_init>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr

08003b90 <_fini>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr
=======
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40001800 	.word	0x40001800

080044dc <memset>:
 80044dc:	4402      	add	r2, r0
 80044de:	4603      	mov	r3, r0
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d100      	bne.n	80044e6 <memset+0xa>
 80044e4:	4770      	bx	lr
 80044e6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ea:	e7f9      	b.n	80044e0 <memset+0x4>

080044ec <__libc_init_array>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004524 <__libc_init_array+0x38>)
 80044f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004528 <__libc_init_array+0x3c>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	2600      	movs	r6, #0
 80044f8:	42a6      	cmp	r6, r4
 80044fa:	d109      	bne.n	8004510 <__libc_init_array+0x24>
 80044fc:	4d0b      	ldr	r5, [pc, #44]	@ (800452c <__libc_init_array+0x40>)
 80044fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004530 <__libc_init_array+0x44>)
 8004500:	f000 f818 	bl	8004534 <_init>
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	2600      	movs	r6, #0
 800450a:	42a6      	cmp	r6, r4
 800450c:	d105      	bne.n	800451a <__libc_init_array+0x2e>
 800450e:	bd70      	pop	{r4, r5, r6, pc}
 8004510:	f855 3b04 	ldr.w	r3, [r5], #4
 8004514:	4798      	blx	r3
 8004516:	3601      	adds	r6, #1
 8004518:	e7ee      	b.n	80044f8 <__libc_init_array+0xc>
 800451a:	f855 3b04 	ldr.w	r3, [r5], #4
 800451e:	4798      	blx	r3
 8004520:	3601      	adds	r6, #1
 8004522:	e7f2      	b.n	800450a <__libc_init_array+0x1e>
 8004524:	0800456c 	.word	0x0800456c
 8004528:	0800456c 	.word	0x0800456c
 800452c:	0800456c 	.word	0x0800456c
 8004530:	08004570 	.word	0x08004570

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
>>>>>>> Stashed changes
